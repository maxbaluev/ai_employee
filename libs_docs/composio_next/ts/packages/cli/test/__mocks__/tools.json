[
  {
    "available_versions": ["latest"],
    "name": "Accept a repository invitation",
    "slug": "GITHUB_ACCEPT_A_REPOSITORY_INVITATION",
    "input_parameters": {
      "description": "Request schema for accepting a repository invitation.",
      "properties": {
        "invitation_id": {
          "description": "Unique identifier of the repository invitation. Obtain by listing pending invitations for the authenticated user.",
          "examples": ["12345", "67890"],
          "title": "Invitation Id",
          "type": "integer"
        }
      },
      "required": ["invitation_id"],
      "title": "AcceptARepositoryInvitationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "GitHub API response. Usually empty for a successful acceptance (HTTP 204 No Content status).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "AcceptARepositoryInvitationResponseWrapper",
      "type": "object"
    },
    "description": "Accepts a pending repository invitation that has been issued to the authenticated user.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "Invitations", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repositories starred by the authenticated user",
    "slug": "GITHUB_ACTIVITY_LIST_REPO_S_STARRED_BY_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for `ListRepositoriesStarredByTheAuthenticatedUser`",
      "properties": {
        "direction": {
          "default": "desc",
          "description": "Sort direction: 'asc' (ascending) or 'desc' (descending).",
          "enum": ["asc", "desc"],
          "examples": ["asc", "desc"],
          "title": "Direction",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results (starts from 1).",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 1,
          "description": "Number of results per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "sort": {
          "default": "created",
          "description": "Sorts starred repositories by 'created' (date starred) or 'updated' (date last pushed).",
          "enum": ["created", "updated"],
          "examples": ["created", "updated"],
          "title": "Sort",
          "type": "string"
        }
      },
      "title": "ListRepositoriesStarredByTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoriesStarredByTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: lists repositories starred by the authenticated user, including star creation timestamps; use 'list repositories starred by the authenticated user' instead.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Stars", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List stargazers",
    "slug": "GITHUB_ACTIVITY_LIST_STARGAZERS_FOR_REPO",
    "input_parameters": {
      "description": "Specifies the target repository and pagination preferences for listing stargazers.",
      "properties": {
        "owner": {
          "description": "Username of the account owner (user or organization) of the repository; case-insensitive.",
          "examples": ["octocat", "google"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results to display per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension; case-insensitive.",
          "examples": ["Spoon-Knife", "mercury"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListStargazersRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListStargazersResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: lists users who have starred a repository; use `list stargazers` instead.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Stars", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Star a repository for the authenticated user",
    "slug": "GITHUB_ACTIVITY_STAR_REPO_FOR_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for starring a repository for the authenticated user.",
      "properties": {
        "owner": {
          "description": "The username of the account that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "torvalds"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["hello-world", "linux"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "StarARepositoryForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the API response data. Upon a successful star operation (HTTP 204 No Content), this field will typically be an empty dictionary or not populated.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "StarARepositoryForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: stars a repository for the authenticated user; use `star a repository for the authenticated user` instead.",
    "tags": ["idempotentHint", "updateHint", "openWorldHint", "Stars", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Add email for auth user",
    "slug": "GITHUB_ADD_AN_EMAIL_ADDRESS_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Specifies the email addresses to be added to the authenticated user's GitHub account.",
      "properties": {
        "emails": {
          "items": { "properties": {}, "type": "string" },
          "title": "Emails",
          "type": "array"
        }
      },
      "required": ["emails"],
      "title": "AddAnEmailAddressForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "AddAnEmailAddressForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Adds one or more email addresses (which will be initially unverified) to the authenticated user's github account; use this to associate new emails, noting an email verified for another account will error, while an existing email for the current user is accepted.",
    "tags": ["updateHint", "openWorldHint", "important", "Users"]
  },
  {
    "available_versions": ["latest"],
    "name": "Add app access restrictions",
    "slug": "GITHUB_ADD_APP_ACCESS_RESTRICTIONS",
    "input_parameters": {
      "description": "Request schema defining the target repository and branch for applying app access restrictions.",
      "properties": {
        "branch": {
          "description": "The name of the branch to which restrictions will be applied. Wildcard characters (e.g., '*') are not allowed in the branch name when using this REST API endpoint. For operations involving wildcard branch names, consult the GitHub GraphQL API.",
          "examples": ["main"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "AddAppAccessRestrictionsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "AddAppAccessRestrictionsResponseWrapper",
      "type": "object"
    },
    "description": "Replaces github app access restrictions for an existing protected branch; requires a json array of app slugs in the request body, where apps must be installed and have 'contents' write permissions.",
    "tags": ["updateHint", "openWorldHint", "Repositories", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Add assignees to an issue",
    "slug": "GITHUB_ADD_ASSIGNEES_TO_AN_ISSUE",
    "input_parameters": {
      "description": "Request model for adding assignees to a GitHub issue.",
      "properties": {
        "assignees": {
          "description": "A list of GitHub usernames to assign to the issue. Up to 10 assignees can be specified. Pass an empty list `[]` to remove all current assignees. _NOTE: The authenticated user must have push access to the repository to modify assignees. If the user lacks this permission, changes to assignees will be silently ignored._",
          "examples": [["octocat", "hubot"], ["dev-user1"], []],
          "items": { "properties": {}, "type": "string" },
          "title": "Assignees",
          "type": "array"
        },
        "issue_number": {
          "description": "The unique number identifying the issue within the repository.",
          "examples": ["123", "42"],
          "title": "Issue Number",
          "type": "integer"
        },
        "owner": {
          "description": "The username of the account or the organization name that owns the repository. This field is not case sensitive.",
          "examples": ["octocat", "my-company"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case sensitive.",
          "examples": ["hello-world", "my-internal-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "issue_number"],
      "title": "AddAssigneesToAnIssueRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the API response data, typically representing the full issue object with its updated list of assignees.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "AddAssigneesToAnIssueResponseWrapper",
      "type": "object"
    },
    "description": "Adds or removes assignees for a github issue; changes are silently ignored if the authenticated user lacks push access to the repository.",
    "tags": ["idempotentHint", "updateHint", "openWorldHint", "important", "Issues"]
  },
  {
    "available_versions": ["latest"],
    "name": "Add a repository collaborator",
    "slug": "GITHUB_ADD_A_REPOSITORY_COLLABORATOR",
    "input_parameters": {
      "description": "Request schema for adding a collaborator to a GitHub repository.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository. This name is not case sensitive.",
          "title": "Owner",
          "type": "string"
        },
        "permission": {
          "default": "push",
          "description": "Permission level for the collaborator. For organization-owned repositories, valid values are `pull` (read-only), `triage` (manage issues/PRs), `push` (read/write), `maintain` (manage most settings), `admin` (full control), or a custom repository role name if defined by the owning organization. This parameter is ignored for personal repositories, which grant `push` access.",
          "examples": ["pull", "triage", "push", "maintain", "admin", "custom_role_name"],
          "title": "Permission",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case sensitive.",
          "title": "Repo",
          "type": "string"
        },
        "username": {
          "description": "The GitHub handle for the user account to add as a collaborator.",
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "username"],
      "title": "AddARepositoryCollaboratorRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "AddARepositoryCollaboratorResponseWrapper",
      "type": "object"
    },
    "description": "Adds a github user as a repository collaborator, or updates their permission if already a collaborator; `permission` applies to organization-owned repositories (personal ones default to 'push' and ignore this field), and an invitation may be created or permissions updated directly.",
    "tags": ["updateHint", "openWorldHint", "important", "Repositories"]
  },
  {
    "available_versions": ["latest"],
    "name": "Add a repository to an app installation",
    "slug": "GITHUB_ADD_A_REPOSITORY_TO_AN_APP_INSTALLATION",
    "input_parameters": {
      "description": "Request to add a repository to a GitHub App installation for the authenticated user.",
      "properties": {
        "installation_id": {
          "description": "The unique identifier of the GitHub App installation to which the repository will be added. This installation must be accessible to the authenticated user.",
          "examples": ["1234567", "8765432"],
          "title": "Installation Id",
          "type": "integer"
        },
        "repository_id": {
          "description": "The unique identifier of the repository to add to the installation. The authenticated user must have admin permissions for this repository.",
          "examples": ["9876543", "2345678"],
          "title": "Repository Id",
          "type": "integer"
        }
      },
      "required": ["installation_id", "repository_id"],
      "title": "AddARepositoryToAnAppInstallationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "AddARepositoryToAnAppInstallationResponseWrapper",
      "type": "object"
    },
    "description": "Adds a repository to a github app installation, granting the app access; requires authenticated user to have admin rights for the repository and access to the installation.",
    "tags": ["idempotentHint", "updateHint", "openWorldHint", "Repositories", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Add a selected repository to a user secret",
    "slug": "GITHUB_ADD_A_SELECTED_REPOSITORY_TO_A_USER_SECRET",
    "input_parameters": {
      "description": "Request schema for `AddASelectedRepositoryToAUserSecret`",
      "properties": {
        "repository_id": {
          "description": "The unique identifier of the repository to be granted access to the specified user-level Codespaces secret.",
          "examples": [1296269, 490940582],
          "title": "Repository Id",
          "type": "integer"
        },
        "secret_name": {
          "description": "Name of the user-level Codespaces secret to which repository access is added; this secret must already exist for the authenticated user.",
          "examples": ["GH_TOKEN_MY_USER", "PERSONAL_API_KEY"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["secret_name", "repository_id"],
      "title": "AddASelectedRepositoryToAUserSecretRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The response data from the API. On successful execution (HTTP 204 No Content), this field is typically empty.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "AddASelectedRepositoryToAUserSecretResponseWrapper",
      "type": "object"
    },
    "description": "Grants a specified repository access to an authenticated user's existing codespaces secret, enabling codespaces created for that repository to use the secret.",
    "tags": ["idempotentHint", "updateHint", "openWorldHint", "Code Spaces", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Add labels to an issue",
    "slug": "GITHUB_ADD_LABELS_TO_AN_ISSUE",
    "input_parameters": {
      "description": "Specifies the repository issue to which labels will be added.",
      "properties": {
        "issue_number": {
          "description": "Number that uniquely identifies the issue within the repository.",
          "examples": ["42", "101"],
          "title": "Issue Number",
          "type": "integer"
        },
        "owner": {
          "description": "Username or organization name owning the repository (case-insensitive).",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension (case-insensitive).",
          "examples": ["Spoon-Knife", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "issue_number"],
      "title": "AddLabelsToAnIssueRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The API response data, which includes all labels currently applied to the issue.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "AddLabelsToAnIssueResponseWrapper",
      "type": "object"
    },
    "description": "Adds labels (provided in the request body) to a repository issue; labels that do not already exist are created.",
    "tags": ["idempotentHint", "updateHint", "openWorldHint", "important", "Issues"]
  },
  {
    "available_versions": ["latest"],
    "name": "Add org runner labels",
    "slug": "GITHUB_ADD_ORG_RUNNER_LABELS",
    "input_parameters": {
      "description": "Request schema for adding custom labels to a self-hosted runner for an organization.",
      "properties": {
        "labels": {
          "description": "A list of custom label names to add to the self-hosted runner. Previously applied labels are not removed.",
          "examples": [["new-label", "gpu-runner"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Labels",
          "type": "array"
        },
        "org": {
          "description": "The organization's name (case-insensitive).",
          "examples": ["my-org-name"],
          "title": "Org",
          "type": "string"
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "examples": [12345],
          "title": "Runner Id",
          "type": "integer"
        }
      },
      "required": ["org", "runner_id", "labels"],
      "title": "AddOrgRunnerLabelsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the updated list of labels for the runner. This typically includes a 'total_count' of labels and a 'labels' array, where each element is an object detailing a label (e.g., its ID, name, and type).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "AddOrgRunnerLabelsResponseWrapper",
      "type": "object"
    },
    "description": "Adds new custom labels to an existing self-hosted runner for an organization; existing labels are not removed, and duplicates are not added.",
    "tags": ["idempotentHint", "updateHint", "openWorldHint", "Workflows", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Add or update team membership for a user",
    "slug": "GITHUB_ADD_OR_UPDATE_TEAM_MEMBERSHIP_FOR_A_USER",
    "input_parameters": {
      "description": "Request schema for `AddOrUpdateTeamMembershipForAUser`",
      "properties": {
        "org": {
          "description": "The name of the GitHub organization. This name is not case-sensitive.",
          "examples": ["github-org", "octo-corp"],
          "title": "Org",
          "type": "string"
        },
        "role": {
          "default": "member",
          "description": "The role to assign to the user within the team. A 'maintainer' has broader permissions than a 'member', such as managing team members and settings.",
          "enum": ["member", "maintainer"],
          "examples": ["member", "maintainer"],
          "title": "Role",
          "type": "string"
        },
        "team_slug": {
          "description": "The slug (URL-friendly version) of the team's name.",
          "examples": ["justice-league", "developers", "product-team"],
          "title": "Team Slug",
          "type": "string"
        },
        "username": {
          "description": "The GitHub username of the user to add or whose membership to update.",
          "examples": ["octocat", "mona-lisa-fixed"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["org", "team_slug", "username"],
      "title": "AddOrUpdateTeamMembershipForAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the team membership details for the user, including their role and current membership state (e.g., 'active', 'pending').",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "AddOrUpdateTeamMembershipForAUserResponseWrapper",
      "type": "object"
    },
    "description": "Adds a github user to a team or updates their role (member or maintainer), inviting them to the organization if not already a member; idempotent, returning current details if no change is made.",
    "tags": ["idempotentHint", "updateHint", "openWorldHint", "Organizations", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Add or update team project permissions",
    "slug": "GITHUB_ADD_OR_UPDATE_TEAM_PROJECT_PERMISSIONS",
    "input_parameters": {
      "description": "Grants or updates a team's permissions for a specific project.",
      "properties": {
        "org": {
          "description": "Name of the organization (case-insensitive).",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "permission": {
          "description": "Permission level to grant ('read', 'write', or 'admin'). Uses the team's default permission if not provided.",
          "enum": ["read", "write", "admin"],
          "examples": ["read", "write", "admin"],
          "title": "Permission",
          "type": "string"
        },
        "project_id": {
          "description": "Unique identifier of the project.",
          "examples": [1002604],
          "title": "Project Id",
          "type": "integer"
        },
        "team_slug": {
          "description": "URL-friendly identifier (slug) for the team.",
          "examples": ["justice-league"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug", "project_id"],
      "title": "AddOrUpdateTeamProjectPermissionsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Response data. A successful update (HTTP 204 No Content) typically results in an empty body.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["successful"],
      "title": "AddOrUpdateTeamProjectPermissionsResponseWrapper",
      "type": "object"
    },
    "description": "Grants or updates a team's permissions ('read', 'write', or 'admin') for a specific project, which must exist within the specified organization and be linked to it.",
    "tags": ["idempotentHint", "updateHint", "openWorldHint", "Organizations", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Add or update team repository permissions",
    "slug": "GITHUB_ADD_OR_UPDATE_TEAM_REPOSITORY_PERMISSIONS",
    "input_parameters": {
      "description": "Request schema for `AddOrUpdateTeamRepositoryPermissions`",
      "properties": {
        "org": {
          "description": "Organization's name (case-insensitive).",
          "examples": ["octo-org", "github"],
          "title": "Org",
          "type": "string"
        },
        "owner": {
          "description": "Username of the account owning the repository (case-insensitive).",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "permission": {
          "default": "push",
          "description": "Permission to grant the team. Options: 'pull' (read-only), 'triage' (manage issues/PRs), 'push' (read/write), 'maintain' (manage repo settings, plus push), 'admin' (full control), or a custom repository role name.",
          "examples": ["admin", "push", "maintain", "custom-role-123"],
          "title": "Permission",
          "type": "string"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension (case-insensitive).",
          "examples": ["hello-world", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        },
        "team_slug": {
          "description": "The team's slug (URL-friendly name).",
          "examples": ["justice-league", "developers"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug", "owner", "repo"],
      "title": "AddOrUpdateTeamRepositoryPermissionsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response data. Usually an empty dictionary for successful updates (HTTP 204 No Content).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["successful"],
      "title": "AddOrUpdateTeamRepositoryPermissionsResponseWrapper",
      "type": "object"
    },
    "description": "Sets or updates a team's permission level for a repository within an organization; the team must be a member of the organization.",
    "tags": ["idempotentHint", "updateHint", "openWorldHint", "Organizations", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Add project collaborator",
    "slug": "GITHUB_ADD_PROJECT_COLLABORATOR",
    "input_parameters": {
      "description": "Request to add a collaborator to an organization project.",
      "properties": {
        "permission": {
          "default": "write",
          "description": "Permission level for the collaborator on the project.",
          "enum": ["read", "write", "admin"],
          "examples": ["read", "write", "admin"],
          "title": "Permission",
          "type": "string"
        },
        "project_id": {
          "description": "The unique identifier of the organization project.",
          "examples": ["12345"],
          "title": "Project Id",
          "type": "integer"
        },
        "username": {
          "description": "The GitHub username of the user to be added as a collaborator.",
          "examples": ["octocat"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["project_id", "username"],
      "title": "AddProjectCollaboratorRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response data; typically empty on success (204 No Content).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "AddProjectCollaboratorResponseWrapper",
      "type": "object"
    },
    "description": "Adds a specified github user as a collaborator to an existing organization project with a given permission level.",
    "tags": ["idempotentHint", "updateHint", "openWorldHint", "Organizations", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Add repo to org secret with selected access",
    "slug": "GITHUB_ADD_REPO_TO_ORG_SECRET_WITH_SELECTED_ACCESS",
    "input_parameters": {
      "description": "Request schema for adding a repository to an organization secret with 'selected' access type.",
      "properties": {
        "org": {
          "description": "The name of the GitHub organization. This field is not case-sensitive.",
          "examples": ["MyOrganization", "Octo-Org"],
          "title": "Org",
          "type": "string"
        },
        "repository_id": {
          "description": "The unique identifier of the repository to be granted access to the organization secret.",
          "examples": [123456789, 987654321],
          "title": "Repository Id",
          "type": "integer"
        },
        "secret_name": {
          "description": "The name of the organization secret to which the repository will be added.",
          "examples": ["MY_API_KEY", "DATABASE_PASSWORD"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["org", "secret_name", "repository_id"],
      "title": "AddRepoToOrgSecretWithSelectedAccessRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Response data from the API. For a successful operation (which typically returns a 204 No Content status), this field will likely be empty. In case of an error, it may contain error details.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "AddRepoToOrgSecretWithSelectedAccessResponseWrapper",
      "type": "object"
    },
    "description": "Adds a repository to an existing organization-level github actions secret that is configured for 'selected' repository access.",
    "tags": ["idempotentHint", "updateHint", "openWorldHint", "Security", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Add selected repo to org secret",
    "slug": "GITHUB_ADD_REPO_TO_ORG_SECRET_WITH_SELECTED_VISIBILITY",
    "input_parameters": {
      "description": "Request schema for assigning a repository to an organization's Dependabot secret.",
      "properties": {
        "org": {
          "description": "The organization's unique identifier (case-insensitive).",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "repository_id": {
          "description": "Unique ID of the repository to be granted access to the secret.",
          "examples": [1296269],
          "title": "Repository Id",
          "type": "integer"
        },
        "secret_name": {
          "description": "Name of the Dependabot secret; must be alphanumeric or underscore, no spaces (lowercase auto-converts to uppercase).",
          "examples": ["MY_SECRET_TOKEN", "ARTIFACTORY_PASSWORD"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["org", "secret_name", "repository_id"],
      "title": "AddRepoToOrgSecretWithSelectedVisibilityRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "AddRepoToOrgSecretWithSelectedVisibilityResponseWrapper",
      "type": "object"
    },
    "description": "Grants an existing repository access to an existing organization-level dependabot secret; the repository must belong to the organization, and the call succeeds without change if access already exists.",
    "tags": ["idempotentHint", "updateHint", "openWorldHint", "Security", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Add runner labels",
    "slug": "GITHUB_ADD_RUNNER_LABELS",
    "input_parameters": {
      "description": "Request schema for `AddCustomLabelsToASelfHostedRunnerForARepository`",
      "properties": {
        "labels": {
          "description": "Custom label names to add. Appended to existing labels. Names are case-insensitive. Empty list means no changes.",
          "examples": ["prod", "linux-x64", "gpu-enabled"],
          "items": { "properties": {}, "type": "string" },
          "title": "Labels",
          "type": "array"
        },
        "owner": {
          "description": "Username or organization name of the repository owner. Case-insensitive.",
          "examples": ["octocat", "MyOrganization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension. Case-insensitive.",
          "examples": ["hello-world", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        },
        "runner_id": {
          "description": "Unique ID of the self-hosted runner.",
          "examples": ["123", "456"],
          "title": "Runner Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "runner_id", "labels"],
      "title": "AddRunnerLabelsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details of all custom labels on the runner after addition, typically including `total_count` and a list of label objects (each with `id`, `name`, `type`).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "AddRunnerLabelsResponseWrapper",
      "type": "object"
    },
    "description": "Adds and appends custom labels to a self-hosted repository runner, which must be registered and active.",
    "tags": ["idempotentHint", "updateHint", "openWorldHint", "Workflows", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Add selected repository to an organization secret",
    "slug": "GITHUB_ADD_SELECTED_REPOSITORY_TO_AN_ORGANIZATION_SECRET",
    "input_parameters": {
      "description": "Request schema for `AddSelectedRepositoryToAnOrganizationSecret`",
      "properties": {
        "org": {
          "description": "The name of the organization. This name is not case sensitive.",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "repository_id": {
          "description": "The unique identifier of the repository to add to the secret's access list.",
          "examples": [1296269],
          "title": "Repository Id",
          "type": "integer"
        },
        "secret_name": {
          "description": "The name of the secret. Secret names can only contain alphanumeric characters ([A-Z], [a-z], [0-9]) or underscores (_). Spaces are not allowed. Secret names cannot start with GITHUB_ and must be less than 255 characters.",
          "examples": ["MY_API_KEY"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["org", "secret_name", "repository_id"],
      "title": "AddSelectedRepositoryToAnOrganizationSecretRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty dictionary, as this operation does not return a response body on success (HTTP 204 No Content).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "AddSelectedRepositoryToAnOrganizationSecretResponseWrapper",
      "type": "object"
    },
    "description": "Adds a repository to an organization secret's access list when the secret's visibility is 'selected'; this operation is idempotent.",
    "tags": ["idempotentHint", "updateHint", "openWorldHint", "Code Spaces", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Add selected repository to an organization variable",
    "slug": "GITHUB_ADD_SELECTED_REPOSITORY_TO_AN_ORGANIZATION_VARIABLE",
    "input_parameters": {
      "description": "Input for adding a selected repository to an organization variable's access list.",
      "properties": {
        "name": {
          "description": "Name of the existing organization-level GitHub Actions variable.",
          "examples": ["CI_DEPLOY_KEY", "SHARED_SECRET_VALUE"],
          "title": "Name",
          "type": "string"
        },
        "org": {
          "description": "Name of the GitHub organization (case-insensitive).",
          "examples": ["octo-org", "my-company"],
          "title": "Org",
          "type": "string"
        },
        "repository_id": {
          "description": "Unique identifier of the repository to grant access.",
          "examples": ["1296269", "543210"],
          "title": "Repository Id",
          "type": "integer"
        }
      },
      "required": ["org", "name", "repository_id"],
      "title": "AddSelectedRepositoryToAnOrganizationVariableRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "AddSelectedRepositoryToAnOrganizationVariableResponseWrapper",
      "type": "object"
    },
    "description": "Grants a repository access to an organization-level github actions variable, if that variable's visibility is set to 'selected repositories'.",
    "tags": ["idempotentHint", "updateHint", "openWorldHint", "Organizations", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Add social accounts for the authenticated user",
    "slug": "GITHUB_ADD_SOCIAL_ACCOUNTS_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Specifies the social media accounts to add for the authenticated user.",
      "properties": {
        "account_urls": {
          "description": "Full URLs for social media profiles to add to the user's GitHub profile; these will be displayed publicly.",
          "examples": [
            "https://twitter.com/github",
            "https://www.linkedin.com/in/github/",
            "https://mastodon.social/@github"
          ],
          "items": { "properties": {}, "type": "string" },
          "title": "Account Urls",
          "type": "array"
        }
      },
      "required": ["account_urls"],
      "title": "AddSocialAccountsForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details of social media accounts successfully added to the authenticated user's profile, typically including platform and URL for each.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "AddSocialAccountsForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Adds one or more social media links (which must be valid, full urls for platforms supported by github) to the authenticated user's public github profile.",
    "tags": ["updateHint", "openWorldHint", "Social Integration", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Add status check contexts",
    "slug": "GITHUB_ADD_STATUS_CHECK_CONTEXTS",
    "input_parameters": {
      "description": "Request model detailing the path parameters for adding status check contexts to a protected branch.\nNote: The actual contexts to add are passed in the request body and are not part of this model's explicit fields.",
      "properties": {
        "branch": {
          "description": "The name of the branch to which status check contexts will be added. Branch names cannot contain wildcard characters. To use wildcard characters in branch names, refer to [the GraphQL API](https://docs.github.com/graphql).",
          "examples": ["main", "develop"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "AddStatusCheckContextsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "AddStatusCheckContextsResponseWrapper",
      "type": "object"
    },
    "description": "Adds status check contexts (provided in the request body, e.g., `{\"contexts\": [\"new-context\"]}`) to a protected branch, requiring these contexts to have been previously reported.",
    "tags": ["idempotentHint", "updateHint", "openWorldHint", "Repositories", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Add team access restrictions",
    "slug": "GITHUB_ADD_TEAM_ACCESS_RESTRICTIONS",
    "input_parameters": {
      "description": "Request schema for `AddTeamAccessRestrictions`",
      "properties": {
        "branch": {
          "description": "The name of the branch to apply restrictions to. Wildcard characters are not supported for this field. To use wildcard characters in branch names, please consult the GitHub GraphQL API (see https://docs.github.com/graphql).",
          "examples": ["main", "develop", "feature/new-login"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "The GitHub username or organization name that owns the repository. This value is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This value is not case-sensitive.",
          "examples": ["Spoon-Knife", "Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "AddTeamAccessRestrictionsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "AddTeamAccessRestrictionsResponseWrapper",
      "type": "object"
    },
    "description": "Overwrites the list of teams (and their child teams) granted push access to a protected branch; the list of team slugs must be provided in the http post request body.",
    "tags": ["idempotentHint", "updateHint", "openWorldHint", "Repositories", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Add users to codespaces access for an organization",
    "slug": "GITHUB_ADD_USERS_TO_CODESPACES_ACCESS_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for `AddUsersToCodespacesAccessForAnOrganization`",
      "properties": {
        "org": {
          "description": "Organization's name (case-insensitive).",
          "examples": ["github", "my-organization"],
          "title": "Org",
          "type": "string"
        },
        "selected_usernames": {
          "description": "Usernames of organization members to be granted Codespaces access billed to the organization. These users must be members of the specified organization.",
          "examples": [
            ["octocat", "hubot"],
            ["another-user", "dev-user"]
          ],
          "items": { "properties": {}, "type": "string" },
          "title": "Selected Usernames",
          "type": "array"
        }
      },
      "required": ["org", "selected_usernames"],
      "title": "AddUsersToCodespacesAccessForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response. May be empty or absent on success (e.g., HTTP 204), or contain error details on failure.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "AddUsersToCodespacesAccessForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Sets or replaces the list of organization members granted codespaces access billed to the organization; ensure the organization's billing settings allow access for selected members.",
    "tags": ["updateHint", "openWorldHint", "Code Spaces", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Add user access restrictions",
    "slug": "GITHUB_ADD_USER_ACCESS_RESTRICTIONS",
    "input_parameters": {
      "description": "Path parameters for adding user access restrictions to a protected branch. The list of usernames must be provided in the request body as a JSON array (e.g., `[\"username1\"]`); an empty array `[]` removes all user restrictions.",
      "properties": {
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, refer to the GitHub GraphQL API documentation.",
          "examples": ["main", "develop"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "AddUserAccessRestrictionsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "AddUserAccessRestrictionsResponseWrapper",
      "type": "object"
    },
    "description": "Sets/replaces list of users allowed to push to a protected branch; usernames (e.g., `[\"user1\"]`) must be a json array in request body (not schema parameters), an empty array `[]` removes all restrictions.",
    "tags": ["idempotentHint", "updateHint", "openWorldHint", "Repositories", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Approve a workflow run for a fork pull request",
    "slug": "GITHUB_APPROVE_A_WORKFLOW_RUN_FOR_A_FORK_PULL_REQUEST",
    "input_parameters": {
      "description": "Request schema for `ApproveAWorkflowRunForAForkPullRequest`",
      "properties": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. ",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "run_id": {
          "description": "The unique identifier of the workflow run requiring approval.",
          "examples": [12345],
          "title": "Run Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "run_id"],
      "title": "ApproveAWorkflowRunForAForkPullRequestRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty object indicating success.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ApproveAWorkflowRunForAForkPullRequestResponseWrapper",
      "type": "object"
    },
    "description": "Approves a workflow run from a forked repository's pull request; call this when such a run requires manual approval due to workflow configuration.",
    "tags": ["idempotentHint", "updateHint", "openWorldHint", "important", "Workflows"]
  },
  {
    "available_versions": ["latest"],
    "name": "Assign an organization role to a team",
    "slug": "GITHUB_ASSIGN_AN_ORGANIZATION_ROLE_TO_A_TEAM",
    "input_parameters": {
      "description": "Request schema for `AssignAnOrganizationRoleToATeam`",
      "properties": {
        "org": {
          "description": "The name of the GitHub organization. This field is case-insensitive.",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "role_id": {
          "description": "Unique identifier of the organization role to assign to the team (obtainable by listing organization roles).",
          "examples": [123, 456],
          "title": "Role Id",
          "type": "integer"
        },
        "team_slug": {
          "description": "The slug (URL-friendly version) of the team's name.",
          "examples": ["justice-league"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug", "role_id"],
      "title": "AssignAnOrganizationRoleToATeamRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty dictionary if the role was assigned successfully. GitHub API returns a 204 No Content status on success.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "AssignAnOrganizationRoleToATeamResponseWrapper",
      "type": "object"
    },
    "description": "Assigns an existing organization-level role (identified by `role id`) to a team (identified by `team slug`) within a github organization (`org`), provided the organization, team, and role already exist.",
    "tags": ["idempotentHint", "updateHint", "openWorldHint", "Organizations", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Assign an organization role to a user",
    "slug": "GITHUB_ASSIGN_AN_ORGANIZATION_ROLE_TO_A_USER",
    "input_parameters": {
      "description": "Request schema for `AssignAnOrganizationRoleToAUser`",
      "properties": {
        "org": {
          "description": "The organization's name. This is not case-sensitive.",
          "examples": ["github", "acme-corp"],
          "title": "Org",
          "type": "string"
        },
        "role_id": {
          "description": "The unique integer identifier for the organization role. This ID can be obtained by listing the organization's roles.",
          "examples": ["1", "42", "101"],
          "title": "Role Id",
          "type": "integer"
        },
        "username": {
          "description": "The GitHub username of the user to whom the role will be assigned.",
          "examples": ["octocat", "githubuser123"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["org", "username", "role_id"],
      "title": "AssignAnOrganizationRoleToAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary that is typically empty upon successful role assignment, as the GitHub API returns a 204 No Content status for this operation.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "AssignAnOrganizationRoleToAUserResponseWrapper",
      "type": "object"
    },
    "description": "Assigns a specific organization role to a user who is a member or an outside collaborator in a github organization, using a valid role id.",
    "tags": ["idempotentHint", "updateHint", "openWorldHint", "Organizations", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Authuserdockerconflictpackageslist",
    "slug": "GITHUB_AUTH_USER_DOCKER_CONFLICT_PACKAGES_LIST",
    "input_parameters": {
      "description": "Request model; no specific parameters are required.",
      "properties": {},
      "title": "AuthUserDockerConflictPackagesListRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "List of the authenticated user's Docker packages that experienced conflicts during migration, including details for each.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "AuthUserDockerConflictPackagesListResponseWrapper",
      "type": "object"
    },
    "description": "Lists docker packages for the authenticated user that encountered conflicts during the docker migration process.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Repositories", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Block a user",
    "slug": "GITHUB_BLOCK_A_USER",
    "input_parameters": {
      "description": "Identifies the GitHub user to block by their username.",
      "properties": {
        "username": {
          "description": "Case-sensitive GitHub username of the user to block.",
          "examples": ["octocat", "devuser123"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["username"],
      "title": "BlockAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Response data from the GitHub API; typically empty on success (HTTP 204 No Content), but populated for other response codes.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["successful"],
      "title": "BlockAUserResponseWrapper",
      "type": "object"
    },
    "description": "Blocks an existing individual github user (not an organization or your own account), preventing them from interacting with your account and repositories.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "Users", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Block a user from an organization",
    "slug": "GITHUB_BLOCK_A_USER_FROM_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Input data for blocking a user from an organization.",
      "properties": {
        "org": {
          "description": "The case-insensitive name of the GitHub organization.",
          "examples": ["github", "google"],
          "title": "Org",
          "type": "string"
        },
        "username": {
          "description": "The GitHub username (handle) of the account to block.",
          "examples": ["octocat", "someuser"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["org", "username"],
      "title": "BlockAUserFromAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the response data from the API. For a successful block operation (HTTP 204 No Content), this dictionary is typically empty.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "BlockAUserFromAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Blocks an existing github user from an existing organization, preventing their contributions, collaboration, and forking of the organization's repositories.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "Organizations", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Cancel a GitHub Pages deployment",
    "slug": "GITHUB_CANCEL_A_GITHUB_PAGES_DEPLOYMENT",
    "input_parameters": {
      "description": "Request schema for `CancelAGithubPagesDeployment`",
      "properties": {
        "owner": {
          "description": "Username or organization that owns the repository. Not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "pages_deployment_id": {
          "description": "Unique numerical ID of the GitHub Pages deployment (not the commit SHA).",
          "examples": [123456789],
          "title": "Pages Deployment Id",
          "type": "integer"
        },
        "repo": {
          "description": "Repository name, excluding the `.git` extension. Not case-sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "pages_deployment_id"],
      "title": "CancelAGithubPagesDeploymentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CancelAGithubPagesDeploymentResponseWrapper",
      "type": "object"
    },
    "description": "Cancels an existing, ongoing or queued github pages deployment for a repository using its `pages deployment id`.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "Deployments", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Cancel a workflow run",
    "slug": "GITHUB_CANCEL_A_WORKFLOW_RUN",
    "input_parameters": {
      "description": "Request schema for `CancelAWorkflowRun`",
      "properties": {
        "owner": {
          "description": "The account owner of the repository (not case-sensitive).",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension (not case-sensitive).",
          "examples": ["Hello-World", "linguist"],
          "title": "Repo",
          "type": "string"
        },
        "run_id": {
          "description": "Unique identifier of the workflow run.",
          "examples": [123456789],
          "title": "Run Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "run_id"],
      "title": "CancelAWorkflowRunRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CancelAWorkflowRunResponseWrapper",
      "type": "object"
    },
    "description": "Cancels a workflow run in a github repository if it is in a cancellable state (e.g., 'in progress' or 'queued').",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "Workflows", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Check a token",
    "slug": "GITHUB_CHECK_A_TOKEN",
    "input_parameters": {
      "description": "Request schema for validating a GitHub App or OAuth token.",
      "properties": {
        "access_token": {
          "description": "The OAuth or GitHub App access token that needs to be checked for validity.",
          "examples": ["gho_A1b2C3d4E5f6G7h8I9j0K1l2M3n4O5p6Q7r8S9t0"],
          "title": "Access Token",
          "type": "string"
        },
        "client_id": {
          "description": "The unique client ID of the GitHub App for which the token was issued.",
          "examples": ["Iv1.1234567890abcdef"],
          "title": "Client Id",
          "type": "string"
        }
      },
      "required": ["client_id", "access_token"],
      "title": "CheckATokenRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing details of the validated token if it is valid. Key information includes `id`, `url`, `app` (details of the GitHub App), `token` (the token string), `user` (if a user token), `scopes`, `permissions`, `created_at`, `updated_at`, and `expires_at` (if applicable).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CheckATokenResponseWrapper",
      "type": "object"
    },
    "description": "Checks if a github app or oauth access token is valid for the specified client id and retrieves its details, typically to verify its active status and grants.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Security", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Check if a gist is starred",
    "slug": "GITHUB_CHECK_IF_A_GIST_IS_STARRED",
    "input_parameters": {
      "description": "Request schema for `CheckIfAGistIsStarred`",
      "properties": {
        "gist_id": {
          "description": "The ID of the Gist to check.",
          "examples": ["6104628abc0786a41abb273430ac0590"],
          "title": "Gist Id",
          "type": "string"
        }
      },
      "required": ["gist_id"],
      "title": "CheckIfAGistIsStarredRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CheckIfAGistIsStarredResponseWrapper",
      "type": "object"
    },
    "description": "Checks if a gist, identified by `gist id`, is starred by the authenticated user, returning an empty response (204) if starred, or a 404 error if not starred or not found.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Gists", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Check if person is followed by authenticated user",
    "slug": "GITHUB_CHECK_IF_A_PERSON_IS_FOLLOWED_BY_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Input model for the action that checks if the authenticated user follows another GitHub user.",
      "properties": {
        "username": {
          "description": "The GitHub username (e.g., 'octocat') of the person to check. This is the user's handle on GitHub.",
          "examples": ["octocat", "torvalds"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["username"],
      "title": "CheckIfAPersonIsFollowedByTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CheckIfAPersonIsFollowedByTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Checks if the authenticated github user follows a target github user; an http 204 status indicates the user is followed, while an http 404 status indicates the user is not followed or the target user does not exist.",
    "tags": ["readOnlyHint", "openWorldHint", "User Management", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Check if pull request merged",
    "slug": "GITHUB_CHECK_IF_A_PULL_REQUEST_HAS_BEEN_MERGED",
    "input_parameters": {
      "description": "Request schema for `CheckIfAPullRequestHasBeenMerged`",
      "properties": {
        "owner": {
          "description": "The account owner of the repository (not case sensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "pull_number": {
          "description": "The number that identifies the pull request.",
          "examples": ["1347"],
          "title": "Pull Number",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension (not case sensitive).",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "pull_number"],
      "title": "CheckIfAPullRequestHasBeenMergedRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response data. Merge status is indicated by HTTP status: 204 (merged, empty body) or 404 (not merged/found, body may contain error details).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CheckIfAPullRequestHasBeenMergedResponseWrapper",
      "type": "object"
    },
    "description": "Checks if a specified github pull request has been merged, indicated by a 204 http status (merged) or 404 (not merged/found).",
    "tags": ["readOnlyHint", "openWorldHint", "Pull Requests", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Check if repo starred by auth user",
    "slug": "GITHUB_CHECK_IF_A_REPOSITORY_IS_STARRED_BY_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request model for specifying the repository to check for a star by the authenticated user.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository (e.g., a user or organization). This name is not case sensitive.",
          "examples": ["octocat", "example-org"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case sensitive.",
          "examples": ["Spoon-Knife", "my-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "CheckIfARepositoryIsStarredByTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Empty dictionary if the repository is starred by the authenticated user (signified by an HTTP 204 No Content from GitHub API). If not starred or if the repository doesn't exist, an API error (e.g., HTTP 404) is raised, and this response is not populated.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CheckIfARepositoryIsStarredByTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Use to determine if the authenticated user has starred a specific github repository, which is confirmed by an http 204 status (resulting in an empty dictionary in the response data); the action fails (e.g., http 404) if the repository is not starred or does not exist.",
    "tags": ["readOnlyHint", "openWorldHint", "Repository Management", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Check if a user can be assigned",
    "slug": "GITHUB_CHECK_IF_A_USER_CAN_BE_ASSIGNED",
    "input_parameters": {
      "description": "Request schema for checking if a user can be assigned to issues in a repository.",
      "properties": {
        "assignee": {
          "description": "The GitHub username of the user to check for assignability. This name is not case sensitive.",
          "examples": ["hubot", "monalisa"],
          "title": "Assignee",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository (e.g., a GitHub username or organization name). This name is not case sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case sensitive.",
          "examples": ["Spoon-Knife", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "assignee"],
      "title": "CheckIfAUserCanBeAssignedRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response data. Typically empty if the user can be assigned (HTTP 204 No Content).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CheckIfAUserCanBeAssignedResponseWrapper",
      "type": "object"
    },
    "description": "Verifies if a github user can be assigned to issues in a repository; assignability is confirmed by an http 204 (no content) response, resulting in an empty 'data' field in the response.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Issues", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Check if a user can be assigned to an issue",
    "slug": "GITHUB_CHECK_IF_A_USER_CAN_BE_ASSIGNED_TO_A_ISSUE",
    "input_parameters": {
      "description": "Request schema for `CheckIfAUserCanBeAssignedToAIssue`",
      "properties": {
        "assignee": {
          "description": "The GitHub username of the user to check for assignment permissions.",
          "examples": ["hubot"],
          "title": "Assignee",
          "type": "string"
        },
        "issue_number": {
          "description": "The unique number identifying the issue within the repository.",
          "examples": ["1347"],
          "title": "Issue Number",
          "type": "integer"
        },
        "owner": {
          "description": "The username of the account owning the repository. This field is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "issue_number", "assignee"],
      "title": "CheckIfAUserCanBeAssignedToAIssueRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Empty if the user can be assigned; otherwise, contains GitHub error details if the user cannot be assigned or if the issue/repository is not found.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CheckIfAUserCanBeAssignedToAIssueResponseWrapper",
      "type": "object"
    },
    "description": "Checks if a specified github user can be assigned to a given issue within a repository.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Issues", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Check if a user follows another user",
    "slug": "GITHUB_CHECK_IF_A_USER_FOLLOWS_ANOTHER_USER",
    "input_parameters": {
      "description": "Request schema for checking if one GitHub user follows another.",
      "properties": {
        "target_user": {
          "description": "The GitHub username of the user to verify if they are followed by the `username`.",
          "examples": ["mercury-tools-bot", "github"],
          "title": "Target User",
          "type": "string"
        },
        "username": {
          "description": "The GitHub username of the user to check.",
          "examples": ["octocat", "torvalds"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["username", "target_user"],
      "title": "CheckIfAUserFollowsAnotherUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty dictionary. The follow status is determined by the HTTP response code (204 for following, 404 for not following), not the content of this field.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CheckIfAUserFollowsAnotherUserResponseWrapper",
      "type": "object"
    },
    "description": "Checks if a github user `username` follows `target user`; returns a 204 http status if true, 404 if not or if users are invalid.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Users", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Check if a user is a repository collaborator",
    "slug": "GITHUB_CHECK_IF_A_USER_IS_A_REPOSITORY_COLLABORATOR",
    "input_parameters": {
      "description": "Request schema for `CheckIfAUserIsARepositoryCollaborator`",
      "properties": {
        "owner": {
          "description": "The account owner of the repository, typically a GitHub username or an organization name. This name is not case sensitive.",
          "examples": ["octocat", "my-github-org"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case sensitive.",
          "examples": ["Spoon-Knife", "my-project-repo"],
          "title": "Repo",
          "type": "string"
        },
        "username": {
          "description": "The GitHub username of the user whose collaborator status is being checked. This name is not case sensitive.",
          "examples": ["gh-user123", "another-dev"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "username"],
      "title": "CheckIfAUserIsARepositoryCollaboratorRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CheckIfAUserIsARepositoryCollaboratorResponseWrapper",
      "type": "object"
    },
    "description": "Checks if a user is a collaborator on a specified github repository, returning a 204 status if they are, or a 404 status if they are not or if the repository/user does not exist.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Repositories", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Check if a user is blocked by an organization",
    "slug": "GITHUB_CHECK_IF_A_USER_IS_BLOCKED_BY_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for `CheckIfAUserIsBlockedByAnOrganization`",
      "properties": {
        "org": {
          "description": "The organization's GitHub name. This name is not case-sensitive.",
          "examples": ["github", "octo-org"],
          "title": "Org",
          "type": "string"
        },
        "username": {
          "description": "The GitHub username of the user to check.",
          "examples": ["octocat", "mona-lisa"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["org", "username"],
      "title": "CheckIfAUserIsBlockedByAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CheckIfAUserIsBlockedByAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Checks if a github user is blocked by an organization; a successful response (204 no content) indicates the user is blocked, while a 404 not found error indicates the user is not blocked.",
    "tags": ["readOnlyHint", "openWorldHint", "User Management", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Check if a user is blocked by the authenticated user",
    "slug": "GITHUB_CHECK_IF_A_USER_IS_BLOCKED_BY_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request to check if a user is blocked by the authenticated user.",
      "properties": {
        "username": {
          "description": "The GitHub username (handle) of the user.",
          "examples": ["octocat", "torvalds"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["username"],
      "title": "CheckIfAUserIsBlockedByTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty dictionary, returned when the API signals the user is blocked (204 No Content). This model is not used if the user is not blocked (API returns 404 Not Found).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CheckIfAUserIsBlockedByTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Checks if the specified github user is blocked by the authenticated user; a 204 no content response indicates the user is blocked, while a 404 not found indicates they are not.",
    "tags": ["readOnlyHint", "openWorldHint", "User Management", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Check private vulnerability reporting status",
    "slug": "GITHUB_CHECK_PRIVATE_VULNERABILITY_REPORTING_STATUS",
    "input_parameters": {
      "description": "Request schema for `CheckPrivateVulnerabilityReportingStatus`",
      "properties": {
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["hello-world", "linguist"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "CheckPrivateVulnerabilityReportingStatusRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing a boolean field `enabled` which is `true` if private vulnerability reporting is enabled for the repository, and `false` otherwise.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CheckPrivateVulnerabilityReportingStatusResponseWrapper",
      "type": "object"
    },
    "description": "Checks if private vulnerability reporting is enabled for the specified repository.",
    "tags": ["readOnlyHint", "openWorldHint", "Security", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Check team permissions for a project",
    "slug": "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_PROJECT",
    "input_parameters": {
      "description": "Request schema for `CheckTeamPermissionsForAProject`",
      "properties": {
        "org": {
          "description": "The name of the organization. This is case-insensitive.",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "project_id": {
          "description": "The unique identifier of the project (classic).",
          "examples": [1002604],
          "title": "Project Id",
          "type": "integer"
        },
        "team_slug": {
          "description": "The slug (short name) of the team.",
          "examples": ["justice-league"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug", "project_id"],
      "title": "CheckTeamPermissionsForAProjectRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details of the classic project, returned if the team has 'read', 'write', or 'admin' permissions. Includes project URLs, owner information, and other attributes.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CheckTeamPermissionsForAProjectResponseWrapper",
      "type": "object"
    },
    "description": "Checks if a team has 'read', 'write', or 'admin' permissions for an organization's specific classic project, returning the project's details if access is confirmed.",
    "tags": ["readOnlyHint", "openWorldHint", "Organization Management", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Check team permissions for a repository",
    "slug": "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Defines the request parameters for checking a team's permissions for a repository.",
      "properties": {
        "org": {
          "description": "The name of the organization. This field is not case-sensitive.",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "owner": {
          "description": "The organization that owns the repository. For this GitHub API endpoint, this value must be the same as the `org` parameter. This field is not case-sensitive.",
          "examples": ["octo-org"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["hello-world", "octo-repo"],
          "title": "Repo",
          "type": "string"
        },
        "team_slug": {
          "description": "The URL-friendly slug for the team name. It is unique within the organization and typically all lowercase with hyphens instead of spaces.",
          "examples": ["justice-league", "awesome-developers"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug", "owner", "repo"],
      "title": "CheckTeamPermissionsForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the repository object, which includes the team's permissions for it. Key information includes a `permissions` attribute with boolean flags for `admin`, `maintain`, `push`, `triage`, and `pull` access.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CheckTeamPermissionsForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Checks a team's permissions for a specific repository within an organization, including permissions inherited from parent teams.",
    "tags": ["readOnlyHint", "openWorldHint", "Organization Management", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Clear repository cache by key",
    "slug": "GITHUB_CLEAR_REPOSITORY_CACHE_BY_KEY",
    "input_parameters": {
      "description": "Request schema for the `ClearRepositoryCacheByKey` action, defining parameters to identify and delete GitHub Actions caches.",
      "properties": {
        "key": {
          "description": "The exact cache key used to identify specific caches for deletion. This key is often dynamically generated in workflows using expressions (e.g., `${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}`).",
          "examples": [
            "Linux-npm-6a99d79959699e7aa7597179767626e089597a38",
            "Windows-pip-cache-mybranch-py39",
            "macOS-gems-custom-key-v1"
          ],
          "title": "Key",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "ref": {
          "description": "The full Git reference for narrowing down the cache deletion. For example, to target caches for a specific branch, use `refs/heads/<branch_name>`. To target caches for a pull request, use `refs/pull/<pull_number>/merge`. If omitted, caches matching the key across all refs are considered.",
          "examples": ["refs/heads/main", "refs/pull/123/merge", "refs/tags/v1.0.0"],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "examples": ["hello-world", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "key"],
      "title": "ClearRepositoryCacheByKeyRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary typically containing `total_count`, the number of caches deleted, and `actions_caches`, an array of the deleted cache objects.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ClearRepositoryCacheByKeyResponseWrapper",
      "type": "object"
    },
    "description": "Deletes github actions caches from a repository matching a specific `key` and an optional git `ref`, used to manage storage or clear outdated/corrupted caches; the action succeeds even if no matching caches are found to delete.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "CI/CD", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Clear self-hosted runner org labels",
    "slug": "GITHUB_CLEAR_SELF_HOSTED_RUNNER_ORG_LABELS",
    "input_parameters": {
      "description": "Request schema for `ClearSelfHostedRunnerOrgLabels`",
      "properties": {
        "org": {
          "description": "Name of the organization (case-insensitive).",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "examples": [123, 456],
          "title": "Runner Id",
          "type": "integer"
        }
      },
      "required": ["org", "runner_id"],
      "title": "ClearSelfHostedRunnerOrgLabelsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Dictionary with the total count and list of remaining labels after clearing custom ones; GitHub-assigned default labels are not removed.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ClearSelfHostedRunnerOrgLabelsResponseWrapper",
      "type": "object"
    },
    "description": "Removes all custom labels from a self-hosted runner for an organization; default labels (e.g., 'self-hosted', 'linux', 'x64') will remain.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "CI/CD", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Compare two commits",
    "slug": "GITHUB_COMPARE_TWO_COMMITS",
    "input_parameters": {
      "description": "Request schema for `CompareTwoCommits` action. Specifies the repository and the two commit points (base and head) to compare.",
      "properties": {
        "basehead": {
          "description": "A string specifying the base and head references to compare, in the format `BASE...HEAD`. `BASE` and `HEAD` can be branch names (e.g., `main...develop`), tag names (e.g., `v1.0.0...v1.1.0`), or commit SHA-1s. Both references must exist in the specified repository. To compare branches across forks in the same network, use the format `OWNER:REF...OWNER:REF` (e.g., `octocat:main...another-user:main`).",
          "examples": [
            "main...develop",
            "v1.0.0...v1.1.0",
            "0e9c6b6...5f8d3a0",
            "octocat:main...my-fork-user:main"
          ],
          "title": "Basehead",
          "type": "string"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch, for pagination when the number of differences (commits or files) is large.",
          "examples": ["1", "2"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results (e.g., files or commits) to return per page, with a maximum of 100, for pagination.",
          "examples": ["30", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife", "my-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "basehead"],
      "title": "CompareTwoCommitsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the comparison details. This typically includes: the status of the comparison (e.g., 'diverged', 'ahead', 'behind', 'identical'), the number of commits `ahead_by` and `behind_by` the base, `total_commits` in the range, an array of `commits` objects, an array of `files` objects detailing changed files (including status, additions, deletions, changes, patch, etc.), and various URLs (`html_url`, `permalink_url`, `diff_url`, `patch_url`) for accessing the comparison.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CompareTwoCommitsResponseWrapper",
      "type": "object"
    },
    "description": "Compares two commit points (commits, branches, tags, or shas) within a repository or across forks, using `base...head` or `owner:ref...owner:ref` format for the `basehead` parameter.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Commits", "important"]
  },
  {
    "available_versions": ["latest"],
    "name": "Configure JIT runner for an org",
    "slug": "GITHUB_CONFIGURE_JITRUNNER_FOR_ORG",
    "input_parameters": {
      "description": "Parameters to generate a just-in-time (JIT) runner configuration for a GitHub organization.",
      "properties": {
        "labels": {
          "description": "Custom labels to assign to the new self-hosted runner, used by GitHub Actions to route jobs. **Minimum items**: 1. **Maximum items**: 100.",
          "examples": [
            "[\"linux\", \"x64\", \"gpu\"]",
            "[\"windows-latest\", \"my-custom-label\"]"
          ],
          "items": { "properties": {}, "type": "string" },
          "title": "Labels",
          "type": "array"
        },
        "name": {
          "description": "Desired name for the new self-hosted runner, visible in the GitHub UI.",
          "examples": ["my-jit-runner-linux", "temp-builder-1"],
          "title": "Name",
          "type": "string"
        },
        "org": {
          "description": "Name of the GitHub organization (case-insensitive).",
          "examples": ["my-organization", "github"],
          "title": "Org",
          "type": "string"
        },
        "runner_group_id": {
          "description": "ID of the runner group to assign the new self-hosted runner. Must exist in the organization.",
          "examples": ["1", "42"],
          "title": "Runner Group Id",
          "type": "integer"
        },
        "work_folder": {
          "default": "_work",
          "description": "Path to the working directory on the runner machine where jobs will execute, relative to the runner's installation directory.",
          "examples": ["_work", "custom_work_dir"],
          "title": "Work Folder",
          "type": "string"
        }
      },
      "required": ["org", "name", "runner_group_id", "labels"],
      "title": "ConfigureJitrunnerForOrgRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Generated JIT configuration. Includes `runner` details (like `id`, `name`, `os`, `status`, `labels`) and `encoded_jit_config` (base64 encoded string for runner registration with GitHub Actions).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ConfigureJitrunnerForOrgResponseWrapper",
      "type": "object"
    },
    "description": "Generates a jit configuration for a github organization's new self-hosted runner to run a single job then unregister; the runner group id must exist.",
    "tags": ["openWorldHint", "CI/CD", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Configure OIDC subject claim template",
    "slug": "GITHUB_CONFIGURE_OIDCSUBJECT_CLAIM_TEMPLATE",
    "input_parameters": {
      "description": "Request schema for `ConfigureOidcsubjectClaimTemplate`.",
      "properties": {
        "include_claim_keys": {
          "description": "Array of unique strings, each a valid claim key (e.g., 'repo', 'actor'; alphanumeric/underscores only), to include in the OIDC subject claim (`sub`).",
          "examples": [
            ["repo", "context", "actor"],
            ["workflow", "ref", "repository_owner"]
          ],
          "items": { "properties": {}, "type": "string" },
          "title": "Include Claim Keys",
          "type": "array"
        },
        "org": {
          "description": "The GitHub organization name (case-insensitive).",
          "examples": ["my-github-org"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org", "include_claim_keys"],
      "title": "ConfigureOidcsubjectClaimTemplateRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ConfigureOidcsubjectClaimTemplateResponseWrapper",
      "type": "object"
    },
    "description": "Sets or updates the oidc subject claim customization template for an existing github organization by specifying which claims (e.g., 'repo', 'actor') form the oidc token's subject (`sub`).",
    "tags": [
      "updateHint",
      "idempotentHint",
      "openWorldHint",
      "Organization Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Convert an organization member to outside collaborator",
    "slug": "GITHUB_CONVERT_AN_ORGANIZATION_MEMBER_TO_OUTSIDE_COLLABORATOR",
    "input_parameters": {
      "description": "Request schema for `ConvertAnOrganizationMemberToOutsideCollaborator`",
      "properties": {
        "async": {
          "default": false,
          "description": "If true, performs the conversion asynchronously (API returns a 202 status when the job is successfully queued).",
          "title": "Async",
          "type": "boolean"
        },
        "org": {
          "description": "The organization name (case-insensitive).",
          "examples": ["octo-org", "my-company-gh"],
          "title": "Org",
          "type": "string"
        },
        "username": {
          "description": "The GitHub username of the member to convert.",
          "examples": ["octocat", "user-to-convert"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["org", "username"],
      "title": "ConvertAnOrganizationMemberToOutsideCollaboratorRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ConvertAnOrganizationMemberToOutsideCollaboratorResponseWrapper",
      "type": "object"
    },
    "description": "Converts an existing organization member, who is not an owner, to an outside collaborator, restricting their access to explicitly granted repositories.",
    "tags": [
      "updateHint",
      "idempotentHint",
      "openWorldHint",
      "Organization Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Create an autolink reference for a repository",
    "slug": "GITHUB_CREATE_AN_AUTOLINK_REFERENCE_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for creating an autolink reference in a repository.",
      "properties": {
        "is_alphanumeric": {
          "default": true,
          "description": "Specifies if the `<num>` placeholder in `url_template` matches alphanumeric characters (`A-Z` (case-insensitive), `0-9`, and `-`) or only numeric characters (`0-9`).",
          "examples": ["True", "False"],
          "title": "Is Alphanumeric",
          "type": "boolean"
        },
        "key_prefix": {
          "description": "Prefix that triggers the autolink (e.g., 'JIRA-'). When followed by an identifier, it's converted into a link. Must be non-empty and not contain spaces.",
          "examples": ["JIRA-", "TICKET-", "DOC-"],
          "title": "Key Prefix",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. This can be a username or an organization name. The name is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. The name is not case-sensitive.",
          "examples": ["Spoon-Knife", "my-project"],
          "title": "Repo",
          "type": "string"
        },
        "url_template": {
          "description": "URL template for the autolink, using `<num>` as a placeholder for the reference identifier (e.g., 'https://example.atlassian.net/browse/<num>'). Behavior of `<num>` is determined by `is_alphanumeric`.",
          "examples": [
            "https://example.atlassian.net/browse/<num>",
            "https://tracker.example.com/issues?id=<num>"
          ],
          "title": "Url Template",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "key_prefix", "url_template"],
      "title": "CreateAnAutolinkReferenceForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the autolink reference object that was created. This typically includes fields such as `id`, `key_prefix`, `url_template`, and `is_alphanumeric`.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAnAutolinkReferenceForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Creates a repository autolink to automatically convert text references (e.g., 'ticket-123') into hyperlinks, using a unique `key prefix` and a `url template` that includes `<num>`.",
    "tags": ["openWorldHint", "Repository Management", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create an environment variable",
    "slug": "GITHUB_CREATE_AN_ENVIRONMENT_VARIABLE",
    "input_parameters": {
      "description": "Request schema for creating a new environment variable in a repository's environment.",
      "properties": {
        "environment_name": {
          "description": "The name of the environment for which to create the variable. The name must be URL encoded if it contains special characters (e.g., slashes `/` must be replaced with `%2F`).",
          "examples": ["production", "staging%2Ffeature-branch"],
          "title": "Environment Name",
          "type": "string"
        },
        "name": {
          "description": "The name of the environment variable to create (e.g., `API_KEY`).",
          "examples": ["CI_TOKEN", "DATABASE_URL"],
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        },
        "value": {
          "description": "The value of the environment variable (e.g., `your_secret_token`). This value will be encrypted.",
          "examples": ["s3cr3t_v4lu3", "postgres://user:secret@localhost:5432/mydb"],
          "title": "Value",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "environment_name", "name", "value"],
      "title": "CreateAnEnvironmentVariableRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty dictionary is returned upon successful creation of the environment variable (HTTP 201 Created).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAnEnvironmentVariableResponseWrapper",
      "type": "object"
    },
    "description": "Creates an encrypted environment variable for a pre-existing environment within a github repository; will fail if the variable name already exists.",
    "tags": ["openWorldHint", "CI/CD", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create an issue",
    "slug": "GITHUB_CREATE_AN_ISSUE",
    "input_parameters": {
      "description": "Request schema for creating a new issue in a GitHub repository.",
      "properties": {
        "assignee": {
          "description": "Login for the user to whom this issue should be assigned. NOTE: Only users with push access can set the assignee; it is silently dropped otherwise. **This field is deprecated in favor of `assignees`.**",
          "examples": ["octocat", "monalisa"],
          "title": "Assignee",
          "type": "string"
        },
        "assignees": {
          "description": "GitHub login names for users to assign to this issue. NOTE: Only users with push access can set assignees; they are silently dropped otherwise.",
          "examples": [["octocat"], ["monalisa", "hubot"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Assignees",
          "type": "array"
        },
        "body": {
          "description": "The detailed textual contents of the new issue.",
          "examples": [
            "Detailed description of the bug with steps to reproduce.",
            "I think adding a dark mode would improve user experience..."
          ],
          "title": "Body",
          "type": "string"
        },
        "labels": {
          "description": "Label names to associate with this issue (generally case-insensitive). NOTE: Only users with push access can set labels; they are silently dropped otherwise. Pass an empty list to clear all labels.",
          "examples": [["bug", "critical"], ["enhancement", "ui"], ["documentation"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Labels",
          "type": "array"
        },
        "milestone": {
          "description": "The ID of the milestone to associate this issue with (e.g., \"5\"). NOTE: Only users with push access can set the milestone; it is silently dropped otherwise.",
          "examples": ["1", "5"],
          "title": "Milestone",
          "type": "string"
        },
        "owner": {
          "description": "The GitHub account owner of the repository (case-insensitive).",
          "examples": ["octocat", "torvalds"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension (case-insensitive).",
          "examples": ["Spoon-Knife", "linux"],
          "title": "Repo",
          "type": "string"
        },
        "title": {
          "description": "The title for the new issue.",
          "examples": ["Found a critical bug", "Feature request: Add dark mode"],
          "title": "Title",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "title"],
      "title": "CreateAnIssueRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the full data representation of the newly created GitHub issue, including its ID, title, body, state, assignees, labels, etc.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAnIssueResponseWrapper",
      "type": "object"
    },
    "description": "Creates a new issue in a github repository, requiring the repository to exist and have issues enabled; specific fields like assignees, milestone, or labels may require push access.",
    "tags": ["important", "openWorldHint", "Repository Management"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create an issue comment",
    "slug": "GITHUB_CREATE_AN_ISSUE_COMMENT",
    "input_parameters": {
      "description": "Parameters to create a comment on a GitHub issue or pull request.",
      "properties": {
        "body": {
          "description": "Comment content in GitHub Flavored Markdown.",
          "examples": ["This is a **bold** comment!", "Thanks for the update :+1:", "Fixes #123"],
          "title": "Body",
          "type": "string"
        },
        "issue_number": {
          "description": "Number identifying the issue or pull request for the comment.",
          "examples": [42, 101],
          "title": "Issue Number",
          "type": "integer"
        },
        "owner": {
          "description": "Account owner of the repository (username or organization); not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository (without `.git` extension); not case-sensitive.",
          "examples": ["Spoon-Knife", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "issue_number", "body"],
      "title": "CreateAnIssueCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Full API response for the created issue comment, including ID, author, body, and timestamps.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAnIssueCommentResponseWrapper",
      "type": "object"
    },
    "description": "Creates a new comment on an existing github issue or pull request within the specified repository.",
    "tags": ["important", "openWorldHint", "Comments"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create an organization project",
    "slug": "GITHUB_CREATE_AN_ORGANIZATION_PROJECT",
    "input_parameters": {
      "description": "Request to create a new classic project board in an organization.",
      "properties": {
        "body": {
          "description": "Body or description for the new project.",
          "examples": [
            "Tasks and milestones for the Q1 roadmap.",
            "Detailed plan and discussion for the website redesign project."
          ],
          "title": "Body",
          "type": "string"
        },
        "name": {
          "description": "Name for the new project.",
          "examples": ["Q1 Roadmap", "Website Redesign"],
          "title": "Name",
          "type": "string"
        },
        "org": {
          "description": "Name of the organization (not case-sensitive).",
          "examples": ["octocat", "github"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org", "name"],
      "title": "CreateAnOrganizationProjectRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details of the newly created classic organization project.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAnOrganizationProjectResponseWrapper",
      "type": "object"
    },
    "description": "Creates a new classic project board within a specified github organization.",
    "tags": ["openWorldHint", "Organization Management", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create an organization repository",
    "slug": "GITHUB_CREATE_AN_ORGANIZATION_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for creating a new repository in a GitHub organization.",
      "properties": {
        "allow_auto_merge": {
          "default": false,
          "description": "Allow auto-merge on pull requests.",
          "title": "Allow Auto Merge",
          "type": "boolean"
        },
        "allow_merge_commit": {
          "default": true,
          "description": "Allow merging pull requests with a merge commit.",
          "title": "Allow Merge Commit",
          "type": "boolean"
        },
        "allow_rebase_merge": {
          "default": true,
          "description": "Allow rebase-merging pull requests.",
          "title": "Allow Rebase Merge",
          "type": "boolean"
        },
        "allow_squash_merge": {
          "default": true,
          "description": "Allow squash-merging pull requests.",
          "title": "Allow Squash Merge",
          "type": "boolean"
        },
        "auto_init": {
          "default": false,
          "description": "Create an initial commit with an empty README.",
          "title": "Auto Init",
          "type": "boolean"
        },
        "custom_properties": {
          "additionalProperties": true,
          "description": "Custom properties for the repository as a key-value dictionary.",
          "examples": [{ "project_lead": "octocat", "status": "alpha" }],
          "title": "Custom Properties",
          "type": "object"
        },
        "delete_branch_on_merge": {
          "default": false,
          "description": "Automatically delete head branches when pull requests are merged. Requires organization owner privileges if true.",
          "title": "Delete Branch On Merge",
          "type": "boolean"
        },
        "description": {
          "description": "Short description of the repository.",
          "examples": ["A project to demonstrate awesome capabilities."],
          "title": "Description",
          "type": "string"
        },
        "gitignore_template": {
          "description": "Name of the .gitignore template to apply (e.g., \"Python\", \"Node\"). Refer to the [GitHub gitignore template list](https://github.com/github/gitignore).",
          "examples": ["Python"],
          "title": "Gitignore Template",
          "type": "string"
        },
        "has_downloads": {
          "default": true,
          "description": "Enable downloads for this repository (deprecated).",
          "title": "Has Downloads",
          "type": "boolean"
        },
        "has_issues": {
          "default": true,
          "description": "Enable issues for this repository.",
          "title": "Has Issues",
          "type": "boolean"
        },
        "has_projects": {
          "default": true,
          "description": "Enable projects for this repository. Fails if organization has disabled repository projects and this is true.",
          "title": "Has Projects",
          "type": "boolean"
        },
        "has_wiki": {
          "default": true,
          "description": "Enable wiki for this repository.",
          "title": "Has Wiki",
          "type": "boolean"
        },
        "homepage": {
          "description": "URL for the repository's homepage.",
          "examples": ["https://example.com/my-awesome-project"],
          "title": "Homepage",
          "type": "string"
        },
        "is_template": {
          "default": false,
          "description": "Make this repository a template repository.",
          "title": "Is Template",
          "type": "boolean"
        },
        "license_template": {
          "description": "License template keyword (e.g., \"mit\", \"apache-2.0\"). See [GitHub license documentation](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) for options.",
          "examples": ["mit"],
          "title": "License Template",
          "type": "string"
        },
        "merge_commit_message": {
          "description": "Default message for merge commits: 'PR_TITLE', 'PR_BODY', or 'BLANK'.",
          "enum": ["PR_BODY", "PR_TITLE", "BLANK"],
          "examples": ["PR_BODY"],
          "title": "Merge Commit Message",
          "type": "string"
        },
        "merge_commit_title": {
          "description": "Default title for merge commits: 'PR_TITLE' or 'MERGE_MESSAGE'.",
          "enum": ["PR_TITLE", "MERGE_MESSAGE"],
          "examples": ["MERGE_MESSAGE"],
          "title": "Merge Commit Title",
          "type": "string"
        },
        "name": {
          "description": "Name of the new repository.",
          "examples": ["new-awesome-project"],
          "title": "Name",
          "type": "string"
        },
        "org": {
          "description": "Name of the organization where the repository will be created (case-insensitive).",
          "examples": ["MyGitHubOrg"],
          "title": "Org",
          "type": "string"
        },
        "private": {
          "default": false,
          "description": "Whether the repository is private. `visibility` takes precedence if both are set.",
          "title": "Private",
          "type": "boolean"
        },
        "squash_merge_commit_message": {
          "description": "Default message for squash merge commits: 'PR_BODY', 'COMMIT_MESSAGES', or 'BLANK'.",
          "enum": ["PR_BODY", "COMMIT_MESSAGES", "BLANK"],
          "examples": ["PR_BODY"],
          "title": "Squash Merge Commit Message",
          "type": "string"
        },
        "squash_merge_commit_title": {
          "description": "Default title for squash merge commits: 'PR_TITLE' or 'COMMIT_OR_PR_TITLE'.",
          "enum": ["PR_TITLE", "COMMIT_OR_PR_TITLE"],
          "examples": ["PR_TITLE"],
          "title": "Squash Merge Commit Title",
          "type": "string"
        },
        "team_id": {
          "description": "ID of the team to grant access to this repository within the organization.",
          "examples": [12345],
          "title": "Team Id",
          "type": "integer"
        },
        "use_squash_pr_title_as_default": {
          "default": false,
          "description": "DEPRECATED: Use `squash_merge_commit_title`. Default to pull request title for squash-merge commits.",
          "title": "Use Squash Pr Title As Default",
          "type": "boolean"
        },
        "visibility": {
          "description": "Repository visibility: 'public' (visible to everyone) or 'private' (visible to collaborators).",
          "enum": ["public", "private"],
          "examples": ["public"],
          "title": "Visibility",
          "type": "string"
        }
      },
      "required": ["org", "name"],
      "title": "CreateAnOrganizationRepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the full representation of the newly created repository.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAnOrganizationRepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Creates a new repository within a specified github organization, with options for detailed configuration including visibility, features, merge strategies, initial commit, and templates.",
    "tags": ["important", "openWorldHint", "Repository Management"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create an organization variable",
    "slug": "GITHUB_CREATE_AN_ORGANIZATION_VARIABLE",
    "input_parameters": {
      "description": "Request schema for `CreateAnOrganizationVariable`",
      "properties": {
        "name": {
          "description": "The name of the organization variable. Must be unique at the organization level.",
          "examples": ["CI_TOKEN", "DEPLOY_SERVER_URL"],
          "title": "Name",
          "type": "string"
        },
        "org": {
          "description": "The name of the GitHub organization. This name is not case-sensitive.",
          "examples": ["github", "my-organization"],
          "title": "Org",
          "type": "string"
        },
        "selected_repository_ids": {
          "description": "A list of repository integer IDs that can access this organization variable. This field is required and only applicable when `visibility` is set to 'selected'.",
          "examples": ["[1296269, 1296270]", "[98765]"],
          "items": { "properties": {}, "type": "integer" },
          "title": "Selected Repository Ids",
          "type": "array"
        },
        "value": {
          "description": "The value of the organization variable.",
          "examples": ["your_secret_token_value", "https://api.staging.example.com"],
          "title": "Value",
          "type": "string"
        },
        "visibility": {
          "description": "Controls which repositories in the organization can access the variable. Accepted values are 'all' (all repositories), 'private' (only private repositories), or 'selected' (specific repositories designated by `selected_repository_ids`).",
          "enum": ["all", "private", "selected"],
          "examples": ["all", "private", "selected"],
          "title": "Visibility",
          "type": "string"
        }
      },
      "required": ["org", "name", "value", "visibility"],
      "title": "CreateAnOrganizationVariableRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty dictionary indicating the successful creation of the organization variable, as the GitHub API typically returns an empty body (201 Created) for this operation.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAnOrganizationVariableResponseWrapper",
      "type": "object"
    },
    "description": "Creates a new, uniquely named github actions variable for an organization, with configurable repository access visibility (all, private, or selected).",
    "tags": ["openWorldHint", "CI/CD", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create an organization webhook",
    "slug": "GITHUB_CREATE_AN_ORGANIZATION_WEBHOOK",
    "input_parameters": {
      "description": "Request schema for `CreateAnOrganizationWebhook`",
      "properties": {
        "active": {
          "default": true,
          "description": "Boolean indicating if the webhook is active. `true` sends notifications, `false` does not. Defaults to `true`.",
          "title": "Active",
          "type": "boolean"
        },
        "config__content__type": {
          "description": "The media type for serializing webhook payloads. Supported: `json`, `form`. GitHub API defaults to `form` if this field is not set or is `None`.",
          "examples": ["json", "form"],
          "title": "Config  Content  Type",
          "type": "string"
        },
        "config__insecure__ssl": {
          "description": "Controls SSL certificate verification for `config_url`. '1' disables verification (not recommended), '0' enables. GitHub API defaults to '0' (verification enabled) if this field is not set or is `None`.",
          "examples": ["0", "1"],
          "title": "Config  Insecure  Ssl",
          "type": "string"
        },
        "config__password": {
          "description": "Password for basic authentication if the webhook endpoint (`config_url`) requires it, corresponding to `config_username`.",
          "examples": ["p@$$wOrd", "securePassword123"],
          "title": "Config  Password",
          "type": "string"
        },
        "config__secret": {
          "description": "Optional secret for generating an HMAC hex digest for payload verification (X-Hub-Signature-256 header). If provided, this is used as the key.",
          "examples": ["s3cr3tT0k3n", "mySup3rS3cur3K3y"],
          "title": "Config  Secret",
          "type": "string"
        },
        "config__url": {
          "description": "The target URL for webhook payload delivery. This URL is a mandatory part of the webhook's `config` object and will receive POST requests for subscribed events.",
          "examples": ["https://example.com/webhook", "https://my-service.com/github-events"],
          "format": "uri",
          "title": "Config  Url",
          "type": "string"
        },
        "config__username": {
          "description": "Username for basic authentication if the webhook endpoint (`config_url`) requires it. Use only if your endpoint is protected by basic auth.",
          "examples": ["webhook-user", "admin"],
          "title": "Config  Username",
          "type": "string"
        },
        "events": {
          "default": ["push"],
          "description": "List of event names to trigger the webhook. Use `['*']` for all events. Defaults to `['push']` if not specified. See GitHub docs for event types.",
          "examples": [["push", "issues"], ["*"], ["release"], ["check_run"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Events",
          "type": "array"
        },
        "name": {
          "description": "The name of the webhook. Must be \"web\" for organization webhooks.",
          "title": "Name",
          "type": "string"
        },
        "org": {
          "description": "The name of the GitHub organization. This name is not case-sensitive.",
          "examples": ["my-cool-org", "GitHub"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org", "name"],
      "title": "CreateAnOrganizationWebhookRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the complete JSON representation of the created webhook object as returned by the GitHub API.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAnOrganizationWebhookResponseWrapper",
      "type": "object"
    },
    "description": "Creates a webhook for a github organization to deliver event notifications to a configured url.",
    "tags": ["openWorldHint", "Organization Management", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a blob",
    "slug": "GITHUB_CREATE_A_BLOB",
    "input_parameters": {
      "description": "Defines the request parameters for creating a new Git blob.",
      "properties": {
        "content": {
          "description": "The content to be stored in the new blob.",
          "examples": ["This is the raw content of the file.", "SGVsbG8gV29ybGQ=\\n"],
          "title": "Content",
          "type": "string"
        },
        "encoding": {
          "default": "utf-8",
          "description": "The encoding for the 'content'; \"utf-8\" or \"base64\".",
          "examples": ["utf-8", "base64"],
          "title": "Encoding",
          "type": "string"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the '.git' extension. This field is not case-sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "content"],
      "title": "CreateABlobRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateABlobResponseWrapper",
      "type": "object"
    },
    "description": "Creates a git blob in a repository, requiring content and encoding ('utf-8' or 'base64').",
    "tags": ["openWorldHint", "Repository Management", "important"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a check run",
    "slug": "GITHUB_CREATE_A_CHECK_RUN",
    "input_parameters": {
      "description": "Request schema to create a new check run on GitHub.",
      "properties": {
        "actions": {
          "description": "A list of up to three action objects defining interactive buttons displayed on GitHub after the check run completes. Each object needs a `label` (button text), `identifier` (unique ID for the action), and `description` (tooltip). Clicking a button sends a `check_run.requested_action` webhook to your app.",
          "items": { "additionalProperties": true, "properties": {}, "type": "object" },
          "title": "Actions",
          "type": "array"
        },
        "completed_at": {
          "description": "The ISO 8601 timestamp (YYYY-MM-DDTHH:MM:SSZ) indicating when the check run finished. **Required if `status` is `completed`**.",
          "examples": ["2018-05-04T01:14:52Z"],
          "format": "date-time",
          "title": "Completed At",
          "type": "string"
        },
        "conclusion": {
          "description": "**Required if `completed_at` is provided or if `status` is `completed`**. Specifies the final outcome of the check (e.g., 'success', 'failure'). Note: Setting `conclusion` automatically sets `status` to `completed`. GitHub alone can set a conclusion to `stale`.",
          "enum": [
            "action_required",
            "cancelled",
            "failure",
            "neutral",
            "success",
            "skipped",
            "stale",
            "timed_out"
          ],
          "title": "Conclusion",
          "type": "string"
        },
        "details_url": {
          "description": "The URL of the integrator's site providing full details of the check. If omitted, the GitHub App's homepage is used. This URL is available from the check's UI.",
          "examples": ["https://example.com/build/status"],
          "title": "Details Url",
          "type": "string"
        },
        "external_id": {
          "description": "A unique identifier for the check run on the integrator's system. This helps in correlating check runs between GitHub and the external system.",
          "examples": ["42"],
          "title": "External Id",
          "type": "string"
        },
        "head_sha": {
          "description": "The SHA of the commit for which the check run is created.",
          "examples": ["009b8392b1d19195ab1750317ce01ed503788888"],
          "title": "Head Sha",
          "type": "string"
        },
        "name": {
          "description": "The name of the check to be displayed in the GitHub UI. For example, \"Code Coverage\" or \"Linter\".",
          "examples": ["mighty_linter"],
          "title": "Name",
          "type": "string"
        },
        "output__annotations": {
          "description": "A list of annotation objects detailing issues at specific code locations. Annotations are visible in the 'Checks' and 'Files changed' tabs of a pull request. Each annotation object should specify `path`, `start_line`, `end_line`, `annotation_level` ('notice', 'warning', or 'failure'), and `message`. Optional fields include `start_column`, `end_column`, `title`, and `raw_details`. Up to 50 annotations per API request; for more, use subsequent 'Update a check run' calls. GitHub Actions limits are 10 warnings and 10 errors per step.",
          "items": { "additionalProperties": true, "properties": {}, "type": "object" },
          "title": "Output  Annotations",
          "type": "array"
        },
        "output__images": {
          "description": "A list of image objects to display in the check run's output in the GitHub UI. Each object requires `alt` (alternative text), `image_url` (URL of the image), and an optional `caption`.",
          "items": { "additionalProperties": true, "properties": {}, "type": "object" },
          "title": "Output  Images",
          "type": "array"
        },
        "output__summary": {
          "description": "A summary of the check run's findings. Supports Markdown. **Maximum length**: 65,535 characters.",
          "examples": ["Found 2 critical issues and 5 warnings."],
          "title": "Output  Summary",
          "type": "string"
        },
        "output__text": {
          "description": "Detailed textual information about the check run's output. Supports Markdown. **Maximum length**: 65,535 characters.",
          "title": "Output  Text",
          "type": "string"
        },
        "output__title": {
          "description": "A descriptive title for the output of the check run, displayed in the GitHub UI. For example, 'Linter Scan Summary'.",
          "examples": ["Linter Scan Summary"],
          "title": "Output  Title",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "started_at": {
          "description": "The ISO 8601 timestamp (YYYY-MM-DDTHH:MM:SSZ) indicating when the check run began.",
          "examples": ["2018-05-04T01:14:52Z"],
          "format": "date-time",
          "title": "Started At",
          "type": "string"
        },
        "status": {
          "default": "queued",
          "description": "The current status of the check run. Only GitHub Actions can set `status` to `waiting`, `pending`, or `requested`.",
          "enum": ["queued", "in_progress", "completed", "waiting", "requested", "pending"],
          "title": "Status",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "name", "head_sha"],
      "title": "CreateACheckRunRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the full check run object as created by the API. This includes fields like `id`, `node_id`, `head_sha`, `status`, `conclusion`, `name`, `details_url`, `external_id`, `started_at`, `completed_at`, `output` (containing summary, text, annotations, images), `app` (information about the GitHub App that created the check run), and `pull_requests` (an array of pull requests associated with the commit).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateACheckRunResponseWrapper",
      "type": "object"
    },
    "description": "Creates a new check run for a specific commit in a repository, used by external services to report status, detailed feedback, annotations, and images directly within the github ui.",
    "tags": ["checks", "openWorldHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a check suite",
    "slug": "GITHUB_CREATE_A_CHECK_SUITE",
    "input_parameters": {
      "description": "Request schema for `CreateACheckSuite`",
      "properties": {
        "head_sha": {
          "description": "SHA of the commit for which to create the check suite, typically the head commit of a branch.",
          "examples": ["7638417db6d59f3c431d3e1f261cc637155684cd"],
          "title": "Head Sha",
          "type": "string"
        },
        "owner": {
          "description": "Account owner of the repository (case-insensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension (case-insensitive).",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "head_sha"],
      "title": "CreateACheckSuiteRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details of the newly created check suite.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateACheckSuiteResponseWrapper",
      "type": "object"
    },
    "description": "Creates a new check suite for a specific commit (`head sha`) in an original repository (not a fork); github dispatches a `check suite` webhook event with the `requested` action upon success.",
    "tags": ["checks", "openWorldHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a codespace for the authenticated user",
    "slug": "GITHUB_CREATE_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request body for POST /user/codespaces.\n\nProvide either:\n- repository_id (int) + ref (string branch/commit/PR ref), or\n- pull_request object with pull_request_number (int) and repository_id (int).\n\nOther optional fields supported by the API (machine, location, devcontainer_path, etc.) can be added later if needed.",
      "properties": {
        "pull_request": {
          "additionalProperties": false,
          "default": null,
          "nullable": true,
          "properties": {
            "pull_request_number": {
              "description": "Pull request number.",
              "title": "Pull Request Number",
              "type": "integer"
            },
            "repository_id": {
              "description": "Repository ID for the pull request.",
              "title": "Repository Id",
              "type": "integer"
            }
          },
          "required": ["pull_request_number", "repository_id"],
          "title": "PullRequestPayload",
          "type": "object"
        },
        "ref": {
          "default": null,
          "description": "Git ref (branch, tag, or commit SHA) to use for the codespace.",
          "examples": ["main", "refs/heads/main", "a1b2c3d"],
          "nullable": true,
          "title": "Ref",
          "type": "string"
        },
        "repository_id": {
          "default": null,
          "description": "ID of the repository to create the codespace from.",
          "nullable": true,
          "title": "Repository Id",
          "type": "integer"
        }
      },
      "title": "CreateACodespaceForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateACodespaceForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Creates a github codespace for the authenticated user, requiring a json request body with either `repository id` (integer) or a `pull request` object (containing `pull request number` (integer) and `repository id` (integer)).",
    "tags": ["codespaces", "openWorldHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a codespace from a pull request",
    "slug": "GITHUB_CREATE_A_CODESPACE_FROM_A_PULL_REQUEST",
    "input_parameters": {
      "description": "Request to create a GitHub Codespace from a pull request, specifying its configuration.",
      "properties": {
        "client_ip": {
          "description": "Client's public IP address for location auto-detection if proxied and `geo` or `location` are not specified.",
          "examples": ["192.0.2.1"],
          "title": "Client Ip",
          "type": "string"
        },
        "devcontainer_path": {
          "description": "Path to a `devcontainer.json` file in the repository that defines the development environment.",
          "examples": [".devcontainer/devcontainer.json", "devcontainer.json"],
          "title": "Devcontainer Path",
          "type": "string"
        },
        "display_name": {
          "description": "Custom name for the codespace.",
          "examples": ["My Feature Branch Codespace"],
          "title": "Display Name",
          "type": "string"
        },
        "geo": {
          "description": "Geographic area for this codespace (e.g., `UsEast`, `EuropeWest`); supersedes `location`. If unspecified, typically IP-derived.",
          "enum": ["EuropeWest", "SoutheastAsia", "UsEast", "UsWest"],
          "examples": ["UsEast", "EuropeWest", "SoutheastAsia"],
          "title": "Geo",
          "type": "string"
        },
        "idle_timeout_minutes": {
          "description": "Minutes of inactivity after which the codespace is automatically stopped. A default timeout applies if unspecified.",
          "examples": [30, 60],
          "title": "Idle Timeout Minutes",
          "type": "integer"
        },
        "location": {
          "description": "Requested geographic location (e.g., `EastUs`, `WestEurope`). This parameter is deprecated; use `geo`. If unspecified, location may be IP-derived.",
          "examples": ["EastUs", "WestEurope"],
          "title": "Location",
          "type": "string"
        },
        "machine": {
          "description": "Machine type for this codespace (e.g., `standardLinux`). Varies by CPU, RAM, storage. Uses default if unspecified.",
          "examples": [
            "standardLinux",
            "standardLinux8gb",
            "standardLinux16gb",
            "standardLinux32gb"
          ],
          "title": "Machine",
          "type": "string"
        },
        "multi_repo_permissions_opt_out": {
          "description": "Set to `true` to prevent GitHub from requesting additional repository permissions defined in `devcontainer.json`. Defaults to `false` (permissions will be requested).",
          "title": "Multi Repo Permissions Opt Out",
          "type": "boolean"
        },
        "owner": {
          "description": "The username of the account that owns the repository. This is case-insensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "pull_number": {
          "description": "The unique number identifying the pull request.",
          "examples": [1347],
          "title": "Pull Number",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This is case-insensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        },
        "retention_period_minutes": {
          "description": "Retention period in minutes (0-43200, i.e., up to 30 days) for a stopped codespace. 0 means immediate deletion.",
          "examples": [1440, 43200],
          "title": "Retention Period Minutes",
          "type": "integer"
        },
        "working_directory": {
          "description": "Working directory for the codespace upon opening. Defaults to the repository root if unspecified.",
          "examples": ["/workspaces/my-project/src"],
          "title": "Working Directory",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "pull_number"],
      "title": "CreateACodespaceFromAPullRequestRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Full details of the created codespace.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateACodespaceFromAPullRequestResponseWrapper",
      "type": "object"
    },
    "description": "Creates a github codespace for an open pull request in a codespaces-enabled repository, with options to customize its configuration.",
    "tags": ["codespaces", "openWorldHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a codespace in a repository",
    "slug": "GITHUB_CREATE_A_CODESPACE_IN_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for `CreateACodespaceInARepository`",
      "properties": {
        "client_ip": {
          "description": "IP address to infer preferred region if `location` and `geo` are unspecified; useful for proxied requests.",
          "examples": ["192.168.1.100"],
          "title": "Client Ip",
          "type": "string"
        },
        "devcontainer_path": {
          "description": "Path to a `devcontainer.json` in the repository; uses `.devcontainer/devcontainer.json` or `devcontainer.json` at root if not specified.",
          "examples": [".devcontainer/my-custom-devcontainer.json"],
          "title": "Devcontainer Path",
          "type": "string"
        },
        "display_name": {
          "description": "Custom display name for the codespace; a default name is generated if not provided.",
          "examples": ["My Development Codespace"],
          "title": "Display Name",
          "type": "string"
        },
        "geo": {
          "description": "Geographic area for the codespace, replacing `location`; determined by user IP if not specified.",
          "enum": ["EuropeWest", "SoutheastAsia", "UsEast", "UsWest"],
          "examples": ["EuropeWest", "SoutheastAsia", "UsEast", "UsWest"],
          "title": "Geo",
          "type": "string"
        },
        "idle_timeout_minutes": {
          "description": "Minutes of inactivity before codespace auto-stops; uses a default timeout if not specified.",
          "examples": [30, 60],
          "title": "Idle Timeout Minutes",
          "type": "integer"
        },
        "location": {
          "description": "Requested AWS region (best-effort, may differ); determined by user IP if not provided. Deprecated: use `geo`.",
          "examples": ["EastUs", "WestUs", "WestEurope", "SoutheastAsia"],
          "title": "Location",
          "type": "string"
        },
        "machine": {
          "description": "Machine type (CPU, RAM, storage). See 'List available machine types for a repository' action for options; uses a default type if not specified.",
          "examples": ["standardLinux", "premiumLinux"],
          "title": "Machine",
          "type": "string"
        },
        "multi_repo_permissions_opt_out": {
          "description": "If `true`, opts out of granting multi-repository permissions from `devcontainer.json`. If unspecified or `false`, permissions are granted if requested.",
          "examples": [true, false],
          "title": "Multi Repo Permissions Opt Out",
          "type": "boolean"
        },
        "owner": {
          "description": "Username or organization name owning the repository; not case-sensitive.",
          "examples": ["octocat", "Microsoft"],
          "title": "Owner",
          "type": "string"
        },
        "ref": {
          "description": "Git reference (e.g., branch name) for the codespace; uses repository's default branch if not provided.",
          "examples": ["main", "feature-branch-name"],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension; not case-sensitive.",
          "examples": ["Spoon-Knife", "vscode"],
          "title": "Repo",
          "type": "string"
        },
        "retention_period_minutes": {
          "description": "Minutes an idle (stopped) codespace is retained before auto-deletion (0-43200, i.e., up to 30 days); uses a default period if not specified.",
          "examples": [1440, 43200],
          "title": "Retention Period Minutes",
          "type": "integer"
        },
        "working_directory": {
          "description": "Directory to use as default when codespace opens; uses repository root if not specified.",
          "examples": ["/projects/my-app"],
          "title": "Working Directory",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "CreateACodespaceInARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateACodespaceInARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Creates a github codespace for the authenticated user in a specified repository, which must be accessible and use a valid `devcontainer.json` if `devcontainer path` is specified.",
    "tags": ["codespaces", "openWorldHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a commit",
    "slug": "GITHUB_CREATE_A_COMMIT",
    "input_parameters": {
      "description": "Defines the parameters to create a new commit in a GitHub repository.",
      "properties": {
        "author__date": {
          "description": "Timestamp (ISO 8601: `YYYY-MM-DDTHH:MM:SSZ`) when the commit was authored.",
          "examples": ["2024-01-15T10:30:00Z"],
          "format": "date-time",
          "title": "Author  Date",
          "type": "string"
        },
        "author__email": {
          "description": "Email of the commit's author. Defaults to authenticated user if not provided.",
          "examples": ["mona@example.com"],
          "title": "Author  Email",
          "type": "string"
        },
        "author__name": {
          "description": "Name of the commit's author. Defaults to authenticated user if not provided.",
          "examples": ["Mona Lisa Octocat"],
          "title": "Author  Name",
          "type": "string"
        },
        "committer__date": {
          "description": "Timestamp (ISO 8601: `YYYY-MM-DDTHH:MM:SSZ`) when the commit was committed. Defaults to `author_date` or current time.",
          "examples": ["2024-01-15T10:35:00Z"],
          "format": "date-time",
          "title": "Committer  Date",
          "type": "string"
        },
        "committer__email": {
          "description": "Email of the committer. Defaults to author's email or authenticated user if not provided.",
          "examples": ["octocat@example.com"],
          "title": "Committer  Email",
          "type": "string"
        },
        "committer__name": {
          "description": "Name of the committer. Defaults to author's name or authenticated user if not provided.",
          "examples": ["The Octocat"],
          "title": "Committer  Name",
          "type": "string"
        },
        "message": {
          "description": "The commit message.",
          "examples": ["feat: implement user authentication endpoint"],
          "title": "Message",
          "type": "string"
        },
        "owner": {
          "description": "Account owner of the repository (case-insensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "parents": {
          "description": "SHAs of parent commits; all must exist in the repository. Omit or provide an empty list for a root commit.",
          "examples": [
            "[\"1a2b3c4d5e6f7g8h9i0jabcdef1234567890\"]",
            "[\"parent_sha_main\", \"parent_sha_feature_branch\"]"
          ],
          "items": { "properties": {}, "type": "string" },
          "title": "Parents",
          "type": "array"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (case-insensitive).",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        },
        "signature": {
          "description": "ASCII-armored detached PGP signature over the commit data. GitHub adds this to the `gpgsig` header if provided.",
          "examples": ["-----BEGIN PGP SIGNATURE-----\\n...\\n-----END PGP SIGNATURE-----"],
          "title": "Signature",
          "type": "string"
        },
        "tree": {
          "description": "SHA of the tree object for this commit; must exist in the repository.",
          "examples": ["9c1a209e10072fe99393945673ace821a4827669"],
          "title": "Tree",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "message", "tree"],
      "title": "CreateACommitRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details of the created commit, including SHA, URL, author/committer info, tree, message, parents, and verification status.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateACommitResponseWrapper",
      "type": "object"
    },
    "description": "Creates a new commit in a github repository; the `tree` sha and any `parents` shas must already exist in the repository.",
    "tags": ["git", "openWorldHint", "important"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a commit comment",
    "slug": "GITHUB_CREATE_A_COMMIT_COMMENT",
    "input_parameters": {
      "description": "Request to create a comment on a specific commit or a line within a file's diff in a commit.",
      "properties": {
        "body": {
          "description": "The text content of the comment.",
          "examples": ["This is a great commit!", "LGTM :+1:"],
          "title": "Body",
          "type": "string"
        },
        "commit_sha": {
          "description": "The SHA identifier of the commit to comment on.",
          "examples": ["a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0"],
          "title": "Commit Sha",
          "type": "string"
        },
        "line": {
          "description": "**Deprecated:** Use `position` instead. Line number in the file to comment on. `position` takes precedence if both are provided.",
          "examples": ["5", "23"],
          "title": "Line",
          "type": "integer"
        },
        "owner": {
          "description": "The username or organization name that owns the repository.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "path": {
          "description": "Relative path of the file to comment on. If specified, `position` is also required.",
          "examples": ["src/main.py", "docs/README.md"],
          "title": "Path",
          "type": "string"
        },
        "position": {
          "description": "Line number in the diff's patch to comment on, relative to the commit's changes. Required if `path` is specified.",
          "examples": ["1", "15"],
          "title": "Position",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension.",
          "examples": ["Spoon-Knife", "my-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "commit_sha", "body"],
      "title": "CreateACommitCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Full representation of the newly created commit comment.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateACommitCommentResponseWrapper",
      "type": "object"
    },
    "description": "Creates a comment on a specific commit, or on a specific line if `path` and `position` are provided.",
    "tags": ["openWorldHint", "repos"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a commit status",
    "slug": "GITHUB_CREATE_A_COMMIT_STATUS",
    "input_parameters": {
      "description": "Request schema for `CreateACommitStatus`",
      "properties": {
        "context": {
          "default": "default",
          "description": "Label to differentiate this status from other systems (e.g., 'ci/jenkins'); case-insensitive.",
          "examples": ["ci/jenkins", "linter/eslint", "default"],
          "title": "Context",
          "type": "string"
        },
        "description": {
          "description": "Human-readable description of the status, displayed in GitHub UI.",
          "examples": [
            "Build successful",
            "Tests passed with 0 failures",
            "Deployment to staging failed"
          ],
          "title": "Description",
          "type": "string"
        },
        "owner": {
          "description": "Username or organization name of the repository owner (case-insensitive).",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension (case-insensitive).",
          "examples": ["Hello-World", "Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        },
        "sha": {
          "description": "SHA hash of the commit.",
          "examples": [
            "c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc",
            "6dcb09b5b57875f334f61aebed695e2e4193db5e"
          ],
          "title": "Sha",
          "type": "string"
        },
        "state": {
          "description": "State of the commit status, indicating check outcome or phase.",
          "enum": ["error", "failure", "pending", "success"],
          "examples": ["error", "failure", "pending", "success"],
          "title": "State",
          "type": "string"
        },
        "target_url": {
          "description": "URL linking to the source of the status (e.g., CI build log), displayed in GitHub UI.",
          "examples": [
            "http://ci.example.com/user/repo/build/sha",
            "https://example.com/deployment/status/123"
          ],
          "title": "Target Url",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "sha", "state"],
      "title": "CreateACommitStatusRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateACommitStatusResponseWrapper",
      "type": "object"
    },
    "description": "Sets a commit's status (e.g., error, failure, pending, success from ci/cd) for a given sha; max 1000 statuses per sha/context.",
    "tags": ["openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a custom organization role",
    "slug": "GITHUB_CREATE_A_CUSTOM_ORGANIZATION_ROLE",
    "input_parameters": {
      "description": "Request to create a custom organization role.",
      "properties": {
        "description": {
          "description": "Optional short description of the custom role's purpose or permissions.",
          "examples": [
            "Grants read-only access to organization settings and member audit logs.",
            "Allows managing repository security advisories."
          ],
          "title": "Description",
          "type": "string"
        },
        "name": {
          "description": "Unique name for the custom role.",
          "examples": ["Triage Access", "Security Auditor", "Release Manager"],
          "title": "Name",
          "type": "string"
        },
        "org": {
          "description": "Name of the GitHub organization (case-insensitive) where the custom role will be created.",
          "examples": ["github", "my-company-org"],
          "title": "Org",
          "type": "string"
        },
        "permissions": {
          "description": "List of permission strings defining actions granted by this role; see GitHub docs for available permissions.",
          "examples": [
            "read:org",
            "manage_runners:org",
            "create_repository",
            "administer_repository",
            "delete_issues"
          ],
          "items": { "properties": {}, "type": "string" },
          "title": "Permissions",
          "type": "array"
        }
      },
      "required": ["org", "name", "permissions"],
      "title": "CreateACustomOrganizationRoleRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details of the created custom role, including `id`, `name`, `description`, `permissions`, and `organization`.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateACustomOrganizationRoleResponseWrapper",
      "type": "object"
    },
    "description": "Creates a custom role with defined permissions within a github organization.",
    "tags": ["openWorldHint", "orgs", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a deployment",
    "slug": "GITHUB_CREATE_A_DEPLOYMENT",
    "input_parameters": {
      "description": "Request schema for `CreateADeployment`",
      "properties": {
        "auto_merge": {
          "default": true,
          "description": "Attempts to automatically merge the default branch into the requested ref if the ref is behind the default branch. Set to `false` to disable.",
          "title": "Auto Merge",
          "type": "boolean"
        },
        "description": {
          "description": "A short description of the deployment. Maximum length of 1000 characters.",
          "examples": ["Deploying new feature X to staging.", "Hotfix for critical bug #123."],
          "title": "Description",
          "type": "string"
        },
        "environment": {
          "default": "production",
          "description": "Name for the target deployment environment (e.g., `production`, `staging`, `qa`).",
          "examples": ["production", "staging", "develop", "qa"],
          "title": "Environment",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case-sensitive.",
          "title": "Owner",
          "type": "string"
        },
        "payload": {
          "description": "A JSON string payload providing additional information that a deployment system might need, customizable based on the deployment process.",
          "examples": [
            "'''{\"deploy_tool\": \"custom_script\", \"target_environment\": \"server_alpha\"}'''",
            "'''{\"user_initiating\": \"admin_user\"}'''"
          ],
          "title": "Payload",
          "type": "string"
        },
        "production_environment": {
          "description": "Specifies if the given environment is one that end-users directly interact with.",
          "title": "Production Environment",
          "type": "boolean"
        },
        "ref": {
          "description": "The ref to deploy. This can be a branch name, a tag name, or a commit SHA.",
          "examples": ["main", "v1.2.3", "c0ff335h4c0d3f0r3x4mpl3"],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive. ",
          "title": "Repo",
          "type": "string"
        },
        "required_contexts": {
          "description": "A list of status check contexts to verify against commit status checks before creating the deployment. If omitted or `null`, GitHub verifies all unique contexts. Pass an empty list `[]` to bypass all checks.",
          "examples": [["continuous-integration/jenkins", "security/snyk"], []],
          "items": { "properties": {}, "type": "string" },
          "title": "Required Contexts",
          "type": "array"
        },
        "task": {
          "default": "deploy",
          "description": "Specifies a task to execute, e.g., `deploy` or `deploy:migrations`.",
          "examples": ["deploy", "deploy:migrations", "build_and_deploy"],
          "title": "Task",
          "type": "string"
        },
        "transient_environment": {
          "default": false,
          "description": "Specifies if the given environment is specific to this deployment and will no longer exist at some point in the future (e.g., a staging environment for a pull request). Set to `true` if the environment is temporary.",
          "title": "Transient Environment",
          "type": "boolean"
        }
      },
      "required": ["owner", "repo", "ref"],
      "title": "CreateADeploymentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the created deployment object as returned by the GitHub API.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateADeploymentResponseWrapper",
      "type": "object"
    },
    "description": "Creates a github deployment for an existing repository, targeting a specific ref (branch, tag, or sha) that must also exist within the repository.",
    "tags": ["openWorldHint", "repos"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a deployment branch policy",
    "slug": "GITHUB_CREATE_A_DEPLOYMENT_BRANCH_POLICY",
    "input_parameters": {
      "description": "Request schema for `CreateADeploymentBranchPolicy`",
      "properties": {
        "environment_name": {
          "description": "Name of the target environment; URL-encode special characters (e.g., `/` as `%2F`).",
          "examples": ["production", "staging%2Ffrontend", "development_v2"],
          "title": "Environment Name",
          "type": "string"
        },
        "name": {
          "description": "Name pattern for deployable branches/tags (Ruby File.fnmatch syntax; `*` won't match `/`, e.g., `release/*/*` for `release/feature/login`). Refer to [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).",
          "examples": ["main", "releases/*", "feature/user-*", "v*.*.*"],
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "description": "Account owner of the repository (not case sensitive).",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (not case sensitive).",
          "examples": ["hello-world", "my-app-repository"],
          "title": "Repo",
          "type": "string"
        },
        "type": {
          "description": "Whether the policy targets a Git branch or a tag.",
          "enum": ["branch", "tag"],
          "examples": ["branch", "tag"],
          "title": "Type",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "environment_name", "name"],
      "title": "CreateADeploymentBranchPolicyRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details of the created deployment branch policy.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateADeploymentBranchPolicyResponseWrapper",
      "type": "object"
    },
    "description": "Creates a deployment branch or tag policy for an existing environment in a github repository, using a ruby file.fnmatch pattern (where `*` doesn't match `/`) to specify which branches or tags are deployable.",
    "tags": ["openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a deployment status",
    "slug": "GITHUB_CREATE_A_DEPLOYMENT_STATUS",
    "input_parameters": {
      "description": "Request schema for `CreateADeploymentStatus`",
      "properties": {
        "auto_inactive": {
          "description": "If true, sets prior successful, non-transient, non-production deployments in the same repository and environment to `inactive`.",
          "examples": ["true", "false"],
          "title": "Auto Inactive",
          "type": "boolean"
        },
        "deployment_id": {
          "description": "The unique identifier of the deployment for which to create a status.",
          "examples": [12345],
          "title": "Deployment Id",
          "type": "integer"
        },
        "description": {
          "description": "Short description of the status (max 140 characters).",
          "examples": ["Deployment to staging completed successfully."],
          "title": "Description",
          "type": "string"
        },
        "environment": {
          "description": "Name for the target deployment environment (e.g., `production`, `staging`). If unset, uses environment from previous status or deployment.",
          "examples": ["production", "staging"],
          "title": "Environment",
          "type": "string"
        },
        "environment_url": {
          "description": "URL for accessing the target deployment environment.",
          "examples": ["https://myapp-staging.example.com"],
          "title": "Environment Url",
          "type": "string"
        },
        "log_url": {
          "description": "URL for deployment output. Preferred over `target_url`; setting this also sets `target_url` to the same value.",
          "examples": ["https://ci.example.com/job/my-app/15/console"],
          "title": "Log Url",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        },
        "state": {
          "description": "State of the status. Setting a transient deployment to `inactive` shows it as `destroyed` in GitHub.",
          "enum": ["error", "failure", "inactive", "in_progress", "queued", "pending", "success"],
          "examples": ["success", "pending", "failure"],
          "title": "State",
          "type": "string"
        },
        "target_url": {
          "description": "URL for deployment status updates or output. `log_url` is generally preferred.",
          "examples": ["https://example.com/deployment/output/123"],
          "title": "Target Url",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "deployment_id", "state"],
      "title": "CreateADeploymentStatusRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateADeploymentStatusResponseWrapper",
      "type": "object"
    },
    "description": "Creates a status for an existing deployment, updating its operational state, associated urls, and description.",
    "tags": ["openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a deploy key",
    "slug": "GITHUB_CREATE_A_DEPLOY_KEY",
    "input_parameters": {
      "description": "Request schema for creating a deploy key, which is an SSH key granting access to a single repository.",
      "properties": {
        "key": {
          "description": "The full public SSH key. Ensure this is the public key, not the private key.",
          "examples": ["ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC... user@example.com"],
          "title": "Key",
          "type": "string"
        },
        "owner": {
          "description": "The username of the account that owns the repository. This is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "read_only": {
          "description": "If `true`, the deploy key will only have read access. If `false` (default), the key will have read and write access. Write access grants significant privileges.",
          "examples": [true, false],
          "title": "Read Only",
          "type": "boolean"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This is not case sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "title": {
          "description": "A descriptive name for the new deploy key. If not provided, a default name will be generated.",
          "examples": ["Staging Server Key"],
          "title": "Title",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "key"],
      "title": "CreateADeployKeyRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateADeployKeyResponseWrapper",
      "type": "object"
    },
    "description": "Creates a deploy key for a repository; the repository must exist and be accessible, and the provided key must be a valid public ssh key.",
    "tags": ["openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a discussion",
    "slug": "GITHUB_CREATE_A_DISCUSSION",
    "input_parameters": {
      "description": "Parameters to create a new discussion post on a team's page.",
      "properties": {
        "body": {
          "description": "Main content of the discussion post, typically in markdown.",
          "examples": [
            "Let'''s brainstorm ideas for the upcoming hackathon.",
            "Please review the attached document regarding the new API."
          ],
          "title": "Body",
          "type": "string"
        },
        "org": {
          "description": "Name of the organization (not case-sensitive).",
          "examples": ["my-github-org"],
          "title": "Org",
          "type": "string"
        },
        "private": {
          "default": false,
          "description": "If `true`, post is private (visible only to team members, org owners, and team maintainers); `false` makes it public to all organization members.",
          "examples": ["true", "false"],
          "title": "Private",
          "type": "boolean"
        },
        "team_slug": {
          "description": "URL-friendly version of the team name (slug).",
          "examples": ["engineering-team", "marketing-mavens"],
          "title": "Team Slug",
          "type": "string"
        },
        "title": {
          "description": "Title of the discussion post.",
          "examples": ["New Q3 Project Proposals", "Team Offsite Ideas"],
          "title": "Title",
          "type": "string"
        }
      },
      "required": ["org", "team_slug", "title", "body"],
      "title": "CreateADiscussionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details of the created discussion, including ID, title, body, author, creation timestamp, and URLs.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateADiscussionResponseWrapper",
      "type": "object"
    },
    "description": "Creates a new discussion post on a specific team's page within an organization.",
    "tags": ["openWorldHint", "teams", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a discussion comment",
    "slug": "GITHUB_CREATE_A_DISCUSSION_COMMENT",
    "input_parameters": {
      "description": "Request schema for `CreateADiscussionComment`",
      "properties": {
        "body": {
          "description": "The content of the discussion comment. Supports GitHub Flavored Markdown.",
          "examples": ["Great point! I agree with this approach."],
          "title": "Body",
          "type": "string"
        },
        "discussion_number": {
          "description": "The unique number identifying the discussion within the team.",
          "examples": ["42"],
          "title": "Discussion Number",
          "type": "integer"
        },
        "org": {
          "description": "The name of the organization. This name is not case-sensitive.",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "team_slug": {
          "description": "The slug (URL-friendly version) of the team name.",
          "examples": ["justice-league"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug", "discussion_number", "body"],
      "title": "CreateADiscussionCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the details of the created discussion comment.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateADiscussionCommentResponseWrapper",
      "type": "object"
    },
    "description": "Creates a new comment on an existing team discussion within a github organization.",
    "tags": ["openWorldHint", "teams", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a fork",
    "slug": "GITHUB_CREATE_A_FORK",
    "input_parameters": {
      "description": "Request schema for `CreateAFork` to create a new fork of a repository.",
      "properties": {
        "default_branch_only": {
          "description": "Specifies whether to fork only the default branch of the repository. If `True`, only the default branch is copied. If `False` or not specified, all branches are copied.",
          "examples": [true],
          "title": "Default Branch Only",
          "type": "boolean"
        },
        "name": {
          "description": "The desired name for the newly created fork. If not provided, the new fork will have the same name as the original repository.",
          "examples": ["my-awesome-fork"],
          "title": "Name",
          "type": "string"
        },
        "organization": {
          "description": "The GitHub organization name to fork the repository into. If not specified, the fork will be created in the authenticated user's account.",
          "examples": ["my-github-org"],
          "title": "Organization",
          "type": "string"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "CreateAForkRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the full repository object of the newly created fork. This includes details such as `id`, `node_id`, `name`, `full_name`, `html_url`, `clone_url`, `forks_url`, `commits_url`, etc.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAForkResponseWrapper",
      "type": "object"
    },
    "description": "Creates a fork of an accessible repository, optionally into a specific organization, with a new name, or copying only the default branch.",
    "tags": ["openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a gist",
    "slug": "GITHUB_CREATE_A_GIST",
    "input_parameters": {
      "description": "Request schema for `CreateAGist`",
      "properties": {
        "description": {
          "description": "Optional description for the gist.",
          "examples": ["My new Python utility functions", "Example of API usage"],
          "title": "Description",
          "type": "string"
        },
        "files": {
          "additionalProperties": { "additionalProperties": true, "type": "object" },
          "description": "Content for the gist's files. Dictionary where keys are filenames and values are objects, each having a `content` key with the file's raw string data.",
          "examples": [
            "{\"hello_world.txt\": {\"content\": \"Hello, Universe!\"}}",
            "{\"main.py\": {\"content\": \"def main():\\n    print(\\\"Executed\\\")\\nif __name__ == \\\"__main__\\\":\\n    main()\"}, \"README.md\": {\"content\": \"# My Gist\\nThis is a test gist.\"}}"
          ],
          "title": "Files",
          "type": "object"
        },
        "public": {
          "default": false,
          "description": "Indicates if the gist is public (`true`) or secret (`false`).",
          "examples": ["true", "false"],
          "title": "Public",
          "type": "boolean"
        }
      },
      "required": ["files"],
      "title": "CreateAGistRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAGistResponseWrapper",
      "type": "object"
    },
    "description": "Creates a new gist on github with provided files, an optional description, and public/secret visibility.",
    "tags": ["gists", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a gist comment",
    "slug": "GITHUB_CREATE_A_GIST_COMMENT",
    "input_parameters": {
      "description": "Request schema for `CreateAGistComment`",
      "properties": {
        "body": {
          "description": "The text of the comment to be posted on the gist.",
          "examples": ["This is a great Gist!", "Thanks for sharing this code snippet."],
          "title": "Body",
          "type": "string"
        },
        "gist_id": {
          "description": "The unique identifier of the gist.",
          "examples": ["29388372", "61e6f882424a427cb27205a22cd758e9"],
          "title": "Gist Id",
          "type": "string"
        }
      },
      "required": ["gist_id", "body"],
      "title": "CreateAGistCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAGistCommentResponseWrapper",
      "type": "object"
    },
    "description": "Creates a new comment on a specified github gist.",
    "tags": ["gists", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a GitHub App from a manifest",
    "slug": "GITHUB_CREATE_A_GITHUB_APP_FROM_A_MANIFEST",
    "input_parameters": {
      "description": "Request schema for `CreateAGithubAppFromAManifest`",
      "properties": {
        "code": {
          "description": "The temporary code provided by GitHub during the app manifest flow. This code is exchanged for the app's configuration.",
          "examples": ["ghu_1A2b3C4d5E6f7G8h9I0j", "ghu_aSdFgHjKlQwErTyUiOp"],
          "title": "Code",
          "type": "string"
        }
      },
      "required": ["code"],
      "title": "CreateAGithubAppFromAManifestRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the configuration details of the newly created GitHub App. This typically includes `id`, `slug`, `node_id`, `owner`, `name`, `description`, `external_url`, `html_url`, `created_at`, `updated_at`, `permissions`, `events`, `client_id`, `client_secret`, `webhook_secret`, and `pem` (the PEM-encoded private key).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAGithubAppFromAManifestResponseWrapper",
      "type": "object"
    },
    "description": "Use this action to finalize a github app's creation by exchanging the temporary `code` (received as a url parameter during the app manifest setup redirection) for the app's full configuration details.",
    "tags": ["apps", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a github pages deployment",
    "slug": "GITHUB_CREATE_A_GITHUB_PAGES_DEPLOYMENT",
    "input_parameters": {
      "description": "Request schema for creating a GitHub Pages deployment.",
      "properties": {
        "artifact_id": {
          "description": "Identifier of a GitHub Actions artifact (e.g., .zip or .tar) with static assets for deployment. Artifact must belong to the repository. Either this or `artifact_url` is required.",
          "examples": [123456789],
          "title": "Artifact Id",
          "type": "integer"
        },
        "artifact_url": {
          "description": "URL of a GitHub Actions artifact (e.g., .zip or .tar) with static assets for deployment. Artifact must belong to the repository. Either this or `artifact_id` is required.",
          "examples": ["https://pipelines.actions.githubusercontent.com/example/artifact_url"],
          "title": "Artifact Url",
          "type": "string"
        },
        "environment": {
          "default": "github-pages",
          "description": "Target environment for this GitHub Pages deployment. Defaults to `github-pages`.",
          "examples": ["github-pages", "production"],
          "title": "Environment",
          "type": "string"
        },
        "oidc_token": {
          "description": "OIDC token from GitHub Actions for deployment authorization, typically from `secrets.GITHUB_TOKEN` with `id-token: write` permission.",
          "title": "Oidc Token",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository (e.g., a GitHub username or organization name). This field is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "pages_build_version": {
          "default": "GITHUB_SHA",
          "description": "Unique string identifying the build version for this deployment, typically the Git commit SHA. Defaults to `GITHUB_SHA`.",
          "examples": ["GITHUB_SHA", "abc123def456ghi789"],
          "title": "Pages Build Version",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "oidc_token"],
      "title": "CreateAGithubPagesDeploymentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the details of the created GitHub Pages deployment, typically including the deployment URL.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAGithubPagesDeploymentResponseWrapper",
      "type": "object"
    },
    "description": "Creates a github pages deployment for a repository using a specified artifact and oidc token, provided github pages is enabled and the artifact (containing static assets) is accessible.",
    "tags": ["openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a github pages site",
    "slug": "GITHUB_CREATE_A_GITHUB_PAGES_SITE",
    "input_parameters": {
      "description": "Request model for creating or updating a GitHub Pages site configuration.",
      "properties": {
        "build_type": {
          "description": "Build process for the Pages site: 'legacy' (traditional GitHub Pages build) or 'workflow' (GitHub Actions). If omitted and `source_branch` is provided, defaults to 'legacy'. When 'workflow', `source_branch` and `source_path` are ignored.",
          "enum": ["legacy", "workflow"],
          "examples": ["legacy", "workflow"],
          "title": "Build Type",
          "type": "string"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This field is case-insensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the '.git' extension. This field is case-insensitive.",
          "examples": ["Spoon-Knife", "my-docs-site"],
          "title": "Repo",
          "type": "string"
        },
        "source__branch": {
          "description": "The branch for GitHub Pages source (e.g., 'main', 'gh-pages'). Required if `build_type` is 'legacy' or not specified. It is ignored if `build_type` is 'workflow'.",
          "examples": ["main", "gh-pages", "docs"],
          "title": "Source  Branch",
          "type": "string"
        },
        "source__path": {
          "default": "/",
          "description": "Directory within `source_branch` for site source files (e.g., '/' for root, '/docs'). Ignored if `build_type` is 'workflow'.",
          "enum": ["/", "/docs"],
          "examples": ["/", "/docs"],
          "title": "Source  Path",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "CreateAGithubPagesSiteRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The GitHub Pages site configuration details.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAGithubPagesSiteResponseWrapper",
      "type": "object"
    },
    "description": "Configures or updates github pages for a repository, setting build type and source; ensure a pages workflow exists for 'workflow' `build type`, or `source branch` exists for 'legacy' or unspecified `build type`.",
    "tags": ["openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a label",
    "slug": "GITHUB_CREATE_A_LABEL",
    "input_parameters": {
      "description": "Request schema for creating a new label in a GitHub repository.",
      "properties": {
        "color": {
          "description": "The hexadecimal color code for the label (e.g., `f29513`), without the leading `#`. If not provided, GitHub will assign a random color.",
          "examples": ["d73a4a", "0075ca", "cfd3d7"],
          "title": "Color",
          "type": "string"
        },
        "description": {
          "description": "A short description of the label. Maximum 100 characters.",
          "examples": [
            "An issue with a bug.",
            "A new feature or request.",
            "Improvements or additions to documentation."
          ],
          "title": "Description",
          "type": "string"
        },
        "name": {
          "description": "The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \":strawberry:\"). For a full list of available emoji and codes, see the \"[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet).\"",
          "examples": ["bug", "enhancement", "documentation :memo:"],
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "description": "The username of the account that owns the repository. This is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This is not case sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "name"],
      "title": "CreateALabelRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateALabelResponseWrapper",
      "type": "object"
    },
    "description": "Creates a new label in a specified github repository, provided the repository exists and the user has write permissions.",
    "tags": ["issues", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a milestone",
    "slug": "GITHUB_CREATE_A_MILESTONE",
    "input_parameters": {
      "description": "Request to create a milestone in a GitHub repository.",
      "properties": {
        "description": {
          "description": "Detailed description of the milestone.",
          "examples": [
            "Tracking all issues and PRs for the upcoming v1.0 release.",
            "Tasks for the third quarter sprint."
          ],
          "title": "Description",
          "type": "string"
        },
        "due_on": {
          "description": "Due date for the milestone (ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`).",
          "examples": ["2024-12-31T23:59:59Z", "2025-03-15T18:30:00Z"],
          "format": "date-time",
          "title": "Due On",
          "type": "string"
        },
        "owner": {
          "description": "Username of the repository owner (case-insensitive).",
          "examples": ["octocat", "github-username"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension (case-insensitive).",
          "examples": ["hello-world", "my-repository-name"],
          "title": "Repo",
          "type": "string"
        },
        "state": {
          "default": "open",
          "description": "State of the milestone.",
          "enum": ["open", "closed"],
          "examples": ["open", "closed"],
          "title": "State",
          "type": "string"
        },
        "title": {
          "description": "Title for the new milestone.",
          "examples": ["v1.0 Release", "Q3 Sprint Goals"],
          "title": "Title",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "title"],
      "title": "CreateAMilestoneRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details of the newly created milestone from the GitHub API.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAMilestoneResponseWrapper",
      "type": "object"
    },
    "description": "Creates a milestone in a github repository for tracking progress on issues or pull requests; requires repository existence and user write permissions.",
    "tags": ["issues", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a project card",
    "slug": "GITHUB_CREATE_A_PROJECT_CARD",
    "input_parameters": {
      "description": "Defines the `column_id` path parameter for creating a GitHub project card. The actual card content (e.g., `note` or `content_id`/`content_type`) must be provided separately in the request body.",
      "properties": {
        "column_id": {
          "description": "The unique identifier of the project column where the card will be created. This value is used as a path parameter in the API request URL (e.g., `/projects/columns/{column_id}/cards`).",
          "examples": ["1234567"],
          "title": "Column Id",
          "type": "integer"
        }
      },
      "required": ["column_id"],
      "title": "CreateAProjectCardRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the full representation of the newly created project card, as returned by the GitHub API.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAProjectCardResponseWrapper",
      "type": "object"
    },
    "description": "Creates a project card in a github project column; the request body must contain either a `note` for a note-only card, or both `content id` (id of an issue or pull request) and `content type` (e.g., 'issue', 'pullrequest').",
    "tags": ["openWorldHint", "projects", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a project column",
    "slug": "GITHUB_CREATE_A_PROJECT_COLUMN",
    "input_parameters": {
      "description": "Request schema for `CreateAProjectColumn`",
      "properties": {
        "name": {
          "description": "The name for the new project column.",
          "examples": ["To Do", "In Progress", "Done"],
          "title": "Name",
          "type": "string"
        },
        "project_id": {
          "description": "The unique identifier of the target GitHub project (classic) where the new column will be created.",
          "title": "Project Id",
          "type": "integer"
        }
      },
      "required": ["project_id", "name"],
      "title": "CreateAProjectColumnRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the attributes of the newly created project column. Key attributes typically include `id`, `node_id`, `name`, `url`, `project_url`, `cards_url`, `created_at`, and `updated_at`.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAProjectColumnResponseWrapper",
      "type": "object"
    },
    "description": "Creates a new column in a github project (classic).",
    "tags": ["openWorldHint", "projects", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a pull request",
    "slug": "GITHUB_CREATE_A_PULL_REQUEST",
    "input_parameters": {
      "description": "Request schema for `CreateAPullRequest`",
      "properties": {
        "base": {
          "description": "The name of the branch you want the changes pulled into. This must be an existing branch on the current (target) repository. You cannot submit a pull request to one repository that requests a merge to a base branch of another repository. ",
          "examples": ["main", "develop"],
          "title": "Base",
          "type": "string"
        },
        "body": {
          "description": "The detailed description or contents of the pull request.",
          "examples": [
            "This PR introduces a new feature that does X, Y, and Z.",
            "Fixes #42 by addressing the off-by-one error."
          ],
          "title": "Body",
          "type": "string"
        },
        "draft": {
          "description": "Indicates whether the pull request should be created as a draft. Draft pull requests cannot be merged until marked as ready for review.",
          "examples": ["True", "False"],
          "title": "Draft",
          "type": "boolean"
        },
        "head": {
          "description": "The name of the branch where your changes are implemented. For cross-repository pull requests, namespace `head` with the source owner and branch, like `username:branch`.",
          "examples": ["feature-branch", "octocat:my-feature-branch"],
          "title": "Head",
          "type": "string"
        },
        "head_repo": {
          "description": "The name of the repository (e.g., 'octocat/Hello-World') where the changes in the pull request were made. This field is required for cross-repository pull requests if both the source and target repositories are owned by the same organization but are different repositories.",
          "examples": ["octocat/my-forked-repo"],
          "format": "repo.nwo",
          "title": "Head Repo",
          "type": "string"
        },
        "issue": {
          "description": "The number of an existing issue in the repository to convert into a pull request. If provided, the issue's title and body may be used for the pull request. Required if `title` is not specified.",
          "examples": ["123", "456"],
          "title": "Issue",
          "type": "integer"
        },
        "maintainer_can_modify": {
          "description": "Indicates whether maintainers of the upstream repository can modify the pull request. This is primarily relevant for pull requests originating from forks.",
          "examples": ["True", "False"],
          "title": "Maintainer Can Modify",
          "type": "boolean"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        },
        "title": {
          "description": "The title of the new pull request. Required unless `issue` is specified.",
          "examples": ["Amazing new feature", "Fix for critical bug #123"],
          "title": "Title",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "head", "base"],
      "title": "CreateAPullRequestRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the full representation of the created pull request.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAPullRequestResponseWrapper",
      "type": "object"
    },
    "description": "Creates a pull request in a github repository, requiring existing `base` and `head` branches; `title` or `issue` must be provided.",
    "tags": ["important", "openWorldHint", "pulls", "important"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a reference",
    "slug": "GITHUB_CREATE_A_REFERENCE",
    "input_parameters": {
      "description": "Request schema for `CreateAReference`",
      "properties": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "ref": {
          "description": "Fully qualified reference to create (e.g., `refs/heads/master`, `refs/tags/v1.0.0`). Must start with `refs/` and contain at least two slashes.",
          "examples": ["refs/heads/new-feature-branch", "refs/tags/v1.2.3"],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "sha": {
          "description": "SHA-1 hash of an existing commit in the repository that the new reference will point to.",
          "examples": [
            "aa218f56b14c9653891f9e74264a383fa43fefbd",
            "1234567890abcdef1234567890abcdef12345678"
          ],
          "title": "Sha",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "ref", "sha"],
      "title": "CreateAReferenceRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details of the newly created Git reference, typically including its `ref`, `node_id`, `url`, and target object (`sha`, `type`).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAReferenceResponseWrapper",
      "type": "object"
    },
    "description": "Creates a git reference (e.g., a branch or tag) in a repository; the repository must not be empty prior to this operation.",
    "tags": ["git", "openWorldHint", "important"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a registration token for an organization",
    "slug": "GITHUB_CREATE_A_REGISTRATION_TOKEN_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for `CreateARegistrationTokenForAnOrganization`",
      "properties": {
        "org": {
          "description": "The name of the organization. This name is not case-sensitive.",
          "examples": ["octo-org", "github"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org"],
      "title": "CreateARegistrationTokenForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the generated registration token and its expiration details, used for configuring self-hosted runners.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateARegistrationTokenForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Generates a temporary (one-hour) registration token to add a new self-hosted runner to an organization for github actions.",
    "tags": ["actions", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a registration token for a repository",
    "slug": "GITHUB_CREATE_A_REGISTRATION_TOKEN_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for `CreateARegistrationTokenForARepository`",
      "properties": {
        "owner": {
          "description": "The username of the account or the organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["hello-world", "linguist"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "CreateARegistrationTokenForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the registration token and its expiration details, such as the `token` string and `expires_at` timestamp.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateARegistrationTokenForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Generates a time-limited token required to register a new self-hosted runner with a specific repository.",
    "tags": ["actions", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a release",
    "slug": "GITHUB_CREATE_A_RELEASE",
    "input_parameters": {
      "properties": {
        "body": {
          "default": null,
          "description": "A detailed description of the release. Markdown formatting is supported.",
          "examples": [
            "This release includes new features X, Y, and bug fixes for Z.",
            "# New Features\n- Feature A\n- Feature B"
          ],
          "nullable": true,
          "title": "Body",
          "type": "string"
        },
        "discussion_category_name": {
          "default": null,
          "description": "If specified, a new discussion will be created in this category and linked to the release. The category must already exist in the repository's discussions.",
          "examples": ["Announcements", "General"],
          "nullable": true,
          "title": "Discussion Category Name",
          "type": "string"
        },
        "draft": {
          "default": false,
          "description": "Set to `true` to create an unpublished (draft) release. Defaults to `false`.",
          "nullable": true,
          "title": "Draft",
          "type": "boolean"
        },
        "generate_release_notes": {
          "default": false,
          "description": "Set to `true` to automatically generate the release title (`name`) and description (`body`) from the commit history since the last release. Defaults to `false`.",
          "nullable": true,
          "title": "Generate Release Notes",
          "type": "boolean"
        },
        "make_latest": {
          "default": "true",
          "description": "Specifies if this release should be marked as the latest for the repository. Valid values: 'true', 'false', 'legacy'. Defaults to 'true'. Draft releases and prereleases cannot be set as 'latest'.",
          "examples": ["true", "false", "legacy"],
          "nullable": true,
          "title": "Make Latest",
          "type": "string"
        },
        "name": {
          "default": null,
          "description": "The title of the release. If omitted and `generate_release_notes` is false, it defaults to the `tag_name`.",
          "examples": ["Version 1.0.0", "My Awesome Release"],
          "nullable": true,
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository (username or organization name). This field is not case-sensitive.",
          "examples": ["octocat", "my-company"],
          "title": "Owner",
          "type": "string"
        },
        "prerelease": {
          "default": false,
          "description": "Set to `true` to identify this release as a pre-release. Defaults to `false`.",
          "nullable": true,
          "title": "Prerelease",
          "type": "boolean"
        },
        "repo": {
          "description": "The name of the repository, without the .git extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife", "our-awesome-project"],
          "title": "Repo",
          "type": "string"
        },
        "tag_name": {
          "description": "The name of the tag for this release. This tag must be unique for published releases.",
          "examples": ["v1.0.0", "v1.0.1-alpha"],
          "title": "Tag Name",
          "type": "string"
        },
        "target_commitish": {
          "default": null,
          "description": "Specifies the commitish value (e.g., branch name, tag name, or commit SHA) from which the Git tag is created. Defaults to the repository's default branch if the tag specified in `tag_name` doesn't exist yet.",
          "examples": ["main", "develop", "c1f67a4f091588259dd3f8a27378e170d40c8472"],
          "nullable": true,
          "title": "Target Commitish",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "tag_name"],
      "title": "CreateReleaseRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "assets": {
              "default": null,
              "description": "A list of assets attached to this release.",
              "items": {
                "properties": {
                  "browser_download_url": {
                    "default": null,
                    "description": "The direct URL for downloading this asset via a web browser.",
                    "nullable": true,
                    "title": "Browser Download Url",
                    "type": "string"
                  },
                  "content_type": {
                    "default": null,
                    "description": "The MIME type of the asset (e.g., 'application/zip', 'image/png').",
                    "nullable": true,
                    "title": "Content Type",
                    "type": "string"
                  },
                  "created_at": {
                    "default": null,
                    "description": "The ISO 8601 timestamp for when the asset was created.",
                    "nullable": true,
                    "title": "Created At",
                    "type": "string"
                  },
                  "download_count": {
                    "default": null,
                    "description": "The number of times this asset has been downloaded.",
                    "nullable": true,
                    "title": "Download Count",
                    "type": "integer"
                  },
                  "id": {
                    "default": null,
                    "description": "The unique numerical identifier for this release asset.",
                    "nullable": true,
                    "title": "Id",
                    "type": "integer"
                  },
                  "label": {
                    "default": null,
                    "description": "An optional, short, descriptive label for the asset.",
                    "nullable": true,
                    "title": "Label",
                    "type": "string"
                  },
                  "name": {
                    "default": null,
                    "description": "The filename of the release asset.",
                    "nullable": true,
                    "title": "Name",
                    "type": "string"
                  },
                  "node_id": {
                    "default": null,
                    "description": "The global Relay ID for this release asset.",
                    "nullable": true,
                    "title": "Node Id",
                    "type": "string"
                  },
                  "size": {
                    "default": null,
                    "description": "The size of the asset in bytes.",
                    "nullable": true,
                    "title": "Size",
                    "type": "integer"
                  },
                  "state": {
                    "default": null,
                    "description": "The state of the release asset. Typically 'uploaded' for successfully uploaded assets.",
                    "examples": ["uploaded"],
                    "nullable": true,
                    "title": "State",
                    "type": "string"
                  },
                  "updated_at": {
                    "default": null,
                    "description": "The ISO 8601 timestamp for when the asset was last updated.",
                    "nullable": true,
                    "title": "Updated At",
                    "type": "string"
                  },
                  "uploader": {
                    "additionalProperties": false,
                    "default": null,
                    "description": "Information about the user who uploaded a release asset. Inherits fields from ReleaseAuthor.",
                    "nullable": true,
                    "properties": {
                      "avatar_url": {
                        "default": null,
                        "description": "The URL for the user's avatar image.",
                        "nullable": true,
                        "title": "Avatar Url",
                        "type": "string"
                      },
                      "email": {
                        "default": null,
                        "description": "The publicly visible email address of the user. May be null.",
                        "nullable": true,
                        "title": "Email",
                        "type": "string"
                      },
                      "events_url": {
                        "default": null,
                        "description": "The API URL for the user's public events. Placeholder {/privacy} may be present.",
                        "nullable": true,
                        "title": "Events Url",
                        "type": "string"
                      },
                      "followers_url": {
                        "default": null,
                        "description": "The API URL for listing the user's followers.",
                        "nullable": true,
                        "title": "Followers Url",
                        "type": "string"
                      },
                      "following_url": {
                        "default": null,
                        "description": "The API URL for listing users followed by this user. Placeholder {/other_user} may be present.",
                        "nullable": true,
                        "title": "Following Url",
                        "type": "string"
                      },
                      "gists_url": {
                        "default": null,
                        "description": "The API URL for the user's gists. Placeholder {/gist_id} may be present.",
                        "nullable": true,
                        "title": "Gists Url",
                        "type": "string"
                      },
                      "gravatar_id": {
                        "default": null,
                        "description": "The Gravatar ID for the user. May be empty if the user does not use Gravatar.",
                        "nullable": true,
                        "title": "Gravatar Id",
                        "type": "string"
                      },
                      "html_url": {
                        "default": null,
                        "description": "The URL to the user's profile page on GitHub.",
                        "nullable": true,
                        "title": "Html Url",
                        "type": "string"
                      },
                      "id": {
                        "default": null,
                        "description": "The unique numerical identifier for the user on GitHub.",
                        "nullable": true,
                        "title": "Id",
                        "type": "integer"
                      },
                      "login": {
                        "default": null,
                        "description": "The GitHub username (login) of the user.",
                        "nullable": true,
                        "title": "Login",
                        "type": "string"
                      },
                      "name": {
                        "default": null,
                        "description": "The display name of the user. May be null.",
                        "nullable": true,
                        "title": "Name",
                        "type": "string"
                      },
                      "node_id": {
                        "default": null,
                        "description": "The global Relay ID for the user, used with GraphQL API.",
                        "nullable": true,
                        "title": "Node Id",
                        "type": "string"
                      },
                      "organizations_url": {
                        "default": null,
                        "description": "The API URL for the user's organization memberships.",
                        "nullable": true,
                        "title": "Organizations Url",
                        "type": "string"
                      },
                      "received_events_url": {
                        "default": null,
                        "description": "The API URL for events received by the user.",
                        "nullable": true,
                        "title": "Received Events Url",
                        "type": "string"
                      },
                      "repos_url": {
                        "default": null,
                        "description": "The API URL for the user's public repositories.",
                        "nullable": true,
                        "title": "Repos Url",
                        "type": "string"
                      },
                      "site_admin": {
                        "default": null,
                        "description": "Indicates whether the user is a GitHub site administrator.",
                        "nullable": true,
                        "title": "Site Admin",
                        "type": "boolean"
                      },
                      "starred_at": {
                        "default": null,
                        "description": "Timestamp indicating when the user performed a starring action related to a repository, if available in the context of this user object.",
                        "nullable": true,
                        "title": "Starred At",
                        "type": "string"
                      },
                      "starred_url": {
                        "default": null,
                        "description": "The API URL for repositories starred by this user. Placeholders {/owner}{/repo} may be present.",
                        "nullable": true,
                        "title": "Starred Url",
                        "type": "string"
                      },
                      "subscriptions_url": {
                        "default": null,
                        "description": "The API URL for the user's repository subscriptions.",
                        "nullable": true,
                        "title": "Subscriptions Url",
                        "type": "string"
                      },
                      "type": {
                        "default": null,
                        "description": "The type of GitHub account (e.g., 'User', 'Organization').",
                        "nullable": true,
                        "title": "Type",
                        "type": "string"
                      },
                      "url": {
                        "default": null,
                        "description": "The API URL for this user's details.",
                        "nullable": true,
                        "title": "Url",
                        "type": "string"
                      },
                      "user_view_type": {
                        "default": null,
                        "description": "A string indicating the user's view type; its meaning might be context-dependent.",
                        "nullable": true,
                        "title": "User View Type",
                        "type": "string"
                      }
                    },
                    "title": "ReleaseAssetUploader",
                    "type": "object"
                  },
                  "url": {
                    "default": null,
                    "description": "The API URL for this release asset.",
                    "nullable": true,
                    "title": "Url",
                    "type": "string"
                  }
                },
                "title": "ReleaseAsset",
                "type": "object"
              },
              "nullable": true,
              "title": "Assets",
              "type": "array"
            },
            "assets_url": {
              "default": null,
              "description": "The API URL for accessing the assets associated with this release.",
              "nullable": true,
              "title": "Assets Url",
              "type": "string"
            },
            "author": {
              "additionalProperties": false,
              "default": null,
              "description": "The GitHub user who created the release.",
              "nullable": true,
              "properties": {
                "avatar_url": {
                  "default": null,
                  "description": "The URL for the user's avatar image.",
                  "nullable": true,
                  "title": "Avatar Url",
                  "type": "string"
                },
                "email": {
                  "default": null,
                  "description": "The publicly visible email address of the user. May be null.",
                  "nullable": true,
                  "title": "Email",
                  "type": "string"
                },
                "events_url": {
                  "default": null,
                  "description": "The API URL for the user's public events. Placeholder {/privacy} may be present.",
                  "nullable": true,
                  "title": "Events Url",
                  "type": "string"
                },
                "followers_url": {
                  "default": null,
                  "description": "The API URL for listing the user's followers.",
                  "nullable": true,
                  "title": "Followers Url",
                  "type": "string"
                },
                "following_url": {
                  "default": null,
                  "description": "The API URL for listing users followed by this user. Placeholder {/other_user} may be present.",
                  "nullable": true,
                  "title": "Following Url",
                  "type": "string"
                },
                "gists_url": {
                  "default": null,
                  "description": "The API URL for the user's gists. Placeholder {/gist_id} may be present.",
                  "nullable": true,
                  "title": "Gists Url",
                  "type": "string"
                },
                "gravatar_id": {
                  "default": null,
                  "description": "The Gravatar ID for the user. May be empty if the user does not use Gravatar.",
                  "nullable": true,
                  "title": "Gravatar Id",
                  "type": "string"
                },
                "html_url": {
                  "default": null,
                  "description": "The URL to the user's profile page on GitHub.",
                  "nullable": true,
                  "title": "Html Url",
                  "type": "string"
                },
                "id": {
                  "default": null,
                  "description": "The unique numerical identifier for the user on GitHub.",
                  "nullable": true,
                  "title": "Id",
                  "type": "integer"
                },
                "login": {
                  "default": null,
                  "description": "The GitHub username (login) of the user.",
                  "nullable": true,
                  "title": "Login",
                  "type": "string"
                },
                "name": {
                  "default": null,
                  "description": "The display name of the user. May be null.",
                  "nullable": true,
                  "title": "Name",
                  "type": "string"
                },
                "node_id": {
                  "default": null,
                  "description": "The global Relay ID for the user, used with GraphQL API.",
                  "nullable": true,
                  "title": "Node Id",
                  "type": "string"
                },
                "organizations_url": {
                  "default": null,
                  "description": "The API URL for the user's organization memberships.",
                  "nullable": true,
                  "title": "Organizations Url",
                  "type": "string"
                },
                "received_events_url": {
                  "default": null,
                  "description": "The API URL for events received by the user.",
                  "nullable": true,
                  "title": "Received Events Url",
                  "type": "string"
                },
                "repos_url": {
                  "default": null,
                  "description": "The API URL for the user's public repositories.",
                  "nullable": true,
                  "title": "Repos Url",
                  "type": "string"
                },
                "site_admin": {
                  "default": null,
                  "description": "Indicates whether the user is a GitHub site administrator.",
                  "nullable": true,
                  "title": "Site Admin",
                  "type": "boolean"
                },
                "starred_at": {
                  "default": null,
                  "description": "Timestamp indicating when the user performed a starring action related to a repository, if available in the context of this user object.",
                  "nullable": true,
                  "title": "Starred At",
                  "type": "string"
                },
                "starred_url": {
                  "default": null,
                  "description": "The API URL for repositories starred by this user. Placeholders {/owner}{/repo} may be present.",
                  "nullable": true,
                  "title": "Starred Url",
                  "type": "string"
                },
                "subscriptions_url": {
                  "default": null,
                  "description": "The API URL for the user's repository subscriptions.",
                  "nullable": true,
                  "title": "Subscriptions Url",
                  "type": "string"
                },
                "type": {
                  "default": null,
                  "description": "The type of GitHub account (e.g., 'User', 'Organization').",
                  "nullable": true,
                  "title": "Type",
                  "type": "string"
                },
                "url": {
                  "default": null,
                  "description": "The API URL for this user's details.",
                  "nullable": true,
                  "title": "Url",
                  "type": "string"
                },
                "user_view_type": {
                  "default": null,
                  "description": "A string indicating the user's view type; its meaning might be context-dependent.",
                  "nullable": true,
                  "title": "User View Type",
                  "type": "string"
                }
              },
              "title": "ReleaseAuthor",
              "type": "object"
            },
            "body": {
              "default": null,
              "description": "The detailed description of the release. May contain Markdown.",
              "nullable": true,
              "title": "Body",
              "type": "string"
            },
            "body_html": {
              "default": null,
              "description": "The release notes (`body`) rendered as HTML by GitHub.",
              "nullable": true,
              "title": "Body Html",
              "type": "string"
            },
            "body_text": {
              "default": null,
              "description": "The release notes (`body`) in plain text format.",
              "nullable": true,
              "title": "Body Text",
              "type": "string"
            },
            "created_at": {
              "default": null,
              "description": "The ISO 8601 timestamp for when the release object was created.",
              "nullable": true,
              "title": "Created At",
              "type": "string"
            },
            "discussion_url": {
              "default": null,
              "description": "The URL of the discussion linked to this release, if one was created.",
              "nullable": true,
              "title": "Discussion Url",
              "type": "string"
            },
            "draft": {
              "default": null,
              "description": "Indicates if the release is a draft (unpublished).",
              "nullable": true,
              "title": "Draft",
              "type": "boolean"
            },
            "html_url": {
              "default": null,
              "description": "The URL to view this release on GitHub in a web browser.",
              "nullable": true,
              "title": "Html Url",
              "type": "string"
            },
            "id": {
              "default": null,
              "description": "The unique numerical identifier for this release.",
              "nullable": true,
              "title": "Id",
              "type": "integer"
            },
            "mentions_count": {
              "default": null,
              "description": "The number of users mentioned in the release notes. Typically available if `generate_release_notes` was true.",
              "nullable": true,
              "title": "Mentions Count",
              "type": "integer"
            },
            "name": {
              "default": null,
              "description": "The title of the release. May be the same as `tag_name` if not explicitly set.",
              "nullable": true,
              "title": "Name",
              "type": "string"
            },
            "node_id": {
              "default": null,
              "description": "The global Relay ID for this release.",
              "nullable": true,
              "title": "Node Id",
              "type": "string"
            },
            "prerelease": {
              "default": null,
              "description": "Indicates if the release is a pre-release (not production-ready).",
              "nullable": true,
              "title": "Prerelease",
              "type": "boolean"
            },
            "published_at": {
              "default": null,
              "description": "The ISO 8601 timestamp for when the release was published. Null for draft releases.",
              "nullable": true,
              "title": "Published At",
              "type": "string"
            },
            "reactions": {
              "additionalProperties": false,
              "default": null,
              "description": "A summary of reactions (e.g., thumbs up, heart) to this release.",
              "nullable": true,
              "properties": {
                "+1": {
                  "default": null,
                  "description": "The number of '+1' (thumbs up) reactions.",
                  "nullable": true,
                  "title": "+1",
                  "type": "integer"
                },
                "-1": {
                  "default": null,
                  "description": "The number of '-1' (thumbs down) reactions.",
                  "nullable": true,
                  "title": " 1",
                  "type": "integer"
                },
                "confused": {
                  "default": null,
                  "description": "The number of 'confused' reactions.",
                  "nullable": true,
                  "title": "Confused",
                  "type": "integer"
                },
                "eyes": {
                  "default": null,
                  "description": "The number of 'eyes' reactions.",
                  "nullable": true,
                  "title": "Eyes",
                  "type": "integer"
                },
                "heart": {
                  "default": null,
                  "description": "The number of 'heart' reactions.",
                  "nullable": true,
                  "title": "Heart",
                  "type": "integer"
                },
                "hooray": {
                  "default": null,
                  "description": "The number of 'hooray' reactions.",
                  "nullable": true,
                  "title": "Hooray",
                  "type": "integer"
                },
                "laugh": {
                  "default": null,
                  "description": "The number of 'laugh' reactions.",
                  "nullable": true,
                  "title": "Laugh",
                  "type": "integer"
                },
                "rocket": {
                  "default": null,
                  "description": "The number of 'rocket' reactions.",
                  "nullable": true,
                  "title": "Rocket",
                  "type": "integer"
                },
                "total_count": {
                  "default": null,
                  "description": "The total number of reactions on the release.",
                  "nullable": true,
                  "title": "Total Count",
                  "type": "integer"
                },
                "url": {
                  "default": null,
                  "description": "The API URL to access the reactions summary for the release.",
                  "nullable": true,
                  "title": "Url",
                  "type": "string"
                }
              },
              "title": "ReleaseReactions",
              "type": "object"
            },
            "tag_name": {
              "default": null,
              "description": "The name of the tag associated with this release.",
              "nullable": true,
              "title": "Tag Name",
              "type": "string"
            },
            "tarball_url": {
              "default": null,
              "description": "The URL to download the tarball (gzipped tar archive) of the repository at this tag. May be null if the tag does not exist yet or for draft releases.",
              "nullable": true,
              "title": "Tarball Url",
              "type": "string"
            },
            "target_commitish": {
              "default": null,
              "description": "The commitish value (e.g., branch name or commit SHA) that this release's tag was created from.",
              "nullable": true,
              "title": "Target Commitish",
              "type": "string"
            },
            "upload_url": {
              "default": null,
              "description": "The templated URL for uploading release assets. Replace `{?name,label}` with query parameters like `?name=file.zip&label=File`.",
              "nullable": true,
              "title": "Upload Url",
              "type": "string"
            },
            "url": {
              "default": null,
              "description": "The API URL for this release.",
              "nullable": true,
              "title": "Url",
              "type": "string"
            },
            "zipball_url": {
              "default": null,
              "description": "The URL to download the zipball (zip archive) of the repository at this tag. May be null if the tag does not exist yet or for draft releases.",
              "nullable": true,
              "title": "Zipball Url",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateReleaseResponseWrapper",
      "type": "object"
    },
    "description": "Creates a release in a github repository for a specified tag; the tag must be unique for published releases, and if a `discussion category name` is given, it must already exist.",
    "tags": ["openWorldHint", "important", "Releases"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a remove token for an organization",
    "slug": "GITHUB_CREATE_A_REMOVE_TOKEN_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for generating a token to remove a self-hosted runner from an organization.",
      "properties": {
        "org": {
          "description": "The unique identifier or name of the GitHub organization. This name is not case-sensitive. For example, if your organization's URL is github.com/my-org, 'my-org' is the value.",
          "examples": ["my-github-org"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org"],
      "title": "CreateARemoveTokenForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the generated time-limited token and its expiration details.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateARemoveTokenForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Generates a token, valid for one hour, to authenticate removing a self-hosted runner from an organization.",
    "tags": ["actions", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a remove token for a repository",
    "slug": "GITHUB_CREATE_A_REMOVE_TOKEN_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for generating a token to remove a self-hosted runner from a repository.",
      "properties": {
        "owner": {
          "description": "Username of the account owning the repository (not case-sensitive).",
          "examples": ["octo-org"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (not case-sensitive).",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "CreateARemoveTokenForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Contains the generated remove token (e.g., `{'token': 'YOUR_GENERATED_TOKEN'}`), used to unregister a self-hosted runner.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateARemoveTokenForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Generates a temporary (one-hour validity) token required to unregister and remove a self-hosted runner from a repository.",
    "tags": ["actions", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a reply for a review comment",
    "slug": "GITHUB_CREATE_A_REPLY_FOR_A_REVIEW_COMMENT",
    "input_parameters": {
      "description": "Request schema for `CreateAReplyForAReviewComment`",
      "properties": {
        "body": {
          "description": "The text of the reply to the review comment.",
          "examples": ["Thanks for the clarification!"],
          "title": "Body",
          "type": "string"
        },
        "comment_id": {
          "description": "The unique identifier of the comment to which the reply is being made.",
          "examples": ["10233"],
          "title": "Comment Id",
          "type": "integer"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "pull_number": {
          "description": "The number that identifies the pull request.",
          "examples": ["1347"],
          "title": "Pull Number",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "pull_number", "comment_id", "body"],
      "title": "CreateAReplyForAReviewCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the details of the newly created reply to the review comment. The structure of this dictionary conforms to the GitHub API's representation of a pull request review comment.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAReplyForAReviewCommentResponseWrapper",
      "type": "object"
    },
    "description": "Posts a reply to a specific review comment on a github pull request, requiring the repository, pull request, and original comment to exist, and a non-empty reply body.",
    "tags": ["openWorldHint", "pulls", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a repository dispatch event",
    "slug": "GITHUB_CREATE_A_REPOSITORY_DISPATCH_EVENT",
    "input_parameters": {
      "description": "Request schema for `CreateARepositoryDispatchEvent`",
      "properties": {
        "client_payload": {
          "additionalProperties": true,
          "description": "JSON payload with extra information for the webhook event (max 10 top-level properties), passed to the triggered workflow or action.",
          "examples": [
            "{\"ref\": \"main\", \"sha\": \"0123456789abcdef\", \"actor\": \"monalisa\"}",
            "{\"custom_data\": \"value1\", \"user_id\": 123, \"trigger_reason\": \"manual_dispatch\"}"
          ],
          "title": "Client Payload",
          "type": "object"
        },
        "event_type": {
          "description": "Custom webhook event name (100 characters or fewer).",
          "examples": ["deploy_staging", "run_integration_tests", "custom_event_1"],
          "title": "Event Type",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository (not case-sensitive).",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension (not case-sensitive).",
          "examples": ["hello-world", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "event_type"],
      "title": "CreateARepositoryDispatchEventRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Empty dictionary on success (HTTP 204 No Content), or contains error details on failure.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["successful"],
      "title": "CreateARepositoryDispatchEventResponseWrapper",
      "type": "object"
    },
    "description": "Triggers a github actions workflow or a webhook on a repository by creating a repository dispatch event, allowing programmatic triggering of workflows based on events outside of github.",
    "tags": ["openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a repository for the authenticated user",
    "slug": "GITHUB_CREATE_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for `CreateARepositoryForTheAuthenticatedUser`",
      "properties": {
        "allow_auto_merge": {
          "default": false,
          "description": "Whether to allow auto-merge on pull requests.",
          "title": "Allow Auto Merge",
          "type": "boolean"
        },
        "allow_merge_commit": {
          "default": true,
          "description": "Whether to allow merging pull requests with a merge commit.",
          "title": "Allow Merge Commit",
          "type": "boolean"
        },
        "allow_rebase_merge": {
          "default": true,
          "description": "Whether to allow rebase-merging pull requests.",
          "title": "Allow Rebase Merge",
          "type": "boolean"
        },
        "allow_squash_merge": {
          "default": true,
          "description": "Whether to allow squash-merging pull requests.",
          "title": "Allow Squash Merge",
          "type": "boolean"
        },
        "auto_init": {
          "default": false,
          "description": "Whether to initialize the repository with a README.",
          "title": "Auto Init",
          "type": "boolean"
        },
        "delete_branch_on_merge": {
          "default": false,
          "description": "Whether to automatically delete head branches when pull requests are merged.",
          "title": "Delete Branch On Merge",
          "type": "boolean"
        },
        "description": {
          "description": "A short description of the repository.",
          "examples": ["This is a project about X.", "My personal blog."],
          "title": "Description",
          "type": "string"
        },
        "gitignore_template": {
          "description": "Desired .gitignore template (e.g., 'Python', 'Node').",
          "examples": ["Python", "Node", "Ruby"],
          "title": "Gitignore Template",
          "type": "string"
        },
        "has_discussions": {
          "default": false,
          "description": "Whether discussions are enabled.",
          "title": "Has Discussions",
          "type": "boolean"
        },
        "has_downloads": {
          "default": true,
          "description": "Whether downloads are enabled (deprecated by GitHub and may not be configurable).",
          "title": "Has Downloads",
          "type": "boolean"
        },
        "has_issues": {
          "default": true,
          "description": "Whether issues are enabled.",
          "title": "Has Issues",
          "type": "boolean"
        },
        "has_projects": {
          "default": true,
          "description": "Whether projects are enabled.",
          "title": "Has Projects",
          "type": "boolean"
        },
        "has_wiki": {
          "default": true,
          "description": "Whether the wiki is enabled.",
          "title": "Has Wiki",
          "type": "boolean"
        },
        "homepage": {
          "description": "A URL with more information about the repository.",
          "examples": ["https://example.com/my-new-repo"],
          "title": "Homepage",
          "type": "string"
        },
        "is_template": {
          "default": false,
          "description": "Whether this repository is a template repository.",
          "title": "Is Template",
          "type": "boolean"
        },
        "license_template": {
          "description": "License template keyword (e.g., 'mit', 'apache-2.0').",
          "examples": ["mit", "apache-2.0", "gpl-3.0"],
          "title": "License Template",
          "type": "string"
        },
        "merge_commit_message": {
          "description": "The default message for a merge commit. `PR_BODY` uses the pull request's body. `PR_TITLE` uses the pull request's title. `BLANK` results in a blank commit message.",
          "enum": ["PR_BODY", "PR_TITLE", "BLANK"],
          "examples": ["PR_BODY", "PR_TITLE", "BLANK"],
          "title": "Merge Commit Message",
          "type": "string"
        },
        "merge_commit_title": {
          "description": "The default title for a merge commit. `PR_TITLE` uses the pull request's title. `MERGE_MESSAGE` uses a classic title like 'Merge pull request #123 from branch-name'.",
          "enum": ["PR_TITLE", "MERGE_MESSAGE"],
          "examples": ["PR_TITLE", "MERGE_MESSAGE"],
          "title": "Merge Commit Title",
          "type": "string"
        },
        "name": {
          "description": "The name of the repository.",
          "examples": ["my-new-repo", "octo-project"],
          "title": "Name",
          "type": "string"
        },
        "private": {
          "default": false,
          "description": "Whether the repository is private (true) or public (false).",
          "title": "Private",
          "type": "boolean"
        },
        "squash_merge_commit_message": {
          "description": "The default message for a squash merge commit. `PR_BODY` uses the pull request's body. `COMMIT_MESSAGES` uses the branch's commit messages. `BLANK` results in a blank commit message.",
          "enum": ["PR_BODY", "COMMIT_MESSAGES", "BLANK"],
          "examples": ["PR_BODY", "COMMIT_MESSAGES", "BLANK"],
          "title": "Squash Merge Commit Message",
          "type": "string"
        },
        "squash_merge_commit_title": {
          "description": "The default title for a squash merge commit. `PR_TITLE` uses the pull request's title. `COMMIT_OR_PR_TITLE` uses the commit's title (if only one commit) or the pull request's title (if multiple commits).",
          "enum": ["PR_TITLE", "COMMIT_OR_PR_TITLE"],
          "examples": ["PR_TITLE", "COMMIT_OR_PR_TITLE"],
          "title": "Squash Merge Commit Title",
          "type": "string"
        },
        "team_id": {
          "description": "The ID of the team to be granted access. Only valid if creating in an organization.",
          "examples": [12345],
          "title": "Team Id",
          "type": "integer"
        }
      },
      "required": ["name"],
      "title": "CreateARepositoryForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateARepositoryForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Creates a new repository for the authenticated user, optionally within an organization if `team id` is specified.",
    "tags": ["openWorldHint", "repos"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a repository from an unpublished codespace",
    "slug": "GITHUB_CREATE_A_REPOSITORY_FROM_AN_UNPUBLISHED_CODESPACE",
    "input_parameters": {
      "description": "Request schema for `CreateARepositoryFromAnUnpublishedCodespace`",
      "properties": {
        "codespace_name": {
          "description": "The unique name of the codespace to be published as a new repository. This codespace must exist, be unpublished, and belong to the authenticated user.",
          "examples": ["monalisa-glorious-space-machine-vrg5779x7p92r7w"],
          "title": "Codespace Name",
          "type": "string"
        },
        "name": {
          "description": "The desired name for the new repository to be created from the codespace. If omitted, GitHub might generate a name (e.g., based on the codespace name).",
          "examples": ["my-new-project", "codespace-to-repo-conversion"],
          "title": "Name",
          "type": "string"
        },
        "private": {
          "default": false,
          "description": "Specifies the visibility of the new repository. Set to `true` for a private repository, or `false` for a public one. Defaults to `false` (public).",
          "title": "Private",
          "type": "boolean"
        }
      },
      "required": ["codespace_name"],
      "title": "CreateARepositoryFromAnUnpublishedCodespaceRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateARepositoryFromAnUnpublishedCodespaceResponseWrapper",
      "type": "object"
    },
    "description": "Publishes the specified codespace to a new repository, using the codespace's current state as the initial commit.",
    "tags": ["codespaces", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a repository project",
    "slug": "GITHUB_CREATE_A_REPOSITORY_PROJECT",
    "input_parameters": {
      "description": "Request schema for `CreateARepositoryProject`",
      "properties": {
        "body": {
          "description": "An optional detailed description for the project board.",
          "examples": [
            "Tasks and milestones for the upcoming website redesign.",
            "Product features and initiatives for the fourth quarter."
          ],
          "title": "Body",
          "type": "string"
        },
        "name": {
          "description": "The name of the project board to be created.",
          "examples": ["New Website Launch Plan", "Q4 Roadmap"],
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "name"],
      "title": "CreateARepositoryProjectRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the full details of the newly created repository project board, as returned by the GitHub API.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateARepositoryProjectResponseWrapper",
      "type": "object"
    },
    "description": "Creates a new classic project board within a specified repository; classic projects must be enabled for the target repository.",
    "tags": ["openWorldHint", "projects", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a repository ruleset",
    "slug": "GITHUB_CREATE_A_REPOSITORY_RULESET",
    "input_parameters": {
      "description": "Request schema for `CreateARepositoryRuleset`",
      "properties": {
        "bypass_actors": {
          "description": "Actors that can bypass rules in this ruleset. Each actor object requires `actor_id`, `actor_type` (e.g., 'Team', 'Integration'), and `bypass_mode` (e.g., 'always').",
          "examples": [
            "[{\"actor_id\": 1, \"actor_type\": \"Team\", \"bypass_mode\": \"always\"}, {\"actor_id\": 5, \"actor_type\": \"RepositoryRole\", \"bypass_mode\": \"pull_request\"}]"
          ],
          "items": { "additionalProperties": true, "properties": {}, "type": "object" },
          "title": "Bypass Actors",
          "type": "array"
        },
        "conditions__ref__name__exclude": {
          "description": "Ref names or patterns to exclude. Condition fails if any pattern matches the ref name.",
          "examples": [["refs/heads/release/*", "refs/heads/experimental-*"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Conditions  Ref  Name  Exclude",
          "type": "array"
        },
        "conditions__ref__name__include": {
          "description": "Ref names/patterns to include. Condition passes if one pattern matches the ref name. Use `~DEFAULT_BRANCH` for default branch, `~ALL` for all branches.",
          "examples": [["refs/heads/main", "~DEFAULT_BRANCH", "refs/heads/feature-*"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Conditions  Ref  Name  Include",
          "type": "array"
        },
        "enforcement": {
          "description": "Enforcement level: `disabled` (ruleset is not enforced), `active` (ruleset is enforced), or `evaluate` (test rules before enforcing; GitHub Enterprise only).",
          "enum": ["disabled", "active", "evaluate"],
          "examples": ["disabled", "active", "evaluate"],
          "title": "Enforcement",
          "type": "string"
        },
        "name": {
          "description": "Unique name for the ruleset.",
          "examples": ["My branch protection ruleset"],
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "description": "Account owner of the repository (not case-sensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (not case-sensitive).",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "rules": {
          "description": "Array of rule objects to be enforced. Each must have `type` and may have `parameters`. Refer to GitHub API docs for available rule types and parameters.",
          "examples": [
            "[{\"type\": \"creation\"}, {\"type\": \"deletion\"}, {\"type\": \"required_linear_history\"}]"
          ],
          "items": { "additionalProperties": true, "properties": {}, "type": "object" },
          "title": "Rules",
          "type": "array"
        },
        "target": {
          "description": "The target of the ruleset, whether it applies to branches or tags.",
          "enum": ["branch", "tag"],
          "examples": ["branch", "tag"],
          "title": "Target",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "name", "enforcement"],
      "title": "CreateARepositoryRulesetRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details of the created repository ruleset.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateARepositoryRulesetResponseWrapper",
      "type": "object"
    },
    "description": "Creates a uniquely named ruleset for a repository, defining rules for branches or tags with specified enforcement, conditions, and bypass actors.",
    "tags": ["openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a repository using a template",
    "slug": "GITHUB_CREATE_A_REPOSITORY_USING_A_TEMPLATE",
    "input_parameters": {
      "description": "Request schema for `CreateARepositoryUsingATemplate`",
      "properties": {
        "description": {
          "description": "A brief summary or description for the new repository.",
          "examples": ["A new microservice for processing widgets."],
          "title": "Description",
          "type": "string"
        },
        "include_all_branches": {
          "default": false,
          "description": "Set to `true` to copy the directory structure and files from all branches of the template repository, not just the default branch.",
          "examples": ["True", "False"],
          "title": "Include All Branches",
          "type": "boolean"
        },
        "name": {
          "description": "The desired name for the new repository to be created.",
          "examples": ["my-new-service"],
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "description": "The username or organization name that will own the new repository. Defaults to the authenticated user if not provided.",
          "examples": ["my-github-username", "my-cool-org"],
          "title": "Owner",
          "type": "string"
        },
        "private": {
          "default": false,
          "description": "Set to `true` to create a private repository, or `false` to create a public repository.",
          "examples": ["True", "False"],
          "title": "Private",
          "type": "boolean"
        },
        "template_owner": {
          "description": "The username or organization name that owns the template repository. This field is not case-sensitive.",
          "examples": ["octo-org"],
          "title": "Template Owner",
          "type": "string"
        },
        "template_repo": {
          "description": "The name of the template repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["template-for-projects"],
          "title": "Template Repo",
          "type": "string"
        }
      },
      "required": ["template_owner", "template_repo", "name"],
      "title": "CreateARepositoryUsingATemplateRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateARepositoryUsingATemplateResponseWrapper",
      "type": "object"
    },
    "description": "Creates a new repository from an existing template repository; the authenticated user must have access to the template and, if creating in an organization, repository creation permissions within it.",
    "tags": ["openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a repository variable",
    "slug": "GITHUB_CREATE_A_REPOSITORY_VARIABLE",
    "input_parameters": {
      "description": "Request schema for creating a variable within a specific repository.",
      "properties": {
        "name": {
          "description": "The name of the variable to create. Variable names are case-sensitive and can only contain alphanumeric characters ([a-z], [A-Z], [0-9]) or underscores (_). They cannot start with the `GITHUB_` prefix, and spaces are not allowed.",
          "examples": ["DEPLOY_SERVER_URL", "BUILD_VERSION"],
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case sensitive.",
          "examples": ["hello-world", "my-app-repository"],
          "title": "Repo",
          "type": "string"
        },
        "value": {
          "description": "The value of the variable. This will be stored as a string.",
          "examples": ["https://prod.example.com", "1.2.3"],
          "title": "Value",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "name", "value"],
      "title": "CreateARepositoryVariableRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty dictionary. The GitHub API returns a 201 Created status with no content in the body upon successful creation of the repository variable.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateARepositoryVariableResponseWrapper",
      "type": "object"
    },
    "description": "Creates a new, unencrypted variable in a repository for github actions workflows; fails if a variable with the same name already exists.",
    "tags": ["actions", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a repository webhook",
    "slug": "GITHUB_CREATE_A_REPOSITORY_WEBHOOK",
    "input_parameters": {
      "description": "Request schema for creating a repository webhook.",
      "properties": {
        "active": {
          "default": true,
          "description": "Determines if notifications are sent when the webhook is triggered. `true` sends notifications (active), `false` disables them (inactive).",
          "examples": [true, false],
          "title": "Active",
          "type": "boolean"
        },
        "config__content__type": {
          "description": "Media type for serializing payloads: `json` or `form`. Defaults to `form` if not specified. `json` delivers JSON, `form` delivers URL-encoded data.",
          "examples": ["json", "form"],
          "title": "Config  Content  Type",
          "type": "string"
        },
        "config__insecure__ssl": {
          "description": "Determines SSL certificate verification for the payload URL: \"0\" to verify SSL (recommended), or \"1\" to skip. Defaults to \"0\" (verify SSL) if not provided.",
          "examples": ["0", "1"],
          "title": "Config  Insecure  Ssl",
          "type": "string"
        },
        "config__secret": {
          "description": "Optional secret string for HMAC hex digest in delivery signature headers, enhancing security. See GitHub's 'delivery signature headers' documentation for details.",
          "examples": ["mysecrettoken"],
          "title": "Config  Secret",
          "type": "string"
        },
        "config__url": {
          "description": "The URL to which webhook payloads will be delivered via POST for subscribed events.",
          "examples": ["https://example.com/webhook"],
          "format": "uri",
          "title": "Config  Url",
          "type": "string"
        },
        "events": {
          "default": ["push"],
          "description": "List of events to trigger the webhook (e.g., `['push']`, `['issues']`). See GitHub documentation for 'webhook event payloads'.",
          "examples": [["push"], ["issues", "pull_request"], ["*"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Events",
          "type": "array"
        },
        "name": {
          "description": "Name of the webhook. Use `web`. This parameter currently only accepts `web` and defaults to `web` if not provided.",
          "examples": ["web"],
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. This name is not case sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "CreateARepositoryWebhookRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Full details of the newly created webhook, typically including ID, type, configuration, active status, and subscribed events.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateARepositoryWebhookResponseWrapper",
      "type": "object"
    },
    "description": "Creates a webhook for a specified repository; requires admin permissions on the repository.",
    "tags": ["openWorldHint", "repos"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a review comment for a pull request",
    "slug": "GITHUB_CREATE_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST",
    "input_parameters": {
      "description": "Request schema for `CreateAReviewCommentForAPullRequest`",
      "properties": {
        "body": {
          "description": "Text content of the review comment.",
          "examples": ["This looks great!", "Could you clarify this section?"],
          "title": "Body",
          "type": "string"
        },
        "commit_id": {
          "description": "SHA of the commit for the comment. Using an outdated `commit_id` can misplace the comment if lines change.",
          "examples": ["c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc"],
          "title": "Commit Id",
          "type": "string"
        },
        "in_reply_to": {
          "description": "ID of an existing review comment to reply to. If provided, other location parameters (except `body`) are ignored.",
          "examples": ["8663694"],
          "title": "In Reply To",
          "type": "integer"
        },
        "line": {
          "description": "**Required unless `subject_type` is 'file'**. Line number in the diff for the comment; for multi-line, this is the last line of the range.",
          "examples": ["25"],
          "title": "Line",
          "type": "integer"
        },
        "owner": {
          "description": "Account owner of the repository (not case sensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "path": {
          "description": "Relative path of the file for the comment.",
          "examples": ["file1.txt", "src/main.py"],
          "title": "Path",
          "type": "string"
        },
        "position": {
          "description": "**Deprecated: Use `line` instead.** Position in the diff hunk for the comment (not the file line number).",
          "title": "Position",
          "type": "integer"
        },
        "pull_number": {
          "description": "Identifier of the pull request.",
          "examples": ["1347"],
          "title": "Pull Number",
          "type": "integer"
        },
        "repo": {
          "description": "Repository name without the `.git` extension (not case sensitive).",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        },
        "side": {
          "description": "Side of the diff (`LEFT` or `RIGHT`) for the comment in a split diff view; for multi-line comments, refers to the last line of the range.",
          "enum": ["LEFT", "RIGHT"],
          "title": "Side",
          "type": "string"
        },
        "start_line": {
          "description": "**Required for multi-line comments unless `in_reply_to` is used.** First line in the diff for a multi-line comment.",
          "examples": ["20"],
          "title": "Start Line",
          "type": "integer"
        },
        "start_side": {
          "description": "**Required for multi-line comments unless `in_reply_to` is used.** Starting side of the diff (`LEFT` or `RIGHT`) for a multi-line comment.",
          "enum": ["LEFT", "RIGHT", "side"],
          "title": "Start Side",
          "type": "string"
        },
        "subject_type": {
          "description": "Level of the comment target: `line` (specific line) or `file` (entire file). Defaults to `line` if not provided.",
          "enum": ["line", "file"],
          "title": "Subject Type",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "pull_number", "body", "commit_id", "path"],
      "title": "CreateAReviewCommentForAPullRequestRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details of the newly created pull request review comment.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAReviewCommentForAPullRequestResponseWrapper",
      "type": "object"
    },
    "description": "Creates a review comment on a pull request's diff, targeting a specific line, range of lines, an entire file, or replying to an existing comment.",
    "tags": ["openWorldHint", "pulls"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a review for a pull request",
    "slug": "GITHUB_CREATE_A_REVIEW_FOR_A_PULL_REQUEST",
    "input_parameters": {
      "description": "Request schema for `CreateAReviewForAPullRequest`",
      "properties": {
        "body": {
          "default": null,
          "description": "Review's main body text; required if `event` is `REQUEST_CHANGES` or `COMMENT`.",
          "examples": ["This looks great overall!", "Please address the comments below."],
          "nullable": true,
          "title": "Body",
          "type": "string"
        },
        "comments": {
          "default": null,
          "description": "Inline draft review comments. Each object requires `path` (relative file path) and `body` (comment text). Optionally, specify `line` (or `start_line` for multi-line), and `side` (or `start_side`) for diff location. `position` is deprecated; use `line`. Example: `[{'path': 'file.py', 'line': 10, 'body': 'Refactor this.'}]`",
          "examples": [
            "[{\"path\": \"README.md\", \"line\": 5, \"body\": \"Needs more detail here.\"}]",
            "[{\"path\": \"src/main.py\", \"start_line\": 10, \"line\": 12, \"side\": \"RIGHT\", \"body\": \"This logic can be simplified.\"}]"
          ],
          "items": {
            "description": "Schema for individual review comments",
            "properties": {
              "body": {
                "description": "The text of the comment",
                "title": "Body",
                "type": "string"
              },
              "line": {
                "default": null,
                "description": "The line number in the diff to comment on (required for single-line comments)",
                "nullable": true,
                "title": "Line",
                "type": "integer"
              },
              "path": {
                "description": "The relative path to the file being commented on",
                "title": "Path",
                "type": "string"
              },
              "side": {
                "default": null,
                "description": "The side of the diff to place the comment on (LEFT or RIGHT)",
                "enum": ["LEFT", "RIGHT"],
                "nullable": true,
                "title": "SideEnm",
                "type": "string"
              },
              "start_line": {
                "default": null,
                "description": "The start line number for multi-line comments",
                "nullable": true,
                "title": "Start Line",
                "type": "integer"
              },
              "start_side": {
                "default": null,
                "description": "The side of the diff to start a multi-line comment on",
                "enum": ["LEFT", "RIGHT"],
                "nullable": true,
                "title": "SideEnm",
                "type": "string"
              }
            },
            "required": ["path", "body"],
            "title": "ReviewComment",
            "type": "object"
          },
          "nullable": true,
          "title": "Comments",
          "type": "array"
        },
        "commit_id": {
          "default": null,
          "description": "SHA of the commit to review; defaults to the latest pull request commit. Outdated SHAs may lead to stale comments.",
          "examples": ["c4d3a6f8a0c2b0e8e2b8f3c9e8b4b0e5b0b0e0e0"],
          "nullable": true,
          "title": "Commit Id",
          "type": "string"
        },
        "event": {
          "default": null,
          "description": "Review action type (`APPROVE`, `REQUEST_CHANGES`, `COMMENT`); if omitted, review is `PENDING` and requires later submission.",
          "enum": ["APPROVE", "REQUEST_CHANGES", "COMMENT"],
          "examples": ["APPROVE", "REQUEST_CHANGES", "COMMENT"],
          "nullable": true,
          "title": "EventEnm",
          "type": "string"
        },
        "owner": {
          "description": "Username of the account owning the repository (case-insensitive).",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "pull_number": {
          "description": "Identifying number of the pull request.",
          "examples": [1, 123],
          "title": "Pull Number",
          "type": "integer"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension (case-insensitive).",
          "examples": ["Hello-World", "my-private-repo"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "pull_number"],
      "title": "CreateAReviewForAPullRequestRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAReviewForAPullRequestResponseWrapper",
      "type": "object"
    },
    "description": "Creates a pull request review, allowing approval, change requests, or comments; `body` is required if `event` is `request changes` or `comment`, and omitting `event` makes the review `pending`.",
    "tags": ["openWorldHint", "pulls"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a scoped access token",
    "slug": "GITHUB_CREATE_A_SCOPED_ACCESS_TOKEN",
    "input_parameters": {
      "description": "Request schema for creating a new scoped access token for a GitHub App.",
      "properties": {
        "access_token": {
          "description": "User-to-server access token to be exchanged for a new scoped token.",
          "examples": ["ghu_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"],
          "title": "Access Token",
          "type": "string"
        },
        "client_id": {
          "description": "Client ID of the GitHub App.",
          "examples": ["iv1.1234567890abcdef"],
          "title": "Client Id",
          "type": "string"
        },
        "permissions__actions": {
          "description": "Permission for GitHub Actions workflows, workflow runs, and artifacts. Applies to target repositories.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Actions",
          "type": "string"
        },
        "permissions__administration": {
          "description": "Permission for repository administration (settings, teams, collaborators). Applies to target repositories.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Administration",
          "type": "string"
        },
        "permissions__checks": {
          "description": "Permission for checks on code (e.g., CI statuses). Applies to target repositories.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Checks",
          "type": "string"
        },
        "permissions__codespaces": {
          "description": "Permission for Codespaces. Applies to target user/organization if repositories are not specified, otherwise to target repositories.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Codespaces",
          "type": "string"
        },
        "permissions__contents": {
          "description": "Permission for repository contents, commits, branches, downloads, releases, and merges. Applies to target repositories.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Contents",
          "type": "string"
        },
        "permissions__dependabot__secrets": {
          "description": "Permission for Dependabot secrets for targeted repositories.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Dependabot  Secrets",
          "type": "string"
        },
        "permissions__deployments": {
          "description": "Permission for deployments and deployment statuses. Applies to target repositories.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Deployments",
          "type": "string"
        },
        "permissions__email__addresses": {
          "description": "Permission to manage email addresses for the user account. Applies to target user.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Email  Addresses",
          "type": "string"
        },
        "permissions__environments": {
          "description": "Permission for repository environments. Applies to target repositories.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Environments",
          "type": "string"
        },
        "permissions__followers": {
          "description": "Permission to manage followers for the user account. Applies to target user.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Followers",
          "type": "string"
        },
        "permissions__git__ssh__keys": {
          "description": "Permission to manage Git SSH keys for the user account. Applies to target user.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Git  Ssh  Keys",
          "type": "string"
        },
        "permissions__gpg__keys": {
          "description": "Permission to view and manage GPG keys for the user account. Applies to target user.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Gpg  Keys",
          "type": "string"
        },
        "permissions__interaction__limits": {
          "description": "Permission to view and manage interaction limits on a repository. Applies to target repositories or organization.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Interaction  Limits",
          "type": "string"
        },
        "permissions__issues": {
          "description": "Permission for issues, comments, assignees, labels, and milestones. Applies to target repositories.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Issues",
          "type": "string"
        },
        "permissions__members": {
          "description": "Permission for organization members and teams. Applies to target organization.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Members",
          "type": "string"
        },
        "permissions__metadata": {
          "description": "Read-only permission for repository metadata, search, and collaborator listing. Applies to target repositories.",
          "enum": ["read", "write"],
          "examples": ["read"],
          "title": "Permissions  Metadata",
          "type": "string"
        },
        "permissions__organization__administration": {
          "description": "Permission for administrative settings of an organization. Applies to target organization.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Organization  Administration",
          "type": "string"
        },
        "permissions__organization__announcement__banners": {
          "description": "Permission to view and manage organization announcement banners. Applies to target organization.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Organization  Announcement  Banners",
          "type": "string"
        },
        "permissions__organization__copilot__seat__management": {
          "description": "Permission for GitHub Copilot seat assignments for organization members (beta). Applies to target organization.",
          "enum": ["write"],
          "examples": ["write"],
          "title": "Permissions  Organization  Copilot  Seat  Management",
          "type": "string"
        },
        "permissions__organization__custom__org__roles": {
          "description": "Permission for custom organization roles. Applies to target organization.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Organization  Custom  Org  Roles",
          "type": "string"
        },
        "permissions__organization__custom__properties": {
          "description": "Permission for custom properties for an organization. Applies to target organization.",
          "enum": ["read", "write", "admin"],
          "examples": ["read", "write", "admin"],
          "title": "Permissions  Organization  Custom  Properties",
          "type": "string"
        },
        "permissions__organization__custom__roles": {
          "description": "Permission for custom repository roles within an organization. Applies to target organization.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Organization  Custom  Roles",
          "type": "string"
        },
        "permissions__organization__events": {
          "description": "Read-only permission to view organization audit log events. Applies to target organization.",
          "enum": ["read"],
          "examples": ["read"],
          "title": "Permissions  Organization  Events",
          "type": "string"
        },
        "permissions__organization__hooks": {
          "description": "Permission for organization webhooks. Applies to target organization.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Organization  Hooks",
          "type": "string"
        },
        "permissions__organization__packages": {
          "description": "Permission for organization-level GitHub Packages. Applies to target organization.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Organization  Packages",
          "type": "string"
        },
        "permissions__organization__personal__access__token__requests": {
          "description": "Permission for requests for fine-grained personal access tokens within an organization. Applies to target organization.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Organization  Personal  Access  Token  Requests",
          "type": "string"
        },
        "permissions__organization__personal__access__tokens": {
          "description": "Permission for fine-grained personal access tokens requested by organization members. Applies to target organization.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Organization  Personal  Access  Tokens",
          "type": "string"
        },
        "permissions__organization__plan": {
          "description": "Read-only permission for viewing an organization's billing plan. Applies to target organization.",
          "enum": ["read"],
          "examples": ["read"],
          "title": "Permissions  Organization  Plan",
          "type": "string"
        },
        "permissions__organization__projects": {
          "description": "Permission for organization projects and projects beta (if available). Applies to target organization.",
          "enum": ["read", "write", "admin"],
          "examples": ["read", "write", "admin"],
          "title": "Permissions  Organization  Projects",
          "type": "string"
        },
        "permissions__organization__secrets": {
          "description": "Permission for organization-level secrets (e.g., Actions secrets). Applies to target organization.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Organization  Secrets",
          "type": "string"
        },
        "permissions__organization__self__hosted__runners": {
          "description": "Permission for GitHub Actions self-hosted runners for an organization. Applies to target organization.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Organization  Self  Hosted  Runners",
          "type": "string"
        },
        "permissions__organization__user__blocking": {
          "description": "Permission for viewing and managing users blocked by the organization. Applies to target organization.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Organization  User  Blocking",
          "type": "string"
        },
        "permissions__packages": {
          "description": "Permission for packages in GitHub Packages. Applies to target repositories or organization.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Packages",
          "type": "string"
        },
        "permissions__pages": {
          "description": "Permission for GitHub Pages settings, statuses, configurations, builds, and creating new builds. Applies to target repositories.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Pages",
          "type": "string"
        },
        "permissions__profile": {
          "description": "Permission to manage profile settings for the user account. Applies to target user.",
          "enum": ["write"],
          "examples": ["write"],
          "title": "Permissions  Profile",
          "type": "string"
        },
        "permissions__pull__requests": {
          "description": "Permission for pull requests, comments, assignees, labels, milestones, and merges. Applies to target repositories.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Pull  Requests",
          "type": "string"
        },
        "permissions__repository__custom__properties": {
          "description": "Permission to view and edit repository custom properties, if allowed by property definition. Applies to target repositories.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Repository  Custom  Properties",
          "type": "string"
        },
        "permissions__repository__hooks": {
          "description": "Permission for repository webhooks. Applies to target repositories.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Repository  Hooks",
          "type": "string"
        },
        "permissions__repository__projects": {
          "description": "Permission for repository projects, columns, and cards. Applies to target repositories.",
          "enum": ["read", "write", "admin"],
          "examples": ["read", "write", "admin"],
          "title": "Permissions  Repository  Projects",
          "type": "string"
        },
        "permissions__secret__scanning__alerts": {
          "description": "Permission for secret scanning alerts. Applies to target repositories.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Secret  Scanning  Alerts",
          "type": "string"
        },
        "permissions__secrets": {
          "description": "Permission for repository secrets (e.g., Actions secrets). Applies to target repositories.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Secrets",
          "type": "string"
        },
        "permissions__security__events": {
          "description": "Permission for security events (e.g., code scanning alerts). Applies to target repositories.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Security  Events",
          "type": "string"
        },
        "permissions__single__file": {
          "description": "Permission to manage a single file. Requires `repository_ids` set to a single repository and `repositories` to a single file path.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Single  File",
          "type": "string"
        },
        "permissions__starring": {
          "description": "Permission to list and manage repositories a user is starring. Applies to target user.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Starring",
          "type": "string"
        },
        "permissions__statuses": {
          "description": "Permission for commit statuses. Applies to target repositories.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Statuses",
          "type": "string"
        },
        "permissions__team__discussions": {
          "description": "Permission for team discussions and related comments. Applies to target organization.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Team  Discussions",
          "type": "string"
        },
        "permissions__vulnerability__alerts": {
          "description": "Permission for Dependabot alerts. Applies to target repositories.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Permissions  Vulnerability  Alerts",
          "type": "string"
        },
        "permissions__workflows": {
          "description": "Permission for updating GitHub Actions workflow files. Requires `contents: write`. Applies to target repositories.",
          "enum": ["write"],
          "examples": ["write"],
          "title": "Permissions  Workflows",
          "type": "string"
        },
        "repositories": {
          "description": "Repository names to scope the new token to. Cannot be used if `repository_ids` is specified.",
          "examples": [["my-repo", "another-repo"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Repositories",
          "type": "array"
        },
        "repository_ids": {
          "description": "Repository IDs to scope the new token to. Cannot be used if `repositories` is specified.",
          "examples": [["1234567", "7654321"]],
          "items": { "properties": {}, "type": "integer" },
          "title": "Repository Ids",
          "type": "array"
        },
        "target": {
          "description": "Username or organization name for scoping the new token. Required if `target_id` is not provided.",
          "examples": ["octocat", "github-org"],
          "title": "Target",
          "type": "string"
        },
        "target_id": {
          "description": "ID of the user or organization for scoping the new token. Required if `target` is not provided.",
          "examples": ["12345", "67890"],
          "title": "Target Id",
          "type": "integer"
        }
      },
      "required": ["client_id", "access_token"],
      "title": "CreateAScopedAccessTokenRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details of the newly created scoped access token, including the token, `expires_at`, `permissions`, and repository scope.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAScopedAccessTokenResponseWrapper",
      "type": "object"
    },
    "description": "Exchanges a user-to-server token for a new, fine-grained scoped access token for a github app, requiring `client id`, `access token`, either `target` or `target id`, and at least one permission; for repository-specific scoping, provide either `repositories` (names) or `repository ids` (ids), but not both.",
    "tags": ["apps", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a dependency snapshot",
    "slug": "GITHUB_CREATE_A_SNAPSHOT_OF_DEPENDENCIES_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Input for creating a dependency snapshot, capturing the repository's dependency state at a specific commit.",
      "properties": {
        "detector__name": {
          "description": "Optional name of the tool used to detect dependencies.",
          "examples": ["dependency-check"],
          "title": "Detector  Name",
          "type": "string"
        },
        "detector__url": {
          "description": "Optional URL of the detector tool used.",
          "examples": ["https://jeremylong.github.io/DependencyCheck/"],
          "title": "Detector  Url",
          "type": "string"
        },
        "detector__version": {
          "description": "Optional version of the detector tool used.",
          "examples": ["7.0.0"],
          "title": "Detector  Version",
          "type": "string"
        },
        "job__correlator": {
          "description": "Optional string to group snapshots. For a given `job.correlator` and `detector.name`, only the 'latest' snapshot is current. Useful to distinguish detection runs (e.g., concatenating GITHUB_WORKFLOW and GITHUB_JOB).",
          "examples": ["my-workflow-job-123"],
          "title": "Job  Correlator",
          "type": "string"
        },
        "job__html__url": {
          "description": "Optional URL for the job that generated this snapshot.",
          "examples": ["https://github.com/octocat/hello-world/actions/runs/123"],
          "title": "Job  Html  Url",
          "type": "string"
        },
        "job__id": {
          "description": "Optional external ID of the job that generated this snapshot.",
          "title": "Job  Id",
          "type": "string"
        },
        "manifests": {
          "additionalProperties": { "additionalProperties": true, "type": "object" },
          "description": "Optional collection of package manifests (e.g., package-lock.json, pom.xml). Keys are manifest file names; values detail dependencies.",
          "title": "Manifests",
          "type": "object"
        },
        "metadata": {
          "additionalProperties": true,
          "description": "Optional user-defined metadata for domain-specific information. Limited to 8 keys with scalar values (e.g., string, number, boolean).",
          "title": "Metadata",
          "type": "object"
        },
        "owner": {
          "description": "Account owner of the repository (name is not case-sensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "ref": {
          "description": "Git reference (fully qualified, e.g., `refs/heads/main`) of the repository branch/tag that triggered this snapshot.",
          "examples": ["refs/heads/main", "refs/tags/v1.0"],
          "pattern": "^refs/",
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "Repository name, without `.git` extension (name is not case-sensitive).",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        },
        "scanned": {
          "description": "UTC timestamp (ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ) when the snapshot was taken.",
          "examples": ["2023-10-26T14:30:00Z"],
          "format": "date-time",
          "title": "Scanned",
          "type": "string"
        },
        "sha": {
          "description": "Commit SHA (maximum 40 characters) associated with this dependency snapshot.",
          "examples": ["ddc90423135c402f345907a6032d9054137dd9ee"],
          "title": "Sha",
          "type": "string"
        },
        "version": {
          "description": "Version of the dependency snapshot submission, typically of the manifest or lock file format.",
          "title": "Version",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "version", "sha", "ref", "scanned"],
      "title": "CreateASnapshotOfDependenciesForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "ID of the created snapshot and a confirmation message.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateASnapshotOfDependenciesForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Creates a snapshot of a repository's dependencies to populate the github dependency graph and enable security alerts; `sha` must be a 40-character commit id, `ref` a fully qualified git reference (e.g., `refs/heads/main`), and `scanned` an iso 8601 timestamp.",
    "tags": ["dependency-graph", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a tag object",
    "slug": "GITHUB_CREATE_A_TAG_OBJECT",
    "input_parameters": {
      "description": "Request schema for `CreateATagObject` action.",
      "properties": {
        "message": {
          "description": "The message associated with the tag.",
          "examples": ["Initial release v1.0.0"],
          "title": "Message",
          "type": "string"
        },
        "object": {
          "description": "The SHA of the Git object (commit, tree, or blob) that this tag is pointing to.",
          "examples": ["c3d0be41ecbe669545ee3e94d31ed9a4bc91ee3c"],
          "title": "Object",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "tag": {
          "description": "The name of the tag, typically a version identifier (e.g., \"v0.0.1\").",
          "examples": ["v1.0.0"],
          "title": "Tag",
          "type": "string"
        },
        "tagger__date": {
          "description": "The timestamp for when this object was tagged. This should be in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "examples": ["2014-11-07T22:01:45Z"],
          "format": "date-time",
          "title": "Tagger  Date",
          "type": "string"
        },
        "tagger__email": {
          "description": "The email address of the person creating the tag.",
          "examples": ["monalisa.octocat@example.com"],
          "title": "Tagger  Email",
          "type": "string"
        },
        "tagger__name": {
          "description": "The name of the person creating the tag.",
          "examples": ["Monalisa Octocat"],
          "title": "Tagger  Name",
          "type": "string"
        },
        "type": {
          "description": "The type of the Git object being tagged.",
          "enum": ["commit", "tree", "blob"],
          "examples": ["commit"],
          "title": "Type",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "tag", "message", "object", "type"],
      "title": "CreateATagObjectRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateATagObjectResponseWrapper",
      "type": "object"
    },
    "description": "Creates an annotated git tag object in a repository, pointing to an existing git object (commit, tree, or blob) defined by its sha and ensuring the `type` field correctly specifies the object's type.",
    "tags": ["git", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a tag protection state for a repository",
    "slug": "GITHUB_CREATE_A_TAG_PROTECTION_STATE_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for `CreateATagProtectionStateForARepository`",
      "properties": {
        "owner": {
          "description": "The account owner of the repository (username or organization name). Not case sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "pattern": {
          "description": "Glob pattern to protect tags. Examples: `v1.*` (protects tags starting with `v1.`), `*` (protects all tags).",
          "examples": ["v1.*", "releases/stable/*", "*"],
          "title": "Pattern",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. Not case sensitive.",
          "examples": ["Hello-World", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "pattern"],
      "title": "CreateATagProtectionStateForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Empty dictionary, as a successful creation returns an empty body with a 201 status code.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateATagProtectionStateForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Creates a tag protection rule for a repository using a glob pattern; note: tag protections are deprecated (sunset august 30, 2024), migrate to repository rulesets.",
    "tags": ["openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a team",
    "slug": "GITHUB_CREATE_A_TEAM",
    "input_parameters": {
      "description": "Request schema for creating a new team in a GitHub organization.",
      "properties": {
        "description": {
          "description": "Team's purpose or focus.",
          "examples": ["A team for frontend development projects."],
          "title": "Description",
          "type": "string"
        },
        "maintainers": {
          "description": "GitHub user handles of organization members to be team maintainers; users must be organization members.",
          "examples": [["octocat", "gh-user123"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Maintainers",
          "type": "array"
        },
        "name": {
          "description": "Name of the new team.",
          "examples": ["The A-Team", "Developers"],
          "title": "Name",
          "type": "string"
        },
        "notification_setting": {
          "description": "Notification settings for @mentions: 'notifications_enabled' (members notified) or 'notifications_disabled' (no one notified). Default: 'notifications_enabled'.",
          "enum": ["notifications_enabled", "notifications_disabled"],
          "examples": ["notifications_enabled", "notifications_disabled"],
          "title": "Notification Setting",
          "type": "string"
        },
        "org": {
          "description": "Organization name where the team will be created (not case-sensitive).",
          "examples": ["my-github-org"],
          "title": "Org",
          "type": "string"
        },
        "parent_team_id": {
          "description": "ID of an existing team to be the parent, creating a nested team. If provided, new team `privacy` must be 'closed'.",
          "examples": ["123", "456"],
          "title": "Parent Team Id",
          "type": "integer"
        },
        "permission": {
          "default": "pull",
          "description": "**Deprecated**. Default repository permission ('pull' for read access, 'push' for write access) for the team.",
          "enum": ["pull", "push"],
          "examples": ["pull", "push"],
          "title": "Permission",
          "type": "string"
        },
        "privacy": {
          "description": "Team privacy: 'secret' (visible to owners and members) or 'closed' (visible to all org members). Defaults to 'secret' for non-nested teams; must be 'closed' if `parent_team_id` is set.",
          "enum": ["secret", "closed"],
          "examples": ["secret", "closed"],
          "title": "Privacy",
          "type": "string"
        },
        "repo_names": {
          "description": "Repository full names (e.g., \"org-name/repo-name\") for team access; repositories must exist and be accessible to the organization.",
          "examples": [["my-github-org/internal-project", "my-github-org/another-repo"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Repo Names",
          "type": "array"
        }
      },
      "required": ["org", "name"],
      "title": "CreateATeamRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Full representation of the newly created team from the GitHub API.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateATeamResponseWrapper",
      "type": "object"
    },
    "description": "Creates a new team in an organization, optionally with maintainers, repositories, specific privacy, notification settings, or a parent team; if `parent team id` is given, `privacy` must be 'closed'.",
    "tags": ["openWorldHint", "teams"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a temporary private fork",
    "slug": "GITHUB_CREATE_A_TEMPORARY_PRIVATE_FORK",
    "input_parameters": {
      "description": "Request schema for `CreateATemporaryPrivateFork`",
      "properties": {
        "ghsa_id": {
          "description": "Identifier for the GitHub Security Advisory (e.g., GHSA-rfv9-x7w6-39px) that the fork will address.",
          "examples": ["GHSA-rfv9-x7w6-39px", "GHSA- কাদের-abc1-2def"],
          "title": "Ghsa Id",
          "type": "string"
        },
        "owner": {
          "description": "Account owner (username or organization) of the repository; not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension; not case-sensitive.",
          "examples": ["linguist", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "ghsa_id"],
      "title": "CreateATemporaryPrivateForkRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Full repository object of the newly created temporary private fork.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateATemporaryPrivateForkResponseWrapper",
      "type": "object"
    },
    "description": "Creates a temporary private fork of the specified repository to address a security vulnerability, linking the fork to a ghsa id that must be specifically associated with this repository; the fork may take up to 5 minutes to become accessible.",
    "tags": ["openWorldHint", "security-advisories", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a tree",
    "slug": "GITHUB_CREATE_A_TREE",
    "input_parameters": {
      "description": "Request schema for `CreateATree`",
      "properties": {
        "base_tree": {
          "description": "SHA1 of an existing Git tree object to use as a base. If provided, its entries are combined with `tree` entries, where `tree` entries overwrite those from `base_tree` with the same path. Typically the SHA1 of the latest commit's tree for new branch changes. If omitted, the new tree is built from `tree` entries; files from the parent commit's tree not in `tree` are treated as deleted.",
          "title": "Base Tree",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. ",
          "title": "Repo",
          "type": "string"
        },
        "tree": {
          "description": "List of objects defining the tree structure. Each object (node) requires `path` (string), `mode` (string; e.g., '100644' file, '100755' executable, '040000' subdirectory/tree, '160000' submodule, '120000' symlink), and `type` (string: 'blob', 'tree', or 'commit'). For new/updated blobs, provide `content` (UTF-8 string). For existing objects or `tree`/`commit` types, provide `sha` (string). To delete, specify `path`, `mode`, `type`, and set `sha` to `null`.",
          "examples": [
            "[{\"path\": \"new_file.txt\", \"mode\": \"100644\", \"type\": \"blob\", \"content\": \"Hello World!\"}, {\"path\": \"subdir/another_file.md\", \"mode\": \"100644\", \"type\": \"blob\", \"content\": \"# Markdown Content\"}, {\"path\": \"file_to_delete.txt\", \"mode\": \"100644\", \"type\": \"blob\", \"sha\": null}]"
          ],
          "items": { "additionalProperties": true, "properties": {}, "type": "object" },
          "title": "Tree",
          "type": "array"
        }
      },
      "required": ["owner", "repo", "tree"],
      "title": "CreateATreeRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the created Git tree object. It includes the `sha` and `url` of the new tree, an array of `tree` items (nodes in the tree), and a `truncated` boolean flag indicating if the number of items in the tree array exceeded the maximum limit and was cut short.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateATreeResponseWrapper",
      "type": "object"
    },
    "description": "Creates a new git tree object in a repository, defining file/directory structure by specifying tree entries, optionally building on a `base tree` sha; all provided shas must be valid.",
    "tags": ["git", "openWorldHint", "important"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a user project",
    "slug": "GITHUB_CREATE_A_USER_PROJECT",
    "input_parameters": {
      "description": "Request schema for `CreateAUserProject`",
      "properties": {
        "body": {
          "description": "Body or description for the new project.",
          "examples": [
            "A project to track Q3 deliverables.",
            "Planning for the next product launch.",
            "Collection of ideas and tasks for the website redesign."
          ],
          "title": "Body",
          "type": "string"
        },
        "name": {
          "description": "Name for the new project.",
          "examples": ["My New Project", "Q3 Roadmap", "Website Redesign Ideas"],
          "title": "Name",
          "type": "string"
        }
      },
      "required": ["name"],
      "title": "CreateAUserProjectRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAUserProjectResponseWrapper",
      "type": "object"
    },
    "description": "Creates a new github project board for the authenticated user to organize and track issues, pull requests, and notes.",
    "tags": ["openWorldHint", "projects", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a workflow dispatch event",
    "slug": "GITHUB_CREATE_A_WORKFLOW_DISPATCH_EVENT",
    "input_parameters": {
      "description": "Request schema for initiating a GitHub Actions workflow dispatch event.",
      "properties": {
        "inputs": {
          "additionalProperties": true,
          "description": "Key-value inputs for the workflow, matching `on.workflow_dispatch.inputs` definitions (max 10); uses workflow defaults if omitted.",
          "examples": [
            "{\"actor\": \"mona\", \"environment\": \"production\"}",
            "{\"version\": \"1.2.3\", \"skip_tests\": false, \"deploy_group\": \"canary\"}"
          ],
          "title": "Inputs",
          "type": "object"
        },
        "owner": {
          "description": "Owner of the repository (username or organization, case-insensitive).",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "ref": {
          "description": "Git reference (branch or tag) for the workflow.",
          "examples": ["main", "refs/heads/feature-branch", "refs/tags/v1.2.0"],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "Repository name, excluding the `.git` extension (case-insensitive).",
          "examples": ["hello-world", "my-app-repository"],
          "title": "Repo",
          "type": "string"
        },
        "workflow_id": {
          "description": "Identifier of the workflow, which can be its numeric ID or filename (e.g., 'main.yml'); the GitHub API accepts either format.",
          "examples": ["1234567", "build-and-deploy.yml"],
          "title": "Workflow Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "workflow_id", "ref"],
      "title": "CreateAWorkflowDispatchEventRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response data; typically empty on successful dispatch (HTTP 204 No Content).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAWorkflowDispatchEventResponseWrapper",
      "type": "object"
    },
    "description": "Manually triggers a github actions workflow identified by `workflow id` at a given `ref`, if the workflow is configured to accept `workflow dispatch` events.",
    "tags": ["actions", "openWorldHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create commit signature protection",
    "slug": "GITHUB_CREATE_COMMIT_SIGNATURE_PROTECTION",
    "input_parameters": {
      "description": "Request schema for `CreateCommitSignatureProtection`",
      "properties": {
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
          "examples": ["main", "develop", "feature/new-login"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "examples": ["Hello-World", "linguist"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "CreateCommitSignatureProtectionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateCommitSignatureProtectionResponseWrapper",
      "type": "object"
    },
    "description": "Enables commit signature protection for a specified branch, requiring all new commits to be signed.",
    "tags": ["openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a custom deployment protection rule on an environment",
    "slug": "GITHUB_CREATE_DEPLOYMENT_PROTECTION_RULE",
    "input_parameters": {
      "description": "Request to enable a custom deployment protection rule on an environment.",
      "properties": {
        "environment_name": {
          "description": "The name of the environment to which the protection rule will be applied. This name must be URL-encoded if it contains special characters (e.g., slashes `/` should be replaced with `%2F`).",
          "examples": ["production", "staging%2Fuser-testing"],
          "title": "Environment Name",
          "type": "string"
        },
        "integration_id": {
          "description": "The unique identifier of the GitHub App that provides the custom deployment protection rule. This app must be installed and configured for the repository.",
          "title": "Integration Id",
          "type": "integer"
        },
        "owner": {
          "description": "The GitHub username or organization name that owns the repository. This name is not case sensitive.",
          "examples": ["octocat", "MyOrganization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository where the environment exists. Do not include the `.git` extension. This name is not case sensitive.",
          "examples": ["my-awesome-app", "BackendService"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["environment_name", "repo", "owner"],
      "title": "CreateACustomDeploymentProtectionRuleOnAnEnvironmentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the details of the newly created custom deployment protection rule.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateACustomDeploymentProtectionRuleOnAnEnvironmentResponseWrapper",
      "type": "object"
    },
    "description": "Enables a custom deployment protection rule for an existing environment in a repository by linking a configured github app (via `integration id`) to control deployments.",
    "tags": ["openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create JIT runner config for repo",
    "slug": "GITHUB_CREATE_JIT_RUNNER_CONFIG",
    "input_parameters": {
      "description": "Request schema to generate a Just-In-Time (JIT) runner configuration for a repository, used by the runner for registration.",
      "properties": {
        "labels": {
          "description": "A list of custom labels to assign to the runner. These labels help in targeting specific runners for jobs. Minimum items: 1. Maximum items: 100.",
          "examples": [["self-hosted", "linux", "x64"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Labels",
          "type": "array"
        },
        "name": {
          "description": "The desired name for the new self-hosted runner.",
          "examples": ["my-jit-runner-1"],
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the '.git' extension. This field is not case-sensitive.",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        },
        "runner_group_id": {
          "description": "The unique identifier of the runner group to which the new runner will be assigned. Use 0 for the default group or the ID of a specific runner group.",
          "examples": [1, 0],
          "title": "Runner Group Id",
          "type": "integer"
        },
        "work_folder": {
          "default": "_work",
          "description": "The working directory for the runner, relative to its installation path. This is where job execution will take place.",
          "examples": ["_work_custom"],
          "title": "Work Folder",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "name", "runner_group_id", "labels"],
      "title": "CreateJitRunnerConfigRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the JIT configuration for the runner. This typically includes an encoded JIT configuration string which contains a temporary, time-limited token used by the runner to authenticate and register itself with GitHub Actions, along with the repository URL.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateJitRunnerConfigResponseWrapper",
      "type": "object"
    },
    "description": "Generates a temporary just-in-time (jit) configuration for a new self-hosted github actions runner for a repository; any specified non-default `runner group id` must be an existing runner group accessible by the repository.",
    "tags": ["actions", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create or update an environment",
    "slug": "GITHUB_CREATE_OR_UPDATE_AN_ENVIRONMENT",
    "input_parameters": {
      "description": "Request schema for `CreateOrUpdateAnEnvironment`",
      "properties": {
        "deployment__branch__policy__custom__branch__policies": {
          "description": "If true, deployment is restricted to branches matching custom name patterns; `deployment_branch_policy_protected_branches` must then be false.",
          "examples": ["true", "false"],
          "title": "Deployment  Branch  Policy  Custom  Branch  Policies",
          "type": "boolean"
        },
        "deployment__branch__policy__protected__branches": {
          "description": "If true, only branches with existing protection rules can deploy; `deployment_branch_policy_custom_branch_policies` must then be false.",
          "examples": ["true", "false"],
          "title": "Deployment  Branch  Policy  Protected  Branches",
          "type": "boolean"
        },
        "environment_name": {
          "description": "Name of the environment. URL-encode if it contains special characters (e.g., '/' becomes '%2F').",
          "examples": ["production", "staging%2Ffrontend", "dev-test"],
          "title": "Environment Name",
          "type": "string"
        },
        "owner": {
          "description": "The username or organization name of the repository owner (not case-sensitive).",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "prevent_self_review": {
          "description": "If true, prevents the user who triggered deployment from approving their own job.",
          "examples": ["true", "false"],
          "title": "Prevent Self Review",
          "type": "boolean"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (not case-sensitive).",
          "examples": ["hello-world", "dotfiles"],
          "title": "Repo",
          "type": "string"
        },
        "reviewers": {
          "description": "Up to 6 users or teams allowed to review deployments. Reviewers need at least read access; one approval suffices. Each reviewer object requires `id` and `type` ('User' or 'Team').",
          "examples": [
            "[{\"id\": 4532, \"type\": \"User\"}]",
            "[{\"id\": 123, \"type\": \"Team\"}, {\"id\": 9876, \"type\": \"User\"}]"
          ],
          "items": { "additionalProperties": true, "properties": {}, "type": "object" },
          "title": "Reviewers",
          "type": "array"
        },
        "wait_timer": {
          "description": "Time in minutes to delay a job after it's triggered (0-43,200, i.e., up to 30 days).",
          "examples": ["0", "30", "1440"],
          "title": "Wait Timer",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "environment_name"],
      "title": "CreateOrUpdateAnEnvironmentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details of the created or updated environment, structured as per GitHub API's environment object.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateOrUpdateAnEnvironmentResponseWrapper",
      "type": "object"
    },
    "description": "Creates a new environment or updates an existing one in a github repository, allowing configuration of deployment protection rules such as wait timers and reviewers; ensure `environment name` is url-encoded if it contains special characters.",
    "tags": ["openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create or update an environment secret",
    "slug": "GITHUB_CREATE_OR_UPDATE_AN_ENVIRONMENT_SECRET",
    "input_parameters": {
      "description": "Request schema for `CreateOrUpdateAnEnvironmentSecret`",
      "properties": {
        "encrypted_value": {
          "description": "Value of the secret, encrypted with LibSodium using the public key obtained from the 'Get an environment public key' GitHub API endpoint for the target environment.",
          "examples": ["yourBase64EncodedEncryptedSecretValue"],
          "title": "Encrypted Value",
          "type": "string"
        },
        "environment_name": {
          "description": "Name of the environment. Case-sensitive; URL-encode special characters (e.g., `/` becomes `%2F`).",
          "examples": ["production", "staging%2Ffeature-branch", "development_env"],
          "title": "Environment Name",
          "type": "string"
        },
        "key_id": {
          "description": "ID of the public key used for encryption, obtained from the 'Get an environment public key' GitHub API endpoint.",
          "examples": ["publicKeyIdentifierString12345"],
          "title": "Key Id",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. Not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository. Not case-sensitive.",
          "examples": ["hello-world", "my-app-repository"],
          "title": "Repo",
          "type": "string"
        },
        "secret_name": {
          "description": "Name of the secret. Case-sensitive.",
          "examples": ["DATABASE_PASSWORD", "API_TOKEN", "DEPLOYMENT_KEY"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "environment_name", "secret_name", "encrypted_value", "key_id"],
      "title": "CreateOrUpdateAnEnvironmentSecretRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Empty dictionary indicating successful secret creation (201 status) or update (204 status).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateOrUpdateAnEnvironmentSecretResponseWrapper",
      "type": "object"
    },
    "description": "Creates or updates an environment secret with an `encrypted value` that was encrypted using the public key identified by `key id` for the specified environment.",
    "tags": ["actions", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create or update an organization secret",
    "slug": "GITHUB_CREATE_OR_UPDATE_AN_ORGANIZATION_SECRET",
    "input_parameters": {
      "description": "Request schema for creating or updating an organization secret.",
      "properties": {
        "encrypted_value": {
          "description": "Value for the secret, pre-encrypted using LibSodium with the organization's public key (obtained from 'Get an organization public key' endpoint). Required if creating a new secret or updating its value.",
          "examples": ["VGhpcyBpcyBhbiBleGFtcGxlIG9mIGFuIGVuY3J5cHRlZCB2YWx1ZQ=="],
          "title": "Encrypted Value",
          "type": "string"
        },
        "key_id": {
          "description": "ID of the public key (from 'Get an organization public key' endpoint) used for encryption. Required if `encrypted_value` is provided.",
          "examples": ["key_identifier_from_github_12345"],
          "title": "Key Id",
          "type": "string"
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "examples": ["my-github-organization"],
          "title": "Org",
          "type": "string"
        },
        "secret_name": {
          "description": "The name of the secret.",
          "examples": ["ORGANIZATION_API_KEY"],
          "title": "Secret Name",
          "type": "string"
        },
        "selected_repository_ids": {
          "description": "List of repository IDs that can access this secret. Required and only applicable when `visibility` is 'selected'.",
          "examples": ["12345", "67890", "98761"],
          "items": { "properties": {}, "type": "integer" },
          "title": "Selected Repository Ids",
          "type": "array"
        },
        "visibility": {
          "description": "Controls which repositories can access the secret. If 'selected', `selected_repository_ids` must be provided.",
          "enum": ["all", "private", "selected"],
          "examples": ["all", "private", "selected"],
          "title": "Visibility",
          "type": "string"
        }
      },
      "required": ["org", "secret_name", "visibility"],
      "title": "CreateOrUpdateAnOrganizationSecretRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response. Typically an empty body for successful creation (201) or update (204); may contain data for errors.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["successful"],
      "title": "CreateOrUpdateAnOrganizationSecretResponseWrapper",
      "type": "object"
    },
    "description": "Creates or updates an organization secret for github actions, requiring its value to be pre-encrypted via libsodium using the organization's public key.",
    "tags": ["actions", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create or update a custom property for an organization",
    "slug": "GITHUB_CREATE_OR_UPDATE_A_CUSTOM_PROPERTY_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request to create or update a custom metadata property for an organization's repositories.",
      "properties": {
        "allowed_values": {
          "description": "Ordered list of allowed values (up to 200). Required and non-empty if `value_type` is `single_select`.",
          "examples": [["pending", "active", "completed", "archived"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Allowed Values",
          "type": "array"
        },
        "custom_property_name": {
          "description": "Name of the custom property (case-sensitive).",
          "examples": ["project-status"],
          "title": "Custom Property Name",
          "type": "string"
        },
        "default_value": {
          "description": "Default value if property isn't set. For `single_select` type, must be one of `allowed_values`.",
          "examples": ["pending", "active"],
          "title": "Default Value",
          "type": "string"
        },
        "description": {
          "description": "Explanation of the custom property's purpose.",
          "examples": ["Tracks the current status of a project."],
          "title": "Description",
          "type": "string"
        },
        "org": {
          "description": "The organization's unique identifier (case-insensitive).",
          "examples": ["my-org-name"],
          "title": "Org",
          "type": "string"
        },
        "required": {
          "description": "If true, property must be set for all repositories and `default_value` is mandatory.",
          "title": "Required",
          "type": "boolean"
        },
        "value_type": {
          "description": "Data type of the custom property.",
          "enum": ["string", "single_select"],
          "examples": ["string", "single_select"],
          "title": "Value Type",
          "type": "string"
        }
      },
      "required": ["org", "custom_property_name", "value_type"],
      "title": "CreateOrUpdateACustomPropertyForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateOrUpdateACustomPropertyForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Creates a new custom property (name must be unique for creation) or updates an existing one for an organization to define metadata for its repositories.",
    "tags": ["idempotentHint", "openWorldHint", "orgs", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create or update a repository secret",
    "slug": "GITHUB_CREATE_OR_UPDATE_A_REPOSITORY_SECRET",
    "input_parameters": {
      "description": "Request schema for `CreateOrUpdateARepositorySecret`",
      "properties": {
        "encrypted_value": {
          "description": "Value for the secret, pre-encrypted with the repository's public key using LibSodium (public key is obtained via 'Get a repository public key' endpoint).",
          "examples": ["ENCRYPTED_STRING_OBTAINED_VIA_LIBSODIUM..."],
          "title": "Encrypted Value",
          "type": "string"
        },
        "key_id": {
          "description": "ID of the public key used to encrypt `encrypted_value` (obtained with the public key). Required if `encrypted_value` is provided.",
          "examples": ["1234567890ABCDEF"],
          "title": "Key Id",
          "type": "string"
        },
        "owner": {
          "description": "The repository owner's username or organization name (case-insensitive).",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The repository name, without the `.git` extension (case-insensitive).",
          "examples": ["hello-world", "my-action-repo"],
          "title": "Repo",
          "type": "string"
        },
        "secret_name": {
          "description": "The name for the secret being created or updated.",
          "examples": ["GH_TOKEN", "AWS_SECRET_KEY", "NPM_TOKEN"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "secret_name"],
      "title": "CreateOrUpdateARepositorySecretRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response; typically empty for successful creation (201) or update (204) as GitHub returns an empty response body.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateOrUpdateARepositorySecretResponseWrapper",
      "type": "object"
    },
    "description": "Creates or updates a github actions secret within a specific repository; use `encrypted value` and `key id` to set or change its value.",
    "tags": ["actions", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create or update a secret for the authenticated user",
    "slug": "GITHUB_CREATE_OR_UPDATE_A_SECRET_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for creating or updating a Codespaces secret for the authenticated user.",
      "properties": {
        "encrypted_value": {
          "description": "Secret's value, encrypted using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) with the public key (see `key_id`) obtained from GitHub's 'Get public key for the authenticated user' endpoint.",
          "title": "Encrypted Value",
          "type": "string"
        },
        "key_id": {
          "description": "ID of the public key (from GitHub's 'Get public key for the authenticated user' endpoint) used to encrypt `encrypted_value`.",
          "examples": ["key_id_12345"],
          "title": "Key Id",
          "type": "string"
        },
        "secret_name": {
          "description": "The name of the secret. This name must be unique among the user's Codespaces secrets.",
          "examples": ["MY_API_KEY", "DATABASE_PASSWORD"],
          "title": "Secret Name",
          "type": "string"
        },
        "selected_repository_ids": {
          "description": "Repository IDs that can access this secret. If omitted or empty, accessible to all user's Codespaces-enabled repositories.",
          "examples": ["12345", "67890"],
          "items": { "properties": {}, "type": "integer" },
          "title": "Selected Repository Ids",
          "type": "array"
        }
      },
      "required": ["secret_name", "key_id"],
      "title": "CreateOrUpdateASecretForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateOrUpdateASecretForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Creates or updates a codespaces secret for the authenticated user; `encrypted value` must be encrypted with the public key (id: `key id`) from github's 'get public key for the authenticated user' endpoint.",
    "tags": ["codespaces", "destructiveHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create or update custom properties for an organization",
    "slug": "GITHUB_CREATE_OR_UPDATE_CUSTOM_PROPERTIES_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for `CreateOrUpdateCustomPropertiesForAnOrganization`",
      "properties": {
        "org": {
          "description": "The case-insensitive organization name.",
          "examples": ["my-organization", "github"],
          "title": "Org",
          "type": "string"
        },
        "properties": {
          "description": "Definitions for custom properties. Each must include a unique `property_name` (max 75 chars, no spaces) and `value_type`. Optional: `description`, `required`, `default_value`, `allowed_values` (for 'single_select' type).",
          "examples": [
            "[{\"property_name\": \"project-priority\", \"value_type\": \"single_select\", \"description\": \"Priority of the project\", \"required\": True, \"allowed_values\": [\"High\", \"Medium\", \"Low\"]}, {\"property_name\": \"environment\", \"value_type\": \"string\", \"description\": \"Deployment environment\"}]"
          ],
          "items": { "additionalProperties": true, "properties": {}, "type": "object" },
          "title": "Properties",
          "type": "array"
        }
      },
      "required": ["org", "properties"],
      "title": "CreateOrUpdateCustomPropertiesForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The organization's complete list of custom property definitions post-operation.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateOrUpdateCustomPropertiesForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Creates new custom property schemas or updates existing ones in bulk for a specified organization; each property definition must include `property name` and `value type`.",
    "tags": ["openWorldHint", "orgs", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create or update repository custom property values",
    "slug": "GITHUB_CREATE_OR_UPDATE_CUSTOM_PROPERTY_VALUES_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for `CreateOrUpdateCustomPropertyValuesForARepository`",
      "properties": {
        "owner": {
          "description": "The account owner of the repository. This name is not case sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "properties": {
          "description": "A list of custom property objects to create or update for the repository. Each object in the list must contain `property_name` (string identifying the custom property) and `value` (the value for the property, which can be a string, number, or a single-select option, matching the property's defined type).",
          "examples": [
            "[{\"property_name\": \"environment\", \"value\": \"production\"}, {\"property_name\": \"project_status\", \"value\": \"active\"}]",
            "[{\"property_name\": \"data_sensitivity\", \"value\": \"high\"}, {\"property_name\": \"internal_tooling\", \"value\": true}]",
            "[{\"property_name\": \"needs_review_by\", \"value\": null}]"
          ],
          "items": { "additionalProperties": true, "properties": {}, "type": "object" },
          "title": "Properties",
          "type": "array"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case sensitive.",
          "examples": ["hello-world", "my-awesome-app"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "properties"],
      "title": "CreateOrUpdateCustomPropertyValuesForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the API response data. For this operation, a successful request typically returns an HTTP 204 No Content status, which may result in this dictionary being empty or not populated, depending on the API client's handling.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["successful"],
      "title": "CreateOrUpdateCustomPropertyValuesForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Creates or updates up to 30 custom property values for a repository; custom properties must be predefined at the organization or repository level, and setting a property's value to `null` removes it.",
    "tags": ["updateHint", "idempotentHint", "openWorldHint", "Custom Properties", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create or update file contents",
    "slug": "GITHUB_CREATE_OR_UPDATE_FILE_CONTENTS",
    "input_parameters": {
      "description": "Request schema for creating or updating a file's contents in a GitHub repository.",
      "properties": {
        "author__date": {
          "description": "Author's timestamp (ISO 8601 format). Defaults to committer's date if author details are provided but date is not.",
          "examples": ["2023-10-26T11:30:00Z"],
          "title": "Author  Date",
          "type": "string"
        },
        "author__email": {
          "description": "Author's email. If specified, `author_name` is also required. Defaults to committer details; if all committer/author details omitted, GitHub uses authenticated user.",
          "examples": ["jane.smith@example.com"],
          "title": "Author  Email",
          "type": "string"
        },
        "author__name": {
          "description": "Author's name. If specified, `author_email` is also required. Defaults to committer details; if all committer/author details omitted, GitHub uses authenticated user.",
          "examples": ["Jane Smith"],
          "title": "Author  Name",
          "type": "string"
        },
        "branch": {
          "description": "The branch name. Defaults to the repository’s default branch if omitted.",
          "examples": ["main", "develop"],
          "title": "Branch",
          "type": "string"
        },
        "committer__date": {
          "description": "Committer's commit timestamp (ISO 8601 format). Defaults to current time if committer details are provided but date is not.",
          "examples": ["2023-10-26T12:00:00Z"],
          "title": "Committer  Date",
          "type": "string"
        },
        "committer__email": {
          "description": "Committer's email. If specified, `committer_name` is also required. GitHub uses authenticated user if all committer/author details omitted.",
          "examples": ["john.doe@example.com"],
          "title": "Committer  Email",
          "type": "string"
        },
        "committer__name": {
          "description": "Committer's name. If specified, `committer_email` is also required. GitHub uses authenticated user if all committer/author details omitted.",
          "examples": ["John Doe"],
          "title": "Committer  Name",
          "type": "string"
        },
        "content": {
          "description": "The new file content, Base64 encoded. For example, to upload the text 'Hello World', use 'SGVsbG8gV29ybGQ='.",
          "examples": ["SGVsbG8gV29ybGQ="],
          "title": "Content",
          "type": "string"
        },
        "message": {
          "description": "The commit message for this file creation or update.",
          "examples": ["feat: add new documentation", "docs: update README"],
          "title": "Message",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository (not case sensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "path": {
          "description": "The full path to the file in the repository, including the filename and extension.",
          "examples": ["README.md", "src/main.js"],
          "title": "Path",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository (not case sensitive, without the `.git` extension).",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        },
        "sha": {
          "description": "The blob SHA of the file being replaced. Required to update an existing file; omit to create a new file.",
          "examples": ["aa218f56b14c9653891f9e74264a383fa43fefbd"],
          "title": "Sha",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "path", "message", "content"],
      "title": "CreateOrUpdateFileContentsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateOrUpdateFileContentsResponseWrapper",
      "type": "object"
    },
    "description": "Creates a new file or updates an existing file in a github repository; provide `sha` to update an existing file, otherwise a new file is created.",
    "tags": ["openWorldHint", "important"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create or update repo secret with encrypted value",
    "slug": "GITHUB_CREATE_OR_UPDATE_REPO_SECRET_WITH_ENCRYPTED_VALUE",
    "input_parameters": {
      "description": "Request schema for `CreateOrUpdateRepoSecretWithEncryptedValue`",
      "properties": {
        "encrypted_value": {
          "description": "Value for your secret. This value must be encrypted with LibSodium, using the public key retrieved from the GitHub API's 'Get a repository public key' endpoint for Dependabot secrets. The resulting encrypted string is typically Base64 encoded.",
          "title": "Encrypted Value",
          "type": "string"
        },
        "key_id": {
          "description": "The ID of the public key that was used to encrypt the secret value. This ID is retrieved from GitHub along with the public key via the 'Get a repository public key' endpoint for Dependabot secrets.",
          "title": "Key Id",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository (e.g., a GitHub username or organization name). This name is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["hello-world", "my-awesome-app"],
          "title": "Repo",
          "type": "string"
        },
        "secret_name": {
          "description": "The name of the Dependabot secret to create or update.",
          "examples": ["NPM_TOKEN", "DOCKER_REGISTRY_PASSWORD"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "secret_name"],
      "title": "CreateOrUpdateRepoSecretWithEncryptedValueRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Response data from the API. Upon successful creation (HTTP 201 status) or update (HTTP 204 status) of the secret, this field is typically an empty dictionary. In other cases, such as errors, it may contain relevant details.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateOrUpdateRepoSecretWithEncryptedValueResponseWrapper",
      "type": "object"
    },
    "description": "Creates or updates a dependabot secret in a repository using an `encrypted value` (pre-encrypted with libsodium using the repository's dependabot public key) and its corresponding `key id`.",
    "tags": ["dependabot", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create reaction for an issue",
    "slug": "GITHUB_CREATE_REACTION_FOR_AN_ISSUE",
    "input_parameters": {
      "description": "Request schema for `CreateReactionForAnIssue`",
      "properties": {
        "content": {
          "description": "The reaction type to add to the issue. See the [GitHub documentation on reactions](https://docs.github.com/rest/reactions/reactions#about-reactions) for full details.",
          "enum": ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
          "examples": ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
          "title": "Content",
          "type": "string"
        },
        "issue_number": {
          "description": "The number that identifies the issue.",
          "examples": [1347],
          "title": "Issue Number",
          "type": "integer"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case-sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "issue_number", "content"],
      "title": "CreateReactionForAnIssueRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the details of the created reaction. Key fields typically include `id` (reaction ID), `node_id`, `user` (an object detailing the user who reacted), `content` (the reaction emoji, e.g., '+1'), and `created_at` (timestamp of creation).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateReactionForAnIssueResponseWrapper",
      "type": "object"
    },
    "description": "Creates a reaction for a specified issue within a github repository.",
    "tags": ["openWorldHint", "reactions", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create reaction for an issue comment",
    "slug": "GITHUB_CREATE_REACTION_FOR_AN_ISSUE_COMMENT",
    "input_parameters": {
      "description": "Request model to create a reaction for an issue comment.",
      "properties": {
        "comment_id": {
          "description": "Unique identifier of the issue comment.",
          "examples": ["12345", "98765"],
          "title": "Comment Id",
          "type": "integer"
        },
        "content": {
          "description": "Reaction content to add to the issue comment. Must be one of the values from `ContentEnm`.",
          "enum": ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
          "examples": ["+1", "heart", "rocket"],
          "title": "Content",
          "type": "string"
        },
        "owner": {
          "description": "Username of the account that owns the repository (not case-sensitive).",
          "examples": ["octocat", "actions"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (not case-sensitive).",
          "examples": ["Spoon-Knife", "runner"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "comment_id", "content"],
      "title": "CreateReactionForAnIssueCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateReactionForAnIssueCommentResponseWrapper",
      "type": "object"
    },
    "description": "Creates a reaction for a specific comment on an issue within a github repository.",
    "tags": ["openWorldHint", "reactions", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create reaction for a commit comment",
    "slug": "GITHUB_CREATE_REACTION_FOR_A_COMMIT_COMMENT",
    "input_parameters": {
      "description": "Request schema for `CreateReactionForACommitComment`",
      "properties": {
        "comment_id": {
          "description": "Unique ID of the commit comment.",
          "examples": ["12345", "8675309"],
          "title": "Comment Id",
          "type": "integer"
        },
        "content": {
          "description": "The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the commit comment.",
          "enum": ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
          "examples": ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
          "title": "Content",
          "type": "string"
        },
        "owner": {
          "description": "Username of the repository owner. Not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension. Not case-sensitive.",
          "examples": ["Spoon-Knife", "linguist"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "comment_id", "content"],
      "title": "CreateReactionForACommitCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details of the created or existing reaction, including its ID, user, reaction content (e.g., 'heart'), and creation timestamp.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateReactionForACommitCommentResponseWrapper",
      "type": "object"
    },
    "description": "Creates an emoji reaction for a commit comment; if the user has already reacted with the same content, details of the existing reaction are returned.",
    "tags": ["idempotentHint", "openWorldHint", "reactions", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create reaction for a pull request review comment",
    "slug": "GITHUB_CREATE_REACTION_FOR_A_PULL_REQUEST_REVIEW_COMMENT",
    "input_parameters": {
      "description": "Request schema for `CreateReactionForAPullRequestReviewComment`",
      "properties": {
        "comment_id": {
          "description": "The unique identifier of the pull request review comment to which the reaction will be added.",
          "title": "Comment Id",
          "type": "integer"
        },
        "content": {
          "description": "The reaction to add. See the [GitHub API documentation on reactions](https://docs.github.com/rest/reactions/reactions#about-reactions) for more context on reactions.",
          "enum": ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
          "examples": ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
          "title": "Content",
          "type": "string"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This field is case-insensitive.",
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is case-insensitive.",
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "comment_id", "content"],
      "title": "CreateReactionForAPullRequestReviewCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the details of the created reaction, such as its ID, the user who created it, and the content of the reaction.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateReactionForAPullRequestReviewCommentResponseWrapper",
      "type": "object"
    },
    "description": "Adds a specified reaction to a pull request review comment within a github repository.",
    "tags": ["openWorldHint", "reactions", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create reaction for a release",
    "slug": "GITHUB_CREATE_REACTION_FOR_A_RELEASE",
    "input_parameters": {
      "description": "Request schema for creating a reaction to a specific release within a repository.",
      "properties": {
        "content": {
          "description": "The type of reaction to add to the release.",
          "enum": ["+1", "laugh", "heart", "hooray", "rocket", "eyes"],
          "examples": ["+1", "laugh", "heart", "hooray", "rocket", "eyes"],
          "title": "Content",
          "type": "string"
        },
        "owner": {
          "description": "The username of the account that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "release_id": {
          "description": "The unique identifier (ID) of the release to add a reaction to.",
          "examples": [12345],
          "title": "Release Id",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "release_id", "content"],
      "title": "CreateReactionForAReleaseRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the details of the created reaction, such as its ID, user, and content.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateReactionForAReleaseResponseWrapper",
      "type": "object"
    },
    "description": "Creates an emoji reaction for a specific, existing release in a github repository.",
    "tags": ["openWorldHint", "reactions", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create reaction for a team discussion",
    "slug": "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION",
    "input_parameters": {
      "description": "Request schema for `CreateReactionForATeamDiscussion`",
      "properties": {
        "content": {
          "description": "The reaction content to add to the team discussion.",
          "enum": ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
          "examples": ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
          "title": "Content",
          "type": "string"
        },
        "discussion_number": {
          "description": "The unique number identifying the team discussion.",
          "examples": ["42"],
          "title": "Discussion Number",
          "type": "integer"
        },
        "org": {
          "description": "The name of the GitHub organization. This field is not case-sensitive.",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "team_slug": {
          "description": "The slug (URL-friendly version) of the team name.",
          "examples": ["justice-league"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug", "discussion_number", "content"],
      "title": "CreateReactionForATeamDiscussionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the details of the created reaction, such as its ID, content, and user information as returned by the GitHub API.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateReactionForATeamDiscussionResponseWrapper",
      "type": "object"
    },
    "description": "Creates a reaction for a team discussion within a github organization.",
    "tags": ["openWorldHint", "reactions", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create reaction for a team discussion comment",
    "slug": "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION_COMMENT",
    "input_parameters": {
      "description": "Defines the request parameters for creating a reaction on a team discussion comment.",
      "properties": {
        "comment_number": {
          "description": "The unique number identifying the comment within the discussion.",
          "examples": [101],
          "title": "Comment Number",
          "type": "integer"
        },
        "content": {
          "description": "The type of reaction to add to the team discussion comment. For more information on reaction types, see the [GitHub API documentation on reactions](https://docs.github.com/rest/reactions/reactions#about-reactions).",
          "enum": ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
          "examples": ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
          "title": "Content",
          "type": "string"
        },
        "discussion_number": {
          "description": "The unique number identifying the team discussion.",
          "examples": [42],
          "title": "Discussion Number",
          "type": "integer"
        },
        "org": {
          "description": "The organization name on GitHub. This name is not case sensitive.",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "team_slug": {
          "description": "The slug (URL-friendly version) of the team name.",
          "examples": ["justice-league"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug", "discussion_number", "comment_number", "content"],
      "title": "CreateReactionForATeamDiscussionCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the created reaction object. This typically includes details like the reaction's ID, the user who created it, the reaction content (e.g., '+1', 'heart'), and timestamps.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateReactionForATeamDiscussionCommentResponseWrapper",
      "type": "object"
    },
    "description": "Adds a reaction to a team discussion comment, requiring the specified organization, team, discussion, and comment to exist.",
    "tags": ["openWorldHint", "reactions", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create or Update Organization Secret with LibSodium",
    "slug": "GITHUB_CREATE_UPDATE_ORG_SECRET_WITH_LIB_SODIUM",
    "input_parameters": {
      "description": "Request schema for creating or updating an organization secret with LibSodium encryption.",
      "properties": {
        "encrypted_value": {
          "description": "Value of the secret, encrypted using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) and the organization's public key (obtained from 'Get an organization public key' endpoint). Required to create or update the secret's value.",
          "examples": ["vZgX2lZ8v6k6gJ1x7L4w..."],
          "title": "Encrypted Value",
          "type": "string"
        },
        "key_id": {
          "description": "ID of the public key used for encryption (retrieved from 'Get an organization public key' endpoint). Required if `encrypted_value` is provided.",
          "examples": ["1234567890"],
          "title": "Key Id",
          "type": "string"
        },
        "org": {
          "description": "The organization name (case-insensitive).",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "secret_name": {
          "description": "The secret name (case-insensitive and unique within the organization).",
          "examples": ["MY_API_TOKEN"],
          "title": "Secret Name",
          "type": "string"
        },
        "selected_repository_ids": {
          "description": "List of repository IDs that can access the secret; required and used only when `visibility` is `selected`.",
          "examples": [["1296269", "1296270"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Selected Repository Ids",
          "type": "array"
        },
        "visibility": {
          "description": "Secret visibility: `all` (all repositories), `private` (private repositories), or `selected` (specific repositories designated by `selected_repository_ids`).",
          "enum": ["all", "private", "selected"],
          "title": "Visibility",
          "type": "string"
        }
      },
      "required": ["org", "secret_name", "visibility"],
      "title": "CreateUpdateOrgSecretWithLibSodiumRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateUpdateOrgSecretWithLibSodiumResponseWrapper",
      "type": "object"
    },
    "description": "Creates or updates a dependabot organization secret, requiring the secret value to be pre-encrypted with libsodium using the organization's public key obtained from the 'get an organization public key' endpoint.",
    "tags": [
      "dependabot",
      "idempotentHint",
      "openWorldHint",
      "organization_management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Customize OIDC subject claim template",
    "slug": "GITHUB_CUSTOMIZE_OIDC_SUBJECT_CLAIM_TEMPLATE",
    "input_parameters": {
      "description": "Request schema for `CustomizeOidcSubjectClaimTemplate`",
      "properties": {
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["hello-world", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "CustomizeOidcSubjectClaimTemplateRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details the OIDC subject claim customization for the repository, indicating whether it uses the default subject claim (e.g., `{'use_default': True}`) or specifies custom claims to include (e.g., `{'include_claim_keys': ['repo', 'context']}`).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CustomizeOidcSubjectClaimTemplateResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves the openid connect (oidc) subject claim customization template for a repository, which defines the `sub` claim structure in oidc tokens for github actions workflows; returns the default configuration if no customization is applied.",
    "tags": ["openWorldHint", "readOnlyHint", "repositories", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get custom OIDC subject claim template",
    "slug": "GITHUB_CUSTOM_OIDCSUBJECT_CLAIM_TEMPLATE",
    "input_parameters": {
      "description": "Request schema for retrieving the OpenID Connect (OIDC) subject claim customization template for a GitHub organization.",
      "properties": {
        "org": {
          "description": "The unique identifier of the GitHub organization. This name is not case-sensitive.",
          "examples": ["github", "my-actions-org"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org"],
      "title": "CustomOidcsubjectClaimTemplateRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the OIDC subject claim customization template. This object will contain either a `use_default: true` field, indicating that the default subject claim customization is used, or an `include_claim_keys: [...]` field, specifying an ordered list of context attributes (e.g., `repo`, `context`, `job_workflow_ref`) to use for the OIDC subject claim.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CustomOidcsubjectClaimTemplateResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves the openid connect (oidc) subject claim customization template for a github organization, which defines how the `sub` claim in oidc tokens for workflows is constructed.",
    "tags": ["openWorldHint", "readOnlyHint", "organization_management", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Set custom OIDC subject claim template",
    "slug": "GITHUB_CUSTOM_OIDCSUBJECT_CLAIM_TEMPLATE_SETTER",
    "input_parameters": {
      "description": "Request schema for `CustomOidcsubjectClaimTemplateSetter`",
      "properties": {
        "include_claim_keys": {
          "description": "Array of unique OIDC claim strings (alphanumeric and underscores) for the token. Used only if `use_default` is `false`. Consult GitHub's OIDC documentation for supported claim keys.",
          "examples": [
            ["repo", "actor"],
            ["run_id", "environment", "job_workflow_ref"]
          ],
          "items": { "properties": {}, "type": "string" },
          "title": "Include Claim Keys",
          "type": "array"
        },
        "owner": {
          "description": "Owner of the repository (username or organization name, case-insensitive).",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension (case-insensitive).",
          "examples": ["hello-world", "my-app-repository"],
          "title": "Repo",
          "type": "string"
        },
        "use_default": {
          "description": "If true, applies the default GitHub-provided OIDC subject claim template (ignoring `include_claim_keys`); if false, a custom template defined by `include_claim_keys` is used.",
          "examples": ["True", "False"],
          "title": "Use Default",
          "type": "boolean"
        }
      },
      "required": ["owner", "repo", "use_default"],
      "title": "CustomOidcsubjectClaimTemplateSetterRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response. May be empty on success (e.g., 204 No Content) or contain details of the configured template (e.g., 201 Created).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CustomOidcsubjectClaimTemplateSetterResponseWrapper",
      "type": "object"
    },
    "description": "Sets the openid connect (oidc) subject claim template for a github repository, allowing use of the default template or a custom one defined by `include claim keys` if `use default` is `false`.",
    "tags": ["openWorldHint", "idempotentHint", "repositories", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Decline a repository invitation",
    "slug": "GITHUB_DECLINE_A_REPOSITORY_INVITATION",
    "input_parameters": {
      "description": "Input parameters to decline a repository invitation.",
      "properties": {
        "invitation_id": {
          "description": "Identifier of the pending repository invitation to decline; obtained by listing the user's pending invitations.",
          "examples": ["123", "456", "789"],
          "title": "Invitation Id",
          "type": "integer"
        }
      },
      "required": ["invitation_id"],
      "title": "DeclineARepositoryInvitationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Response data. Empty for a successful decline (HTTP 204 No Content); contains error details for failures with a response body (e.g., 4xx errors).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeclineARepositoryInvitationResponseWrapper",
      "type": "object"
    },
    "description": "Declines a specific, pending repository invitation for the authenticated user, identified by its `invitation id`.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "repositories", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete access restrictions",
    "slug": "GITHUB_DELETE_ACCESS_RESTRICTIONS",
    "input_parameters": {
      "description": "Request schema for `DeleteAccessRestrictions`",
      "properties": {
        "branch": {
          "description": "The name of the branch from which to remove access restrictions. Wildcard characters are not supported; for wildcard usage, refer to the GitHub GraphQL API.",
          "examples": ["main", "develop"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository (username or organization name). This field is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "DeleteAccessRestrictionsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty dictionary upon successful removal of access restrictions, typically corresponding to a 204 No Content HTTP status.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAccessRestrictionsResponseWrapper",
      "type": "object"
    },
    "description": "Removes all user, team, and app-based access restrictions from a protected branch.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "repositories", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete admin branch protection",
    "slug": "GITHUB_DELETE_ADMIN_BRANCH_PROTECTION",
    "input_parameters": {
      "description": "Request schema for `DeleteAdminBranchProtection`",
      "properties": {
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters.",
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. ",
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "DeleteAdminBranchProtectionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAdminBranchProtectionResponseWrapper",
      "type": "object"
    },
    "description": "Removes admin enforcement from a protected branch (branch name cannot contain wildcard characters) in a repository.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "repositories", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete an app authorization",
    "slug": "GITHUB_DELETE_AN_APP_AUTHORIZATION",
    "input_parameters": {
      "description": "Request schema for `DeleteAnAppAuthorization`",
      "properties": {
        "access_token": {
          "description": "The specific OAuth access token to be revoked.",
          "examples": ["gho_aBcDeFgHiJkLmNoPqRsTuVwXyZ1234567890"],
          "title": "Access Token",
          "type": "string"
        },
        "client_id": {
          "description": "The client ID of the OAuth App for which the token grant is being revoked.",
          "examples": ["Iv1.1234567890abcdef"],
          "title": "Client Id",
          "type": "string"
        }
      },
      "required": ["client_id", "access_token"],
      "title": "DeleteAnAppAuthorizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The response data from the API. For a successful revocation, which typically returns a 204 No Content status, this field will be empty or not applicable as no response body is returned.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAnAppAuthorizationResponseWrapper",
      "type": "object"
    },
    "description": "Revokes a single, specific oauth access token for an oauth app, not all authorizations for the app.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "authorizations_and_access",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete an app token",
    "slug": "GITHUB_DELETE_AN_APP_TOKEN",
    "input_parameters": {
      "description": "Request schema for `DeleteAnAppToken`",
      "properties": {
        "access_token": {
          "description": "The OAuth access token to be revoked.",
          "examples": ["gho_abcdef1234567890abcdef1234567890abcdef"],
          "title": "Access Token",
          "type": "string"
        },
        "client_id": {
          "description": "The client ID of the GitHub App.",
          "examples": ["Iv1.1234567890abcdef"],
          "title": "Client Id",
          "type": "string"
        }
      },
      "required": ["client_id", "access_token"],
      "title": "DeleteAnAppTokenRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty dictionary confirming that the token has been successfully revoked.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAnAppTokenResponseWrapper",
      "type": "object"
    },
    "description": "Revokes an oauth access token for a github app, if the app exists and the token was issued to it.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "authorizations_and_access",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete an artifact",
    "slug": "GITHUB_DELETE_AN_ARTIFACT",
    "input_parameters": {
      "description": "Request schema for `DeleteAnArtifact`",
      "properties": {
        "artifact_id": {
          "description": "Unique ID of the artifact to delete.",
          "examples": ["123456789"],
          "title": "Artifact Id",
          "type": "integer"
        },
        "owner": {
          "description": "Account owner of the repository (user or organization); not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension; not case-sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "artifact_id"],
      "title": "DeleteAnArtifactRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Response data; typically empty for a successful deletion (HTTP 204 No Content).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAnArtifactResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a github artifact by its id within a repository, typically resulting in an empty response (http 204 no content) on success.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "repositories", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete an autolink reference from a repository",
    "slug": "GITHUB_DELETE_AN_AUTOLINK_REFERENCE_FROM_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for `DeleteAnAutolinkReferenceFromARepository`",
      "properties": {
        "autolink_id": {
          "description": "The unique numerical identifier of the autolink reference to be deleted.",
          "examples": ["1", "42"],
          "title": "Autolink Id",
          "type": "integer"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This is not case-sensitive.",
          "examples": ["hello-world", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "autolink_id"],
      "title": "DeleteAnAutolinkReferenceFromARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAnAutolinkReferenceFromARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a specific autolink reference (which automatically links external resource ids like jira-123 to urls) from the specified repository.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "repositories", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete authenticated user email address",
    "slug": "GITHUB_DELETE_AN_EMAIL_ADDRESS_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request model for GitHub DELETE /user/emails. Requires a JSON array of emails.",
      "properties": {
        "emails": {
          "description": "Array of email addresses to delete from the authenticated user account.",
          "items": { "properties": {}, "type": "string" },
          "title": "Emails",
          "type": "array"
        }
      },
      "required": ["emails"],
      "title": "DeleteAnEmailAddressForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAnEmailAddressForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Sends an empty request body to `delete /user/emails` to attempt deletion of user email addresses; the api typically requires specific emails, so outcome may vary.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "user_management", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete an environment",
    "slug": "GITHUB_DELETE_AN_ENVIRONMENT",
    "input_parameters": {
      "description": "Request schema for deleting a specific deployment environment from a repository.",
      "properties": {
        "environment_name": {
          "description": "The name of the environment to delete. The name must be URL encoded; for example, slashes (`/`) should be replaced with `%2F`.",
          "examples": ["production", "staging%2FUS-West"],
          "title": "Environment Name",
          "type": "string"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This is not case sensitive.",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "environment_name"],
      "title": "DeleteAnEnvironmentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Contains an empty dictionary on successful deletion, as the API returns a 204 No Content status.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["successful"],
      "title": "DeleteAnEnvironmentResponseWrapper",
      "type": "object"
    },
    "description": "Deletes an existing deployment environment from an existing repository.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "environment_management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete an environment secret",
    "slug": "GITHUB_DELETE_AN_ENVIRONMENT_SECRET",
    "input_parameters": {
      "description": "Request model for deleting an environment secret. Specifies the repository, environment, and secret to target.",
      "properties": {
        "environment_name": {
          "description": "The name of the environment from which the secret will be deleted. This name must be URL-encoded if it contains special characters (e.g., slashes `/` should be replaced with `%2F`).",
          "examples": ["production", "staging%2Fdeploy-group-1"],
          "title": "Environment Name",
          "type": "string"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        },
        "secret_name": {
          "description": "The name of the secret to be deleted. GitHub stores and processes secret names as uppercase (e.g., `my_secret` becomes `MY_SECRET`).",
          "examples": ["CI_TOKEN", "DATABASE_PASSWORD"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "environment_name", "secret_name"],
      "title": "DeleteAnEnvironmentSecretRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty dictionary upon successful deletion. If an error occurs (e.g., secret not found, insufficient permissions), this field may contain details about the error.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAnEnvironmentSecretResponseWrapper",
      "type": "object"
    },
    "description": "Deletes an existing and accessible secret from a specified environment within a github repository, returning an empty dictionary on success or error details otherwise.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "environment_management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete an environment variable",
    "slug": "GITHUB_DELETE_AN_ENVIRONMENT_VARIABLE",
    "input_parameters": {
      "description": "Request schema for `DeleteAnEnvironmentVariable`",
      "properties": {
        "environment_name": {
          "description": "The name of the environment. Must be URL-encoded if it contains special characters (e.g., slashes `/` should be `%2F`).",
          "examples": ["production", "staging%2Fbeta", "dev-user%2Fbranch-name"],
          "title": "Environment Name",
          "type": "string"
        },
        "name": {
          "description": "The name of the environment variable to delete.",
          "examples": ["SECRET_TOKEN", "DB_PASSWORD"],
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat", "my-github-org"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "examples": ["hello-world", "api-client"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "name", "environment_name"],
      "title": "DeleteAnEnvironmentVariableRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAnEnvironmentVariableResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a named environment variable from a specified, existing environment within a github repository.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "environment_management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete an issue comment",
    "slug": "GITHUB_DELETE_AN_ISSUE_COMMENT",
    "input_parameters": {
      "description": "Identifies the repository and the specific comment to be deleted.",
      "properties": {
        "comment_id": {
          "description": "Unique identifier of the comment to delete.",
          "examples": ["42"],
          "title": "Comment Id",
          "type": "integer"
        },
        "owner": {
          "description": "Username of the account owning the repository (case-insensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (case-insensitive).",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "comment_id"],
      "title": "DeleteAnIssueCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Response body; typically empty upon successful deletion (HTTP 204 No Content).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAnIssueCommentResponseWrapper",
      "type": "object"
    },
    "description": "Permanently deletes a specific comment by its id from an issue or pull request, if the repository exists and the comment id is valid.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "repositories", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete an issue comment reaction",
    "slug": "GITHUB_DELETE_AN_ISSUE_COMMENT_REACTION",
    "input_parameters": {
      "description": "Defines the request parameters for deleting a specific reaction from an issue comment.",
      "properties": {
        "comment_id": {
          "description": "The unique numeric identifier for the issue comment from which the reaction will be deleted.",
          "examples": [12345, 67890],
          "title": "Comment Id",
          "type": "integer"
        },
        "owner": {
          "description": "The username of the account that owns the repository. This is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "reaction_id": {
          "description": "The unique numeric identifier for the reaction to be deleted.",
          "examples": [1, 2],
          "title": "Reaction Id",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This is not case-sensitive.",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "comment_id", "reaction_id"],
      "title": "DeleteAnIssueCommentReactionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The response body. For a successful deletion (HTTP 204 No Content), this field may not be populated or relevant.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAnIssueCommentReactionResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a reaction from an issue comment in a repository; the repository, comment, and reaction must exist.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "reactions", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete an issue reaction",
    "slug": "GITHUB_DELETE_AN_ISSUE_REACTION",
    "input_parameters": {
      "description": "Request schema for deleting a reaction from an issue in a GitHub repository.",
      "properties": {
        "issue_number": {
          "description": "The unique number identifying the issue from which the reaction will be deleted.",
          "examples": ["1347"],
          "title": "Issue Number",
          "type": "integer"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "reaction_id": {
          "description": "The unique identifier of the reaction to be deleted.",
          "examples": ["1"],
          "title": "Reaction Id",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "issue_number", "reaction_id"],
      "title": "DeleteAnIssueReactionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the response data. For this specific action, upon successful deletion, the GitHub API returns a 204 No Content status, so this dictionary will be empty.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAnIssueReactionResponseWrapper",
      "type": "object"
    },
    "description": "Permanently removes a specific reaction from an issue in a github repository.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "reactions", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete an organization",
    "slug": "GITHUB_DELETE_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for deleting a GitHub organization.",
      "properties": {
        "org": {
          "description": "The unique name of the organization to be deleted. This name is not case-sensitive.",
          "examples": ["my-github-org"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org"],
      "title": "DeleteAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Provides deletion status information for accepted requests (asynchronous processing) or error details on failure; typically empty for successful synchronous deletions (204 No Content).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a github organization and its repositories; this is a destructive action and the organization name will be unavailable for reuse for approximately 90 days.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "organization_management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete an organization secret",
    "slug": "GITHUB_DELETE_AN_ORGANIZATION_SECRET",
    "input_parameters": {
      "description": "Request schema for `DeleteAnOrganizationSecret`",
      "properties": {
        "org": {
          "description": "The name of the organization. This name is not case-sensitive.",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "secret_name": {
          "description": "The name of the secret to be deleted.",
          "examples": ["CI_DEPLOY_KEY"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["org", "secret_name"],
      "title": "DeleteAnOrganizationSecretRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty dictionary. A successful deletion typically results in a 204 No Content response, meaning this field will be empty.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAnOrganizationSecretResponseWrapper",
      "type": "object"
    },
    "description": "Permanently deletes a secret from a github organization, making it inaccessible to github actions workflows or other tools.",
    "tags": ["actions", "destructiveHint", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete an organization variable",
    "slug": "GITHUB_DELETE_AN_ORGANIZATION_VARIABLE",
    "input_parameters": {
      "description": "Request schema for `DeleteAnOrganizationVariable`",
      "properties": {
        "name": {
          "description": "The name of the organization variable to delete. This parameter is not case-sensitive.",
          "examples": ["MY_VARIABLE"],
          "title": "Name",
          "type": "string"
        },
        "org": {
          "description": "The name of the organization. This parameter is not case-sensitive.",
          "examples": ["my-org-name"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org", "name"],
      "title": "DeleteAnOrganizationVariableRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAnOrganizationVariableResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a named github actions variable from a specified organization.",
    "tags": ["actions", "destructiveHint", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete an organization webhook",
    "slug": "GITHUB_DELETE_AN_ORGANIZATION_WEBHOOK",
    "input_parameters": {
      "description": "Request schema for `DeleteAnOrganizationWebhook`",
      "properties": {
        "hook_id": {
          "description": "The unique identifier of the webhook. This ID can be retrieved from the `X-GitHub-Hook-ID` header in a webhook delivery or by listing organization webhooks.",
          "examples": [123456789, 987654321],
          "title": "Hook Id",
          "type": "integer"
        },
        "org": {
          "description": "The name of the organization. This field is not case-sensitive.",
          "examples": ["github", "my-company-org"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org", "hook_id"],
      "title": "DeleteAnOrganizationWebhookRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary that might contain response data for non-204 responses or detailed error messages. For a successful deletion (204 No Content), this field is generally not populated as the response body is empty.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAnOrganizationWebhookResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a specific webhook, identified by `hook id`, from an existing organization.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "orgs", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a codespace for the authenticated user",
    "slug": "GITHUB_DELETE_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for deleting a codespace for the authenticated user.",
      "properties": {
        "codespace_name": {
          "description": "The unique name of the codespace to be deleted. This can be the system-generated name (e.g., 'monalisa-octocat-g4v9wxj96hp') or a user-defined display name if it's unique for the user.",
          "examples": ["monalisa-octocat-g4v9wxj96hp", "my-custom-codespace"],
          "title": "Codespace Name",
          "type": "string"
        }
      },
      "required": ["codespace_name"],
      "title": "DeleteACodespaceForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteACodespaceForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a specific codespace owned by the authenticated user; this is a destructive action and the codespace must exist.",
    "tags": ["codespaces", "destructiveHint", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a codespace from the organization",
    "slug": "GITHUB_DELETE_A_CODESPACE_FROM_THE_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema.",
      "properties": {
        "codespace_name": {
          "description": "Unique name of the codespace.",
          "examples": ["octocat-humorous-adventure-g45w9j96qg929j9"],
          "title": "Codespace Name",
          "type": "string"
        },
        "org": {
          "description": "The organization's name (case-insensitive).",
          "examples": ["github"],
          "title": "Org",
          "type": "string"
        },
        "username": {
          "description": "GitHub username of the user owning the codespace.",
          "examples": ["octocat"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["org", "username", "codespace_name"],
      "title": "DeleteACodespaceFromTheOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty dictionary; the operation typically returns a 202 (Accepted) or 204 (No Content) status with no body.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteACodespaceFromTheOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Permanently deletes a specific codespace belonging to a member of the specified organization.",
    "tags": ["codespaces", "destructiveHint", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a code scanning analysis from a repository",
    "slug": "GITHUB_DELETE_A_CODE_SCANNING_ANALYSIS_FROM_A_REPOSITORY",
    "input_parameters": {
      "description": "Parameters to delete a specific code scanning analysis from a repository.",
      "properties": {
        "analysis_id": {
          "description": "Unique identifier of the code scanning analysis to delete, typically obtained by listing analyses.",
          "examples": ["12345"],
          "title": "Analysis Id",
          "type": "integer"
        },
        "confirm_delete": {
          "description": "Pass `true` to confirm deletion if this is the last analysis for a specific tool and reference, preventing accidental data loss and a 400 error.",
          "examples": ["true"],
          "title": "Confirm Delete",
          "type": "string"
        },
        "owner": {
          "description": "Account owner of the repository (not case sensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository without the `.git` extension (not case sensitive).",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "analysis_id"],
      "title": "DeleteACodeScanningAnalysisFromARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Contains `next_analysis_url` and `previous_analysis_url` for navigation to the next or previous analysis for the same reference and tool, if available (can be `null`).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteACodeScanningAnalysisFromARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a specific code scanning analysis by its id from a repository; `confirm delete` must be `true` if it's the last analysis of its type for a given tool and reference to prevent data loss.",
    "tags": ["code-scanning", "destructiveHint", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a commit comment",
    "slug": "GITHUB_DELETE_A_COMMIT_COMMENT",
    "input_parameters": {
      "description": "Request schema for deleting a specific commit comment.",
      "properties": {
        "comment_id": {
          "description": "The unique numerical identifier of the commit comment to be deleted.",
          "examples": ["12345", "67890"],
          "title": "Comment Id",
          "type": "integer"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This value is not case-sensitive.",
          "examples": ["octocat", "actions"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, excluding the `.git` extension. This value is not case-sensitive.",
          "examples": ["Spoon-Knife", "hello-world"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "comment_id"],
      "title": "DeleteACommitCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty dictionary, as a successful deletion results in an HTTP 204 No Content response (no body).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteACommitCommentResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a specific commit comment, identified by its `comment id`, from the specified repository; the comment must exist.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "repos"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a commit comment reaction",
    "slug": "GITHUB_DELETE_A_COMMIT_COMMENT_REACTION",
    "input_parameters": {
      "description": "Request model for the `DeleteACommitCommentReaction` action. This model defines the parameters required to delete a specific reaction from a commit comment within a repository.",
      "properties": {
        "comment_id": {
          "description": "The unique identifier of the commit comment from which the reaction will be deleted.",
          "examples": ["8662210"],
          "title": "Comment Id",
          "type": "integer"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "reaction_id": {
          "description": "The unique identifier of the reaction to be deleted.",
          "examples": ["1"],
          "title": "Reaction Id",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "comment_id", "reaction_id"],
      "title": "DeleteACommitCommentReactionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Response data from the API. For a successful deletion (HTTP 204 No Content), this field is typically empty. It might contain error details if the request fails.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteACommitCommentReactionResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a reaction from a commit comment in a github repository.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "reactions", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a custom organization role",
    "slug": "GITHUB_DELETE_A_CUSTOM_ORGANIZATION_ROLE",
    "input_parameters": {
      "description": "Request schema for `DeleteACustomOrganizationRole`",
      "properties": {
        "org": {
          "description": "The organization name (not case-sensitive).",
          "examples": ["my-organization"],
          "title": "Org",
          "type": "string"
        },
        "role_id": {
          "description": "Unique ID of the custom role to delete.",
          "examples": ["12345", "67890"],
          "title": "Role Id",
          "type": "integer"
        }
      },
      "required": ["org", "role_id"],
      "title": "DeleteACustomOrganizationRoleRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Response data; typically empty as a 204 No Content status indicates successful deletion.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["successful"],
      "title": "DeleteACustomOrganizationRoleResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a custom organization role (which should not be actively assigned) by its id; a 204 no content response indicates success.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "orgs", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a deployment",
    "slug": "GITHUB_DELETE_A_DEPLOYMENT",
    "input_parameters": {
      "description": "Request schema for `DeleteADeployment`",
      "properties": {
        "deployment_id": {
          "description": "Unique identifier of the deployment to delete.",
          "examples": ["12345"],
          "title": "Deployment Id",
          "type": "integer"
        },
        "owner": {
          "description": "Username of the account owning the repository (case-insensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension (case-insensitive).",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "deployment_id"],
      "title": "DeleteADeploymentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Empty dictionary, indicating successful deletion.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteADeploymentResponseWrapper",
      "type": "object"
    },
    "description": "Permanently deletes a specified *inactive* deployment from a repository.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "repos"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a deployment branch policy",
    "slug": "GITHUB_DELETE_A_DEPLOYMENT_BRANCH_POLICY",
    "input_parameters": {
      "description": "Request schema for `DeleteADeploymentBranchPolicy`",
      "properties": {
        "branch_policy_id": {
          "description": "The unique identifier of the branch policy.",
          "examples": [12345],
          "title": "Branch Policy Id",
          "type": "integer"
        },
        "environment_name": {
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. ",
          "examples": ["production", "staging%2Fdevelopment"],
          "title": "Environment Name",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. ",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "environment_name", "branch_policy_id"],
      "title": "DeleteADeploymentBranchPolicyRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteADeploymentBranchPolicyResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a specific deployment branch or tag policy, identified by its id, from a given environment within a repository.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a deploy key",
    "slug": "GITHUB_DELETE_A_DEPLOY_KEY",
    "input_parameters": {
      "description": "Request schema for deleting a deploy key from a repository.",
      "properties": {
        "key_id": {
          "description": "The unique identifier (ID) of the deploy key to be deleted.",
          "examples": [12345],
          "title": "Key Id",
          "type": "integer"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case sensitive.",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "key_id"],
      "title": "DeleteADeployKeyRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "default": null,
          "description": "Typically empty for a successful deletion (204 No Content). May contain data in other scenarios, such as an error response.",
          "nullable": true,
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["successful"],
      "title": "DeleteADeployKeyResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a specific deploy key from a repository; to change a key's properties or access scope, the existing key must be deleted and a new one created.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a discussion",
    "slug": "GITHUB_DELETE_A_DISCUSSION",
    "input_parameters": {
      "description": "Defines the parameters to delete a specific team discussion.",
      "properties": {
        "discussion_number": {
          "description": "The unique number identifying the discussion to be deleted.",
          "examples": [42],
          "title": "Discussion Number",
          "type": "integer"
        },
        "org": {
          "description": "Case-insensitive name of the organization.",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "team_slug": {
          "description": "URL-friendly version (slug) of the team name.",
          "examples": ["justice-league"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug", "discussion_number"],
      "title": "DeleteADiscussionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Data from the response. Typically an empty dictionary for a successful deletion (204 No Content) as no content is returned.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["successful"],
      "title": "DeleteADiscussionResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a specific team discussion, identified by its number, from an organization's team.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "teams", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a discussion comment",
    "slug": "GITHUB_DELETE_A_DISCUSSION_COMMENT",
    "input_parameters": {
      "description": "Request model for deleting a specific comment from a team discussion.",
      "properties": {
        "comment_number": {
          "description": "Unique number identifying the comment.",
          "examples": ["101"],
          "title": "Comment Number",
          "type": "integer"
        },
        "discussion_number": {
          "description": "Unique number identifying the discussion.",
          "examples": ["42"],
          "title": "Discussion Number",
          "type": "integer"
        },
        "org": {
          "description": "The organization name (not case sensitive).",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "team_slug": {
          "description": "The slug of the team name (URL-friendly version).",
          "examples": ["justice-league"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug", "discussion_number", "comment_number"],
      "title": "DeleteADiscussionCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Response data; typically empty for a successful deletion (HTTP 204 No Content).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteADiscussionCommentResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a specific comment from an existing team discussion within an organization, provided the specified organization, team, discussion, and comment all exist.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "teams", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a file",
    "slug": "GITHUB_DELETE_A_FILE",
    "input_parameters": {
      "description": "Request schema for deleting a file from a GitHub repository.",
      "properties": {
        "author__email": {
          "description": "Email address of the commit author for the deletion; defaults to the committer's email.",
          "examples": ["mona@example.com"],
          "title": "Author  Email",
          "type": "string"
        },
        "author__name": {
          "description": "Name of the commit author for the deletion; defaults to the committer's name.",
          "examples": ["Mona Lisa"],
          "title": "Author  Name",
          "type": "string"
        },
        "branch": {
          "description": "Branch from which the file will be deleted; defaults to the repository's default branch.",
          "examples": ["main", "develop"],
          "title": "Branch",
          "type": "string"
        },
        "committer__email": {
          "description": "Email address of the user committing the deletion; defaults to the authenticated user's email.",
          "examples": ["mona@example.com"],
          "title": "Committer  Email",
          "type": "string"
        },
        "committer__name": {
          "description": "Name of the user committing the deletion; defaults to the authenticated user's name.",
          "examples": ["Mona Lisa"],
          "title": "Committer  Name",
          "type": "string"
        },
        "message": {
          "description": "Commit message for the deletion.",
          "examples": ["Delete old script"],
          "title": "Message",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository (not case-sensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "path": {
          "description": "Path to the file to be deleted within the repository.",
          "examples": ["notes/important.txt"],
          "title": "Path",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension (not case-sensitive).",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "sha": {
          "description": "Blob SHA of the file being deleted, required to ensure the correct file version.",
          "examples": ["d670460b4b4aece5915caf5c68d12f560a9fe3e4"],
          "title": "Sha",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "path", "message", "sha"],
      "title": "DeleteAFileRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAFileResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a file by path from a github repository, requiring a commit message and the file's current blob sha to confirm the deletion.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a gist",
    "slug": "GITHUB_DELETE_A_GIST",
    "input_parameters": {
      "description": "Request schema for the action to delete a GitHub gist.",
      "properties": {
        "gist_id": {
          "description": "The unique identifier of the gist to be deleted.",
          "examples": ["aa5a315d61ae9438b18d", "44f08d44327a40d2ab309a349bebec57"],
          "title": "Gist Id",
          "type": "string"
        }
      },
      "required": ["gist_id"],
      "title": "DeleteAGistRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty dictionary, as a successful deletion typically returns a 204 No Content status with no body.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAGistResponseWrapper",
      "type": "object"
    },
    "description": "Permanently deletes an existing github gist, specified by its `gist id`; this action is destructive and cannot be undone.",
    "tags": ["destructiveHint", "gists", "idempotentHint", "openWorldHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a gist comment",
    "slug": "GITHUB_DELETE_A_GIST_COMMENT",
    "input_parameters": {
      "description": "Request model for deleting a comment from a specific Gist.",
      "properties": {
        "comment_id": {
          "description": "The unique identifier of the comment to be deleted.",
          "examples": ["129642021"],
          "title": "Comment Id",
          "type": "integer"
        },
        "gist_id": {
          "description": "The unique identifier of the Gist from which the comment will be deleted.",
          "examples": ["aa5a315d61ae9438b18d79546350ada7"],
          "title": "Gist Id",
          "type": "string"
        }
      },
      "required": ["gist_id", "comment_id"],
      "title": "DeleteAGistCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary that is empty for a successful deletion. In case of an error, this may contain details about the error.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["successful"],
      "title": "DeleteAGistCommentResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a specific comment from a github gist using its `gist id` and `comment id`.",
    "tags": ["destructiveHint", "gists", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a GitHub Pages site",
    "slug": "GITHUB_DELETE_A_GITHUB_PAGES_SITE",
    "input_parameters": {
      "description": "Request to delete a GitHub Pages site for a repository.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository (e.g., a user or organization). This name is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Hello-World", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "DeleteAGithubPagesSiteRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAGithubPagesSiteResponseWrapper",
      "type": "object"
    },
    "description": "Deletes the github pages site for the specified repository; completes without error if no site is currently enabled.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a label",
    "slug": "GITHUB_DELETE_A_LABEL",
    "input_parameters": {
      "description": "Request schema for `DeleteALabel`",
      "properties": {
        "name": {
          "description": "The name of the label to delete. Label names are case-insensitive. If the label name contains spaces or special characters, ensure it is correctly URL-encoded (e.g., 'help wanted' becomes 'help%20wanted').",
          "examples": ["bug", "enhancement", "help%20wanted", "good%20first%20issue"],
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Hello-World", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "name"],
      "title": "DeleteALabelRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Typically an empty dictionary. A successful deletion operation returns a 204 No Content HTTP status, meaning there is no body in the response from the API.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["successful"],
      "title": "DeleteALabelResponseWrapper",
      "type": "object"
    },
    "description": "Permanently removes an existing label from a repository.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "Label and Milestone Management"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a milestone",
    "slug": "GITHUB_DELETE_A_MILESTONE",
    "input_parameters": {
      "description": "Request schema for `DeleteAMilestone`",
      "properties": {
        "milestone_number": {
          "description": "The unique number that identifies the milestone to be deleted.",
          "title": "Milestone Number",
          "type": "integer"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This name is not case-sensitive.",
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive. ",
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "milestone_number"],
      "title": "DeleteAMilestoneRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A placeholder for response data. Since a successful milestone deletion (HTTP 204 No Content) does not return a body, this field will generally be empty or not applicable.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAMilestoneResponseWrapper",
      "type": "object"
    },
    "description": "Deletes the specified milestone if it exists; this operation is idempotent, typically returning a 404 if the milestone is not found or already deleted.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "Label and Milestone Management"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a package for an organization",
    "slug": "GITHUB_DELETE_A_PACKAGE_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Parameters for deleting a specific package within an organization.",
      "properties": {
        "org": {
          "description": "Name of the organization owning the package (not case-sensitive).",
          "examples": ["octo-org", "my-company"],
          "title": "Org",
          "type": "string"
        },
        "package_name": {
          "description": "Unique name of the package to be deleted.",
          "examples": ["my-package", "your-library-name"],
          "title": "Package Name",
          "type": "string"
        },
        "package_type": {
          "description": "Type of the package to be deleted. Packages in GitHub's Gradle registry have type `maven`. Docker images in GitHub's Container registry (`ghcr.io`) have type `container`. Use type `docker` for images previously in GitHub's Docker registry (`docker.pkg.github.com`), even if migrated to the Container registry.",
          "enum": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "examples": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "title": "Package Type",
          "type": "string"
        }
      },
      "required": ["package_type", "package_name", "org"],
      "title": "DeleteAPackageForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAPackageForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a specific package in an organization; cannot delete public packages with over 5,000 downloads.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "Package Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a package for a user",
    "slug": "GITHUB_DELETE_A_PACKAGE_FOR_A_USER",
    "input_parameters": {
      "description": "Defines the request parameters for deleting a package owned by a user.",
      "properties": {
        "package_name": {
          "description": "The unique name of the package to be deleted.",
          "examples": ["my-private-package", "internal-tool-cli"],
          "title": "Package Name",
          "type": "string"
        },
        "package_type": {
          "description": "Ecosystem of the package. Packages in GitHub's Gradle registry use `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) use `container`. The `docker` type can find images from the old Docker registry (`docker.pkg.github.com`), even if migrated.",
          "enum": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "examples": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "title": "Package Type",
          "type": "string"
        },
        "username": {
          "description": "The GitHub username of the account that owns the package.",
          "examples": ["octocat", "your-username"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["package_type", "package_name", "username"],
      "title": "DeleteAPackageForAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAPackageForAUserResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a package owned by the specified user, requiring admin permissions for the authenticated user; deletion of public packages with over 5,000 downloads may require github support.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "Package Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a package for the authenticated user",
    "slug": "GITHUB_DELETE_A_PACKAGE_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for deleting a package for the authenticated user.",
      "properties": {
        "package_name": {
          "description": "The unique name of the package to be deleted.",
          "examples": ["my-package-name", "your-software-project"],
          "title": "Package Name",
          "type": "string"
        },
        "package_type": {
          "description": "Specifies package type. Note: GitHub Gradle packages are 'maven'; ghcr.io images are 'container'; 'docker' type helps find images migrated from docker.pkg.github.com.",
          "enum": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "examples": ["npm", "maven", "docker", "container"],
          "title": "Package Type",
          "type": "string"
        }
      },
      "required": ["package_type", "package_name"],
      "title": "DeleteAPackageForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Contains the API response data. For a successful package deletion, this is typically an empty object or provides minimal confirmation.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAPackageForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Permanently deletes a specific package owned by the authenticated user; public packages downloaded over 5,000 times cannot be deleted via this api.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "Package Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a package version for the authenticated user",
    "slug": "GITHUB_DELETE_A_PACKAGE_VERSION_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for `DeleteAPackageVersionForTheAuthenticatedUser`",
      "properties": {
        "package_name": {
          "description": "The unique name of the package.",
          "examples": ["my-company-package", "internal-tool"],
          "title": "Package Name",
          "type": "string"
        },
        "package_type": {
          "description": "Type of the package. E.g., `maven` for GitHub Gradle registry, `container` for `ghcr.io` images. The `docker` type covers images from `docker.pkg.github.com` (including migrated ones).",
          "enum": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "examples": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "title": "Package Type",
          "type": "string"
        },
        "package_version_id": {
          "description": "The unique numeric identifier of the specific package version to be deleted.",
          "examples": ["102345", "7890"],
          "title": "Package Version Id",
          "type": "integer"
        }
      },
      "required": ["package_type", "package_name", "package_version_id"],
      "title": "DeleteAPackageVersionForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Empty dictionary; the API returns 204 No Content on successful deletion, meaning no response body.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAPackageVersionForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Deletes an existing package version associated with the authenticated user.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "Package Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a pending review for a pull request",
    "slug": "GITHUB_DELETE_A_PENDING_REVIEW_FOR_A_PULL_REQUEST",
    "input_parameters": {
      "description": "Request schema for `DeleteAPendingReviewForAPullRequest`",
      "properties": {
        "owner": {
          "description": "The account owner of the repository. This name is not case-sensitive.",
          "examples": ["octocat", "github-linguist"],
          "title": "Owner",
          "type": "string"
        },
        "pull_number": {
          "description": "The number that identifies the pull request.",
          "examples": ["1347", "100"],
          "title": "Pull Number",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["hello-world", "octo-repo"],
          "title": "Repo",
          "type": "string"
        },
        "review_id": {
          "description": "The unique identifier of the pending review to be deleted.",
          "examples": ["80", "42"],
          "title": "Review Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "pull_number", "review_id"],
      "title": "DeleteAPendingReviewForAPullRequestRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the pull request review object that was deleted.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAPendingReviewForAPullRequestResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a pending (unsubmitted) review from a pull request; this is only possible if the review has not yet been submitted.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "Pull Request Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a project",
    "slug": "GITHUB_DELETE_A_PROJECT",
    "input_parameters": {
      "description": "Request schema for deleting a GitHub project.",
      "properties": {
        "project_id": {
          "description": "The unique identifier of the project to be deleted.",
          "title": "Project Id",
          "type": "integer"
        }
      },
      "required": ["project_id"],
      "title": "DeleteAProjectRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Typically an empty dictionary as a successful deletion returns HTTP 204 No Content; contains error details otherwise.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAProjectResponseWrapper",
      "type": "object"
    },
    "description": "Deletes the github project specified by `project id` if the project exists and the projects feature is enabled for its repository or organization; a successful deletion results in a 204 no content response.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "Project and Card Management"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a project card",
    "slug": "GITHUB_DELETE_A_PROJECT_CARD",
    "input_parameters": {
      "description": "Request schema for deleting a project card.",
      "properties": {
        "card_id": {
          "description": "The unique numerical identifier of the project card to be deleted.",
          "examples": ["10291637"],
          "title": "Card Id",
          "type": "integer"
        }
      },
      "required": ["card_id"],
      "title": "DeleteAProjectCardRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary that is typically empty. A successful deletion (HTTP 204 No Content status) means there is no content in the response body.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAProjectCardResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a project card from a github 'project (classic)'; this operation is idempotent.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "Project and Card Management"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a project column",
    "slug": "GITHUB_DELETE_A_PROJECT_COLUMN",
    "input_parameters": {
      "description": "Request schema for deleting a specific project column by its ID.",
      "properties": {
        "column_id": {
          "description": "The unique identifier of the project column to be deleted.",
          "examples": [1029384],
          "title": "Column Id",
          "type": "integer"
        }
      },
      "required": ["column_id"],
      "title": "DeleteAProjectColumnRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty dictionary, indicating successful deletion (204 No Content).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAProjectColumnResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a project column by its id from a github project (classic); this is a destructive operation.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "Project and Card Management"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a pull request comment reaction",
    "slug": "GITHUB_DELETE_A_PULL_REQUEST_COMMENT_REACTION",
    "input_parameters": {
      "description": "Parameters to delete a reaction from a pull request comment.",
      "properties": {
        "comment_id": {
          "description": "Unique ID of the pull request review comment.",
          "examples": ["42"],
          "title": "Comment Id",
          "type": "integer"
        },
        "owner": {
          "description": "Account owner (username or organization) of the repository; not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "reaction_id": {
          "description": "Unique ID of the reaction to delete.",
          "examples": ["1"],
          "title": "Reaction Id",
          "type": "integer"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension; not case-sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "comment_id", "reaction_id"],
      "title": "DeleteAPullRequestCommentReactionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Empty dictionary, as a successful deletion (204 No Content) has no response body.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAPullRequestCommentReactionResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a specific reaction from a pull request review comment, provided the comment and reaction exist on that comment within the specified repository.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "Pull Request Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a reference",
    "slug": "GITHUB_DELETE_A_REFERENCE",
    "input_parameters": {
      "description": "Request schema for deleting a Git reference from a repository.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository. This name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "ref": {
          "description": "Full path of the Git reference to delete (e.g., 'refs/heads/main' or 'refs/tags/v1.0.0'). GitHub auto-prefixes 'refs/heads/' for branches if 'refs/' is omitted; 'refs/tags/' prefix is mandatory for tags.",
          "examples": ["refs/heads/feature-branch", "refs/tags/v1.0.1"],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "ref"],
      "title": "DeleteAReferenceRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAReferenceResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a git reference from a repository; 'ref' must be fully qualified (e.g., 'refs/heads/branch' or 'refs/tags/tag').",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "Repository Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a release",
    "slug": "GITHUB_DELETE_A_RELEASE",
    "input_parameters": {
      "description": "Request schema for `DeleteARelease` action, specifying the repository and release to be deleted.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository, typically a username or organization name. This field is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "release_id": {
          "description": "The unique numerical identifier (ID) of the release to be deleted.",
          "examples": ["1234567", "8765432"],
          "title": "Release Id",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Hello-World", "roadmap"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "release_id"],
      "title": "DeleteAReleaseRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Response data from the API. For a successful deletion (HTTP 204 No Content), this field is typically empty.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAReleaseResponseWrapper",
      "type": "object"
    },
    "description": "Permanently deletes a specific release, its assets, and potentially its associated git tag from a repository.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "Release Management"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a release asset",
    "slug": "GITHUB_DELETE_A_RELEASE_ASSET",
    "input_parameters": {
      "description": "Request schema for `DeleteAReleaseAsset`",
      "properties": {
        "asset_id": {
          "description": "The unique identifier of the release asset to delete.",
          "examples": [12345, 67890],
          "title": "Asset Id",
          "type": "integer"
        },
        "owner": {
          "description": "The account owner of the repository (username or organization); not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension; not case-sensitive.",
          "examples": ["hello-world", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "asset_id"],
      "title": "DeleteAReleaseAssetRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Empty for a successful deletion (204 No Content).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAReleaseAssetResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a specific release asset from a github repository; this action is idempotent.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "Release Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a release reaction",
    "slug": "GITHUB_DELETE_A_RELEASE_REACTION",
    "input_parameters": {
      "description": "Request schema for deleting a reaction from a GitHub release.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository (case-insensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "reaction_id": {
          "description": "Unique identifier of the reaction to delete.",
          "examples": ["98765432"],
          "title": "Reaction Id",
          "type": "integer"
        },
        "release_id": {
          "description": "Unique identifier of the release.",
          "examples": ["12345678"],
          "title": "Release Id",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension (case-insensitive).",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "release_id", "reaction_id"],
      "title": "DeleteAReleaseReactionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response data; typically empty for a successful deletion (HTTP 204 No Content).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAReleaseReactionResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a reaction from a github release, provided the repository, release, and reaction exist.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "Release Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a repository",
    "slug": "GITHUB_DELETE_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for `DeleteARepository`",
      "properties": {
        "owner": {
          "description": "The account owner of the repository (user or organization); case-insensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension; case-insensitive.",
          "examples": ["hello-world", "my-private-repo"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "DeleteARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Empty on success (HTTP 204 No Content), or may contain error details if a response body is provided on failure.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Permanently deletes the specified repository; this is a destructive, irreversible action that requires admin privileges for the repository.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "important",
      "Repository Management"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a repository invitation",
    "slug": "GITHUB_DELETE_A_REPOSITORY_INVITATION",
    "input_parameters": {
      "description": "Request schema for `DeleteARepositoryInvitation` action, specifying the repository and invitation to be deleted.",
      "properties": {
        "invitation_id": {
          "description": "The unique numerical identifier of the repository invitation to be deleted.",
          "examples": ["42"],
          "title": "Invitation Id",
          "type": "integer"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This field is case-insensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is case-insensitive. ",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "invitation_id"],
      "title": "DeleteARepositoryInvitationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteARepositoryInvitationResponseWrapper",
      "type": "object"
    },
    "description": "Deletes an active repository invitation, permanently revoking a user's access to collaborate on the specified repository.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "Repository Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a repository ruleset",
    "slug": "GITHUB_DELETE_A_REPOSITORY_RULESET",
    "input_parameters": {
      "description": "Request schema for `DeleteARepositoryRuleset`",
      "properties": {
        "owner": {
          "description": "The username of the account that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "openai"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["hello-world", "gpt-3"],
          "title": "Repo",
          "type": "string"
        },
        "ruleset_id": {
          "description": "The unique identifier (ID) of the ruleset to be deleted.",
          "examples": ["5", "42"],
          "title": "Ruleset Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "ruleset_id"],
      "title": "DeleteARepositoryRulesetRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteARepositoryRulesetResponseWrapper",
      "type": "object"
    },
    "description": "Permanently deletes a repository ruleset.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "Repository Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a repository secret",
    "slug": "GITHUB_DELETE_A_REPOSITORY_SECRET",
    "input_parameters": {
      "description": "Request schema for `DeleteARepositorySecret`",
      "properties": {
        "owner": {
          "description": "The account owner of the repository. This is typically the username or organization name and is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        },
        "secret_name": {
          "description": "The name of the secret to delete. This refers to a secret used in GitHub Actions.",
          "examples": ["MY_API_TOKEN"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "secret_name"],
      "title": "DeleteARepositorySecretRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty dictionary. A successful deletion typically results in an HTTP 204 No Content response, where this field will be an empty dictionary.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteARepositorySecretResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a named github actions secret from a specified repository; this operation is destructive and idempotent, and requires the repository to exist.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "Repository Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a repository subscription",
    "slug": "GITHUB_DELETE_A_REPOSITORY_SUBSCRIPTION",
    "input_parameters": {
      "description": "Request schema for `DeleteARepositorySubscription`.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository (e.g., a GitHub username or organization name). This name is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "DeleteARepositorySubscriptionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteARepositorySubscriptionResponseWrapper",
      "type": "object"
    },
    "description": "Deletes the authenticated user's subscription to a specified repository if it exists, effectively 'unwatching' it.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "Repository Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a repository variable",
    "slug": "GITHUB_DELETE_A_REPOSITORY_VARIABLE",
    "input_parameters": {
      "description": "Request schema for deleting a variable from a repository.",
      "properties": {
        "name": {
          "description": "The name of the repository variable to delete.",
          "examples": ["CI_VARIABLE_NAME", "DEPLOYMENT_SETTING"],
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case-sensitive.",
          "examples": ["octocat", "my-github-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["hello-world", "my-repo-name"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "name"],
      "title": "DeleteARepositoryVariableRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The API response data. For a successful deletion (HTTP 204 No Content), this field is typically empty.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteARepositoryVariableResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a named variable (e.g., for github actions workflows) from a repository; the repository and the variable must already exist.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "Repository Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a repository webhook",
    "slug": "GITHUB_DELETE_A_REPOSITORY_WEBHOOK",
    "input_parameters": {
      "description": "Specifies the repository and webhook to be deleted.",
      "properties": {
        "hook_id": {
          "description": "The unique identifier of the webhook. This ID can be found in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "examples": [12345678],
          "title": "Hook Id",
          "type": "integer"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "hook_id"],
      "title": "DeleteARepositoryWebhookRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteARepositoryWebhookResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a specific webhook from a repository.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "Repository Management"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a review comment for a pull request",
    "slug": "GITHUB_DELETE_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST",
    "input_parameters": {
      "description": "Request schema for `DeleteAReviewCommentForAPullRequest`",
      "properties": {
        "comment_id": {
          "description": "The unique numerical identifier of the pull request review comment to be deleted.",
          "examples": ["102345", "9876"],
          "title": "Comment Id",
          "type": "integer"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife", "my-awesome-repo"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "comment_id"],
      "title": "DeleteAReviewCommentForAPullRequestRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the response from the API. For successful deletions (which typically return a 204 No Content status), this dictionary might be empty or not applicable. If an error occurs, this field may contain error details.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAReviewCommentForAPullRequestResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a specific pull request review comment.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "Pull Request Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a secret for the authenticated user",
    "slug": "GITHUB_DELETE_A_SECRET_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for `DeleteASecretForTheAuthenticatedUser`",
      "properties": {
        "secret_name": {
          "description": "Name of the Codespaces secret to delete. Case-sensitive; allows alphanumeric characters or underscores; must not start with `GITHUB_` or contain spaces.",
          "examples": ["MY_PERSONAL_API_KEY", "DATABASE_CONNECTION_STRING"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["secret_name"],
      "title": "DeleteASecretForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Response data; usually empty as this operation typically returns a 204 No Content on success.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteASecretForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Deletes an existing codespaces secret for the authenticated user by `secret name`; this is a destructive, irreversible, and idempotent operation.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "User Management", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a self hosted runner from an organization",
    "slug": "GITHUB_DELETE_A_SELF_HOSTED_RUNNER_FROM_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for `DeleteASelfHostedRunnerFromAnOrganization`",
      "properties": {
        "org": {
          "description": "Organization name (not case-sensitive).",
          "examples": ["octo-org", "my-company"],
          "title": "Org",
          "type": "string"
        },
        "runner_id": {
          "description": "Unique ID of the self-hosted runner to remove (obtainable by listing organization runners).",
          "examples": ["5", "42"],
          "title": "Runner Id",
          "type": "integer"
        }
      },
      "required": ["org", "runner_id"],
      "title": "DeleteASelfHostedRunnerFromAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteASelfHostedRunnerFromAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Deletes an existing and registered self-hosted runner from an organization, typically returning 204 no content on success.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "Workflow and Automation Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a self hosted runner from a repository",
    "slug": "GITHUB_DELETE_A_SELF_HOSTED_RUNNER_FROM_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for `DeleteASelfHostedRunnerFromARepository`",
      "properties": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "examples": ["123", "456"],
          "title": "Runner Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "runner_id"],
      "title": "DeleteASelfHostedRunnerFromARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the API response data. This is typically empty for successful DELETE operations (e.g., HTTP 204 No Content).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteASelfHostedRunnerFromARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Removes a specific self-hosted runner (by `runner id`) from a repository, if registered there; this is idempotent.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "Workflow and Automation Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a tag protection state for a repository",
    "slug": "GITHUB_DELETE_A_TAG_PROTECTION_STATE_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request to permanently delete a tag protection rule from a repository.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "tag_protection_id": {
          "description": "The unique identifier of the tag protection to delete.",
          "examples": [12345],
          "title": "Tag Protection Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "tag_protection_id"],
      "title": "DeleteATagProtectionStateForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteATagProtectionStateForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Permanently deletes a specific tag protection rule, identified by its id, from the given repository.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "Security and Protection Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a team",
    "slug": "GITHUB_DELETE_A_TEAM",
    "input_parameters": {
      "description": "Input for deleting a team within an organization.",
      "properties": {
        "org": {
          "description": "The organization's unique identifier (case-insensitive).",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "team_slug": {
          "description": "The team's URL-friendly slug.",
          "examples": ["justice-league", "marketing-devs"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug"],
      "title": "DeleteATeamRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteATeamResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a team (and any child teams) from an organization.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "Team Management"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a thread subscription",
    "slug": "GITHUB_DELETE_A_THREAD_SUBSCRIPTION",
    "input_parameters": {
      "description": "Request schema for `DeleteAThreadSubscription`",
      "properties": {
        "thread_id": {
          "description": "The unique identifier of the notification thread. This ID is obtained from other API calls, such as when listing notifications (e.g., via the `GET /notifications` endpoint). Ensure this ID refers to an active thread to which the user is currently subscribed.",
          "title": "Thread Id",
          "type": "integer"
        }
      },
      "required": ["thread_id"],
      "title": "DeleteAThreadSubscriptionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary that is typically empty upon successful unsubscription, as the GitHub API returns a 204 No Content status. In case of errors or other specific scenarios, this field might contain relevant information.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAThreadSubscriptionResponseWrapper",
      "type": "object"
    },
    "description": "Call this to mute a specific notification thread by deleting the user's subscription; notifications may still occur if the user is @mentioned, comments, or due to repository watch settings.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "User Management", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete a workflow run",
    "slug": "GITHUB_DELETE_A_WORKFLOW_RUN",
    "input_parameters": {
      "description": "Request schema for `DeleteAWorkflowRun`",
      "properties": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. ",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "run_id": {
          "description": "The unique identifier of the workflow run.",
          "examples": [12345],
          "title": "Run Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "run_id"],
      "title": "DeleteAWorkflowRunRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteAWorkflowRunResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a specific workflow run from a repository.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "Workflow and Automation Management"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete branch protection",
    "slug": "GITHUB_DELETE_BRANCH_PROTECTION",
    "input_parameters": {
      "description": "Request schema for deleting branch protection rules.",
      "properties": {
        "branch": {
          "description": "The name of the branch. Wildcard characters are not supported for this REST API endpoint; use the GitHub GraphQL API for wildcard support.",
          "examples": ["main", "develop"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. Not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. Not case sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "DeleteBranchProtectionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The response data from the API. For a successful deletion (HTTP 204 No Content), this dictionary is typically empty.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteBranchProtectionResponseWrapper",
      "type": "object"
    },
    "description": "Removes all protection rules from a specific branch in a github repository; the branch must currently have protection rules enabled.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "Security and Protection Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete commit signature protection",
    "slug": "GITHUB_DELETE_COMMIT_SIGNATURE_PROTECTION",
    "input_parameters": {
      "description": "Request schema for `DeleteCommitSignatureProtection`",
      "properties": {
        "branch": {
          "description": "The name of the branch for which commit signature protection will be disabled. Wildcard characters are not supported in the branch name. To use wildcards, refer to the GitHub GraphQL API.",
          "examples": ["main", "develop", "feature/new-ui"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. This is typically the username of the owner (for personal repositories) or the organization name (for organization-owned repositories). The name is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. The name is not case-sensitive.",
          "examples": ["my-awesome-project", "api-docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "DeleteCommitSignatureProtectionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response data; usually empty as GitHub typically returns a 204 No Content on successful deletion.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteCommitSignatureProtectionResponseWrapper",
      "type": "object"
    },
    "description": "Disables gpg commit signature protection for a specific branch in a github repository, meaning commits pushed to this branch no longer require gpg signing.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "Security and Protection Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete dependabot secret by name",
    "slug": "GITHUB_DELETE_DEPENDEBOT_SECRET_BY_NAME",
    "input_parameters": {
      "description": "Request schema for deleting a Dependabot secret from a repository by its name.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository (e.g., username or organization name). This field is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. This field is not case-sensitive.",
          "examples": ["hello-world", "linguist"],
          "title": "Repo",
          "type": "string"
        },
        "secret_name": {
          "description": "The name of the Dependabot secret to delete. Secret names are case-sensitive and can only contain alphanumeric characters ([A-Z], [a-z], [0-9]) or underscores (_); spaces are not allowed.",
          "examples": ["MY_SECRET_TOKEN", "NPM_TOKEN"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "secret_name"],
      "title": "DeleteDependebotSecretByNameRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Data returned by the API. For a successful deletion, this is typically an empty dictionary as the API returns a 204 No Content status.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteDependebotSecretByNameResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a specific dependabot secret, identified by its name, from a given repository if both the repository and secret exist.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "Security and Protection Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete GitHub Actions cache by ID",
    "slug": "GITHUB_DELETE_GITHUB_ACTIONS_CACHE_BY_ID",
    "input_parameters": {
      "description": "Request schema for `DeleteGithubActionsCacheById`",
      "properties": {
        "cache_id": {
          "description": "The unique ID of the GitHub Actions cache to delete.",
          "examples": [123],
          "title": "Cache Id",
          "type": "integer"
        },
        "owner": {
          "description": "The username or organization name that owns the repository.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension.",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "cache_id"],
      "title": "DeleteGithubActionsCacheByIdRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Response from the GitHub API; typically empty for a successful deletion (204 No Content).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteGithubActionsCacheByIdResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a specific github actions cache from a repository using its unique `cache id`.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "Workflow and Automation Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete package version for an organization",
    "slug": "GITHUB_DELETE_PACKAGE_VERSION_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for `DeletePackageVersionForAnOrganization`",
      "properties": {
        "org": {
          "description": "Organization name (case-insensitive).",
          "examples": ["github", "my-organization"],
          "title": "Org",
          "type": "string"
        },
        "package_name": {
          "description": "Name of the package.",
          "examples": ["my-package", "your-awesome-app"],
          "title": "Package Name",
          "type": "string"
        },
        "package_type": {
          "description": "Package ecosystem. Notes:\n- `maven`: For GitHub's Gradle registry packages.\n- `container`: For Docker images in GitHub's Container registry (ghcr.io).\n- `docker`: For images originally in GitHub's Docker registry (docker.pkg.github.com), including migrated ones.",
          "enum": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "examples": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "title": "Package Type",
          "type": "string"
        },
        "package_version_id": {
          "description": "Unique ID of the package version to delete.",
          "examples": ["12345", "98760"],
          "title": "Package Version Id",
          "type": "integer"
        }
      },
      "required": ["package_type", "package_name", "org", "package_version_id"],
      "title": "DeletePackageVersionForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeletePackageVersionForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a specific package version within an organization; requires admin permissions for packages with over 5,000 downloads.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "Package Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete package version for a user",
    "slug": "GITHUB_DELETE_PACKAGE_VERSION_FOR_A_USER",
    "input_parameters": {
      "description": "Request schema for deleting a specific version of a package owned by a user.",
      "properties": {
        "package_name": {
          "description": "The name of the package to which the version belongs.",
          "examples": ["my-package", "your-app-library"],
          "title": "Package Name",
          "type": "string"
        },
        "package_type": {
          "description": "The type of the package. Supported types include npm, maven, rubygems, docker, nuget, and container. Packages in GitHub's Gradle registry use the `maven` type. Docker images in GitHub's Container registry (ghcr.io) use the `container` type. The `docker` type can be used for images previously in GitHub's Docker registry (docker.pkg.github.com), even if migrated.",
          "enum": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "examples": ["npm", "maven", "docker", "container"],
          "title": "Package Type",
          "type": "string"
        },
        "package_version_id": {
          "description": "The unique identifier of the package version to be deleted.",
          "examples": [12345, 67890],
          "title": "Package Version Id",
          "type": "integer"
        },
        "username": {
          "description": "The GitHub username of the account that owns the package.",
          "examples": ["octocat", "your-username"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["package_type", "package_name", "username", "package_version_id"],
      "title": "DeletePackageVersionForAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the response data. For successful deletions (HTTP 204 No Content), this will typically be an empty object.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeletePackageVersionForAUserResponseWrapper",
      "type": "object"
    },
    "description": "Permanently and irreversibly deletes a specific version of a package owned by the specified user.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "Package Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete pull request review protection",
    "slug": "GITHUB_DELETE_PULL_REQUEST_REVIEW_PROTECTION",
    "input_parameters": {
      "description": "Request schema for `DeletePullRequestReviewProtection`",
      "properties": {
        "branch": {
          "description": "Name of the branch to remove pull request review protection from (wildcards not supported; use GraphQL API for wildcards).",
          "examples": ["main"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "Username or organization name of the repository owner (not case-sensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (not case-sensitive).",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "DeletePullRequestReviewProtectionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response data; typically empty for a successful deletion (204 No Content).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeletePullRequestReviewProtectionResponseWrapper",
      "type": "object"
    },
    "description": "Disables the requirement for pull request reviews before merging for a specific, existing branch in an existing repository; this action is idempotent and will succeed even if the protection is not currently enabled.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "Security and Protection Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete repo codespace secret by name",
    "slug": "GITHUB_DELETE_REPO_CODESPACE_SECRET_BY_NAME",
    "input_parameters": {
      "description": "Request schema for `DeleteRepoCodespaceSecretByName`",
      "properties": {
        "owner": {
          "description": "The username of the account or the name of the organization that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        },
        "secret_name": {
          "description": "The name of the Codespace secret to be deleted.",
          "examples": ["MY_API_KEY"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "secret_name"],
      "title": "DeleteRepoCodespaceSecretByNameRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty dictionary or a dictionary containing additional information if the deletion process provides any. Typically, a successful deletion results in an empty response body (e.g., HTTP 204 No Content).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteRepoCodespaceSecretByNameResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a specific codespace secret from a repository by its name; this action is idempotent and will succeed even if the secret doesn't exist.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "Repository Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete social accounts for the authenticated user",
    "slug": "GITHUB_DELETE_SOCIAL_ACCOUNTS_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for deleting social media accounts linked to the authenticated user's GitHub profile.",
      "properties": {
        "account_urls": {
          "description": "Absolute URLs of the social media profiles to be unlinked from the GitHub profile.",
          "examples": [["https://twitter.com/username", "https://linkedin.com/in/profile"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Account Urls",
          "type": "array"
        }
      },
      "required": ["account_urls"],
      "title": "DeleteSocialAccountsForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteSocialAccountsForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Deletes currently linked social media account urls from the authenticated user's github profile.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "User Management", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete team discussion comment reaction",
    "slug": "GITHUB_DELETE_TEAM_DISCUSSION_COMMENT_REACTION",
    "input_parameters": {
      "description": "Request model for deleting a reaction from a specific comment within a team discussion.",
      "properties": {
        "comment_number": {
          "description": "The number that uniquely identifies the comment within the discussion.",
          "examples": ["101"],
          "title": "Comment Number",
          "type": "integer"
        },
        "discussion_number": {
          "description": "The number that uniquely identifies the discussion.",
          "examples": ["42"],
          "title": "Discussion Number",
          "type": "integer"
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "reaction_id": {
          "description": "The unique identifier of the reaction to be deleted.",
          "examples": ["1"],
          "title": "Reaction Id",
          "type": "integer"
        },
        "team_slug": {
          "description": "The slug of the team name (URL-friendly version).",
          "examples": ["justice-league"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug", "discussion_number", "comment_number", "reaction_id"],
      "title": "DeleteTeamDiscussionCommentReactionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Response data. For this operation, a successful deletion (204 No Content) means this field is typically empty.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteTeamDiscussionCommentReactionResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a reaction from a team discussion comment, given the organization name, team slug, discussion number, comment number, and reaction id.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "Team Management", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete team discussion reaction",
    "slug": "GITHUB_DELETE_TEAM_DISCUSSION_REACTION",
    "input_parameters": {
      "description": "Request model for deleting a reaction from a team discussion.",
      "properties": {
        "discussion_number": {
          "description": "The unique number identifying the specific discussion within the team.",
          "examples": ["42"],
          "title": "Discussion Number",
          "type": "integer"
        },
        "org": {
          "description": "The organization name. This name is not case sensitive.",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "reaction_id": {
          "description": "The unique identifier of the reaction to be deleted.",
          "examples": ["1"],
          "title": "Reaction Id",
          "type": "integer"
        },
        "team_slug": {
          "description": "The slug of the team name, which is a URL-friendly version of the team name.",
          "examples": ["justice-league"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug", "discussion_number", "reaction_id"],
      "title": "DeleteTeamDiscussionReactionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty dictionary is expected upon successful deletion (HTTP 204 No Content).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteTeamDiscussionReactionResponseWrapper",
      "type": "object"
    },
    "description": "Permanently deletes a specific reaction from a team discussion within an organization.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "Team Management", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete workflow run logs",
    "slug": "GITHUB_DELETE_WORKFLOW_RUN_LOGS",
    "input_parameters": {
      "description": "Specifies the target repository and workflow run for log deletion.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat", "actions"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "examples": ["hello-world", "runner"],
          "title": "Repo",
          "type": "string"
        },
        "run_id": {
          "description": "The unique identifier of the workflow run.",
          "examples": ["123456789", "987654321"],
          "title": "Run Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "run_id"],
      "title": "DeleteWorkflowRunLogsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteWorkflowRunLogsResponseWrapper",
      "type": "object"
    },
    "description": "Deletes all logs for a specific workflow run in a github repository, provided the repository and run exist.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "Workflow and Automation Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Disable a custom protection rule for an environment",
    "slug": "GITHUB_DISABLE_A_CUSTOM_PROTECTION_RULE_FOR_AN_ENVIRONMENT",
    "input_parameters": {
      "description": "Request schema for disabling a custom deployment protection rule for an environment.",
      "properties": {
        "environment_name": {
          "description": "The name of the environment. This name must be URL encoded; for example, any slashes (`/`) in the name must be replaced with `%2F`.",
          "examples": ["production", "staging", "dev%2Ffeature-branch"],
          "title": "Environment Name",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository (e.g., a user or organization). This name is not case sensitive.",
          "examples": ["octocat", "my-company"],
          "title": "Owner",
          "type": "string"
        },
        "protection_rule_id": {
          "description": "The unique integer identifier of the custom deployment protection rule to be disabled.",
          "examples": ["12345", "9876"],
          "title": "Protection Rule Id",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository (without the `.git` extension). This name is not case sensitive.",
          "examples": ["my-awesome-project", "BackendService"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["environment_name", "repo", "owner", "protection_rule_id"],
      "title": "DisableACustomProtectionRuleForAnEnvironmentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary that may contain response data. Typically, a successful disable operation (HTTP 204 No Content) results in an empty response body, making this field empty or not applicable.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DisableACustomProtectionRuleForAnEnvironmentResponseWrapper",
      "type": "object"
    },
    "description": "Disables a specific, currently active custom deployment protection rule for an existing environment within a github repository.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "Security and Protection Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Disable a workflow",
    "slug": "GITHUB_DISABLE_A_WORKFLOW",
    "input_parameters": {
      "description": "Request schema for disabling a specific workflow in a GitHub repository.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository (username or organization name). This field is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Hello-World", "Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        },
        "workflow_id": {
          "description": "The ID of the workflow or the workflow's file name (e.g., `main.yml` or `ci.yaml`). You can obtain the workflow ID by listing workflows in a repository.",
          "examples": [1234567, "main.yml"],
          "nullable": true,
          "title": "Workflow Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "workflow_id"],
      "title": "DisableAWorkflowRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The response body from the GitHub API. For a successful disable operation (HTTP 204 No Content), this will be empty.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DisableAWorkflowResponseWrapper",
      "type": "object"
    },
    "description": "Disables a specified workflow (by id or filename) in a given github repository, preventing new automatic triggers; any in-progress runs will continue.",
    "tags": ["updateHint", "openWorldHint", "Workflow and Automation Management", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Disable private vulnerability reporting for a repository",
    "slug": "GITHUB_DISABLE_PRIVATE_VULNERABILITY_REPORTING_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for `DisablePrivateVulnerabilityReportingForARepository`",
      "properties": {
        "owner": {
          "description": "The account owner of the repository (e.g., a GitHub username or organization name). This field is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "DisablePrivateVulnerabilityReportingForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty dictionary is typically returned on success, as the GitHub API responds with a 204 No Content status for this operation.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DisablePrivateVulnerabilityReportingForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Disables private vulnerability reporting for an existing github repository, preventing direct private vulnerability reports to maintainers via github's interface for this repository.",
    "tags": ["destructiveHint", "openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Disablerepositoryactionsinorg",
    "slug": "GITHUB_DISABLE_REPOSITORY_ACTIONS_IN_ORG",
    "input_parameters": {
      "description": "Request schema for `DisableRepositoryActionsInOrg`",
      "properties": {
        "org": {
          "description": "The GitHub organization name (not case-sensitive).",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "repository_id": {
          "description": "The unique identifier of the repository.",
          "examples": ["1296269"],
          "title": "Repository Id",
          "type": "integer"
        }
      },
      "required": ["org", "repository_id"],
      "title": "DisableRepositoryActionsInOrgRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Typically empty upon successful execution, as a 204 No Content status is returned.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DisableRepositoryActionsInOrgResponseWrapper",
      "type": "object"
    },
    "description": "Disables github actions for a specific repository within an organization; this action is only effective if the organization's github actions `enabled repositories` setting is configured to `selected`.",
    "tags": ["Access and Permissions", "idempotentHint", "updateHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Dismiss a review for a pull request",
    "slug": "GITHUB_DISMISS_A_REVIEW_FOR_A_PULL_REQUEST",
    "input_parameters": {
      "description": "Request schema for `DismissAReviewForAPullRequest`",
      "properties": {
        "event": {
          "description": "The event type associated with dismissing the review.",
          "enum": ["DISMISS"],
          "examples": ["DISMISS"],
          "title": "Event",
          "type": "string"
        },
        "message": {
          "description": "The reason for dismissing the review.",
          "examples": ["Outdated comments", "All concerns addressed by recent commits."],
          "title": "Message",
          "type": "string"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "pull_number": {
          "description": "The unique number identifying the pull request within the repository.",
          "examples": ["1", "42", "101"],
          "title": "Pull Number",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife", "my-awesome-repo"],
          "title": "Repo",
          "type": "string"
        },
        "review_id": {
          "description": "The unique identifier for the review to be dismissed.",
          "examples": ["12345", "67890"],
          "title": "Review Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "pull_number", "review_id", "message"],
      "title": "DismissAReviewForAPullRequestRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the response data from the API upon successful dismissal of the review. The structure of this dictionary may vary based on the API's response.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DismissAReviewForAPullRequestResponseWrapper",
      "type": "object"
    },
    "description": "Dismisses a review on a pull request with a mandatory explanatory message.",
    "tags": ["Content Management", "idempotentHint", "updateHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Download an artifact",
    "slug": "GITHUB_DOWNLOAD_AN_ARTIFACT",
    "input_parameters": {
      "description": "Request schema for `DownloadAnArtifact`",
      "properties": {
        "archive_format": {
          "description": "Archive format; must be 'zip' (GitHub API only supports 'zip').",
          "examples": ["zip"],
          "title": "Archive Format",
          "type": "string"
        },
        "artifact_id": {
          "description": "Unique numeric identifier of the artifact.",
          "title": "Artifact Id",
          "type": "integer"
        },
        "owner": {
          "description": "Username or organization name of the repository owner (case-insensitive).",
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension (case-insensitive).",
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "artifact_id", "archive_format"],
      "title": "DownloadAnArtifactRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Response dictionary containing a temporary download URL (e.g., under 'Location' or 'download_url') for the artifact, valid for 1 minute.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DownloadAnArtifactResponseWrapper",
      "type": "object"
    },
    "description": "Downloads a specific github repository artifact, returning a temporary url to its 'zip' archive, valid for one minute.",
    "tags": ["Content Management", "readOnlyHint", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Download a repository tarball",
    "slug": "GITHUB_DOWNLOAD_A_REPOSITORY_ARCHIVE_TAR",
    "input_parameters": {
      "description": "Request schema for `DownloadARepositoryArchiveTar`",
      "properties": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "ref": {
          "description": "A Git reference (e.g., branch name, tag name, or commit SHA) that points to the specific version of the repository content to be downloaded as a tarball archive. For example, `main` for the main branch, `v1.0.0` for a tag, or a full commit SHA.",
          "examples": ["main", "v1.2.3", "0c0bf3f7872779800039124014614000356f4b03"],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "examples": ["Spoon-Knife", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "ref"],
      "title": "DownloadARepositoryArchiveTarRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the response from the API. For successful tarball downloads, the actual file is typically obtained via a redirect URL in the HTTP headers, and this dictionary might contain metadata or be empty.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DownloadARepositoryArchiveTarResponseWrapper",
      "type": "object"
    },
    "description": "Downloads a repository's source code as a tarball (.tar.gz) archive for a specific git reference, if the repository is accessible.",
    "tags": [
      "Repository Management",
      "readOnlyHint",
      "idempotentHint",
      "openWorldHint",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Download a repository archive ZIP",
    "slug": "GITHUB_DOWNLOAD_A_REPOSITORY_ARCHIVE_ZIP",
    "input_parameters": {
      "description": "Request schema for downloading a repository's archive in ZIP format.",
      "properties": {
        "owner": {
          "description": "The username of the account that owns the repository. This is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "ref": {
          "description": "The Git reference for the archive. This can be a branch name, a tag name, or a commit SHA.",
          "examples": ["main", "v1.0", "0799097993916240518952411700981210018401"],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This is not case-sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "ref"],
      "title": "DownloadARepositoryArchiveZipRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Response data. Typically the ZIP file's binary content, but may contain redirect information due to GitHub API's 302 redirect for the file.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DownloadARepositoryArchiveZipResponseWrapper",
      "type": "object"
    },
    "description": "Downloads a repository's source code as a zip archive for a specific git reference (branch, tag, or commit sha).",
    "tags": [
      "Repository Management",
      "readOnlyHint",
      "idempotentHint",
      "openWorldHint",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Download job logs for a workflow run",
    "slug": "GITHUB_DOWNLOAD_JOB_LOGS_FOR_A_WORKFLOW_RUN",
    "input_parameters": {
      "description": "Request schema for downloading job logs for a workflow run.",
      "properties": {
        "job_id": {
          "description": "The unique identifier of the job for which to download logs.",
          "examples": ["1234567890"],
          "title": "Job Id",
          "type": "integer"
        },
        "owner": {
          "description": "The account owner of the repository (e.g., user or organization). This name is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive. ",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "job_id"],
      "title": "DownloadJobLogsForAWorkflowRunRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The content of the downloaded job logs. GitHub API provides logs as plain text; this action returns them structured as a dictionary.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DownloadJobLogsForAWorkflowRunResponseWrapper",
      "type": "object"
    },
    "description": "Downloads logs for a specific job in a github actions workflow run, contingent on the repository's existence and the job id being valid and having produced logs.",
    "tags": ["Workflow Management", "readOnlyHint", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Download workflow run attempt logs",
    "slug": "GITHUB_DOWNLOAD_WORKFLOW_RUN_ATTEMPT_LOGS",
    "input_parameters": {
      "description": "Request schema for `DownloadWorkflowRunAttemptLogs`",
      "properties": {
        "attempt_number": {
          "description": "The attempt number of the workflow run.",
          "examples": [1],
          "title": "Attempt Number",
          "type": "integer"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. ",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        },
        "run_id": {
          "description": "The unique identifier of the workflow run.",
          "examples": [123456789],
          "title": "Run Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "run_id", "attempt_number"],
      "title": "DownloadWorkflowRunAttemptLogsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DownloadWorkflowRunAttemptLogsResponseWrapper",
      "type": "object"
    },
    "description": "Downloads a zip archive of logs for a specific workflow run attempt.",
    "tags": ["Workflow Management", "readOnlyHint", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Download workflow run logs",
    "slug": "GITHUB_DOWNLOAD_WORKFLOW_RUN_LOGS",
    "input_parameters": {
      "description": "Parameters to identify and download logs for a specific GitHub Actions workflow run.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository (e.g., 'octocat'). This name is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository (e.g., 'Spoon-Knife') without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Hello-World", "octocat.github.io"],
          "title": "Repo",
          "type": "string"
        },
        "run_id": {
          "description": "The unique identifier of the workflow run (e.g., 12345).",
          "examples": ["1616202549", "3043364204"],
          "title": "Run Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "run_id"],
      "title": "DownloadWorkflowRunLogsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DownloadWorkflowRunLogsResponseWrapper",
      "type": "object"
    },
    "description": "Downloads logs for a specific github actions workflow run, typically archived as a zip file, if logs are available (e.g., not expired and the workflow has produced output).",
    "tags": ["Workflow Management", "readOnlyHint", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get emojis",
    "slug": "GITHUB_EMO_J_IS_GET",
    "input_parameters": {
      "description": "Request schema for the `GetEmojis` action. This action does not require any parameters.",
      "properties": {},
      "title": "GetEmojisRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary where each key is an emoji name (e.g., 'smile') and the corresponding value is the URL of the emoji's image.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetEmojisResponseWrapper",
      "type": "object"
    },
    "description": "Lists all emojis available for use on github; deprecated, use `get emojis` instead.",
    "tags": ["Content Management", "readOnlyHint", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Enable a workflow",
    "slug": "GITHUB_ENABLE_A_WORKFLOW",
    "input_parameters": {
      "description": "Request schema to enable a GitHub Actions workflow.",
      "properties": {
        "owner": {
          "description": "The username or organization name that owns the repository. This value is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This value is not case-sensitive.",
          "examples": ["hello-world", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        },
        "workflow_id": {
          "description": "The numerical ID of the workflow to be enabled. While the GitHub API endpoint for this operation also accepts the workflow filename (e.g., 'ci.yaml') as an identifier, this field specifically requires the integer ID.",
          "examples": ["1234567", "7654321"],
          "title": "Workflow Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "workflow_id"],
      "title": "EnableAWorkflowRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty dictionary. This action corresponds to a GitHub API endpoint that returns a 204 No Content status on success, indicating the workflow was enabled without returning any body content.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "EnableAWorkflowResponseWrapper",
      "type": "object"
    },
    "description": "Reactivates a currently disabled github actions workflow within a repository using its numerical id.",
    "tags": ["Workflow Management", "updateHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Enable GitHub actions in selected repositories",
    "slug": "GITHUB_ENABLE_GITHUB_ACTIONS_IN_SELECTED_REPOSITORIES",
    "input_parameters": {
      "description": "Request to set the specific repositories that can use GitHub Actions within an organization.",
      "properties": {
        "org": {
          "description": "Name of the GitHub organization (case-insensitive).",
          "examples": ["my-github-org", "octo-org"],
          "title": "Org",
          "type": "string"
        },
        "selected_repository_ids": {
          "description": "Unique repository IDs for which GitHub Actions will be enabled. This list completely replaces the current selection of repositories.",
          "examples": ["[1296269, 1296270]", "[98765, 123456]"],
          "items": { "properties": {}, "type": "integer" },
          "title": "Selected Repository Ids",
          "type": "array"
        }
      },
      "required": ["org", "selected_repository_ids"],
      "title": "EnableGithubActionsInSelectedRepositoriesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Response data from the GitHub API. Usually empty for successful (HTTP 204 No Content) operations, but may contain details on errors.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "EnableGithubActionsInSelectedRepositoriesResponseWrapper",
      "type": "object"
    },
    "description": "Sets the specific repositories that can use github actions within an organization by replacing the current list; only applies if the organization's actions policy is 'selected repositories'.",
    "tags": ["Access and Permissions", "idempotentHint", "updateHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Enable private vulnerability reporting for a repository",
    "slug": "GITHUB_ENABLE_PRIVATE_VULNERABILITY_REPORTING_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for enabling private vulnerability reporting for a repository.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository. This is typically the username or organization name and is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Hello-World", "Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "EnablePrivateVulnerabilityReportingForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the response data. Upon successful execution, this action returns an HTTP 204 status code with an empty response body, so this dictionary will be empty.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "EnablePrivateVulnerabilityReportingForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Enables private vulnerability reporting for a repository, allowing security researchers to privately submit vulnerability reports to maintainers.",
    "tags": ["openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Enable repo for Github Actions",
    "slug": "GITHUB_ENABLE_REPO_FORGITHUB_ACTIONS",
    "input_parameters": {
      "description": "Specifies the target organization and repository for enabling GitHub Actions.",
      "properties": {
        "org": {
          "description": "The name of the GitHub organization. This name is not case-sensitive.",
          "examples": ["my-github-org", "acme-corp"],
          "title": "Org",
          "type": "string"
        },
        "repository_id": {
          "description": "The unique numerical identifier of the GitHub repository.",
          "examples": ["123456789", "987654321"],
          "title": "Repository Id",
          "type": "integer"
        }
      },
      "required": ["org", "repository_id"],
      "title": "EnableRepoForgithubActionsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "EnableRepoForgithubActionsResponseWrapper",
      "type": "object"
    },
    "description": "Enables github actions for a repository if the organization's actions permissions are set to allow for 'selected repositories'.",
    "tags": ["Access and Permissions", "idempotentHint", "updateHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Encrypt and update dev secret",
    "slug": "GITHUB_ENCRYPT_AND_UPDATE_DEV_SECRET",
    "input_parameters": {
      "description": "Request schema for creating or updating a development environment secret with an encrypted value.",
      "properties": {
        "encrypted_value": {
          "description": "Value for your secret, encrypted using the public key retrieved from the GitHub API's 'Get a repository public key for Codespaces' endpoint (`GET /repos/{owner}/{repo}/codespaces/secrets/public-key`).",
          "examples": ["c2VjcmV0X2VuY3J5cHRlZF92YWx1ZQ=="],
          "title": "Encrypted Value",
          "type": "string"
        },
        "key_id": {
          "description": "ID of the public key (retrieved from the GitHub API's 'Get a repository public key for Codespaces' endpoint: `GET /repos/{owner}/{repo}/codespaces/secrets/public-key`) used to encrypt the secret's value.",
          "examples": ["1234567890abcdef"],
          "title": "Key Id",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. This name is not case-sensitive.",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        },
        "secret_name": {
          "description": "The name of the development environment secret.",
          "examples": ["MY_API_TOKEN"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "secret_name"],
      "title": "EncryptAndUpdateDevSecretRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary that is typically empty upon successful creation (HTTP 201) or update (HTTP 204) of the secret. In some cases, it might contain metadata about the secret.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "EncryptAndUpdateDevSecretResponseWrapper",
      "type": "object"
    },
    "description": "Creates or updates a repository's development environment secret using an `encrypted value` and its corresponding `key id`; the secret must be pre-encrypted with the repository's codespaces public key.",
    "tags": ["Secrets Management", "idempotentHint", "updateHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Encrypt org dev env secret",
    "slug": "GITHUB_ENCRYPT_ORG_DEV_ENV_SECRET",
    "input_parameters": {
      "description": "Request schema for creating or updating an organization's development environment secret with an encrypted value.",
      "properties": {
        "encrypted_value": {
          "description": "Encrypted secret value, using the public key from 'Get an organization public key'. Required unless only updating visibility.",
          "title": "Encrypted Value",
          "type": "string"
        },
        "key_id": {
          "description": "ID of the public key used for encryption (from 'Get an organization public key').",
          "title": "Key Id",
          "type": "string"
        },
        "org": {
          "description": "The GitHub organization name (case-insensitive).",
          "examples": ["my-organization"],
          "title": "Org",
          "type": "string"
        },
        "secret_name": {
          "description": "Name of the secret to create or update.",
          "examples": ["MY_API_KEY"],
          "title": "Secret Name",
          "type": "string"
        },
        "selected_repository_ids": {
          "description": "Repository IDs that can access the secret; required if visibility is 'selected'.",
          "examples": ["12345", "67890"],
          "items": { "properties": {}, "type": "integer" },
          "title": "Selected Repository Ids",
          "type": "array"
        },
        "visibility": {
          "description": "Visibility of the secret. 'selected' requires `selected_repository_ids`.",
          "enum": ["all", "private", "selected"],
          "title": "Visibility",
          "type": "string"
        }
      },
      "required": ["org", "secret_name", "visibility"],
      "title": "EncryptOrgDevEnvSecretRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty object if the secret was successfully created or updated (e.g., HTTP 201 Created or 204 No Content). In case of an error, this may contain error details.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["successful"],
      "title": "EncryptOrgDevEnvSecretResponseWrapper",
      "type": "object"
    },
    "description": "Creates or updates an organization's github codespaces secret using an encrypted value and its corresponding public key id.",
    "tags": ["Secrets Management", "idempotentHint", "updateHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Encrypt org secrets using public key",
    "slug": "GITHUB_ENCRYPT_ORG_SECRETS_USING_PUBLIC_KEY",
    "input_parameters": {
      "description": "Request schema for retrieving an organization's public key for encrypting Codespaces secrets.",
      "properties": {
        "org": {
          "description": "The name of the GitHub organization. This field is not case-sensitive.",
          "examples": ["MyAwesomeOrg", "github"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org"],
      "title": "EncryptOrgSecretsUsingPublicKeyRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the public key information, typically including `key_id` (the public key identifier) and `key` (the Base64-encoded public key value).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "EncryptOrgSecretsUsingPublicKeyResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves an organization's public key, which must be used to encrypt secret values before they are configured for codespaces.",
    "tags": ["Secrets Management", "readOnlyHint", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Export a codespace for the authenticated user",
    "slug": "GITHUB_EXPORT_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for `ExportACodespaceForTheAuthenticatedUser`",
      "properties": {
        "codespace_name": {
          "description": "Unique name of the codespace to be exported.",
          "examples": ["monalisa-octo-cat-g45w7p9p7vh8qrq"],
          "title": "Codespace Name",
          "type": "string"
        }
      },
      "required": ["codespace_name"],
      "title": "ExportACodespaceForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details of the codespace export, typically including `id`, `state`, `export_url` (URL to download archive if successful, valid for a limited time), `html_url` for status, and other export/codespace metadata.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ExportACodespaceForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Triggers an export of a user's specified codespace, automatically stopping it if active, and returns its export status and download url.",
    "tags": ["Content Management", "updateHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Export an SBOM for a repository",
    "slug": "GITHUB_EXPORT_A_SOFTWARE_BILL_OF_MATERIALS_SBOM_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for `ExportASoftwareBillOfMaterialsSbomForARepository`",
      "properties": {
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive. ",
          "examples": ["hello-world", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ExportASoftwareBillOfMaterialsSbomForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the software bill of materials (SBOM) in SPDX JSON format.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ExportASoftwareBillOfMaterialsSbomForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Exports the software bill of materials (sbom) in spdx json format for a repository, if its dependency graph is enabled and it has at least one commit.",
    "tags": [
      "Licensing and Compliance",
      "readOnlyHint",
      "idempotentHint",
      "openWorldHint",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Fetchpublickeyforsecretencryption",
    "slug": "GITHUB_FETCH_PUBLIC_KEY_FOR_SECRET_ENCRYPTION",
    "input_parameters": {
      "description": "Request model for fetching the public key used to encrypt Dependabot secrets for an organization.",
      "properties": {
        "org": {
          "description": "The name of the GitHub organization. This field is not case-sensitive.",
          "examples": ["github", "microsoft"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org"],
      "title": "FetchPublicKeyForSecretEncryptionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the public key details. It includes `key_id` (the unique identifier for the public key) and `key` (the Base64-encoded public key value).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "FetchPublicKeyForSecretEncryptionResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves the public key for an existing github organization, required for encrypting dependabot secrets.",
    "tags": ["Secrets Management", "readOnlyHint", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Find Pull Requests",
    "slug": "GITHUB_FIND_PULL_REQUESTS",
    "input_parameters": {
      "description": "Request schema for finding pull requests with AI-friendly parameters.",
      "properties": {
        "assignee": {
          "description": "Filter by PR assignee username. Use '@me' for current user.",
          "examples": ["octocat", "@me"],
          "title": "Assignee",
          "type": "string"
        },
        "author": {
          "description": "Filter by PR author username.",
          "examples": ["octocat", "defunkt"],
          "title": "Author",
          "type": "string"
        },
        "base_branch": {
          "description": "Filter by base branch name.",
          "examples": ["main", "master", "develop", "staging"],
          "title": "Base Branch",
          "type": "string"
        },
        "created_since": {
          "description": "Filter PRs created after this date (ISO 8601 format).",
          "examples": ["2024-01-01", "2024-01-01T00:00:00Z"],
          "title": "Created Since",
          "type": "string"
        },
        "for_authenticated_user": {
          "default": false,
          "description": "Search in repositories accessible to authenticated user (including private).",
          "examples": [true, false],
          "title": "For Authenticated User",
          "type": "boolean"
        },
        "head_branch": {
          "description": "Filter by head branch name.",
          "examples": ["feature/auth", "bugfix/login", "hotfix/critical"],
          "title": "Head Branch",
          "type": "string"
        },
        "is_merged": {
          "description": "Filter by merge status. True for merged PRs, False for unmerged, None for all.",
          "examples": [true, false],
          "title": "Is Merged",
          "type": "boolean"
        },
        "label": {
          "description": "Filter by label name.",
          "examples": ["bug", "enhancement", "documentation", "good first issue"],
          "title": "Label",
          "type": "string"
        },
        "language": {
          "description": "Filter by programming language.",
          "examples": ["python", "javascript", "typescript", "go"],
          "title": "Language",
          "type": "string"
        },
        "mentions": {
          "description": "Filter by username mentioned in PR.",
          "examples": ["octocat", "@me"],
          "title": "Mentions",
          "type": "string"
        },
        "order": {
          "default": "desc",
          "description": "Sort order (ascending or descending).",
          "enum": ["desc", "asc"],
          "examples": ["desc", "asc"],
          "title": "Order",
          "type": "string"
        },
        "owner": {
          "description": "Filter by repository owner (user or organization).",
          "examples": ["facebook", "microsoft", "octocat"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results to fetch.",
          "examples": [1, 2, 3],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 20,
          "description": "Number of results per page (maximum 100).",
          "examples": [10, 20, 50],
          "title": "Per Page",
          "type": "integer"
        },
        "query": {
          "description": "Search query for PR title, description, or commit messages.",
          "examples": ["bug fix", "feature auth", "refactor api", "fix typescript"],
          "title": "Query",
          "type": "string"
        },
        "raw_response": {
          "default": false,
          "description": "Return full API response if true, optimized response for AI agents if false.",
          "examples": [true, false],
          "title": "Raw Response",
          "type": "boolean"
        },
        "repo": {
          "description": "Filter by specific repository (owner/repo format).",
          "examples": ["facebook/react", "microsoft/vscode", "octocat/Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "sort": {
          "default": "updated",
          "description": "Field to sort results by.",
          "enum": ["comments", "reactions", "interactions", "created", "updated"],
          "examples": ["updated", "created", "comments"],
          "title": "Sort",
          "type": "string"
        },
        "state": {
          "default": "open",
          "description": "Filter by PR state: 'open', 'closed', or 'all'.",
          "examples": ["open", "closed", "all"],
          "title": "State",
          "type": "string"
        },
        "updated_since": {
          "description": "Filter PRs updated after this date (ISO 8601 format).",
          "examples": ["2024-01-01", "2024-01-01T00:00:00Z"],
          "title": "Updated Since",
          "type": "string"
        }
      },
      "required": ["query"],
      "title": "FindPullRequestsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Search results with pull request information optimized for AI agents.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "FindPullRequestsResponseWrapper",
      "type": "object"
    },
    "description": "Ai-optimized pull request search with smart filtering by repo, author, state, labels, and merge status. builds intelligent search queries and returns clean, actionable pr data.",
    "tags": ["important", "openWorldHint", "readOnlyHint", "idempotentHint", "search"]
  },
  {
    "available_versions": ["latest"],
    "name": "Find Repositories",
    "slug": "GITHUB_FIND_REPOSITORIES",
    "input_parameters": {
      "description": "Request schema for finding repositories.",
      "properties": {
        "archived": {
          "description": "Filter by archived status. None means include both.",
          "examples": [true, false],
          "title": "Archived",
          "type": "boolean"
        },
        "for_authenticated_user": {
          "default": false,
          "description": "Search only in repositories accessible to the authenticated user (including private repos).",
          "examples": [true, false],
          "title": "For Authenticated User",
          "type": "boolean"
        },
        "fork_filter": {
          "default": "exclude",
          "description": "How to handle forks: 'include' (include forks), 'exclude' (exclude forks), 'only' (only forks).",
          "examples": ["include", "exclude", "only"],
          "title": "Fork Filter",
          "type": "string"
        },
        "language": {
          "description": "Filter by programming language.",
          "examples": ["python", "javascript", "typescript", "go"],
          "title": "Language",
          "type": "string"
        },
        "max_stars": {
          "description": "Maximum number of stars the repository should have.",
          "examples": [50, 500, 5000],
          "title": "Max Stars",
          "type": "integer"
        },
        "min_forks": {
          "description": "Minimum number of forks the repository should have.",
          "examples": [5, 50, 100],
          "title": "Min Forks",
          "type": "integer"
        },
        "min_stars": {
          "description": "Minimum number of stars the repository should have.",
          "examples": [10, 100, 1000],
          "title": "Min Stars",
          "type": "integer"
        },
        "order": {
          "default": "desc",
          "description": "Sort order (ascending or descending).",
          "enum": ["desc", "asc"],
          "examples": ["desc", "asc"],
          "title": "Order",
          "type": "string"
        },
        "owner": {
          "description": "Filter by specific user or organization.",
          "examples": ["facebook", "microsoft", "torvalds"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results to fetch.",
          "examples": [1, 2, 3],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 20,
          "description": "Number of results per page (maximum 100).",
          "examples": [10, 20, 50],
          "title": "Per Page",
          "type": "integer"
        },
        "query": {
          "description": "Search query for repository name, description, or README content.",
          "examples": ["react typescript", "machine learning python", "web scraper"],
          "title": "Query",
          "type": "string"
        },
        "raw_response": {
          "default": false,
          "description": "Return full API response if true, optimized response for AI agents if false.",
          "examples": [true, false],
          "title": "Raw Response",
          "type": "boolean"
        },
        "sort": {
          "default": "stars",
          "description": "Field to sort results by.",
          "enum": ["stars", "forks", "help-wanted-issues", "updated"],
          "examples": ["stars", "forks", "updated"],
          "title": "Sort",
          "type": "string"
        },
        "topic": {
          "description": "Filter by repository topic/tag.",
          "examples": ["web", "api", "machine-learning", "frontend"],
          "title": "Topic",
          "type": "string"
        }
      },
      "required": ["query"],
      "title": "FindRepositoriesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Search results with repository information optimized for AI agents.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "FindRepositoriesResponseWrapper",
      "type": "object"
    },
    "description": "Ai-optimized repository search with smart filtering by language, stars, topics, and ownership. builds intelligent search queries and returns clean, actionable repository data.",
    "tags": ["important", "openWorldHint", "readOnlyHint", "idempotentHint", "search"]
  },
  {
    "available_versions": ["latest"],
    "name": "Follow a user",
    "slug": "GITHUB_FOLLOW_A_USER",
    "input_parameters": {
      "description": "Specifies the GitHub user to follow.",
      "properties": {
        "username": {
          "description": "The GitHub username (handle) of the user to be followed by the authenticated user.",
          "examples": ["octocat", "torvalds"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["username"],
      "title": "FollowAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the server's response. Upon successful execution (HTTP 204 No Content), this dictionary is typically empty as GitHub does not return a body for this operation.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "FollowAUserResponseWrapper",
      "type": "object"
    },
    "description": "Allows the authenticated user to follow the github user specified by `username`; this action is idempotent and the user cannot follow themselves.",
    "tags": ["User Management", "idempotentHint", "updateHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Force cancel a workflow run",
    "slug": "GITHUB_FORCE_CANCEL_A_WORKFLOW_RUN",
    "input_parameters": {
      "description": "Request schema for `ForceCancelAWorkflowRun`",
      "properties": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. ",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "run_id": {
          "description": "The unique identifier of the workflow run.",
          "examples": [123456789],
          "title": "Run Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "run_id"],
      "title": "ForceCancelAWorkflowRunRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The response body from the GitHub API, typically an empty object on success.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ForceCancelAWorkflowRunResponseWrapper",
      "type": "object"
    },
    "description": "Forcefully cancels an existing github actions workflow run, bypassing normal cancellation conditions; requires write permissions to the repository.",
    "tags": ["Workflow Management", "updateHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Fork a gist",
    "slug": "GITHUB_FORK_A_GIST",
    "input_parameters": {
      "description": "Request schema for forking a public gist.",
      "properties": {
        "gist_id": {
          "description": "The unique identifier of the gist to be forked.",
          "examples": ["aa5a315d61ae9438b18d"],
          "title": "Gist Id",
          "type": "string"
        }
      },
      "required": ["gist_id"],
      "title": "ForkAGistRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the newly created gist. This includes details such as its ID, URLs, files, owner information, and other metadata associated with the forked gist.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ForkAGistResponseWrapper",
      "type": "object"
    },
    "description": "Forks a specified public gist, creating a copy under the authenticated user's account.",
    "tags": ["Content Management", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Generate release notes content for a release",
    "slug": "GITHUB_GENERATE_RELEASE_NOTES_CONTENT_FOR_A_RELEASE",
    "input_parameters": {
      "description": "Request schema for generating release notes content for a GitHub release.",
      "properties": {
        "configuration_file_path": {
          "description": "Specifies a path to a configuration file in the repository (e.g., `.github/release.yml`) containing settings for generating release notes. If unspecified, GitHub looks for a configuration file at \".github/release.yml\" or \".github/release.yaml\". If no such file is found, default settings are used.",
          "examples": [".github/release.yml", "docs/configs/release-notes-config.yaml"],
          "title": "Configuration File Path",
          "type": "string"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "previous_tag_name": {
          "description": "The name of the previous tag to use as the starting point for the release notes. This manually specifies the range of changes to be included. If omitted, GitHub will attempt to automatically determine the previous release.",
          "examples": ["v0.9.0", "beta-v2"],
          "title": "Previous Tag Name",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["hello-world", "my-project-name"],
          "title": "Repo",
          "type": "string"
        },
        "tag_name": {
          "description": "The tag name for which the release notes are to be generated. This can be an existing tag or a new tag name.",
          "examples": ["v1.0.0", "release-candidate-01"],
          "title": "Tag Name",
          "type": "string"
        },
        "target_commitish": {
          "description": "Specifies the commitish value (e.g., a branch name, tag name, or commit SHA) that will be the target for the release's tag. This is required if the `tag_name` does not reference an existing tag. It is ignored if `tag_name` already exists.",
          "examples": ["main", "develop", "c65e38030b3247b89ac4cc5db5da26c4"],
          "title": "Target Commitish",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "tag_name"],
      "title": "GenerateReleaseNotesContentForAReleaseRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the generated release notes. Expected keys are 'name' (the title of the release notes) and 'body' (the Markdown content of the release notes).",
          "examples": [
            {
              "body": "## Changes\\n- Fix for bug #123\\n- New feature X\\n\\n## Contributors\\n- @user1",
              "name": "Release v1.0.1"
            }
          ],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GenerateReleaseNotesContentForAReleaseResponseWrapper",
      "type": "object"
    },
    "description": "Generates markdown release notes content (listing changes, pull requests, and contributors) for a github repository release, customizable via tags and a configuration file.",
    "tags": ["Content Management", "readOnlyHint", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get access restrictions",
    "slug": "GITHUB_GET_ACCESS_RESTRICTIONS",
    "input_parameters": {
      "description": "Request schema for `GetAccessRestrictions`",
      "properties": {
        "branch": {
          "description": "The name of the branch. Wildcard characters are not supported in this field. To manage branch protections with wildcard patterns, please refer to the GitHub GraphQL API documentation.",
          "examples": ["main", "develop", "feature/new-ui"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository (e.g., username or organization name). This name is not case-sensitive.",
          "examples": ["octocat", "my-github-org"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["hello-world", "my-project-repo"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "GetAccessRestrictionsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary detailing the access restrictions for the protected branch. It typically includes 'users', 'teams', and 'apps' arrays listing entities with push access, along with URLs related to these restrictions. If no restrictions are configured, this may be an empty dictionary.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAccessRestrictionsResponseWrapper",
      "type": "object"
    },
    "description": "Lists users, teams, and github apps with push access to a branch; this branch must be protected in repository settings for detailed restrictions, otherwise expect a 404 or empty response.",
    "tags": [
      "Access and Permissions",
      "readOnlyHint",
      "idempotentHint",
      "openWorldHint",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Get admin branch protection",
    "slug": "GITHUB_GET_ADMIN_BRANCH_PROTECTION",
    "input_parameters": {
      "description": "Input parameters for checking admin branch protection.",
      "properties": {
        "branch": {
          "description": "Name of the branch (wildcard characters not allowed; use GraphQL API for wildcard support).",
          "examples": ["main", "develop"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "Account owner of the repository (case-insensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (case-insensitive).",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "GetAdminBranchProtectionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Admin enforcement status for branch protection, typically including an `enabled` boolean and a `url`.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAdminBranchProtectionResponseWrapper",
      "type": "object"
    },
    "description": "Checks if repository administrators are subject to the branch protection rules on a specific branch.",
    "tags": [
      "Access and Permissions",
      "readOnlyHint",
      "idempotentHint",
      "openWorldHint",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Get all API versions",
    "slug": "GITHUB_GET_ALL_API_VERSIONS",
    "input_parameters": {
      "description": "Request model for the GetAllApiVersions action. This action does not require any parameters.",
      "properties": {},
      "title": "GetAllApiVersionsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAllApiVersionsResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves all officially supported, date-based (e.g., \"2022-11-28\") versions of the github rest api from the /versions endpoint.",
    "tags": [
      "Repository Management",
      "readOnlyHint",
      "idempotentHint",
      "openWorldHint",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Get all autolinks of a repository",
    "slug": "GITHUB_GET_ALL_AUTOLINKS_OF_A_REPOSITORY",
    "input_parameters": {
      "description": "Request to retrieve all autolinks for a repository.",
      "properties": {
        "owner": {
          "description": "The account owner's username. Case-insensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The repository name, excluding `.git`. Case-insensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetAllAutolinksOfARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The raw response from the API, which for this endpoint is a list of autolink objects. Each object includes an `id`, `key_prefix` (e.g., 'JIRA-'), `url_template` (e.g., 'https://example.com/issues?id=<num>'), and `is_alphanumeric`.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAllAutolinksOfARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves all autolinks (e.g., for jira issues) configured for a repository; requires admin permissions on the repository.",
    "tags": [
      "Repository Management",
      "readOnlyHint",
      "idempotentHint",
      "openWorldHint",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Get all codes of conduct",
    "slug": "GITHUB_GET_ALL_CODES_OF_CONDUCT",
    "input_parameters": {
      "description": "Request to retrieve all codes of conduct; this action requires no input parameters.",
      "properties": {},
      "title": "GetAllCodesOfConductRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing a list of all available codes of conduct on GitHub. Each code of conduct object includes its unique 'key' (e.g., 'contributor_covenant'), display 'name' (e.g., 'Contributor Covenant'), API 'url', 'html_url' (direct link to view the code of conduct content), and the complete 'body' text.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAllCodesOfConductResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves all available codes of conduct from github, often used to select one for a repository.",
    "tags": [
      "Licensing and Compliance",
      "readOnlyHint",
      "idempotentHint",
      "openWorldHint",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Get all commonly used licenses",
    "slug": "GITHUB_GET_ALL_COMMONLY_USED_LICENSES",
    "input_parameters": {
      "description": "Request schema for retrieving a list of commonly used licenses from GitHub.",
      "properties": {
        "featured": {
          "description": "If true, filters for licenses that GitHub considers 'featured', such as popular or recommended licenses. Note: The exact criteria for 'featured' are not explicitly documented by GitHub for this endpoint and behavior may vary.",
          "examples": ["True", "False"],
          "title": "Featured",
          "type": "boolean"
        },
        "page": {
          "default": 1,
          "description": "The page number for the set of results to retrieve (must be an integer starting from 1). Used for paginating through the list of licenses.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of license results to return per page (must be an integer between 1 and 100, inclusive). Used for paginating through the list of licenses.",
          "examples": ["20", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "title": "GetAllCommonlyUsedLicensesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary where keys are unique license string identifiers (e.g., 'mit', 'apache-2.0') and values are objects detailing each corresponding license. Each license object typically includes: 'key' (the unique identifier itself), 'name' (full name of the license), 'spdx_id' (SPDX identifier), 'url' (API URL to get this license's details), 'node_id' (GraphQL node ID), 'html_url' (URL to the license text, often on choosealicense.com), 'description' (a brief summary), 'implementation' (guidance on how to use the license), 'permissions' (list of strings describing allowed actions), 'conditions' (list of strings describing obligations), 'limitations' (list of strings describing restrictions), and 'body' (the full text of the license).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAllCommonlyUsedLicensesResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a list of commonly used software licenses from github, optionally filtering for 'featured' licenses whose specific selection criteria by github may vary.",
    "tags": [
      "Licensing and Compliance",
      "readOnlyHint",
      "idempotentHint",
      "openWorldHint",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Get all contributor commit activity",
    "slug": "GITHUB_GET_ALL_CONTRIBUTOR_COMMIT_ACTIVITY",
    "input_parameters": {
      "description": "Request to retrieve commit activity for all contributors to a repository.",
      "properties": {
        "owner": {
          "description": "Username of the repository owner (case-insensitive).",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Repository name, excluding `.git` (case-insensitive).",
          "examples": ["Spoon-Knife", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetAllContributorCommitActivityRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Raw GitHub API response. Typically a list of contributor activity objects, each detailing an 'author' (with user info like 'login'), 'total' commits, and 'weeks' array (weekly 'w'-timestamp, 'a'-additions, 'd'-deletions, 'c'-commits).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAllContributorCommitActivityResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves commit activity (total commits, weekly additions/deletions/commits) for all contributors to a repository; may require a retry if github returns 202 while preparing data.",
    "tags": [
      "Repository Management",
      "readOnlyHint",
      "idempotentHint",
      "openWorldHint",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Get all custom properties for an organization",
    "slug": "GITHUB_GET_ALL_CUSTOM_PROPERTIES_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for `GetAllCustomPropertiesForAnOrganization`",
      "properties": {
        "org": {
          "description": "The unique identifier (login name) of the GitHub organization. This name is not case-sensitive.",
          "examples": ["github", "my-company-org"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org"],
      "title": "GetAllCustomPropertiesForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the schema definitions for all custom properties of the organization. Includes details for each property such as its name, value type (e.g., 'single_select', 'string'), description, and any allowed or default values.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAllCustomPropertiesForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Gets the schema definitions for all custom properties configured for an organization, not the specific values assigned to repositories.",
    "tags": [
      "Repository Management",
      "readOnlyHint",
      "idempotentHint",
      "openWorldHint",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Get all custom property values for a repository",
    "slug": "GITHUB_GET_ALL_CUSTOM_PROPERTY_VALUES_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for `GetAllCustomPropertyValuesForARepository`",
      "properties": {
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetAllCustomPropertyValuesForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary where each key is the name of a custom property and the corresponding value is the value assigned to that property for the repository. The value can be a string, null (if the property value is not set), or an array of strings, depending on the property's type definition.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAllCustomPropertyValuesForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Gets all custom property values for a repository, which may include default values or be empty if no properties are explicitly set.",
    "tags": [
      "Repository Management",
      "readOnlyHint",
      "idempotentHint",
      "openWorldHint",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Get all deployment protection rules for an environment",
    "slug": "GITHUB_GET_ALL_DEPLOYMENT_PROTECTION_RULES_FOR_AN_ENVIRONMENT",
    "input_parameters": {
      "description": "Request schema for `GetAllDeploymentProtectionRulesForAnEnvironment`",
      "properties": {
        "environment_name": {
          "description": "The name of the environment. This name must be URL-encoded. For instance, if the environment name contains slashes (`/`), they should be replaced with `%2F`.",
          "examples": ["production", "staging%2Fenvironment"],
          "title": "Environment Name",
          "type": "string"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "MyOrganization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["my-awesome-repo", "Project-X"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["environment_name", "repo", "owner"],
      "title": "GetAllDeploymentProtectionRulesForAnEnvironmentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the details of all enabled custom deployment protection rules for the specified environment. The exact structure of this dictionary depends on the protection rules configured.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAllDeploymentProtectionRulesForAnEnvironmentResponseWrapper",
      "type": "object"
    },
    "description": "Lists all enabled custom deployment protection rules for a specific environment in a repository; the environment must exist and be configured for deployments.",
    "tags": [
      "Repository Management",
      "readOnlyHint",
      "idempotentHint",
      "openWorldHint",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Get all gitignore templates",
    "slug": "GITHUB_GET_ALL_GITIGNORE_TEMPLATES",
    "input_parameters": {
      "description": "Request model for retrieving all gitignore templates.",
      "properties": {},
      "title": "GetAllGitignoreTemplatesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAllGitignoreTemplatesResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves all available .gitignore template names from github (e.g., 'python', 'node', 'java'), used for generating .gitignore files.",
    "tags": [
      "Repository Management",
      "readOnlyHint",
      "idempotentHint",
      "openWorldHint",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Get all organization roles for an organization",
    "slug": "GITHUB_GET_ALL_ORGANIZATION_ROLES_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for `GetAllOrganizationRolesForAnOrganization`",
      "properties": {
        "org": {
          "description": "The unique name of the GitHub organization. This name is not case-sensitive.",
          "examples": ["github", "my-company-org"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org"],
      "title": "GetAllOrganizationRolesForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the API response. This typically includes a 'total_count' (integer) of the roles and a 'roles' key (list of objects), where each object details a custom organization role with its ID, name, description, and permissions.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAllOrganizationRolesForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Lists all custom organization roles for an existing github organization.",
    "tags": [
      "Access and Permissions",
      "readOnlyHint",
      "idempotentHint",
      "openWorldHint",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Get all repository rulesets",
    "slug": "GITHUB_GET_ALL_REPOSITORY_RULESETS",
    "input_parameters": {
      "description": "Request schema for retrieving all rulesets for a GitHub repository.",
      "properties": {
        "includes_parents": {
          "default": true,
          "description": "If `True`, also fetches rulesets from parent levels (e.g., organization) applicable to this repository.",
          "examples": ["True", "False"],
          "title": "Includes Parents",
          "type": "boolean"
        },
        "owner": {
          "description": "Username or organization name of the repository owner (case-insensitive).",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for pagination.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of rulesets per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "Name of the repository, without `.git` extension (case-insensitive).",
          "examples": ["hello-world", "my-private-repo"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetAllRepositoryRulesetsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Contains the API response from GitHub. The list of ruleset objects is expected as a value within this dictionary.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAllRepositoryRulesetsResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves all rulesets for a github repository, which define conditions and actions for repository interactions (e.g., branch protections).",
    "tags": [
      "Access and Permissions",
      "readOnlyHint",
      "idempotentHint",
      "openWorldHint",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Get all repository topics",
    "slug": "GITHUB_GET_ALL_REPOSITORY_TOPICS",
    "input_parameters": {
      "description": "Request to get all topics for a repository.",
      "properties": {
        "owner": {
          "description": "Account owner of the repository (case-insensitive).",
          "examples": ["octocat", "google"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch.",
          "examples": ["1", "2"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "examples": ["30", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (case-insensitive).",
          "examples": ["Spoon-Knife", "guava"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetAllRepositoryTopicsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Dictionary with a 'names' key, holding a list of topic strings associated with the repository. Example: `{'names': ['topic1', 'topic2', 'community']}`.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAllRepositoryTopicsResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves all topics for a specified, existing, and accessible repository.",
    "tags": [
      "Repository Management",
      "readOnlyHint",
      "idempotentHint",
      "openWorldHint",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Get all requested reviewers for a pull request",
    "slug": "GITHUB_GET_ALL_REQUESTED_REVIEWERS_FOR_A_PULL_REQUEST",
    "input_parameters": {
      "description": "Request schema for `GetAllRequestedReviewersForAPullRequest`",
      "properties": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "pull_number": {
          "description": "The number that identifies the pull request.",
          "examples": ["1347"],
          "title": "Pull Number",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "pull_number"],
      "title": "GetAllRequestedReviewersForAPullRequestRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing lists of users and teams requested for review. The dictionary has two keys: 'users', a list of user objects, and 'teams', a list of team objects. Each user object includes details like 'login', 'id', etc. Each team object includes details like 'slug', 'id', etc.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAllRequestedReviewersForAPullRequestResponseWrapper",
      "type": "object"
    },
    "description": "Gets all users and teams requested to review a specific pull request in a repository.",
    "tags": ["Content Management", "readOnlyHint", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get all status check contexts",
    "slug": "GITHUB_GET_ALL_STATUS_CHECK_CONTEXTS",
    "input_parameters": {
      "description": "Request schema for `GetAllStatusCheckContexts`.",
      "properties": {
        "branch": {
          "description": "The specific name of the branch. Wildcard characters (e.g., `*`) are not permitted. For operations involving branches with wildcard patterns, the GitHub GraphQL API should be utilized.",
          "examples": ["main", "develop", "feature/new-login"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Spoon-Knife", "example-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "GetAllStatusCheckContextsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAllStatusCheckContextsResponseWrapper",
      "type": "object"
    },
    "description": "Fetches all required status check contexts for a protected branch; returns an empty list if the branch isn't protected or has no required checks.",
    "tags": [
      "Access and Permissions",
      "readOnlyHint",
      "idempotentHint",
      "openWorldHint",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Get an app",
    "slug": "GITHUB_GET_AN_APP",
    "input_parameters": {
      "description": "Request schema for retrieving detailed information about a specific GitHub App.",
      "properties": {
        "app_slug": {
          "description": "The app's unique, URL-friendly, lowercase, hyphenated identifier, derived from its name (e.g., 'my-awesome-app').",
          "examples": ["my-github-app", "octoapp"],
          "title": "App Slug",
          "type": "string"
        }
      },
      "required": ["app_slug"],
      "title": "GetAnAppRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the comprehensive details of the GitHub App, including its configuration, permissions, and metadata.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAnAppResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves publicly available information for an existing github app, identified by its unique url-friendly `app slug`.",
    "tags": [
      "Repository Management",
      "readOnlyHint",
      "idempotentHint",
      "openWorldHint",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Get an artifact",
    "slug": "GITHUB_GET_AN_ARTIFACT",
    "input_parameters": {
      "description": "Request schema for `GetAnArtifact`",
      "properties": {
        "artifact_id": {
          "description": "The unique identifier (ID) of the artifact to retrieve. This ID can be obtained from other API calls that list artifacts.",
          "examples": ["12345", "67890"],
          "title": "Artifact Id",
          "type": "integer"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive. ",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "artifact_id"],
      "title": "GetAnArtifactRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAnArtifactResponseWrapper",
      "type": "object"
    },
    "description": "Gets a specific artifact for a repository by `artifact id`.",
    "tags": ["Content Management", "readOnlyHint", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get an assignment",
    "slug": "GITHUB_GET_AN_ASSIGNMENT",
    "input_parameters": {
      "description": "Request schema for `GetAnAssignment`",
      "properties": {
        "assignment_id": {
          "description": "The unique identifier of the GitHub Classroom assignment to retrieve.",
          "examples": ["12345"],
          "title": "Assignment Id",
          "type": "integer"
        }
      },
      "required": ["assignment_id"],
      "title": "GetAnAssignmentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the detailed information of the retrieved GitHub Classroom assignment, such as its title, due date, accepted submission count, and other relevant attributes.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAnAssignmentResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves detailed information for a specific github classroom assignment if the authenticated user is an administrator of the classroom.",
    "tags": ["Content Management", "readOnlyHint", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get an autolink reference of a repository",
    "slug": "GITHUB_GET_AN_AUTOLINK_REFERENCE_OF_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for `GetAnAutolinkReferenceOfARepository`",
      "properties": {
        "autolink_id": {
          "description": "The unique numeric identifier of the autolink configuration to retrieve.",
          "examples": ["123", "456"],
          "title": "Autolink Id",
          "type": "integer"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "autolink_id"],
      "title": "GetAnAutolinkReferenceOfARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the details of the autolink reference. This typically includes properties such as `id`, `key_prefix` (e.g., 'JIRA-'), and `url_template` (e.g., 'https://example.atlassian.net/browse/<num>').",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAnAutolinkReferenceOfARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a specific autolink reference (which automatically hyperlinks text like 'jira-123' to an external system) for a repository using its unique id; requires administrator access to the repository.",
    "tags": ["openWorldHint", "readOnlyHint", "idempotentHint", "Repositories", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get an environment",
    "slug": "GITHUB_GET_AN_ENVIRONMENT",
    "input_parameters": {
      "description": "Request schema for retrieving details of a specific deployment environment in a repository.",
      "properties": {
        "environment_name": {
          "description": "The name of the deployment environment. The name must be URL-encoded; for example, any slashes `/` must be replaced with `%2F`.",
          "examples": ["production", "staging%2Fteam-alpha"],
          "title": "Environment Name",
          "type": "string"
        },
        "owner": {
          "description": "The username of the account that owns the repository. This name is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "environment_name"],
      "title": "GetAnEnvironmentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the comprehensive details of the specified deployment environment, including its ID, name, URL, creation/update timestamps, protection rules, and deployment branch policies, if configured.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAnEnvironmentResponseWrapper",
      "type": "object"
    },
    "description": "Get an environment",
    "tags": ["openWorldHint", "readOnlyHint", "idempotentHint", "Environments", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get an environment public key",
    "slug": "GITHUB_GET_AN_ENVIRONMENT_PUBLIC_KEY",
    "input_parameters": {
      "description": "Request schema for retrieving the public key for an environment. This key is used to encrypt secrets.",
      "properties": {
        "environment_name": {
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes (`/`) in the name must be replaced with `%2F`.",
          "examples": ["production", "staging%2Fapp-server"],
          "title": "Environment Name",
          "type": "string"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["hello-world", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "environment_name"],
      "title": "GetAnEnvironmentPublicKeyRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the public key information. Key fields include `key_id` (the ID of the public key) and `key` (the base64-encoded public key).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAnEnvironmentPublicKeyResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves the public key for a specified github repository environment, used to encrypt secrets for github actions.",
    "tags": ["openWorldHint", "readOnlyHint", "idempotentHint", "Environments", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get an environment secret",
    "slug": "GITHUB_GET_AN_ENVIRONMENT_SECRET",
    "input_parameters": {
      "description": "Request model for retrieving a specific environment secret's metadata from a repository.",
      "properties": {
        "environment_name": {
          "description": "Name of the environment (must be URL-encoded if it contains special characters).",
          "examples": ["production", "staging%2Fv1", "dev_environment"],
          "title": "Environment Name",
          "type": "string"
        },
        "owner": {
          "description": "Username or organization name of the repository owner (not case-sensitive).",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (not case-sensitive).",
          "examples": ["hello-world", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        },
        "secret_name": {
          "description": "Name of the secret to retrieve.",
          "examples": ["DATABASE_PASSWORD", "API_TOKEN_X"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "environment_name", "secret_name"],
      "title": "GetAnEnvironmentSecretRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAnEnvironmentSecretResponseWrapper",
      "type": "object"
    },
    "description": "Get an environment secret",
    "tags": ["openWorldHint", "readOnlyHint", "idempotentHint", "Environments", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get an environment variable",
    "slug": "GITHUB_GET_AN_ENVIRONMENT_VARIABLE",
    "input_parameters": {
      "description": "Request schema for `GetAnEnvironmentVariable` action, specifying the repository, environment, and variable name.",
      "properties": {
        "environment_name": {
          "description": "The name of the GitHub Actions environment. If the name contains special characters (e.g., slashes `/`), it must be URL-encoded (e.g., `staging/feature` becomes `staging%2Ffeature`).",
          "examples": ["production", "staging%2Fuser_testing"],
          "title": "Environment Name",
          "type": "string"
        },
        "name": {
          "description": "The name of the specific environment variable to retrieve.",
          "examples": ["SERVER_URL", "API_TOKEN_STAGING"],
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This is not case-sensitive.",
          "examples": ["hello-world", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "environment_name", "name"],
      "title": "GetAnEnvironmentVariableRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAnEnvironmentVariableResponseWrapper",
      "type": "object"
    },
    "description": "Get an environment variable",
    "tags": ["openWorldHint", "readOnlyHint", "idempotentHint", "Environments", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get an issue",
    "slug": "GITHUB_GET_AN_ISSUE",
    "input_parameters": {
      "description": "Request schema for `GetAnIssue`",
      "properties": {
        "issue_number": {
          "description": "The identifying number of the issue.",
          "examples": [1347],
          "title": "Issue Number",
          "type": "integer"
        },
        "owner": {
          "description": "Username of the account owning the repository. Not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository (without `.git` extension). Not case-sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "issue_number"],
      "title": "GetAnIssueRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the issue details. Key fields include 'id', 'node_id', 'url', 'repository_url', 'labels_url', 'comments_url', 'events_url', 'html_url', 'number', 'state', 'title', 'body', 'user', 'labels', 'assignee', 'assignees', 'milestone', 'locked', 'active_lock_reason', 'comments', 'pull_request', 'closed_at', 'created_at', 'updated_at', 'closed_by', 'author_association', 'state_reason', and 'reactions'. The API does not return custom fields.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAnIssueResponseWrapper",
      "type": "object"
    },
    "description": "Get an issue",
    "tags": ["openWorldHint", "readOnlyHint", "idempotentHint", "Issues", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get an issue comment",
    "slug": "GITHUB_GET_AN_ISSUE_COMMENT",
    "input_parameters": {
      "description": "Request schema for `GetAnIssueComment`. Defines the parameters to identify and retrieve a specific issue comment.",
      "properties": {
        "comment_id": {
          "description": "The unique identifier of the issue comment.",
          "examples": ["123456789"],
          "title": "Comment Id",
          "type": "integer"
        },
        "owner": {
          "description": "The username of the account that owns the repository. This field is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "comment_id"],
      "title": "GetAnIssueCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Dictionary containing the details of the issue comment, such as 'id', 'body', 'user', 'created_at', and 'updated_at'. For the complete structure, consult the GitHub API documentation for issue comments.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAnIssueCommentResponseWrapper",
      "type": "object"
    },
    "description": "Get an issue comment",
    "tags": ["openWorldHint", "readOnlyHint", "idempotentHint", "Issues", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get an issue event",
    "slug": "GITHUB_GET_AN_ISSUE_EVENT",
    "input_parameters": {
      "description": "Request schema for `GetAnIssueEvent`",
      "properties": {
        "event_id": {
          "description": "Unique identifier for the issue event.",
          "examples": ["1234567"],
          "title": "Event Id",
          "type": "integer"
        },
        "owner": {
          "description": "Username of the account owning the repository. Not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension. Not case-sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "event_id"],
      "title": "GetAnIssueEventRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Detailed information of the specified issue event.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAnIssueEventResponseWrapper",
      "type": "object"
    },
    "description": "Get an issue event",
    "tags": ["openWorldHint", "readOnlyHint", "idempotentHint", "Issues", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get an organization",
    "slug": "GITHUB_GET_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for retrieving a GitHub organization.",
      "properties": {
        "org": {
          "description": "The name of the organization. This name is not case-sensitive.",
          "examples": ["github", "microsoft", "google"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org"],
      "title": "GetAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the organization's details. Common keys include `login`, `id`, `name`, `company`, `blog`, `location`, `email`, `public_repos`, `created_at`, and `type`.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Get an organization",
    "tags": ["openWorldHint", "readOnlyHint", "idempotentHint", "Organizations", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get an organization public key",
    "slug": "GITHUB_GET_AN_ORGANIZATION_PUBLIC_KEY",
    "input_parameters": {
      "description": "Request for `GetAnOrganizationPublicKey`.",
      "properties": {
        "org": {
          "description": "Organization name (case-insensitive).",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org"],
      "title": "GetAnOrganizationPublicKeyRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "key": {
              "description": "Base64-encoded public key.",
              "title": "Key",
              "type": "string"
            },
            "key_id": {
              "description": "Unique ID of the public key.",
              "title": "Key Id",
              "type": "string"
            }
          },
          "required": ["key_id", "key"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAnOrganizationPublicKeyResponseWrapper",
      "type": "object"
    },
    "description": "Get an organization public key",
    "tags": ["openWorldHint", "readOnlyHint", "idempotentHint", "Organizations", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get an organization role",
    "slug": "GITHUB_GET_AN_ORGANIZATION_ROLE",
    "input_parameters": {
      "description": "Request schema for retrieving a specific organization role by its ID.",
      "properties": {
        "org": {
          "description": "The name of the GitHub organization. This name is not case-sensitive.",
          "examples": ["github", "my-company-org"],
          "title": "Org",
          "type": "string"
        },
        "role_id": {
          "description": "The unique numerical identifier of the role within the organization.",
          "examples": ["123", "456"],
          "title": "Role Id",
          "type": "integer"
        }
      },
      "required": ["org", "role_id"],
      "title": "GetAnOrganizationRoleRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Dictionary representing the organization role, conforming to the GitHub API structure.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAnOrganizationRoleResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a specific github organization role by its id.",
    "tags": ["openWorldHint", "orgs", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get an organization secret",
    "slug": "GITHUB_GET_AN_ORGANIZATION_SECRET",
    "input_parameters": {
      "description": "Request schema for `GetAnOrganizationSecret`",
      "properties": {
        "org": {
          "description": "Organization name (case-insensitive).",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "secret_name": {
          "description": "Name of the secret.",
          "examples": ["MY_API_TOKEN"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["org", "secret_name"],
      "title": "GetAnOrganizationSecretRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Secret's metadata, such as 'name', 'created_at', 'updated_at', and 'visibility'; the encrypted value is not included.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAnOrganizationSecretResponseWrapper",
      "type": "object"
    },
    "description": "Gets an organization secret's metadata (e.g., name, creation/update dates, visibility), but not its encrypted value.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get an organization variable",
    "slug": "GITHUB_GET_AN_ORGANIZATION_VARIABLE",
    "input_parameters": {
      "description": "Request schema for `GetAnOrganizationVariable`",
      "properties": {
        "name": {
          "description": "Name of the organization variable.",
          "examples": ["CI_ENVIRONMENT"],
          "title": "Name",
          "type": "string"
        },
        "org": {
          "description": "Name of the organization (case-insensitive).",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org", "name"],
      "title": "GetAnOrganizationVariableRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details of the organization variable, including 'name', 'value' (potentially masked for security), 'visibility' ('all', 'private', or 'selected'), 'created_at', and 'updated_at'; 'selected_repositories_url' is present if visibility is 'selected'.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAnOrganizationVariableResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves details (name, value, visibility, timestamps) of a specific, existing variable for an existing github organization.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get an organization webhook",
    "slug": "GITHUB_GET_AN_ORGANIZATION_WEBHOOK",
    "input_parameters": {
      "description": "Request model for fetching an organization webhook's details.",
      "properties": {
        "hook_id": {
          "description": "The unique identifier of the webhook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "examples": ["123456789"],
          "title": "Hook Id",
          "type": "integer"
        },
        "org": {
          "description": "The name of the GitHub organization. This field is not case-sensitive.",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org", "hook_id"],
      "title": "GetAnOrganizationWebhookRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Full configuration details for the organization webhook, including ID, name, active status, subscribed events, and settings (e.g., URL, content type, secret).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAnOrganizationWebhookResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves the full configuration, including subscribed events and delivery settings, for an existing organization webhook.",
    "tags": ["openWorldHint", "orgs", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get apps with access to the protected branch",
    "slug": "GITHUB_GET_APPS_WITH_ACCESS_TO_THE_PROTECTED_BRANCH",
    "input_parameters": {
      "description": "Request schema for retrieving GitHub Apps with access to a protected branch.",
      "properties": {
        "branch": {
          "description": "The name of the protected branch. This name cannot contain wildcard characters. To work with branch names containing wildcard characters, please use the GitHub GraphQL API.",
          "examples": ["main", "develop", "release/v1.0"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "The username of the account that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the '.git' extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife", "linguist"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "GetAppsWithAccessToTheProtectedBranchRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Dictionary containing GitHub Apps with access to the protected branch. Typically, this includes a list of app objects detailing their ID, slug, name, and permissions; the list is empty if no apps have access.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAppsWithAccessToTheProtectedBranchResponseWrapper",
      "type": "object"
    },
    "description": "Lists github apps with push access to a repository's protected branch.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get assignment grades",
    "slug": "GITHUB_GET_ASSIGNMENT_GRADES",
    "input_parameters": {
      "description": "Request schema for retrieving grades for a specific GitHub Classroom assignment.",
      "properties": {
        "assignment_id": {
          "description": "The unique identifier for the classroom assignment whose grades are to be retrieved.",
          "examples": [101, 20345],
          "title": "Assignment Id",
          "type": "integer"
        }
      },
      "required": ["assignment_id"],
      "title": "GetAssignmentGradesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the grades for the specified assignment. The structure typically includes student identifiers and their corresponding scores or grade information.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAssignmentGradesResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves all grades for an existing github classroom assignment.",
    "tags": ["classroom", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a blob",
    "slug": "GITHUB_GET_A_BLOB",
    "input_parameters": {
      "description": "Request schema for retrieving a blob (file content) from a GitHub repository.",
      "properties": {
        "file_sha": {
          "description": "The SHA-1 hash of the file (blob) to retrieve.",
          "examples": ["e69de29bb2d1d6434b8b29ae775ad8c2e48c5391"],
          "title": "File Sha",
          "type": "string"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the '.git' extension. This field is not case-sensitive.",
          "examples": ["Hello-World", "Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "file_sha"],
      "title": "GetABlobRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the blob's details. Key fields include 'content' (Base64-encoded file content), 'encoding' (the encoding type, e.g., 'base64'), 'sha' (the SHA of the blob), 'size' (size of the blob in bytes), and 'url' (API URL of the blob).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetABlobResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves the raw, typically base64-encoded, content of a file (blob) from a github repository using its sha hash, if the repository and blob sha exist.",
    "tags": ["git", "openWorldHint", "readOnlyHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a branch",
    "slug": "GITHUB_GET_A_BRANCH",
    "input_parameters": {
      "description": "Request schema for `GetABranch`",
      "properties": {
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). ",
          "examples": ["main"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. ",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "GetABranchRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetABranchResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves detailed information for a specified branch within a github repository.",
    "tags": ["openWorldHint", "readOnlyHint", "repos"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a check run",
    "slug": "GITHUB_GET_A_CHECK_RUN",
    "input_parameters": {
      "description": "Request schema for retrieving a specific check run within a repository.",
      "properties": {
        "check_run_id": {
          "description": "The unique numerical identifier of the check run.",
          "examples": [12345, 67890],
          "title": "Check Run Id",
          "type": "integer"
        },
        "owner": {
          "description": "The username of the account that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "check_run_id"],
      "title": "GetACheckRunRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing detailed information for the check run, such as its status, conclusion, and output; the exact structure can vary.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetACheckRunResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves detailed information for a specific check run within a github repository.",
    "tags": ["checks", "openWorldHint", "readOnlyHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a check suite",
    "slug": "GITHUB_GET_A_CHECK_SUITE",
    "input_parameters": {
      "description": "Request schema for `GetACheckSuite`",
      "properties": {
        "check_suite_id": {
          "description": "The unique identifier of the check suite.",
          "examples": [12345],
          "title": "Check Suite Id",
          "type": "integer"
        },
        "owner": {
          "description": "The username of the account that owns the repository. This value is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This value is not case sensitive. ",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "check_suite_id"],
      "title": "GetACheckSuiteRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Detailed information of the specified check suite.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetACheckSuiteResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a specific check suite (a collection of check runs) by its id from a repository accessible to the authenticated user.",
    "tags": ["checks", "openWorldHint", "readOnlyHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a classroom",
    "slug": "GITHUB_GET_A_CLASSROOM",
    "input_parameters": {
      "description": "Request schema for retrieving details of a specific GitHub Classroom.",
      "properties": {
        "classroom_id": {
          "description": "The unique identifier of the classroom.",
          "examples": ["1001", "20345"],
          "title": "Classroom Id",
          "type": "integer"
        }
      },
      "required": ["classroom_id"],
      "title": "GetAClassroomRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Key attributes of the GitHub Classroom (e.g., ID, name, creation date) from the GitHub API.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAClassroomResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves details for a specific github classroom; the classroom id must correspond to an existing classroom.",
    "tags": ["classroom", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a codespace for the authenticated user",
    "slug": "GITHUB_GET_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for `GetACodespaceForTheAuthenticatedUser`",
      "properties": {
        "codespace_name": {
          "description": "Unique name or identifier of the codespace, typically auto-generated upon creation.",
          "examples": ["monalisa-octocat-gjr79v2pqx2r"],
          "title": "Codespace Name",
          "type": "string"
        }
      },
      "required": ["codespace_name"],
      "title": "GetACodespaceForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Full details of the specified codespace, including its state, machine information, repository association, and other relevant attributes.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetACodespaceForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Call to retrieve detailed information for a `codespace name` belonging to the authenticated user, ensuring the codespace exists and is accessible.",
    "tags": ["codespaces", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a code of conduct",
    "slug": "GITHUB_GET_A_CODE_OF_CONDUCT",
    "input_parameters": {
      "description": "Request schema for `GetACodeOfConduct`",
      "properties": {
        "key": {
          "description": "Unique key for a specific code of conduct.",
          "examples": ["contributor_covenant", "citizen_code_of_conduct"],
          "title": "Key",
          "type": "string"
        }
      },
      "required": ["key"],
      "title": "GetACodeOfConductRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Full details of the code of conduct, including its key, name, URL, and body content (often HTML).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetACodeOfConductResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves the full details of a specific github code of conduct using its unique key.",
    "tags": ["codes-of-conduct", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a CodeQL database for a repository",
    "slug": "GITHUB_GET_A_CODE_QL_DATABASE_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for retrieving a CodeQL database for a repository, specifying the owner, repository name, and programming language.",
      "properties": {
        "language": {
          "description": "The programming language of the CodeQL database to retrieve.",
          "examples": ["csharp", "cpp", "go", "java", "javascript", "python", "ruby"],
          "title": "Language",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "language"],
      "title": "GetACodeQlDatabaseForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the CodeQL database object.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetACodeQlDatabaseForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Gets an existing codeql database (including a download url) for a specified language in an accessible repository, if one has been successfully built for that language.",
    "tags": ["code-scanning", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a code scanning alert",
    "slug": "GITHUB_GET_A_CODE_SCANNING_ALERT",
    "input_parameters": {
      "description": "Parameters to identify and retrieve a specific code scanning alert.",
      "properties": {
        "alert_number": {
          "description": "Unique number identifying the code scanning alert, found in the alert's URL or API responses.",
          "examples": ["25", "101"],
          "title": "Alert Number",
          "type": "integer"
        },
        "owner": {
          "description": "Username of the account owning the repository (case-insensitive).",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension (case-insensitive).",
          "examples": ["Hello-World", "linguist"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "alert_number"],
      "title": "GetACodeScanningAlertRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Detailed information about the code scanning alert, typically including `number`, `created_at`, `url`, `html_url`, `state`, `severity`, `rule`, and `tool`.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetACodeScanningAlertResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a specific code scanning alert, which identifies potential code vulnerabilities or errors, by its number from the specified github repository.",
    "tags": ["code-scanning", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a code scanning analysis for a repository",
    "slug": "GITHUB_GET_A_CODE_SCANNING_ANALYSIS_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for `GetACodeScanningAnalysisForARepository`",
      "properties": {
        "analysis_id": {
          "description": "Unique ID of the code scanning analysis, obtained by listing all analyses for the repository.",
          "examples": ["25", "101"],
          "title": "Analysis Id",
          "type": "integer"
        },
        "owner": {
          "description": "Username or organization name owning the repository (not case-sensitive).",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (not case-sensitive).",
          "examples": ["Hello-World", "linguist"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "analysis_id"],
      "title": "GetACodeScanningAnalysisForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetACodeScanningAnalysisForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves detailed information for a specific code scanning analysis on an accessible repository, identified by its `analysis id`.",
    "tags": ["code-scanning", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a code scanning default setup configuration",
    "slug": "GITHUB_GET_A_CODE_SCANNING_DEFAULT_SETUP_CONFIGURATION",
    "input_parameters": {
      "description": "Request schema for `GetACodeScanningDefaultSetupConfiguration`",
      "properties": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octo-org"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "examples": ["security-lab"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetACodeScanningDefaultSetupConfigurationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details the default code scanning setup for the repository, including state, languages, query suite, update timestamp, and schedule.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetACodeScanningDefaultSetupConfigurationResponseWrapper",
      "type": "object"
    },
    "description": "Gets the default setup configuration for code scanning in a repository, including state, languages, query suite, and schedule for a repository if it exists.",
    "tags": ["code-scanning", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a commit",
    "slug": "GITHUB_GET_A_COMMIT",
    "input_parameters": {
      "description": "Request schema for `GetACommit` action, used to retrieve a specific commit from a repository.",
      "properties": {
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for paginating the commit's diff if it's too large. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page when paginating the commit's diff (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "title": "Per Page",
          "type": "integer"
        },
        "ref": {
          "description": "The commit reference. Can be a commit SHA (e.g., '`sha`'), a branch name (e.g., 'heads/`BRANCH_NAME`' or simply '`BRANCH_NAME`'), or a tag name (e.g., 'tags/`TAG_NAME`'). For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation.",
          "examples": [
            "main",
            "heads/develop",
            "tags/v1.0.0",
            "007a47250555ae82606ac2cb00f8f731976059a5"
          ],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife", "linguist"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "ref"],
      "title": "GetACommitRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the comprehensive details of the commit, including author, committer, message, and file changes.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetACommitResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a specific commit from a repository by its owner, name, and a valid commit reference (sha, branch, or tag), supporting pagination for large diffs.",
    "tags": ["openWorldHint", "readOnlyHint", "repos"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a commit comment",
    "slug": "GITHUB_GET_A_COMMIT_COMMENT",
    "input_parameters": {
      "description": "Request schema for retrieving a specific commit comment from a repository.",
      "properties": {
        "comment_id": {
          "description": "The unique identifier of the commit comment.",
          "examples": ["1420582", "8675309"],
          "title": "Comment Id",
          "type": "integer"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case-sensitive.",
          "examples": ["octocat", "google"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "comment_id"],
      "title": "GetACommitCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetACommitCommentResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves the full details of a specific commit comment in a github repository, using its unique identifier.",
    "tags": ["openWorldHint", "readOnlyHint", "repos"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a commit object",
    "slug": "GITHUB_GET_A_COMMIT_OBJECT",
    "input_parameters": {
      "description": "Request schema for `GetACommitObject`",
      "properties": {
        "commit_sha": {
          "description": "SHA identifier of the commit.",
          "examples": [
            "7638417db6d59f3c431d3e1f261cc637155684cd",
            "c3d0be41ecbe669545ee3e94d31ed9a4bc91ee3c"
          ],
          "title": "Commit Sha",
          "type": "string"
        },
        "owner": {
          "description": "Account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat", "torvalds"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository without the `.git` extension. The name is not case sensitive.",
          "examples": ["Spoon-Knife", "linux"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "commit_sha"],
      "title": "GetACommitObjectRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetACommitObjectResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves detailed information (including author, committer, message, tree, parents, verification) for a specific commit in a github repository, identified by its sha.",
    "tags": ["git", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a custom deployment protection rule",
    "slug": "GITHUB_GET_A_CUSTOM_DEPLOYMENT_PROTECTION_RULE",
    "input_parameters": {
      "description": "Request schema for `GetACustomDeploymentProtectionRule`",
      "properties": {
        "environment_name": {
          "description": "The name of the environment. The name must be URL encoded if it contains special characters (e.g., any slashes `/` must be replaced with `%2F`).",
          "examples": ["production", "staging%2Ffeature-branch"],
          "title": "Environment Name",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository (username or organization name). This name is not case sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "protection_rule_id": {
          "description": "The unique identifier of the custom deployment protection rule.",
          "examples": [3515, 12345],
          "title": "Protection Rule Id",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. This name is not case sensitive.",
          "examples": ["linguist", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "environment_name", "protection_rule_id"],
      "title": "GetACustomDeploymentProtectionRuleRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the custom deployment protection rule. This includes details such as the rule's ID, whether it's enabled, and information about the GitHub App that enforces the rule.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetACustomDeploymentProtectionRuleResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a specific custom deployment protection rule (used by github apps for external validation or manual approval of deployments) for a given environment in a repository.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a custom property for an organization",
    "slug": "GITHUB_GET_A_CUSTOM_PROPERTY_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request to retrieve a specific custom property definition for an organization.",
      "properties": {
        "custom_property_name": {
          "description": "Name of the custom property whose definition is to be retrieved (case-sensitive).",
          "examples": ["project_status"],
          "title": "Custom Property Name",
          "type": "string"
        },
        "org": {
          "description": "Organization's unique identifier (not case-sensitive).",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org", "custom_property_name"],
      "title": "GetACustomPropertyForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The custom property's definition, including its name, value type (e.g., 'string', 'single_select'), description, requirement status, default value, and any allowed values.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetACustomPropertyForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves the definition (schema) of a specific, existing custom property for an organization.",
    "tags": ["openWorldHint", "orgs", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a delivery for a repository webhook",
    "slug": "GITHUB_GET_A_DELIVERY_FOR_A_REPOSITORY_WEBHOOK",
    "input_parameters": {
      "description": "Request schema for `GetADeliveryForARepositoryWebhook`",
      "properties": {
        "delivery_id": {
          "description": "The unique identifier of a specific delivery for the webhook. This ID corresponds to a single delivery attempt.",
          "examples": ["987651234", "123459876"],
          "title": "Delivery Id",
          "type": "integer"
        },
        "hook_id": {
          "description": "The unique identifier of the webhook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "examples": ["123456789", "987654321"],
          "title": "Hook Id",
          "type": "integer"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "hook_id", "delivery_id"],
      "title": "GetADeliveryForARepositoryWebhookRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the details of the webhook delivery.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetADeliveryForARepositoryWebhookResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a specific delivery for a repository webhook, identified by its `hook id` and `delivery id`.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a deployment",
    "slug": "GITHUB_GET_A_DEPLOYMENT",
    "input_parameters": {
      "description": "Request schema for retrieving a specific deployment within a GitHub repository.",
      "properties": {
        "deployment_id": {
          "description": "The unique numeric identifier of the deployment to retrieve.",
          "examples": [12345],
          "title": "Deployment Id",
          "type": "integer"
        },
        "owner": {
          "description": "The username of the account that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the '.git' extension. This field is not case-sensitive.",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "deployment_id"],
      "title": "GetADeploymentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetADeploymentResponseWrapper",
      "type": "object"
    },
    "description": "Gets a specific deployment by id from a repository, provided the repository and deployment id exist.",
    "tags": ["openWorldHint", "readOnlyHint", "repos"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a deployment branch policy",
    "slug": "GITHUB_GET_A_DEPLOYMENT_BRANCH_POLICY",
    "input_parameters": {
      "description": "Request schema for retrieving a specific deployment branch policy for an environment.",
      "properties": {
        "branch_policy_id": {
          "description": "The unique identifier of the branch policy.",
          "examples": [36147260],
          "title": "Branch Policy Id",
          "type": "integer"
        },
        "environment_name": {
          "description": "The name of the environment. The name must be URL encoded; for example, replace any slashes in the name with `%2F`.",
          "examples": ["production", "staging%2Fdeploy"],
          "title": "Environment Name",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "environment_name", "branch_policy_id"],
      "title": "GetADeploymentBranchPolicyRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetADeploymentBranchPolicyResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a specific deployment branch policy for an environment in a repository, identified by its unique id.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a deployment status",
    "slug": "GITHUB_GET_A_DEPLOYMENT_STATUS",
    "input_parameters": {
      "description": "Request schema for `GetADeploymentStatus`",
      "properties": {
        "deployment_id": {
          "description": "The unique identifier of the deployment.",
          "examples": ["1", "42"],
          "title": "Deployment Id",
          "type": "integer"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        },
        "status_id": {
          "description": "The unique identifier of the deployment status.",
          "examples": ["10", "253"],
          "title": "Status Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "deployment_id", "status_id"],
      "title": "GetADeploymentStatusRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the details of the deployment status.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetADeploymentStatusResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a specific deployment status by its id for a given deployment within a github repository.",
    "tags": ["openWorldHint", "readOnlyHint", "repos"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a deploy key",
    "slug": "GITHUB_GET_A_DEPLOY_KEY",
    "input_parameters": {
      "description": "Request schema to get a specific deploy key for a repository.",
      "properties": {
        "key_id": {
          "description": "The unique numerical identifier of the deploy key.",
          "examples": [12345, 67890],
          "title": "Key Id",
          "type": "integer"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["hello-world", "my-repo"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "key_id"],
      "title": "GetADeployKeyRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetADeployKeyResponseWrapper",
      "type": "object"
    },
    "description": "Gets a specific deploy key, identified by its `key id`, for the github repository specified by `owner` and `repo`.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a diff of the dependencies between commits",
    "slug": "GITHUB_GET_A_DIFF_OF_THE_DEPENDENCIES_BETWEEN_COMMITS",
    "input_parameters": {
      "description": "Request schema for `GetADiffOfTheDependenciesBetweenCommits`",
      "properties": {
        "basehead": {
          "description": "A string specifying the base and head Git revisions to compare, in the format `BASE_REF...HEAD_REF`. `BASE_REF` and `HEAD_REF` can be commit SHAs, branch names, or tags. For example, `main...develop` or `v1.0.0...v1.1.0`.",
          "examples": ["main...develop", "sha111abc...sha222def", "v1.0.0...HEAD"],
          "title": "Basehead",
          "type": "string"
        },
        "name": {
          "description": "The optional full path, relative to the repository root, of a specific dependency manifest file (e.g., `package-lock.json`, `pom.xml`). If provided, the diff will be scoped to this file.",
          "examples": ["package-lock.json", "app/requirements.txt", "subdir/pom.xml"],
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife", "my-cool-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "basehead"],
      "title": "GetADiffOfTheDependenciesBetweenCommitsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Dictionary detailing dependency changes (additions, removals, updates) between the specified base and head revisions. The exact structure depends on the GitHub API output.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetADiffOfTheDependenciesBetweenCommitsResponseWrapper",
      "type": "object"
    },
    "description": "Gets the dependency diff between two git revisions in a repository, where 'basehead' specifies the revisions and 'name' can optionally scope to a specific manifest file.",
    "tags": ["dependency-graph", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a discussion",
    "slug": "GITHUB_GET_A_DISCUSSION",
    "input_parameters": {
      "description": "Request schema for retrieving a specific discussion within a team.",
      "properties": {
        "discussion_number": {
          "description": "The discussion's unique number within the team.",
          "examples": ["42", "123"],
          "title": "Discussion Number",
          "type": "integer"
        },
        "org": {
          "description": "The organization's name (case-insensitive).",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "team_slug": {
          "description": "The team's slug (URL-friendly name).",
          "examples": ["justice-league", "engineering-team"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug", "discussion_number"],
      "title": "GetADiscussionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the full details of the discussion.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetADiscussionResponseWrapper",
      "type": "object"
    },
    "description": "Fetches a specific discussion by its number from a team within an organization.",
    "tags": ["openWorldHint", "readOnlyHint", "teams"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a discussion comment",
    "slug": "GITHUB_GET_A_DISCUSSION_COMMENT",
    "input_parameters": {
      "description": "Request schema for `GetADiscussionComment`",
      "properties": {
        "comment_number": {
          "description": "The unique number identifying the comment within the discussion.",
          "examples": [101],
          "title": "Comment Number",
          "type": "integer"
        },
        "discussion_number": {
          "description": "The unique number identifying the discussion.",
          "examples": [42],
          "title": "Discussion Number",
          "type": "integer"
        },
        "org": {
          "description": "The name of the organization. This field is not case-sensitive.",
          "examples": ["github"],
          "title": "Org",
          "type": "string"
        },
        "team_slug": {
          "description": "The slug of the team name. This is the team name converted to lowercase, with spaces and special characters replaced by hyphens. For example, 'Developer Tools Team' becomes 'developer-tools-team'.",
          "examples": ["justice-league", "developers"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug", "discussion_number", "comment_number"],
      "title": "GetADiscussionCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the details of the discussion comment.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetADiscussionCommentResponseWrapper",
      "type": "object"
    },
    "description": "Fetches a specific comment from a team discussion within a specific organization.",
    "tags": ["openWorldHint", "readOnlyHint", "teams"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a dns health check for github pages",
    "slug": "GITHUB_GET_A_DNS_HEALTH_CHECK_FOR_GITHUB_PAGES",
    "input_parameters": {
      "description": "Request schema for `GetADnsHealthCheckForGithubPages`",
      "properties": {
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case sensitive.",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetADnsHealthCheckForGithubPagesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the detailed health check information for the GitHub Pages site. This typically includes status for the primary domain and, if configured, an alternate domain. Information covers aspects like DNS resolution, CNAME record validity, HTTPS status, and any detected issues. If the health check is pending, this field might be minimal or represent the pending state, often accompanied by a 202 HTTP status.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetADnsHealthCheckForGithubPagesResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves the dns health check status (e.g., cname/a records, https) for a github pages site; the check may be pending (http 202) on initial calls or after site changes.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a gist",
    "slug": "GITHUB_GET_A_GIST",
    "input_parameters": {
      "description": "Request schema for `GetAGist`",
      "properties": {
        "gist_id": {
          "description": "The unique hexadecimal string identifier of the gist, found in its URL.",
          "examples": ["a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0", "gist_id_example"],
          "title": "Gist Id",
          "type": "string"
        }
      },
      "required": ["gist_id"],
      "title": "GetAGistRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Full details of the gist, including files, content, owner, description, comments, forks, and history.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAGistResponseWrapper",
      "type": "object"
    },
    "description": "Fetches a specific github gist by its `gist id`, returning comprehensive details if the gist exists.",
    "tags": ["gists", "openWorldHint", "readOnlyHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a gist comment",
    "slug": "GITHUB_GET_A_GIST_COMMENT",
    "input_parameters": {
      "description": "Request to retrieve a specific comment on a Gist.",
      "properties": {
        "comment_id": {
          "description": "Unique identifier of the comment.",
          "examples": [12345],
          "title": "Comment Id",
          "type": "integer"
        },
        "gist_id": {
          "description": "Unique identifier of the Gist.",
          "examples": ["aa5a315d61ae9438b18d"],
          "title": "Gist Id",
          "type": "string"
        }
      },
      "required": ["gist_id", "comment_id"],
      "title": "GetAGistCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Gist comment details. Key fields include 'id', 'user', 'body' (supports markdown), 'created_at' (ISO 8601 UTC timestamp), and 'updated_at' (ISO 8601 UTC timestamp).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAGistCommentResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a specific gist comment by its id and the gist's id.",
    "tags": ["gists", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a gist revision",
    "slug": "GITHUB_GET_A_GIST_REVISION",
    "input_parameters": {
      "description": "Request schema for `GetAGistRevision`",
      "properties": {
        "gist_id": {
          "description": "The unique identifier of the gist.",
          "examples": ["aa5a315d61ae9438b18d"],
          "title": "Gist Id",
          "type": "string"
        },
        "sha": {
          "description": "The SHA (Secure Hash Algorithm) identifier of a specific gist revision. This is a 40-character hexadecimal string.",
          "examples": ["039209f0822a1e45614df232d979608b00b4e287"],
          "title": "Sha",
          "type": "string"
        }
      },
      "required": ["gist_id", "sha"],
      "title": "GetAGistRevisionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAGistRevisionResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a specific revision of a gist.",
    "tags": ["gists", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a GitHub Pages site",
    "slug": "GITHUB_GET_A_GITHUB_PAGES_SITE",
    "input_parameters": {
      "description": "Request schema for retrieving information about a GitHub Pages site.",
      "properties": {
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetAGithubPagesSiteRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the GitHub Pages site information. Key fields include 'url' (the Pages site URL), 'status' (e.g., 'built', 'building'), 'cname' (the custom domain for the site, if any), 'custom_404' (boolean indicating if a custom 404 page is used), 'html_url' (the absolute URL to the Pages site), 'source' (an object detailing the build source, including 'branch' and 'path'), and 'public' (boolean indicating if the site is public).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAGithubPagesSiteResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves information for a github pages site, which must be enabled for the repository.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a gitignore template",
    "slug": "GITHUB_GET_A_GITIGNORE_TEMPLATE",
    "input_parameters": {
      "description": "Request schema for `GetAGitignoreTemplate`",
      "properties": {
        "name": {
          "description": "The name of the .gitignore template to retrieve (e.g., 'Python', 'Node'). This is case-sensitive.",
          "examples": ["Python", "Java", "Node", "Go", "Rails"],
          "title": "Name",
          "type": "string"
        }
      },
      "required": ["name"],
      "title": "GetAGitignoreTemplateRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The response data containing the .gitignore template. The structure includes 'name' and 'source' of the template.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAGitignoreTemplateResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a specific .gitignore template from github by its name, which must be an existing template in github's collection.",
    "tags": ["gitignore", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a job for a workflow run",
    "slug": "GITHUB_GET_A_JOB_FOR_A_WORKFLOW_RUN",
    "input_parameters": {
      "description": "Request schema for retrieving detailed information about a specific job within a GitHub Actions workflow run.",
      "properties": {
        "job_id": {
          "description": "The unique numerical identifier of the job to retrieve.",
          "examples": [123456789],
          "title": "Job Id",
          "type": "integer"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["hello-world", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "job_id"],
      "title": "GetAJobForAWorkflowRunRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the details of the job. Key fields typically include `id` (the job's unique ID), `run_id` (ID of the workflow run), `status` (e.g., 'queued', 'in_progress', 'completed'), `conclusion` (e.g., 'success', 'failure'), `name` (name of the job), `steps` (list of steps in the job), `started_at`, and `completed_at` timestamps.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAJobForAWorkflowRunResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves detailed information for a specific job within a github actions workflow run, given its `job id` which must be valid for the specified repository's workflow.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a label",
    "slug": "GITHUB_GET_A_LABEL",
    "input_parameters": {
      "description": "Request schema for retrieving a specific label from a repository by its name.",
      "properties": {
        "name": {
          "description": "The name of the label to retrieve. GitHub's API treats label names as case-insensitive for this operation.",
          "examples": ["bug", "enhancement", "good first issue"],
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository (e.g., a username or organization name). The name is not case-sensitive.",
          "examples": ["octocat", "kubernetes"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. The name is not case-sensitive.",
          "examples": ["Spoon-Knife", "documentation"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "name"],
      "title": "GetALabelRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the label object, containing details such as `id`, `node_id`, `url`, `name`, `color`, `description`, and `default` status.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetALabelResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a specific label by its name from a specified github repository.",
    "tags": ["issues", "openWorldHint", "readOnlyHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a license",
    "slug": "GITHUB_GET_A_LICENSE",
    "input_parameters": {
      "description": "Request schema for `GetALicense`",
      "properties": {
        "license": {
          "description": "The unique identifier (key) of the license. This is typically the SPDX license identifier (e.g., 'mit', 'apache-2.0').",
          "examples": ["mit", "apache-2.0", "gpl-3.0"],
          "title": "License",
          "type": "string"
        }
      },
      "required": ["license"],
      "title": "GetALicenseRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetALicenseResponseWrapper",
      "type": "object"
    },
    "description": "Call this action to retrieve comprehensive details for a specific software license recognized by github, using its unique license key.",
    "tags": ["licenses", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a milestone",
    "slug": "GITHUB_GET_A_MILESTONE",
    "input_parameters": {
      "description": "Request schema for `GetAMilestone`",
      "properties": {
        "milestone_number": {
          "description": "The unique sequential number identifying the milestone within the repository.",
          "examples": [1, 5, 42],
          "title": "Milestone Number",
          "type": "integer"
        },
        "owner": {
          "description": "The username of the account that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "kubernetes"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife", "autoscaler"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "milestone_number"],
      "title": "GetAMilestoneRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the full details of the milestone, including attributes like title, description, state, due date, and creator.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAMilestoneResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves detailed information for a specific milestone within a github repository by its number.",
    "tags": ["issues", "openWorldHint", "readOnlyHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a package for an organization",
    "slug": "GITHUB_GET_A_PACKAGE_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for retrieving a specific package from a GitHub organization.",
      "properties": {
        "org": {
          "description": "Name of the GitHub organization (case-insensitive).",
          "examples": ["my-organization"],
          "title": "Org",
          "type": "string"
        },
        "package_name": {
          "description": "The unique name of the package.",
          "examples": ["my-package-name"],
          "title": "Package Name",
          "type": "string"
        },
        "package_type": {
          "description": "Type of the package. GitHub Gradle packages use `maven` type. Images from `ghcr.io` (Container registry) use `container` type. Use `docker` for images from `docker.pkg.github.com` (Docker registry), even if migrated to the Container registry.",
          "enum": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "examples": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "title": "Package Type",
          "type": "string"
        }
      },
      "required": ["package_type", "package_name", "org"],
      "title": "GetAPackageForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary with comprehensive details of the retrieved package.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAPackageForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a specific package (by type and name) from an organization, if both the package and organization exist.",
    "tags": ["openWorldHint", "packages", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a package for a user",
    "slug": "GITHUB_GET_A_PACKAGE_FOR_A_USER",
    "input_parameters": {
      "description": "Request for retrieving a specific package owned by a GitHub user.",
      "properties": {
        "package_name": {
          "description": "Unique name of the package on GitHub Packages.",
          "title": "Package Name",
          "type": "string"
        },
        "package_type": {
          "description": "Specifies the package's type. Note: Gradle packages use 'maven'; ghcr.io images use 'container'; 'docker' can find images migrated from docker.pkg.github.com to the Container registry.",
          "enum": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "examples": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "title": "Package Type",
          "type": "string"
        },
        "username": {
          "description": "GitHub username of the package owner.",
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["package_type", "package_name", "username"],
      "title": "GetAPackageForAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Detailed metadata of the package. Structure varies by package type and available information.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAPackageForAUserResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves metadata for a specific package owned by a github user, using package type, name, and username as identifiers.",
    "tags": ["openWorldHint", "packages", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a package for the authenticated user",
    "slug": "GITHUB_GET_A_PACKAGE_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for `GetAPackageForTheAuthenticatedUser`",
      "properties": {
        "package_name": {
          "description": "The unique name of the package as it appears in the registry.",
          "examples": ["my-web-app", "com.example.utils", "my-container-image"],
          "title": "Package Name",
          "type": "string"
        },
        "package_type": {
          "description": "Type of the package. 'maven' for GitHub's Gradle registry; 'container' for Docker images in GitHub's Container registry (`ghcr.io`); 'docker' for images from GitHub's Docker registry (`docker.pkg.github.com`), including those migrated to the Container registry.",
          "enum": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "examples": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "title": "Package Type",
          "type": "string"
        }
      },
      "required": ["package_type", "package_name"],
      "title": "GetAPackageForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the properties and metadata of the requested package. The structure of this dictionary can vary depending on the package type.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAPackageForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves detailed information for a specific package owned by the authenticated user.",
    "tags": ["openWorldHint", "packages", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a package version for an organization",
    "slug": "GITHUB_GET_A_PACKAGE_VERSION_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for retrieving a specific package version within an organization.",
      "properties": {
        "org": {
          "description": "Organization name (case-insensitive).",
          "examples": ["github", "my-organization"],
          "title": "Org",
          "type": "string"
        },
        "package_name": {
          "description": "Unique package name.",
          "examples": ["my-package", "octo-app"],
          "title": "Package Name",
          "type": "string"
        },
        "package_type": {
          "description": "Package type. `maven` for GitHub Gradle registry. `container` for GitHub Container registry (`ghcr.io`) images. `docker` for images from GitHub Docker registry (`docker.pkg.github.com`), including migrated ones.",
          "enum": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "examples": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "title": "Package Type",
          "type": "string"
        },
        "package_version_id": {
          "description": "Unique ID of the package version.",
          "examples": [12345, 98765],
          "title": "Package Version Id",
          "type": "integer"
        }
      },
      "required": ["package_type", "package_name", "org", "package_version_id"],
      "title": "GetAPackageVersionForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Detailed information of the fetched package version.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAPackageVersionForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves detailed information for a specific version of a package within an organization.",
    "tags": ["openWorldHint", "packages", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a package version for a user",
    "slug": "GITHUB_GET_A_PACKAGE_VERSION_FOR_A_USER",
    "input_parameters": {
      "description": "Request schema for retrieving a specific package version for a user on GitHub.",
      "properties": {
        "package_name": {
          "description": "The name of the package.",
          "examples": ["my-custom-package", "express"],
          "title": "Package Name",
          "type": "string"
        },
        "package_type": {
          "description": "The type of package. 'maven' is used for Gradle packages. 'container' is for images in GitHub's Container registry (ghcr.io). 'docker' can be used for images previously in GitHub's Docker registry (docker.pkg.github.com).",
          "enum": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "examples": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "title": "Package Type",
          "type": "string"
        },
        "package_version_id": {
          "description": "The unique identifier of the specific package version.",
          "examples": ["12345", "67890"],
          "title": "Package Version Id",
          "type": "integer"
        },
        "username": {
          "description": "The GitHub username of the account that owns the package.",
          "examples": ["octocat", "your-username"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["package_type", "package_name", "package_version_id", "username"],
      "title": "GetAPackageVersionForAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the attributes and details of the specific package version.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAPackageVersionForAUserResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a specific public package version associated with a github user.",
    "tags": ["openWorldHint", "packages", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get authenticated user package version",
    "slug": "GITHUB_GET_A_PACKAGE_VERSION_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Defines the parameters required to retrieve a specific package version for the authenticated user.",
      "properties": {
        "package_name": {
          "description": "The name of the package, which can be case-sensitive depending on the package type.",
          "examples": ["my-package", "your-awesome-app"],
          "title": "Package Name",
          "type": "string"
        },
        "package_type": {
          "description": "The package type. Note: GitHub's Gradle registry packages use 'maven'; ghcr.io images use 'container'; 'docker' can refer to images from docker.pkg.github.com.",
          "enum": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "examples": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "title": "Package Type",
          "type": "string"
        },
        "package_version_id": {
          "description": "The unique numerical identifier (ID) of the specific package version.",
          "examples": ["12345", "98760"],
          "title": "Package Version Id",
          "type": "integer"
        }
      },
      "required": ["package_type", "package_name", "package_version_id"],
      "title": "GetAPackageVersionForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary holding the detailed information of the fetched package version. The content and structure of this dictionary depend on the package type and the data provided by the GitHub API.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAPackageVersionForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves detailed information for an existing specific package version associated with the authenticated user, identified by its type, name, and version id.",
    "tags": ["openWorldHint", "packages", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a project",
    "slug": "GITHUB_GET_A_PROJECT",
    "input_parameters": {
      "description": "Request schema for `GetAProject`",
      "properties": {
        "project_id": {
          "description": "The unique integer identifier of the GitHub project.",
          "examples": ["1002604"],
          "title": "Project Id",
          "type": "integer"
        }
      },
      "required": ["project_id"],
      "title": "GetAProjectRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Dictionary with detailed attributes of the GitHub project, such as `name`, `body`, `state`, `creator`, `created_at`, `updated_at`, and other project-specific details.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAProjectResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves detailed information for a specific github project using its unique `project id`.",
    "tags": ["openWorldHint", "projects", "readOnlyHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a project card",
    "slug": "GITHUB_GET_A_PROJECT_CARD",
    "input_parameters": {
      "description": "Request schema for retrieving a specific project card by its ID.",
      "properties": {
        "card_id": {
          "description": "The unique identifier of the project card.",
          "examples": [10526908],
          "title": "Card Id",
          "type": "integer"
        }
      },
      "required": ["card_id"],
      "title": "GetAProjectCardRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Comprehensive details of the project card, such as its ID, note, creator, timestamps, archival status, and associated URLs (e.g., column URL, project URL, content URL if linked to an issue or pull request).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAProjectCardResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves all details of a specific project card, given its unique `card id`.",
    "tags": ["openWorldHint", "projects", "readOnlyHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a project column",
    "slug": "GITHUB_GET_A_PROJECT_COLUMN",
    "input_parameters": {
      "description": "Input model for the `GetAProjectColumn` action.",
      "properties": {
        "column_id": {
          "description": "The unique identifier of the project column.",
          "examples": ["1024748", "2098123"],
          "title": "Column Id",
          "type": "integer"
        }
      },
      "required": ["column_id"],
      "title": "GetAProjectColumnRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAProjectColumnResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves detailed information for a specific project column; the column must exist.",
    "tags": ["openWorldHint", "projects", "readOnlyHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a pull request",
    "slug": "GITHUB_GET_A_PULL_REQUEST",
    "input_parameters": {
      "description": "Request schema for `GetAPullRequest`",
      "properties": {
        "owner": {
          "description": "The username of the account that owns the repository. This value is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "pull_number": {
          "description": "The number that identifies the specific pull request.",
          "examples": [1347],
          "title": "Pull Number",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the .git extension. This value is not case sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "pull_number"],
      "title": "GetAPullRequestRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAPullRequestResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a specific pull request from a github repository using its owner, repository name, and pull request number.",
    "tags": ["important", "openWorldHint", "pulls", "readOnlyHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a reference",
    "slug": "GITHUB_GET_A_REFERENCE",
    "input_parameters": {
      "description": "Request schema for `GetAReference`",
      "properties": {
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "google"],
          "title": "Owner",
          "type": "string"
        },
        "ref": {
          "description": "The Git reference to retrieve. This can be a branch name (e.g., `main`), a tag name (e.g., `v1.0.0`), or a fully qualified reference (e.g., `heads/main`, `tags/v1.0.0`). For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation.",
          "examples": ["main", "tags/v1.2.3", "heads/feature-branch", "refs/pull/123/head"],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Hello-World", "mercury"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "ref"],
      "title": "GetAReferenceRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details of the Git reference: its `ref` string, `node_id`, API `url`, and the referenced `object` (e.g., commit, tag) specifying its `type`, `sha` (SHA-1 hash), and object API `url`.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAReferenceResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a specific git reference (e.g., a branch, tag, or fully qualified like 'heads/main') from a github repository.",
    "tags": ["git", "openWorldHint", "readOnlyHint", "idempotentHint", "important"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a release",
    "slug": "GITHUB_GET_A_RELEASE",
    "input_parameters": {
      "description": "Request schema for retrieving a specific release from a GitHub repository.",
      "properties": {
        "owner": {
          "description": "The username of the account that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "release_id": {
          "description": "The unique numerical identifier for the release.",
          "examples": ["1", "12345"],
          "title": "Release Id",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the '.git' extension. This field is not case-sensitive.",
          "examples": ["Hello-World", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "release_id"],
      "title": "GetAReleaseRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the full data of the release, including its assets, author, tag name, and other details.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAReleaseResponseWrapper",
      "type": "object"
    },
    "description": "Gets a specific release from a github repository, provided the repository is accessible and the release exists.",
    "tags": ["openWorldHint", "readOnlyHint", "repos"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a release asset",
    "slug": "GITHUB_GET_A_RELEASE_ASSET",
    "input_parameters": {
      "description": "Request schema for `GetAReleaseAsset`",
      "properties": {
        "asset_id": {
          "description": "The unique numeric identifier of the release asset.",
          "examples": ["1234567"],
          "title": "Asset Id",
          "type": "integer"
        },
        "owner": {
          "description": "The account owner of the repository (GitHub username or organization name). This name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "asset_id"],
      "title": "GetAReleaseAssetRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the metadata of the release asset. Key fields typically include: `url` (API URL for the asset), `id` (asset's unique ID), `node_id` (GraphQL node ID), `name` (filename of the asset), `label` (optional display name), `uploader` (object with details of the user who uploaded the asset), `content_type` (MIME type of the asset), `state` (e.g., 'uploaded'), `size` (size in bytes), `download_count`, `created_at`, `updated_at`, and `browser_download_url` (the direct URL to download the asset's binary content).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAReleaseAssetResponseWrapper",
      "type": "object"
    },
    "description": "Gets metadata for a specific release asset in a github repository, including a `browser download url` for downloading the asset.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a release by tag name",
    "slug": "GITHUB_GET_A_RELEASE_BY_TAG_NAME",
    "input_parameters": {
      "description": "Request schema for `GetAReleaseByTagName`",
      "properties": {
        "owner": {
          "description": "Account owner of the repository (not case sensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (not case sensitive).",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "tag": {
          "description": "Tag identifying the release to fetch.",
          "examples": ["v1.0.0"],
          "title": "Tag",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "tag"],
      "title": "GetAReleaseByTagNameRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAReleaseByTagNameResponseWrapper",
      "type": "object"
    },
    "description": "Gets a release from a github repository by its tag name; the repository and a release with this tag must already exist.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a repository",
    "slug": "GITHUB_GET_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for retrieving detailed information about a specific GitHub repository.",
      "properties": {
        "owner": {
          "description": "The username of the account that owns the repository. This field is case-insensitive.",
          "examples": ["octocat", "kubernetes"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is case-insensitive.",
          "examples": ["Hello-World", "kubernetes"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves detailed information about an existing and accessible github repository.",
    "tags": ["openWorldHint", "readOnlyHint", "repos"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a repository public key",
    "slug": "GITHUB_GET_A_REPOSITORY_PUBLIC_KEY",
    "input_parameters": {
      "description": "Request schema for `GetARepositoryPublicKey`",
      "properties": {
        "owner": {
          "description": "Account owner of the repository (case-insensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository without the `.git` extension (case-insensitive).",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetARepositoryPublicKeyRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetARepositoryPublicKeyResponseWrapper",
      "type": "object"
    },
    "description": "Gets a repository's public key for encrypting secrets to be used in github actions, if the repository exists and is accessible.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a repository readme",
    "slug": "GITHUB_GET_A_REPOSITORY_README",
    "input_parameters": {
      "description": "Request schema for `GetARepositoryReadme`",
      "properties": {
        "owner": {
          "description": "The GitHub account owner of the repository. This name is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "ref": {
          "description": "The specific git reference (branch name, tag name, or commit SHA) to retrieve the README from. If omitted, the repository's default branch is used.",
          "examples": ["main", "develop", "v2.1.0", "c23a31f32747a8e2a13f8c11699a5e4e9148f2be"],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, excluding the `.git` extension. This name is not case-sensitive.",
          "examples": ["Hello-World", "my-project-name"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetARepositoryReadmeRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details of the repository's README, typically including `name`, `path`, `sha`, `size`, `url`, `html_url`, `git_url`, `download_url`, `type`, Base64-encoded `content`, and `encoding`.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetARepositoryReadmeResponseWrapper",
      "type": "object"
    },
    "description": "Fetches the readme file (if it exists and is accessible) from a specified github repository, returning its base64-encoded content and metadata.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a repository readme for a directory",
    "slug": "GITHUB_GET_A_REPOSITORY_README_FOR_A_DIRECTORY",
    "input_parameters": {
      "description": "Request schema for `GetARepositoryReadmeForADirectory`",
      "properties": {
        "dir": {
          "description": "Path to the directory containing the README file.",
          "examples": ["docs", "src/my_package"],
          "title": "Dir",
          "type": "string"
        },
        "owner": {
          "description": "Username of the account owning the repository (not case sensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "ref": {
          "description": "Commit, branch, or tag name; defaults to the repository's default branch if not provided.",
          "examples": ["main", "v1.0.0", "my-feature-branch"],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (not case sensitive).",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "dir"],
      "title": "GetARepositoryReadmeForADirectoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Dictionary with the README file's content (Base64 encoded) and metadata (e.g., name, path, sha, size, type, encoding, URLs).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetARepositoryReadmeForADirectoryResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves the readme file from a specified directory within a github repository, optionally at a given commit, branch, or tag.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a repository ruleset",
    "slug": "GITHUB_GET_A_REPOSITORY_RULESET",
    "input_parameters": {
      "description": "Request to retrieve a specific ruleset for a GitHub repository, which governs interactions with its branches and tags.",
      "properties": {
        "includes_parents": {
          "default": true,
          "description": "If true, also returns rulesets configured at higher levels (e.g., organization) that apply to this repository.",
          "title": "Includes Parents",
          "type": "boolean"
        },
        "owner": {
          "description": "Account owner of the repository (username or organization); case-insensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Repository name, excluding `.git` extension; case-insensitive.",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        },
        "ruleset_id": {
          "description": "Unique identifier of the ruleset.",
          "examples": [12345, 54321],
          "title": "Ruleset Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "ruleset_id"],
      "title": "GetARepositoryRulesetRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details of the retrieved repository ruleset, including its configuration and rules.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetARepositoryRulesetResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a specific repository ruleset by its id; if `includes parents` is true, the search for this `ruleset id` also extends to rulesets from parent organizations.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a repository rule suite",
    "slug": "GITHUB_GET_A_REPOSITORY_RULE_SUITE",
    "input_parameters": {
      "description": "Request schema for `GetARepositoryRuleSuite`",
      "properties": {
        "owner": {
          "description": "The username of the account or the name of the organization that owns the repository. This name is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, excluding the `.git` extension. This name is not case-sensitive.",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        },
        "rule_suite_id": {
          "description": "The unique identifier of the rule suite. To obtain this ID, you can list rule suites for the repository (e.g., via `GET /repos/{owner}/{repo}/rulesets/rule-suites`) or organization (e.g., via `GET /orgs/{org}/rulesets/rule-suites`).",
          "title": "Rule Suite Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "rule_suite_id"],
      "title": "GetARepositoryRuleSuiteRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Comprehensive details of the repository rule suite, typically including `id`, `actor_name`, `before_sha`, `after_sha`, `ref`, `repository_id`, `result` (e.g., 'pass', 'fail'), and an array of `rule_evaluations` detailing the outcome of each rule.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetARepositoryRuleSuiteResponseWrapper",
      "type": "object"
    },
    "description": "Gets detailed information for a specific repository rule suite by its id, including its evaluation status and the results of its individual rules.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a repository secret",
    "slug": "GITHUB_GET_A_REPOSITORY_SECRET",
    "input_parameters": {
      "description": "Request schema for `GetARepositorySecret`",
      "properties": {
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive. ",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        },
        "secret_name": {
          "description": "The name of the secret to retrieve.",
          "examples": ["GH_TOKEN", "API_KEY"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "secret_name"],
      "title": "GetARepositorySecretRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the metadata of the secret, such as its name, creation date (`created_at`), and last update date (`updated_at`). The encrypted value of the secret is not included.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetARepositorySecretResponseWrapper",
      "type": "object"
    },
    "description": "Gets metadata (name, creation/update timestamps) for an existing repository secret, excluding its encrypted value.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a repository subscription",
    "slug": "GITHUB_GET_A_REPOSITORY_SUBSCRIPTION",
    "input_parameters": {
      "description": "Request schema for `GetARepositorySubscription`",
      "properties": {
        "owner": {
          "description": "The username of the account that owns the repository. This is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This is not case-sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetARepositorySubscriptionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Repository subscription details for the authenticated user, including status (`subscribed`, `ignored`), `reason`, `created_at` timestamp, and relevant URLs.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetARepositorySubscriptionResponseWrapper",
      "type": "object"
    },
    "description": "Gets the authenticated user's subscription details for a repository, indicating if they receive notifications.",
    "tags": ["activity", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a repository variable",
    "slug": "GITHUB_GET_A_REPOSITORY_VARIABLE",
    "input_parameters": {
      "description": "Request schema for `GetARepositoryVariable`.",
      "properties": {
        "name": {
          "description": "The name of the GitHub Actions variable to retrieve.",
          "examples": ["CI_TOKEN", "DEPLOYMENT_SERVER_URL"],
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "description": "The username or organization that owns the repository.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension.",
          "examples": ["hello-world", "my-private-repo"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "name"],
      "title": "GetARepositoryVariableRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the details of the repository variable. Expected keys include 'name' (the variable's name), 'value' (the variable's value), 'created_at' (timestamp of creation), and 'updated_at' (timestamp of last update).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetARepositoryVariableResponseWrapper",
      "type": "object"
    },
    "description": "Gets a specific github actions variable by name from an accessible repository.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a repository webhook",
    "slug": "GITHUB_GET_A_REPOSITORY_WEBHOOK",
    "input_parameters": {
      "description": "Request schema for `GetARepositoryWebhook`",
      "properties": {
        "hook_id": {
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "examples": ["12345678", "87654321"],
          "title": "Hook Id",
          "type": "integer"
        },
        "owner": {
          "description": "The account owner of the repository (e.g., a user or organization). The name is not case-sensitive.",
          "examples": ["octocat", "microsoft"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case-sensitive.",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "hook_id"],
      "title": "GetARepositoryWebhookRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetARepositoryWebhookResponseWrapper",
      "type": "object"
    },
    "description": "Returns the configuration of an existing webhook for a given repository.",
    "tags": ["openWorldHint", "readOnlyHint", "repos"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a review comment for a pull request",
    "slug": "GITHUB_GET_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST",
    "input_parameters": {
      "description": "Specifies the repository owner, repository name, and comment ID to retrieve a pull request review comment.",
      "properties": {
        "comment_id": {
          "description": "Unique identifier of the pull request review comment.",
          "examples": ["12345"],
          "title": "Comment Id",
          "type": "integer"
        },
        "owner": {
          "description": "The account owner of the repository (GitHub username or organization name). Not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository (without the `.git` extension). Not case-sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "comment_id"],
      "title": "GetAReviewCommentForAPullRequestRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAReviewCommentForAPullRequestResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a specific pull request review comment by its id, provided the repository exists, is accessible, and the comment id is valid.",
    "tags": ["openWorldHint", "pulls", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a review for a pull request",
    "slug": "GITHUB_GET_A_REVIEW_FOR_A_PULL_REQUEST",
    "input_parameters": {
      "description": "Request schema for retrieving a specific review for a pull request.",
      "properties": {
        "owner": {
          "description": "The username of the account that owns the repository. This is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "pull_number": {
          "description": "The numeric identifier of the pull request.",
          "examples": [42],
          "title": "Pull Number",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This is not case sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "review_id": {
          "description": "The unique numeric identifier of the review.",
          "examples": [80],
          "title": "Review Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "pull_number", "review_id"],
      "title": "GetAReviewForAPullRequestRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the pull request review object. This typically includes details like the review ID, user who submitted the review, the body of the review, the state (e.g., 'COMMENTED', 'APPROVED', 'CHANGES_REQUESTED'), and a link to the review.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAReviewForAPullRequestResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a specific review for a pull request using its owner, repository, pull request number, and review id.",
    "tags": ["openWorldHint", "pulls", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a secret for the authenticated user",
    "slug": "GITHUB_GET_A_SECRET_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for `GetASecretForTheAuthenticatedUser`",
      "properties": {
        "secret_name": {
          "description": "The name of the secret to retrieve. This is case-sensitive.",
          "examples": ["GH_PAT", "AWS_SECRET_ACCESS_KEY", "MY_CUSTOM_SECRET"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["secret_name"],
      "title": "GetASecretForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetASecretForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves metadata (name, timestamps, visibility; not the value) for a specific, existing development environment secret associated with the authenticated user's github codespaces.",
    "tags": ["codespaces", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a self hosted runner for an organization",
    "slug": "GITHUB_GET_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Specifies the parameters to retrieve a specific self-hosted runner for an organization.",
      "properties": {
        "org": {
          "description": "The login name of the GitHub organization. This name is not case-sensitive.",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "runner_id": {
          "description": "Unique identifier (ID) of the self-hosted runner.",
          "examples": ["123", "42"],
          "title": "Runner Id",
          "type": "integer"
        }
      },
      "required": ["org", "runner_id"],
      "title": "GetASelfHostedRunnerForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetASelfHostedRunnerForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves detailed information about a specific self-hosted runner registered within a github organization.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a self hosted runner for a repository",
    "slug": "GITHUB_GET_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for retrieving details of a specific self-hosted runner within a repository.",
      "properties": {
        "owner": {
          "description": "The username of the account that owns the repository. This is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This is not case-sensitive.",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        },
        "runner_id": {
          "description": "The unique identifier (ID) of the self-hosted runner.",
          "examples": ["5"],
          "title": "Runner Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "runner_id"],
      "title": "GetASelfHostedRunnerForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the details of the self-hosted runner. Common fields include `id`, `name`, `os` (operating system), and `status` (e.g., 'online', 'offline').",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetASelfHostedRunnerForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Gets a specific self-hosted runner for a repository by its unique id.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a tag",
    "slug": "GITHUB_GET_A_TAG",
    "input_parameters": {
      "description": "Defines the repository and the specific Git tag SHA required to retrieve tag details.",
      "properties": {
        "owner": {
          "description": "Username or organization that owns the repository (case-insensitive).",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (case-insensitive).",
          "examples": ["Spoon-Knife", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        },
        "tag_sha": {
          "description": "SHA of the Git tag object to retrieve; this is the SHA of the tag object, not the commit it may point to.",
          "examples": [
            "940bd336248efae0f9ee5bc7b2d5c985887b16ac",
            "cfe393729303049576d4f771639b57cfc1973a81"
          ],
          "title": "Tag Sha",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "tag_sha"],
      "title": "GetATagRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetATagResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves detailed information for a specific git tag object from a github repository, using the sha of the tag object itself.",
    "tags": ["git", "openWorldHint", "readOnlyHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a team by name",
    "slug": "GITHUB_GET_A_TEAM_BY_NAME",
    "input_parameters": {
      "description": "Request schema to get a GitHub team using its slug and organization name.",
      "properties": {
        "org": {
          "description": "The organization's name (case-insensitive).",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "team_slug": {
          "description": "The slug (URL-friendly version) of the team name.",
          "examples": ["justice-league"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug"],
      "title": "GetATeamByNameRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetATeamByNameResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a github team by its slug from a specific organization.",
    "tags": ["openWorldHint", "readOnlyHint", "teams", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a thread",
    "slug": "GITHUB_GET_A_THREAD",
    "input_parameters": {
      "description": "Request schema for `GetAThread`",
      "properties": {
        "thread_id": {
          "description": "The unique identifier of the notification thread, typically obtained from a list of notifications.",
          "examples": ["123", "4567"],
          "title": "Thread Id",
          "type": "integer"
        }
      },
      "required": ["thread_id"],
      "title": "GetAThreadRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the full notification thread object. This includes details such as `id`, `subject`, `reason`, the `repository` object it belongs to, `unread` status, `updated_at`, and `last_read_at` timestamps, among other thread-specific attributes.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAThreadResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a specific github notification thread using its unique `thread id`.",
    "tags": ["activity", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a thread subscription for the authenticated user",
    "slug": "GITHUB_GET_A_THREAD_SUBSCRIPTION_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for `GetAThreadSubscriptionForTheAuthenticatedUser`",
      "properties": {
        "thread_id": {
          "description": "The unique identifier of the notification thread. This ID corresponds to the `id` field returned when retrieving notifications, for example, through the 'List notifications for the authenticated user' (GET /notifications) operation.",
          "examples": ["12345", "67890"],
          "title": "Thread Id",
          "type": "integer"
        }
      },
      "required": ["thread_id"],
      "title": "GetAThreadSubscriptionForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the thread subscription object. Key fields typically include `subscribed` (boolean: whether the user is receiving notifications for this thread), `ignored` (boolean: whether the user has muted this thread), `reason` (nullable string: the reason for the current subscription status), `created_at` (ISO 8601 timestamp: when the subscription was created), `url` (API URL for this subscription), and `thread_url` (API URL for the parent thread).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAThreadSubscriptionForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves the authenticated user's subscription details for a specific notification thread, identified by `thread id`.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Users and Access", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a tree",
    "slug": "GITHUB_GET_A_TREE",
    "input_parameters": {
      "description": "Request schema for `GetATree`",
      "properties": {
        "owner": {
          "description": "Account owner of the repository (case-insensitive).",
          "examples": ["octocat", "kubernetes"],
          "title": "Owner",
          "type": "string"
        },
        "recursive": {
          "description": "If provided with any string value, enables recursive retrieval of all objects or subtrees. Omit to fetch only top-level entries.",
          "examples": ["0", "1", "true", "false"],
          "title": "Recursive",
          "type": "string"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension (case-insensitive).",
          "examples": ["Spoon-Knife", "enhancements"],
          "title": "Repo",
          "type": "string"
        },
        "tree_sha": {
          "description": "SHA1 hash, branch, or tag name of the Git tree to retrieve.",
          "examples": ["master", "HEAD", "a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0", "v1.25.0"],
          "title": "Tree Sha",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "tree_sha"],
      "title": "GetATreeRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The Git tree object, including its SHA, URL, a list of tree entries (files/subdirectories with metadata), and a flag indicating if results were truncated.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetATreeResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a git tree (directory listing) from a github repository using its sha, branch name, or tag name, optionally fetching all nested items recursively.",
    "tags": ["git", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a user",
    "slug": "GITHUB_GET_A_USER",
    "input_parameters": {
      "description": "Request to retrieve a GitHub user's public profile information.",
      "properties": {
        "username": {
          "description": "The GitHub username (handle) of the user to retrieve. This is case-sensitive.",
          "examples": ["octocat", "torvalds", "defunkt"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["username"],
      "title": "GetAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the public profile data for the specified GitHub user, as returned by the GitHub API. This includes various attributes such as login, ID, avatar URL, name, bio, location, public repository count, and more.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAUserResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves the public profile information for an existing github user, specified by their username.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Users"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a webhook configuration for an organization",
    "slug": "GITHUB_GET_A_WEBHOOK_CONFIGURATION_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for retrieving the configuration of a specific webhook for a GitHub organization.",
      "properties": {
        "hook_id": {
          "description": "Unique ID of the webhook (see `X-GitHub-Hook-ID` header in webhook deliveries).",
          "examples": [123456789],
          "title": "Hook Id",
          "type": "integer"
        },
        "org": {
          "description": "The GitHub organization's name (case-insensitive).",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org", "hook_id"],
      "title": "GetAWebhookConfigurationForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the webhook configuration. Common keys include 'url' (the URL the webhook posts to), 'content_type' (e.g., 'json', 'form'), 'secret' (if a secret is set, otherwise not present or empty), and 'insecure_ssl' (a string '0' or '1' indicating if SSL verification is disabled).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAWebhookConfigurationForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves the configuration for a specific webhook associated with a github organization.",
    "tags": ["openWorldHint", "orgs", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a webhook configuration for a repository",
    "slug": "GITHUB_GET_A_WEBHOOK_CONFIGURATION_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for `GetAWebhookConfigurationForARepository`",
      "properties": {
        "hook_id": {
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "examples": ["123456789", "987654321"],
          "title": "Hook Id",
          "type": "integer"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "hook_id"],
      "title": "GetAWebhookConfigurationForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the configuration settings for the webhook, such as its URL (`url`), content type (`content_type`), SSL verification status (`insecure_ssl`), and the secret if configured (`secret`).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAWebhookConfigurationForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Returns the configuration for an existing webhook on the specified repository.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a webhook delivery for an organization webhook",
    "slug": "GITHUB_GET_A_WEBHOOK_DELIVERY_FOR_AN_ORGANIZATION_WEBHOOK",
    "input_parameters": {
      "description": "Request schema for `GetAWebhookDeliveryForAnOrganizationWebhook`",
      "properties": {
        "delivery_id": {
          "description": "The unique identifier of the specific webhook delivery attempt.",
          "examples": ["abcdef123456", "fedcba654321"],
          "title": "Delivery Id",
          "type": "integer"
        },
        "hook_id": {
          "description": "The unique identifier of the organization webhook. This ID can be found in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "examples": ["12345678", "98765432"],
          "title": "Hook Id",
          "type": "integer"
        },
        "org": {
          "description": "The name of the GitHub organization. This field is not case-sensitive.",
          "examples": ["github", "my-company-org"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org", "hook_id", "delivery_id"],
      "title": "GetAWebhookDeliveryForAnOrganizationWebhookRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the full details of the webhook delivery. The content and structure of this dictionary vary based on the webhook event type and the corresponding payload.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAWebhookDeliveryForAnOrganizationWebhookResponseWrapper",
      "type": "object"
    },
    "description": "Returns detailed information for a specific delivery attempt of a webhook configured for the specified github organization.",
    "tags": ["openWorldHint", "orgs", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a workflow",
    "slug": "GITHUB_GET_A_WORKFLOW",
    "input_parameters": {
      "description": "Defines the parameters for retrieving a specific GitHub Actions workflow from a repository.",
      "properties": {
        "owner": {
          "description": "Username or organization name owning the repository (case-insensitive).",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (case-insensitive).",
          "examples": ["Spoon-Knife", "my-repo-name"],
          "title": "Repo",
          "type": "string"
        },
        "workflow_id": {
          "default": null,
          "description": "Unique numeric identifier of the workflow; use this or `workflow_name`.",
          "examples": [1234567, 9876543],
          "nullable": true,
          "title": "Workflow Id",
          "type": "integer"
        },
        "workflow_name": {
          "default": null,
          "description": "Full name of the workflow file (e.g., `ci.yml`); use this or `workflow_id`.",
          "examples": ["main.yml", "ci-pipeline.yaml", "build.yml"],
          "nullable": true,
          "title": "Workflow Name",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetWorkflowRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "badge_url": {
              "default": null,
              "description": "URL for a dynamically generated status badge of the workflow.",
              "nullable": true,
              "title": "Badge Url",
              "type": "string"
            },
            "created_at": {
              "default": null,
              "description": "ISO 8601 timestamp of workflow creation.",
              "nullable": true,
              "title": "Created At",
              "type": "string"
            },
            "deleted_at": {
              "default": null,
              "description": "ISO 8601 timestamp of workflow deletion; present only if deleted.",
              "nullable": true,
              "title": "Deleted At",
              "type": "string"
            },
            "html_url": {
              "default": null,
              "description": "URL to view the workflow file on GitHub.",
              "nullable": true,
              "title": "Html Url",
              "type": "string"
            },
            "id": {
              "default": null,
              "description": "Unique numeric ID of the workflow.",
              "nullable": true,
              "title": "Id",
              "type": "integer"
            },
            "name": {
              "default": null,
              "description": "Name of the workflow (e.g., 'CI Pipeline', 'Release Drafter').",
              "nullable": true,
              "title": "Name",
              "type": "string"
            },
            "node_id": {
              "default": null,
              "description": "Globally unique identifier for the workflow object.",
              "nullable": true,
              "title": "Node Id",
              "type": "string"
            },
            "path": {
              "default": null,
              "description": "Relative path of the workflow YAML file in the repository (e.g., '.github/workflows/main.yml').",
              "nullable": true,
              "title": "Path",
              "type": "string"
            },
            "state": {
              "default": null,
              "description": "Current state of the workflow (e.g., `active`, `disabled_manually`, `deleted`).",
              "nullable": true,
              "title": "State",
              "type": "string"
            },
            "updated_at": {
              "default": null,
              "description": "ISO 8601 timestamp of last workflow update.",
              "nullable": true,
              "title": "Updated At",
              "type": "string"
            },
            "url": {
              "default": null,
              "description": "Complete API URL for this workflow resource.",
              "nullable": true,
              "title": "Url",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetWorkflowResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves detailed information for a specific github actions workflow in a repository, identified by either its numeric id or its filename.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a workflow run",
    "slug": "GITHUB_GET_A_WORKFLOW_RUN",
    "input_parameters": {
      "description": "Request schema for `GetAWorkflowRun`",
      "properties": {
        "exclude_pull_requests": {
          "default": false,
          "description": "If true, excludes pull request data; the `pull_requests` array in the response will be empty.",
          "examples": ["true", "false"],
          "title": "Exclude Pull Requests",
          "type": "boolean"
        },
        "owner": {
          "description": "The username or organization name that owns the repository (not case-sensitive).",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository (case-insensitive, without .git extension).",
          "examples": ["Spoon-Knife", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        },
        "run_id": {
          "description": "Unique ID of the workflow run.",
          "examples": ["123456789", "987654321"],
          "title": "Run Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "run_id"],
      "title": "GetAWorkflowRunRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Detailed information of the workflow run, including attributes like `id`, `name`, `status`, `conclusion`, `workflow_id`, `event`. The `pull_requests` array is empty if `exclude_pull_requests` was true.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAWorkflowRunResponseWrapper",
      "type": "object"
    },
    "description": "Gets a specific workflow run by its id from a github repository.",
    "tags": ["actions", "openWorldHint", "readOnlyHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get a workflow run attempt",
    "slug": "GITHUB_GET_A_WORKFLOW_RUN_ATTEMPT",
    "input_parameters": {
      "description": "Request schema for `GetAWorkflowRunAttempt`.",
      "properties": {
        "attempt_number": {
          "description": "The attempt number of the specific workflow run. Each re-run of a workflow creates a new attempt number, starting from 1.",
          "examples": ["1", "2"],
          "title": "Attempt Number",
          "type": "integer"
        },
        "exclude_pull_requests": {
          "default": false,
          "description": "If `true`, excludes pull request data from the API response; the `pull_requests` array in the response will then be empty.",
          "examples": ["true", "false"],
          "title": "Exclude Pull Requests",
          "type": "boolean"
        },
        "owner": {
          "description": "The account owner of the repository, such as a GitHub username or organization name. This name is not case sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case sensitive.",
          "examples": ["Spoon-Knife", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        },
        "run_id": {
          "description": "The unique identifier (ID) of the workflow run. This ID is specific to a repository and can be obtained from API calls that list workflow runs.",
          "examples": ["123456789"],
          "title": "Run Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "run_id", "attempt_number"],
      "title": "GetAWorkflowRunAttemptRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAWorkflowRunAttemptResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves detailed information for a specific attempt of a workflow run in a github repository, including its status, conclusion, and timings.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get branch protection",
    "slug": "GITHUB_GET_BRANCH_PROTECTION",
    "input_parameters": {
      "description": "Specifies the owner, repository, and branch for retrieving branch protection settings.",
      "properties": {
        "branch": {
          "description": "Name of the branch; wildcard characters are not supported (use GitHub GraphQL API for wildcard matching).",
          "examples": ["main", "develop", "feature/new-login"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "Account owner of the repository (username or organization name); not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension; not case-sensitive.",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "GetBranchProtectionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Dictionary of branch protection settings; its structure varies based on enabled protections. If not enabled, the response may be a 404 or specific message indicating this.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetBranchProtectionResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves branch protection settings for a specific, existing, and accessible branch in a github repository; protection feature availability varies by github product plan.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get commit authors",
    "slug": "GITHUB_GET_COMMIT_AUTHORS",
    "input_parameters": {
      "description": "Request schema for retrieving commit authors during a repository import.",
      "properties": {
        "owner": {
          "description": "The username of the account that owns the repository. This name is not case-sensitive.",
          "examples": ["octocat", "microsoft"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Spoon-Knife", "vscode"],
          "title": "Repo",
          "type": "string"
        },
        "since": {
          "description": "An optional author ID. If provided, only authors with an ID greater than this specified ID will be returned. This ID refers to the `id` field of an author object in the response, and can be used for paginating through the list of authors.",
          "examples": ["0", "123"],
          "title": "Since",
          "type": "integer"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetCommitAuthorsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the API response. This dictionary is expected to hold a list of commit author objects as identified by GitHub during a repository import. Each author object typically includes attributes like `id` (the GitHub user ID if the author is already mapped), `email`, `name`, `import_id` (the internal ID for the author during import), `remote_id` (the author's identifier from the source VCS), and `remote_name` (the author's name from the source VCS).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetCommitAuthorsResponseWrapper",
      "type": "object"
    },
    "description": "Fetches commit authors identified during a repository import, used to map authors from an external vcs to github accounts.",
    "tags": ["migrations", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get commit signature protection",
    "slug": "GITHUB_GET_COMMIT_SIGNATURE_PROTECTION",
    "input_parameters": {
      "description": "Request schema for retrieving commit signature protection status for a branch.",
      "properties": {
        "branch": {
          "description": "The name of the branch. Wildcard characters are not allowed. To use wildcard characters in branch names, consider using the GraphQL API.",
          "examples": ["main"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "GetCommitSignatureProtectionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "The commit signature protection status information.",
          "properties": {
            "enabled": {
              "description": "Indicates whether commit signature protection is enabled for the branch.",
              "title": "Enabled",
              "type": "boolean"
            },
            "url": {
              "description": "The API URL for the commit signature protection settings of the branch.",
              "title": "Url",
              "type": "string"
            }
          },
          "required": ["url", "enabled"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetCommitSignatureProtectionResponseWrapper",
      "type": "object"
    },
    "description": "Gets the commit signature protection status for a branch in a repository.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get community profile metrics",
    "slug": "GITHUB_GET_COMMUNITY_PROFILE_METRICS",
    "input_parameters": {
      "description": "Specifies the target repository for community health metrics.",
      "properties": {
        "owner": {
          "description": "Username of the account owning the repository. Not case-sensitive.",
          "examples": ["octocat", "google"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without '.git' extension. Not case-sensitive.",
          "examples": ["Spoon-Knife", "guava"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetCommunityProfileMetricsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Community profile metrics, such as 'health_percentage', 'description', 'documentation', 'files' (detailing presence of README, CODE_OF_CONDUCT, CONTRIBUTING, LICENSE, ISSUE_TEMPLATE, PULL_REQUEST_TEMPLATE, etc.), and 'updated_at'.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetCommunityProfileMetricsResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a repository's community profile metrics, including health percentage and the presence of key community files (e.g., readme, license).",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get contextual information for a user",
    "slug": "GITHUB_GET_CONTEXTUAL_INFORMATION_FOR_A_USER",
    "input_parameters": {
      "description": "Request to fetch contextual hovercard information for a GitHub user.",
      "properties": {
        "subject_id": {
          "description": "Entity ID for `subject_type` for more specific hovercard context; required if `subject_type` is also given.",
          "examples": ["12345", "org_id_abc"],
          "title": "Subject Id",
          "type": "string"
        },
        "subject_type": {
          "description": "Entity type for more specific hovercard context (e.g., 'repository'); required if `subject_id` is also given.",
          "enum": ["organization", "repository", "issue", "pull_request"],
          "examples": ["organization", "repository", "issue", "pull_request"],
          "title": "Subject Type",
          "type": "string"
        },
        "username": {
          "description": "GitHub username for whom to retrieve hovercard data.",
          "examples": ["octocat", "torvalds"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["username"],
      "title": "GetContextualInformationForAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetContextualInformationForAUserResponseWrapper",
      "type": "object"
    },
    "description": "Gets contextual hovercard information for a github user; `subject type` and `subject id` can be jointly provided for more specific details.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Users", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get default attributes for a codespace",
    "slug": "GITHUB_GET_DEFAULT_ATTRIBUTES_FOR_A_CODESPACE",
    "input_parameters": {
      "description": "Request schema.",
      "properties": {
        "client_ip": {
          "description": "Optional IP address to override default location auto-detection (e.g., for proxied requests). If unspecified, location is inferred from source IP.",
          "examples": ["192.0.2.1", "203.0.113.25"],
          "title": "Client Ip",
          "type": "string"
        },
        "owner": {
          "description": "Username of the account owning the repository (case-insensitive).",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "ref": {
          "description": "Git reference (branch name, tag name, or commit SHA) for devcontainer configuration. If omitted, the repository's default branch is used.",
          "examples": ["main", "v1.2.3", "c3d0be41ec9ae96945425e2d399739c8998e9afd"],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (case-insensitive).",
          "examples": ["hello-world", "Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetDefaultAttributesForACodespaceRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Dictionary with pre-flight data for Codespace creation: billable owner, default location, devcontainer path, available machine types (SKUs), and other configuration details.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetDefaultAttributesForACodespaceResponseWrapper",
      "type": "object"
    },
    "description": "Get pre-flight data (e.g., default location, devcontainer path) for creating a codespace in a given repository (must exist and be accessible), optionally for a specific git ref.",
    "tags": ["codespaces", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get default workflow permissions for an organization",
    "slug": "GITHUB_GET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for `GetDefaultWorkflowPermissionsForAnOrganization`",
      "properties": {
        "org": {
          "description": "The name of the organization. This name is not case-sensitive.",
          "examples": ["my-org-name"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org"],
      "title": "GetDefaultWorkflowPermissionsForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the default workflow permissions. It includes 'default_workflow_permissions' (string) indicating the default permissions for GITHUB_TOKEN (e.g., 'read', 'write'), and 'can_approve_pull_request_reviews' (boolean) indicating if GitHub Actions can approve pull requests (this is applicable to enterprise customers).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetDefaultWorkflowPermissionsForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Gets the default github token workflow permissions and settings for a github organization.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get default workflow permissions for a repository",
    "slug": "GITHUB_GET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for `GetDefaultWorkflowPermissionsForARepository`",
      "properties": {
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetDefaultWorkflowPermissionsForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Default workflow permissions for the repository, including `default_workflow_permissions` ('read' or 'write') for GITHUB_TOKEN and `can_approve_pull_request_reviews` (boolean).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetDefaultWorkflowPermissionsForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Gets the default workflow permissions (`read` or `write`) for the github token and whether it can approve pull request reviews in an existing and accessible repository.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get details about a codespace export",
    "slug": "GITHUB_GET_DETAILS_ABOUT_A_CODESPACE_EXPORT",
    "input_parameters": {
      "description": "Request schema for `GetDetailsAboutACodespaceExport`",
      "properties": {
        "codespace_name": {
          "description": "The unique name of the codespace.",
          "examples": ["monalisa-glorious-space-engine-vx96rp797j92r7x"],
          "title": "Codespace Name",
          "type": "string"
        },
        "export_id": {
          "description": "The ID of the export operation. Currently, only 'latest' is supported, which refers to the most recent export for the specified codespace.",
          "examples": ["latest"],
          "title": "Export Id",
          "type": "string"
        }
      },
      "required": ["codespace_name", "export_id"],
      "title": "GetDetailsAboutACodespaceExportRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing details about the specified codespace export. This typically includes the export's state (e.g., 'succeeded', 'failed', 'in_progress'), an ID, and a URL to download the export archive if the export was successful and the archive is available.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetDetailsAboutACodespaceExportResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves detailed information about a specific export of a codespace.",
    "tags": ["codespaces", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get emojis",
    "slug": "GITHUB_GET_EMOJIS",
    "input_parameters": {
      "description": "Request schema for the `GetEmojis` action. This action does not require any parameters.",
      "properties": {},
      "title": "GetEmojisRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary where each key is an emoji name (e.g., 'smile') and the corresponding value is the URL of the emoji's image.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetEmojisResponseWrapper",
      "type": "object"
    },
    "description": "Lists all emojis available for use on github, including custom and unicode emojis.",
    "tags": ["Content Management", "readOnlyHint", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get feeds",
    "slug": "GITHUB_GET_FEEDS",
    "input_parameters": {
      "description": "Request schema for the `GetFeeds` action. This action does not require any request parameters.",
      "properties": {},
      "title": "GetFeedsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Dictionary of available GitHub feed URLs relevant to the authenticated user. Keys identify feed types (e.g., 'timeline', 'user', 'current_user_public', 'current_user_actor', 'security_advisories'), and values are their corresponding URLs or URI templates.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetFeedsResponseWrapper",
      "type": "object"
    },
    "description": "Fetches a list of available github feed urls for the authenticated user.",
    "tags": ["activity", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get GitHub Actions cache usage for an organization",
    "slug": "GITHUB_GET_GITHUB_ACTIONS_CACHE_USAGE_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for retrieving the GitHub Actions cache usage for a specific organization.",
      "properties": {
        "org": {
          "description": "Name of the organization (case-insensitive).",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org"],
      "title": "GetGithubActionsCacheUsageForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Summary of GitHub Actions cache usage for the organization, detailing metrics like `total_active_caches_count` and `total_active_caches_size_in_bytes`.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetGithubActionsCacheUsageForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves total github actions cache usage statistics for an organization, including active cache count and size across all repositories.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get github actions cache usage for a repository",
    "slug": "GITHUB_GET_GITHUB_ACTIONS_CACHE_USAGE_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for `GetGithubActionsCacheUsageForARepository`",
      "properties": {
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetGithubActionsCacheUsageForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the GitHub Actions cache usage statistics for the repository. This typically includes `active_caches_count` (the total number of active caches) and `active_caches_size_in_bytes` (the total size in bytes of all active caches).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetGithubActionsCacheUsageForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves the total count of active github actions caches and their combined size in bytes for a specified repository.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get github actions permissions for an organization",
    "slug": "GITHUB_GET_GITHUB_ACTIONS_PERMISSIONS_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request to retrieve GitHub Actions permissions for an organization.",
      "properties": {
        "org": {
          "description": "The name of the GitHub organization. This field is not case-sensitive.",
          "examples": ["github", "my-company-org"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org"],
      "title": "GetGithubActionsPermissionsForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetGithubActionsPermissionsForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Gets the github actions permissions for a specified organization, detailing repository enablement and allowed actions policies.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get GitHub Actions permissions for a repository",
    "slug": "GITHUB_GET_GITHUB_ACTIONS_PERMISSIONS_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Input schema for GetGithubActionsPermissionsForARepository.",
      "properties": {
        "owner": {
          "description": "The username of the account that owns the repository. This is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This is not case-sensitive.",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetGithubActionsPermissionsForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetGithubActionsPermissionsForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Gets the github actions permissions policy for a repository, including its enabled status and the scope of allowed actions.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get github meta information",
    "slug": "GITHUB_GET_GITHUB_META_INFORMATION",
    "input_parameters": {
      "description": "Request schema for `GetGithubMetaInformation`; does not require any request parameters.",
      "properties": {},
      "title": "GetGithubMetaInformationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "GitHub's metadata, including IP addresses (IPv4/IPv6) for services (e.g., hooks, web, API, git), domain names, and SSH key fingerprints. Example keys: 'verifiable_password_authentication', 'ssh_key_fingerprints', 'hooks', 'api', 'git', 'actions', 'domains'.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetGithubMetaInformationResponseWrapper",
      "type": "object"
    },
    "description": "Fetches github's publicly available metadata, useful for configuring network security policies or ip allow-listing.",
    "tags": ["meta", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get github pages build",
    "slug": "GITHUB_GET_GITHUB_PAGES_BUILD",
    "input_parameters": {
      "description": "Request schema for `GetGithubPagesBuild`",
      "properties": {
        "build_id": {
          "description": "The unique identifier of the GitHub Pages build to retrieve.",
          "examples": [12345, 98765],
          "title": "Build Id",
          "type": "integer"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife", "linguist"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "build_id"],
      "title": "GetGithubPagesBuildRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the details of the requested GitHub Pages build, including status, commit, duration, and any errors.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetGithubPagesBuildResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves detailed information about a specific github pages build for a repository, which must have github pages enabled.",
    "tags": ["openWorldHint", "readOnlyHint", "repos"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get information about a sarif upload",
    "slug": "GITHUB_GET_INFORMATION_ABOUT_A_SARIF_UPLOAD",
    "input_parameters": {
      "description": "Request schema for getting information about a SARIF upload.",
      "properties": {
        "owner": {
          "description": "Username of the account that owns the repository (not case-sensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (not case-sensitive).",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "sarif_id": {
          "description": "Unique identifier of the SARIF upload, returned when a SARIF file is successfully uploaded.",
          "examples": ["fb2cce85-340f-4d93-9498-26018bddd7eb"],
          "title": "Sarif Id",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "sarif_id"],
      "title": "GetInformationAboutASarifUploadRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details of the SARIF upload, including processing status (e.g., 'pending', 'complete', 'failed'), error messages, and the URL to analysis results.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetInformationAboutASarifUploadResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves detailed information, including processing status and results url, about a specific sarif (static analysis results interchange format) upload for a repository, uniquely identified by its sarif id.",
    "tags": ["code-scanning", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get interaction restrictions for an organization",
    "slug": "GITHUB_GET_INTERACTION_RESTRICTIONS_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for `GetInteractionRestrictionsForAnOrganization`",
      "properties": {
        "org": {
          "description": "The name of the organization. This name is not case-sensitive.",
          "examples": ["github"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org"],
      "title": "GetInteractionRestrictionsForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetInteractionRestrictionsForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves interaction restrictions for an organization, showing which github user types can interact with its public repositories and when restrictions expire; returns an empty response if no restrictions are set.",
    "tags": ["interactions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get interaction restrictions for a repository",
    "slug": "GITHUB_GET_INTERACTION_RESTRICTIONS_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for retrieving interaction restrictions for a repository.",
      "properties": {
        "owner": {
          "description": "The username of the account that owns the repository. This is case-insensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This is case-insensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetInteractionRestrictionsForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the interaction restrictions. Key fields typically include 'limit' (specifying the type of users allowed to interact, e.g., 'collaborators_only', 'contributors_only', 'existing_users'), 'origin' (indicating the source of the restriction, e.g., 'repository'), and 'expires_at' (the ISO 8601 timestamp for when the restriction expires).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetInteractionRestrictionsForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves active interaction restrictions for a repository, detailing which user groups are limited from activities like commenting or creating pull requests, and when these restrictions expire.",
    "tags": ["interactions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get interaction restrictions for public repositories",
    "slug": "GITHUB_GET_INTERACTION_RESTRICTIONS_FOR_YOUR_PUBLIC_REPOSITORIES",
    "input_parameters": {
      "description": "Request schema for `GetInteractionRestrictionsForYourPublicRepositories`. This action does not require any request parameters.",
      "properties": {},
      "title": "GetInteractionRestrictionsForYourPublicRepositoriesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the interaction restrictions. If restrictions are set, it typically includes 'limit' (e.g., 'collaborators_only'), 'origin', and 'expires_at'. An empty dictionary or a 204 No Content response may be returned if no restrictions are in place.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetInteractionRestrictionsForYourPublicRepositoriesResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves currently active interaction restrictions for the authenticated user's public repositories.",
    "tags": ["interactions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get large files",
    "slug": "GITHUB_GET_LARGE_FILES",
    "input_parameters": {
      "description": "Request schema for `GetLargeFiles`",
      "properties": {
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetLargeFilesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Information about files larger than 100MB identified during a repository import, including path, OID, and size.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetLargeFilesResponseWrapper",
      "type": "object"
    },
    "description": "Lists files larger than 100mb identified during a previous source import for the specified repository; this endpoint is deprecated and will be removed on april 12, 2024.",
    "tags": ["migrations", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get latest pages build",
    "slug": "GITHUB_GET_LATEST_PAGES_BUILD",
    "input_parameters": {
      "description": "Request schema for `GetLatestPagesBuild`",
      "properties": {
        "owner": {
          "description": "The username of the account or the name of the organization that owns the repository. This name is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the '.git' extension. This name is not case-sensitive.",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetLatestPagesBuildRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetLatestPagesBuildResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves information about the most recent github pages build for a repository, which must exist, be accessible, have github pages enabled, and have at least one prior build.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get octocat",
    "slug": "GITHUB_GET_OCTOCAT",
    "input_parameters": {
      "description": "Specifies an optional custom message for Octocat's speech bubble in the ASCII art.",
      "properties": {
        "s": {
          "description": "Custom message for Octocat's speech bubble. If omitted, a default or empty bubble may be shown.",
          "examples": ["Hello, Octocat!", "GitHub is awesome!", "Keep on coding!"],
          "title": "S",
          "type": "string"
        }
      },
      "title": "GetOctocatRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetOctocatResponseWrapper",
      "type": "object"
    },
    "description": "Fetches an ascii art representation of github's octocat, suitable for text-based displays.",
    "tags": ["meta", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get allowed actions and workflows for an org",
    "slug": "GITHUB_GET_ORG_ALLOWED_ACTIONS",
    "input_parameters": {
      "description": "Request schema for retrieving the settings for allowed actions and reusable workflows in an organization.",
      "properties": {
        "org": {
          "description": "The unique identifier or name of the organization. This field is not case sensitive.",
          "examples": ["my-organization", "github"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org"],
      "title": "GetAllowedActionsAndReusableWorkflowsForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary detailing the GitHub Actions permissions for the organization. It typically includes: 'github_owned_allowed' (boolean): Whether GitHub-owned actions are allowed. 'verified_allowed' (boolean): Whether actions from GitHub Marketplace verified creators are allowed. 'patterns_allowed' (list of strings): Specific actions or reusable workflows that are allowed, potentially using wildcards (e.g., 'actions/checkout@*', 'my-org/my-repo/.github/workflows/my-workflow.yml@*').",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAllowedActionsAndReusableWorkflowsForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves the github actions permissions policy, including allowed actions and reusable workflows, for a specified organization.",
    "tags": [
      "Access and Permissions",
      "readOnlyHint",
      "idempotentHint",
      "openWorldHint",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Get org dev environment secret safely",
    "slug": "GITHUB_GET_ORG_DEV_ENVIRONMENT_SECRET_SAFELY",
    "input_parameters": {
      "description": "Request schema for retrieving metadata for an organization's Codespaces secret.",
      "properties": {
        "org": {
          "description": "The unique identifier of the GitHub organization. This name is not case-sensitive.",
          "examples": ["my-organization"],
          "title": "Org",
          "type": "string"
        },
        "secret_name": {
          "description": "The name of the development environment secret to retrieve.",
          "examples": ["MY_API_KEY"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["org", "secret_name"],
      "title": "GetOrgDevEnvironmentSecretSafelyRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Metadata for the secret, including name, creation/update dates, and visibility; the encrypted value is not exposed. Keys include 'name', 'created_at', 'updated_at', 'visibility', and 'selected_repositories_url' if visibility is 'selected'.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetOrgDevEnvironmentSecretSafelyResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves metadata for a specific secret available to an organization's github codespaces without exposing its encrypted value.",
    "tags": ["codespaces", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get page views",
    "slug": "GITHUB_GET_PAGE_VIEWS",
    "input_parameters": {
      "description": "Request schema for retrieving repository page view statistics.",
      "properties": {
        "owner": {
          "description": "The username of the account that owns the repository. This field is case-insensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "per": {
          "default": "day",
          "description": "The time unit for which to aggregate page views.",
          "enum": ["day", "week"],
          "examples": ["day", "week"],
          "title": "Per",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is case-insensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetPageViewsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Page view traffic data for the repository over the last 14 days, detailing total views, unique visitors, and a list of 'views' objects, each with 'timestamp', 'count', and 'uniques' for that period.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetPageViewsResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves page view statistics for a repository over the last 14 days, including total views, unique visitors, and a daily or weekly breakdown.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get pending deployments for a workflow run",
    "slug": "GITHUB_GET_PENDING_DEPLOYMENTS_FOR_A_WORKFLOW_RUN",
    "input_parameters": {
      "description": "Request model for retrieving pending deployments for a specific workflow run.",
      "properties": {
        "owner": {
          "description": "Account owner of the repository (user or organization); not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension; not case-sensitive.",
          "examples": ["Spoon-Knife", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        },
        "run_id": {
          "description": "Unique numerical identifier of the workflow run.",
          "examples": ["12345", "67890"],
          "title": "Run Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "run_id"],
      "title": "GetPendingDeploymentsForAWorkflowRunRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response data containing pending deployment environments, typically as a list of objects awaiting approval due to protection rules.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetPendingDeploymentsForAWorkflowRunResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves pending deployment environments for a specific workflow run that are awaiting approval due to protection rules.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get project permission for a user",
    "slug": "GITHUB_GET_PROJECT_PERMISSION_FOR_A_USER",
    "input_parameters": {
      "description": "Request schema for retrieving a user's permission level for a specific GitHub project.",
      "properties": {
        "project_id": {
          "description": "The unique identifier of the project.",
          "examples": [1002604],
          "title": "Project Id",
          "type": "integer"
        },
        "username": {
          "description": "The GitHub username of the user whose permission is being checked.",
          "examples": ["octocat"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["project_id", "username"],
      "title": "GetProjectPermissionForAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the permission details for the user on the project. This typically includes a 'permission' field (e.g., 'read', 'write', 'admin', or 'none') and user information.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetProjectPermissionForAUserResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a collaborator's permission level (admin, write, read, or none) for an existing github project.",
    "tags": ["openWorldHint", "projects", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get public key for secret encryption",
    "slug": "GITHUB_GET_PUBLIC_KEY_FOR_SECRET_ENCRYPTION",
    "input_parameters": {
      "description": "Parameters to get a repository's public key for encrypting Codespaces secrets.",
      "properties": {
        "owner": {
          "description": "Username or organization name of the repository owner (not case-sensitive).",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension (not case-sensitive).",
          "examples": ["Spoon-Knife", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetPublicKeyForSecretEncryptionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Contains the public key (`key`) for encrypting GitHub Codespaces secrets, and its `key_id` used for identification when managing secrets.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetPublicKeyForSecretEncryptionResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a repository's public key for encrypting github codespaces secrets; requires `repo` scope or equivalent read access to codespaces secrets for private repositories.",
    "tags": ["codespaces", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get public key for the authenticated user",
    "slug": "GITHUB_GET_PUBLIC_KEY_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for retrieving the public key for the authenticated user, used for encrypting Codespaces secrets.",
      "properties": {},
      "title": "GetPublicKeyForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the public key information. It includes `key_id` (a unique string identifier for the public key) and `key` (the public key data, typically base64-encoded).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetPublicKeyForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves the authenticated user's public github key, used to encrypt secrets for github codespaces.",
    "tags": ["codespaces", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get pull request review protection",
    "slug": "GITHUB_GET_PULL_REQUEST_REVIEW_PROTECTION",
    "input_parameters": {
      "description": "Request schema for retrieving pull request review protection settings for a branch.",
      "properties": {
        "branch": {
          "description": "The name of the branch. Wildcard characters are not allowed. To use wildcard characters in branch names, refer to the GitHub GraphQL API.",
          "examples": ["main", "develop"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case-sensitive. For example, in 'octocat/Hello-World', 'octocat' is the owner.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive. For example, in 'octocat/Hello-World', 'Hello-World' is the repository name.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "GetPullRequestReviewProtectionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetPullRequestReviewProtectionResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves the pull request review protection settings for a specific branch in a github repository, if such protection is configured.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get rate limit status for the authenticated user",
    "slug": "GITHUB_GET_RATE_LIMIT_STATUS_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema to retrieve the GitHub API rate limit status for the authenticated user.",
      "properties": {},
      "title": "GetRateLimitStatusForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Provides the rate limit status. Includes a 'resources' object with limits for categories (e.g., 'core', 'search', 'graphql') and a 'rate' object for overall limits. Each contains 'limit', 'remaining', 'reset' (UTC epoch seconds), and 'used' values.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetRateLimitStatusForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves the authenticated user's current github api rate limit status, including usage and limits across different resource categories.",
    "tags": ["openWorldHint", "rate-limit", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get repository clones",
    "slug": "GITHUB_GET_REPOSITORY_CLONES",
    "input_parameters": {
      "description": "Request schema for retrieving repository clone statistics.",
      "properties": {
        "owner": {
          "description": "The username of the account that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "per": {
          "default": "day",
          "description": "Specifies the time frame for aggregating clone data: `day` for daily clone counts, or `week` for weekly clone counts (a week starts on Monday).",
          "enum": ["day", "week"],
          "examples": ["day", "week"],
          "title": "Per",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the '.git' extension. This field is not case-sensitive.",
          "examples": ["Hello-World", "mercury"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetRepositoryClonesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the clone traffic data. It includes 'count' (total clones in the period), 'uniques' (total unique cloners in the period), and a 'clones' list. Each item in the 'clones' list is an object with 'timestamp' (ISO 8601 format string for the start of the day or week), 'count' (clones for that specific period), and 'uniques' (unique cloners for that specific period).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetRepositoryClonesResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves the total number of clones and a breakdown of clone activity (daily or weekly) for a specified repository over the preceding 14 days.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get repository content",
    "slug": "GITHUB_GET_REPOSITORY_CONTENT",
    "input_parameters": {
      "description": "Request schema for retrieving content from a GitHub repository.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository. This name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "path": {
          "description": "The path to the content in the repository. This can be a file or a directory path.",
          "examples": ["README.md", "src/main.js", "docs"],
          "title": "Path",
          "type": "string"
        },
        "ref": {
          "description": "The name of the commit, branch, or tag. If not provided, the repository's default branch will be used.",
          "examples": ["main", "v1.2.0", "c8bca7c6a66f490c70b29cf3ac3d64070049ea73"],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "path"],
      "title": "GetRepositoryContentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the file content or directory metadata. If `path` points to a file, this dictionary includes keys such as `name`, `path`, `sha`, `size`, `type` ('file'), `content` (Base64 encoded string of the file's contents), and `download_url`. If `path` points to a directory, this dictionary represents metadata for the directory object itself (e.g., its `name`, `path`, `sha`, `type` ('dir')). Note: To list the actual items *within* a directory, a different API endpoint or action might be needed, as the GitHub API returns an array of items for directory listings.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetRepositoryContentResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a file's base64 encoded content or a directory's metadata (but not a listing of its contents) from a github repository path.",
    "tags": ["openWorldHint", "readOnlyHint", "idempotentHint", "repos", "important"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get repository permissions for a user",
    "slug": "GITHUB_GET_REPOSITORY_PERMISSIONS_FOR_A_USER",
    "input_parameters": {
      "description": "Request schema for `GetRepositoryPermissionsForAUser`",
      "properties": {
        "owner": {
          "description": "Account owner of the repository (case-insensitive).",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (case-insensitive).",
          "examples": ["Spoon-Knife", "my-repo-name"],
          "title": "Repo",
          "type": "string"
        },
        "username": {
          "description": "GitHub user's handle (case-insensitive).",
          "examples": ["octocat", "monalisa"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "username"],
      "title": "GetRepositoryPermissionsForAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Dictionary detailing the user's permission level (e.g., 'admin', 'write', 'read', 'none' under a 'permission' key) and potentially other details like 'role_name'.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetRepositoryPermissionsForAUserResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a specific user's permission level ('admin', 'write', 'read', or 'none') for a given repository, where 'maintain' role is reported as 'write' and 'triage' as 'read'.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get repository secret securely",
    "slug": "GITHUB_GET_REPOSITORY_SECRET_SECURELY",
    "input_parameters": {
      "description": "Request schema for retrieving a specific Dependabot secret from a repository.\nThis action fetches metadata about the secret, not its encrypted value.",
      "properties": {
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["hello-world", "my-private-repo"],
          "title": "Repo",
          "type": "string"
        },
        "secret_name": {
          "description": "The name of the Dependabot secret to retrieve.",
          "examples": ["NPM_TOKEN", "DOCKER_HUB_PASSWORD"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "secret_name"],
      "title": "GetRepositorySecretSecurelyRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the metadata of the secret, such as its name, creation date, and last update date. The encrypted value of the secret is not returned.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetRepositorySecretSecurelyResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves metadata for an existing dependabot secret in a repository, without exposing its encrypted value.",
    "tags": ["dependabot", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get repository development environment secret",
    "slug": "GITHUB_GET_REPO_DEV_ENV_SECRET",
    "input_parameters": {
      "description": "Request schema for retrieving a specific development environment secret for a repository.",
      "properties": {
        "owner": {
          "description": "The username or organization name that owns the repository. This field is case-insensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is case-insensitive. ",
          "examples": ["hello-world", "docs"],
          "title": "Repo",
          "type": "string"
        },
        "secret_name": {
          "description": "The name of the development environment secret to retrieve.",
          "examples": ["MY_API_KEY", "DATABASE_URL"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "secret_name"],
      "title": "GetRepoDevEnvSecretRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the details of the development environment secret. This includes `name` (string), `created_at` (ISO 8601 timestamp), and `updated_at` (ISO 8601 timestamp). The secret's actual value is not exposed.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetRepoDevEnvSecretResponseWrapper",
      "type": "object"
    },
    "description": "Gets metadata (name, creation/update timestamps) for a specific, existing development environment secret (codespaces secret) in a repository, without exposing its value.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Secrets", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get rules for a branch",
    "slug": "GITHUB_GET_RULES_FOR_A_BRANCH",
    "input_parameters": {
      "description": "Request schema for `GetRulesForABranch`",
      "properties": {
        "branch": {
          "description": "The name of the branch. Wildcard characters are not supported for this parameter; to use wildcards, refer to the GitHub GraphQL API.",
          "examples": ["main", "develop", "feature/new-login"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "The GitHub account owner of the repository. This name is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results to fetch.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Spoon-Knife", "my-repo"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "GetRulesForABranchRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response containing an array of active branch rule objects for the specified branch. Each object details a rule's type, parameters, and enforcement status. Excludes rules in 'evaluate' or 'disabled' status.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetRulesForABranchResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves all active rules for a specific branch in a github repository, excluding rules in 'evaluate' or 'disabled' status.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Branches", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get single org secret without decryption",
    "slug": "GITHUB_GET_SINGLE_ORG_SECRET_WITHOUT_DECRYPTION",
    "input_parameters": {
      "description": "Request schema for `GetSingleOrgSecretWithoutDecryption`",
      "properties": {
        "org": {
          "description": "The name of the GitHub organization. This field is case-insensitive.",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "secret_name": {
          "description": "The name of the Dependabot secret to retrieve.",
          "examples": ["MY_API_TOKEN"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["org", "secret_name"],
      "title": "GetSingleOrgSecretWithoutDecryptionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the metadata of the organization's Dependabot secret. This includes details such as the secret's name, creation date, update date, and visibility, but excludes its encrypted value.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetSingleOrgSecretWithoutDecryptionResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves metadata (e.g., name, creation/update timestamps, visibility) for an organization's dependabot secret, without its encrypted value.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Secrets", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get status checks protection",
    "slug": "GITHUB_GET_STATUS_CHECKS_PROTECTION",
    "input_parameters": {
      "description": "Request schema for retrieving the status check protection settings of a branch.",
      "properties": {
        "branch": {
          "description": "The name of the branch. Wildcard characters are not supported in branch names for this endpoint; for wildcard support, please refer to the GitHub GraphQL API.",
          "examples": ["main"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository (e.g., a GitHub username or organization name). This field is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "GetStatusChecksProtectionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the status check protection settings. This typically includes a `strict` boolean field (indicating if the branch must be up-to-date before merging) and a `contexts` array (listing the names of required status checks). It may also include a `checks` array if GitHub Apps are used for status checks.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetStatusChecksProtectionResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves the status check protection settings for a specific branch in a github repository, if status check protection is enabled for it.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Branches", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get teams with access to the protected branch",
    "slug": "GITHUB_GET_TEAMS_WITH_ACCESS_TO_THE_PROTECTED_BRANCH",
    "input_parameters": {
      "description": "Request to list teams with access to a protected branch.",
      "properties": {
        "branch": {
          "description": "Name of the branch; does not support wildcard characters (for wildcard support, use the GraphQL API).",
          "examples": ["main", "develop"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "Username of the repository owner; not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension; not case-sensitive.",
          "examples": ["Hello-World", "linguist"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "GetTeamsWithAccessToTheProtectedBranchRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetTeamsWithAccessToTheProtectedBranchResponseWrapper",
      "type": "object"
    },
    "description": "Lists teams with explicit push access to a protected branch, provided team restrictions are configured in the branch's protection settings; returns an empty list otherwise.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Teams", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get team membership for a user",
    "slug": "GITHUB_GET_TEAM_MEMBERSHIP_FOR_A_USER",
    "input_parameters": {
      "description": "Request schema for `GetTeamMembershipForAUser`",
      "properties": {
        "org": {
          "description": "The name of the GitHub organization. This field is not case-sensitive.",
          "examples": ["octo-org", "github"],
          "title": "Org",
          "type": "string"
        },
        "team_slug": {
          "description": "The URL-friendly version of the team name (slug).",
          "examples": ["justice-league", "all-developers"],
          "title": "Team Slug",
          "type": "string"
        },
        "username": {
          "description": "The GitHub username of the user.",
          "examples": ["octocat", "monalisa"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["org", "team_slug", "username"],
      "title": "GetTeamMembershipForAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the membership details of the user in the team. It includes the user's 'role' (e.g., 'member', 'maintainer') and 'state' (e.g., 'active', 'pending') within the team, along with a 'url' pointing to the membership resource.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetTeamMembershipForAUserResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a user's role and membership status within a specific team in an organization.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Teams"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get the authenticated user",
    "slug": "GITHUB_GET_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for `GetTheAuthenticatedUser`.",
      "properties": {},
      "title": "GetTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Authenticated user's profile information. Common fields include 'login', 'id', 'name', 'email'; contents vary by user settings.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Gets the profile information for the currently authenticated github user, including potentially private details based on user settings.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Users", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get the combined status for a specific reference",
    "slug": "GITHUB_GET_THE_COMBINED_STATUS_FOR_A_SPECIFIC_REFERENCE",
    "input_parameters": {
      "description": "Request schema for retrieving the combined status of a commit reference in a GitHub repository.",
      "properties": {
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number for the results to retrieve. See \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)\" for more information.",
          "examples": ["1", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of results to display per page, with a maximum of 100. Details on pagination can be found in \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "examples": ["30", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "ref": {
          "description": "The specific commit reference to query. This can be a commit SHA, a branch name (e.g., `heads/main`), or a tag name (e.g., `tags/v1.0.0`). See \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" for more details.",
          "examples": [
            "main",
            "heads/feature-branch",
            "tags/v1.0.0",
            "069c5735a24b09215071404c2a536657079d3aca"
          ],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "ref"],
      "title": "GetTheCombinedStatusForASpecificReferenceRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the combined status details for the specified reference. Key fields typically include `state` (the overall status: 'failure', 'pending', or 'success'), `statuses` (an array of individual status checks, each with its own context, state, and description), `sha` (the commit SHA), `total_count` (total number of status checks), and `repository` (information about the repository).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetTheCombinedStatusForASpecificReferenceResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves the aggregated commit status (e.g., success, failure, pending) from all checks for a specific reference (sha, branch, or tag) in a github repository.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Commits and Activity", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get the hourly commit count for each day",
    "slug": "GITHUB_GET_THE_HOURLY_COMMIT_COUNT_FOR_EACH_DAY",
    "input_parameters": {
      "description": "Request schema for retrieving the hourly commit count for each day of the week for a repository.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository. This is typically the username or organization name. The name is not case sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. The name is not case sensitive.",
          "examples": ["Spoon-Knife", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetTheHourlyCommitCountForEachDayRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the commit activity. The GitHub API for 'punch card' stats returns data as a list of lists, where each inner list typically contains `[day_of_week, hour_of_day, number_of_commits]`. For example, `[0, 14, 5]` would mean 5 commits on Sunday (day 0) during the 2 PM hour (hour 14). The structure within this dictionary may be an internal representation or aggregation of that raw list-based data from the API.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetTheHourlyCommitCountForEachDayResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves the 'punch card' data, showing hourly commit counts for each day of the week for an existing and accessible repository.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Commits and Activity", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get the last year of commit activity",
    "slug": "GITHUB_GET_THE_LAST_YEAR_OF_COMMIT_ACTIVITY",
    "input_parameters": {
      "description": "Request schema for retrieving the last year of commit activity for a repository.",
      "properties": {
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "kubernetes"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife", "kubernetes"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetTheLastYearOfCommitActivityRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary holding the commit activity for the repository's last 52 weeks, usually as a list of weekly stats. Each weekly stat details 'total' commits, 'week' (start timestamp), and 'days' (an array of commit counts from Sunday to Saturday).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetTheLastYearOfCommitActivityResponseWrapper",
      "type": "object"
    },
    "description": "Fetches weekly commit totals and daily commit counts for the last 52 weeks for a specified github repository.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Commits and Activity", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get the latest release",
    "slug": "GITHUB_GET_THE_LATEST_RELEASE",
    "input_parameters": {
      "description": "Request schema for retrieving the latest release of a GitHub repository.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository (e.g., a GitHub username or organization name). This field is not case-sensitive.",
          "examples": ["octocat", "kubernetes"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Hello-World", "community"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetTheLatestReleaseRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details of the latest GitHub release, including `tag_name`, name, body (release notes), `published_at`, assets, and author. For the complete structure, refer to the official GitHub API documentation.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetTheLatestReleaseResponseWrapper",
      "type": "object"
    },
    "description": "Fetches the latest official (non-prerelease, non-draft) release for a github repository; requires at least one such published release.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Repositories", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get the license for a repository",
    "slug": "GITHUB_GET_THE_LICENSE_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for `GetTheLicenseForARepository`",
      "properties": {
        "owner": {
          "description": "The account owner of the repository (username or organization name). This field is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "ref": {
          "description": "The specific Git reference (branch name, tag name, or commit SHA) to retrieve the license from. For a branch, it can be formatted as `refs/heads/<branch_name>` or simply `<branch_name>`. To reference a pull request's merge commit, use `refs/pull/<pull_number>/merge`. If omitted, the license from the repository's default branch is used.",
          "examples": [
            "main",
            "refs/heads/develop",
            "v1.2.3",
            "0c476bfc7EC7330390FCIF9761F27890123ABCD"
          ],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife", "linguist"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetTheLicenseForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the detailed license information for the repository. This typically includes fields like `name`, `path`, `sha`, `size`, `url`, `html_url`, `git_url`, `download_url`, `type`, `content` (Base64 encoded), `encoding`, and a `license` object with further details like `key`, `name`, `spdx_id`.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetTheLicenseForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves the license file and its details for a repository, optionally from a specific git reference (branch, tag, or commit sha).",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Repositories", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get the review history for a workflow run",
    "slug": "GITHUB_GET_THE_REVIEW_HISTORY_FOR_A_WORKFLOW_RUN",
    "input_parameters": {
      "description": "Request schema for `GetTheReviewHistoryForAWorkflowRun`",
      "properties": {
        "owner": {
          "description": "The username of the account or the name of the organization that owns the repository. This name is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        },
        "run_id": {
          "description": "The unique identifier of the workflow run for which to retrieve the review history.",
          "examples": [123456789],
          "title": "Run Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "run_id"],
      "title": "GetTheReviewHistoryForAWorkflowRunRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Information about each review within the workflow run: the environment requiring approval (e.g., name, ID), review state (e.g., 'approved', 'rejected', 'pending'), reviewer details, and any accompanying comments.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetTheReviewHistoryForAWorkflowRunResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves the detailed approval history for a specific workflow run in a github repository, detailing each review's environment, state, reviewer, and comments, to track the approval process for workflows, particularly automated deployments.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Workflows", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get the status of a GitHub Pages deployment",
    "slug": "GITHUB_GET_THE_STATUS_OF_A_GITHUB_PAGES_DEPLOYMENT",
    "input_parameters": {
      "description": "Request schema for `GetTheStatusOfAGithubPagesDeployment`",
      "properties": {
        "owner": {
          "description": "The account owner of the repository (username or organization name). This field is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "pages_deployment_id": {
          "description": "The unique identifier of the GitHub Pages deployment. This can be the numeric ID of the deployment or the commit SHA that triggered the deployment.",
          "examples": [42, "123abc456def789ghi012jkl345mno678pqr90st"],
          "title": "Pages Deployment Id",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "pages_deployment_id"],
      "title": "GetTheStatusOfAGithubPagesDeploymentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the details of the GitHub Pages deployment. Key fields typically include `id` (deployment ID), `status` (e.g., 'built', 'queued', 'in_progress', 'success', 'failure'), `page_url` (URL of the deployed site), `preview_url` (URL of the preview site, if applicable), `actor` (details of the user who triggered the deployment), `created_at`, and `updated_at`.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetTheStatusOfAGithubPagesDeploymentResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves the status of a specific github pages deployment for a repository, which must have github pages enabled.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Repositories", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get the weekly commit activity",
    "slug": "GITHUB_GET_THE_WEEKLY_COMMIT_ACTIVITY",
    "input_parameters": {
      "description": "Defines the request parameters for fetching weekly commit activity for a repository.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository (e.g., a user or organization). This name is not case-sensitive.",
          "examples": ["octocat", "kubernetes"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Spoon-Knife", "sig-release"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetTheWeeklyCommitActivityRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetTheWeeklyCommitActivityResponseWrapper",
      "type": "object"
    },
    "description": "Fetches the weekly commit activity (additions and deletions per week) for a repository over the past year; best for repositories with under 10,000 commits.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Commits and Activity", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get the weekly commit count",
    "slug": "GITHUB_GET_THE_WEEKLY_COMMIT_COUNT",
    "input_parameters": {
      "description": "Request schema for `GetTheWeeklyCommitCount`",
      "properties": {
        "owner": {
          "description": "The account owner of the repository. This name is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetTheWeeklyCommitCountRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the weekly commit count data for the last 52 weeks. It has two keys: 'all' and 'owner'. The value for 'all' is a list of integers representing the total number of commits from all contributors for each week. The value for 'owner' is a list of integers representing the number of commits from the repository owner for each week. Both lists are ordered from the oldest week to the most recent week.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetTheWeeklyCommitCountResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves the weekly commit count for a repository, detailing commits by the owner and all contributors over the last 52 weeks; github may return a 202 status or an empty response if statistics are being computed.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Commits and Activity", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get the zen of github",
    "slug": "GITHUB_GET_THE_ZEN_OF_GITHUB",
    "input_parameters": {
      "description": "Request model for retrieving a Zen of GitHub quote.",
      "properties": {},
      "title": "GetTheZenOfGithubRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetTheZenOfGithubResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a random quote from github's 'zen of github' collection, reflecting github's design philosophies and offering humorous insights, useful for displaying github wisdom or a lighthearted message.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "API", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get top referral paths",
    "slug": "GITHUB_GET_TOP_REFERRAL_PATHS",
    "input_parameters": {
      "description": "Request to fetch the top referral paths for a repository.",
      "properties": {
        "owner": {
          "description": "Username of the account or organization owning the repository (not case-sensitive).",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension (not case-sensitive).",
          "examples": ["Spoon-Knife", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetTopReferralPathsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Raw API response. Important: Despite the `t.Dict[str, t.Any]` type hint, the GitHub endpoint `/repos/{owner}/{repo}/traffic/popular/paths` returns a **list** of objects. Each object has `path`, `title`, `count` (total views, last 14 days), and `uniques` (unique visitors, last 14 days).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetTopReferralPathsResponseWrapper",
      "type": "object"
    },
    "description": "Fetches the top 10 most viewed content paths for a repository from the last 14 days.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Repositories", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get top referral sources",
    "slug": "GITHUB_GET_TOP_REFERRAL_SOURCES",
    "input_parameters": {
      "description": "Parameters to fetch top referral sources for a repository.",
      "properties": {
        "owner": {
          "description": "The username or organization name that owns the repository. This field is case-insensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is case-insensitive.",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetTopReferralSourcesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Referral data from the past 14 days, listing up to 10 sources with their domain ('referrer'), total views ('count'), and unique visitors ('uniques').",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetTopReferralSourcesResponseWrapper",
      "type": "object"
    },
    "description": "Fetches the top 10 websites that referred traffic to a repository within the last 14 days.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Repositories", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get users with access to the protected branch",
    "slug": "GITHUB_GET_USERS_WITH_ACCESS_TO_THE_PROTECTED_BRANCH",
    "input_parameters": {
      "description": "Request schema to list users with access to a protected branch.",
      "properties": {
        "branch": {
          "description": "The name of the protected branch. Wildcard characters are not supported. To use wildcard characters in branch names, refer to the GitHub GraphQL API.",
          "examples": ["main", "develop", "feature/integration"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository (e.g., user or organization). This name is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "GetUsersWithAccessToTheProtectedBranchRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetUsersWithAccessToTheProtectedBranchResponseWrapper",
      "type": "object"
    },
    "description": "Lists users with explicit push access to a protected branch, provided its protection rule restricts pushes to specific users.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Branches", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get workflow external access level",
    "slug": "GITHUB_GET_WORKFLOW_EXTERNAL_ACCESS",
    "input_parameters": {
      "description": "Request schema for `GetWorkflowExternalAccess` action, specifying the repository owner and name.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository. This name is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetWorkflowExternalAccessRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Access level settings, including the `access_level` (`none`, `user`, or `organization`), which specifies how workflows outside the repository can use actions and reusable workflows in this repository.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetWorkflowExternalAccessResponseWrapper",
      "type": "object"
    },
    "description": "Gets the access level settings for a private repository, determining how workflows outside this repository can use its actions and reusable workflows.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Workflows", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get workflow run usage",
    "slug": "GITHUB_GET_WORKFLOW_RUN_USAGE",
    "input_parameters": {
      "description": "Request schema for `GetWorkflowRunUsage`",
      "properties": {
        "owner": {
          "description": "Account owner of the repository (username or organization name); not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. ",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "run_id": {
          "description": "Unique identifier of the workflow run.",
          "examples": [123456789],
          "title": "Run Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "run_id"],
      "title": "GetWorkflowRunUsageRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetWorkflowRunUsageResponseWrapper",
      "type": "object"
    },
    "description": "Gets the billable time, in milliseconds, for a specific workflow run, detailing time spent on various operating systems.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Workflows", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get workflow usage",
    "slug": "GITHUB_GET_WORKFLOW_USAGE",
    "input_parameters": {
      "description": "Request schema for `GetWorkflowUsage`, providing details to identify the specific workflow.",
      "properties": {
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["hello-world", "my-project"],
          "title": "Repo",
          "type": "string"
        },
        "workflow_id": {
          "description": "The unique identifier (ID) of the workflow or the workflow's file name (e.g., 'main.yml').",
          "examples": [12345, "ci-workflow.yml"],
          "nullable": true,
          "title": "Workflow Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "workflow_id"],
      "title": "GetWorkflowUsageRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Workflow usage timing information, including total billable milliseconds for each runner environment (e.g., UBUNTU, MACOS, WINDOWS).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetWorkflowUsageResponseWrapper",
      "type": "object"
    },
    "description": "Gets the billable time (in milliseconds, broken down by runner os) for a specific workflow within a repository for the current billing cycle.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Workflows", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a gist",
    "slug": "GITHUB_GIST_S_CREATE",
    "input_parameters": {
      "description": "Request schema for `CreateAGist`",
      "properties": {
        "description": {
          "description": "Optional description for the gist.",
          "examples": ["My new Python utility functions", "Example of API usage"],
          "title": "Description",
          "type": "string"
        },
        "files": {
          "additionalProperties": { "additionalProperties": true, "type": "object" },
          "description": "Content for the gist's files. Dictionary where keys are filenames and values are objects, each having a `content` key with the file's raw string data.",
          "examples": [
            "{\"hello_world.txt\": {\"content\": \"Hello, Universe!\"}}",
            "{\"main.py\": {\"content\": \"def main():\\n    print(\\\"Executed\\\")\\nif __name__ == \\\"__main__\\\":\\n    main()\"}, \"README.md\": {\"content\": \"# My Gist\\nThis is a test gist.\"}}"
          ],
          "title": "Files",
          "type": "object"
        },
        "public": {
          "default": false,
          "description": "Indicates if the gist is public (`true`) or secret (`false`).",
          "examples": ["true", "false"],
          "title": "Public",
          "type": "boolean"
        }
      },
      "required": ["files"],
      "title": "CreateAGistRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAGistResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: use `create a gist` instead. creates a new github gist with specified files, content, an optional description, and public visibility.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "List public gists",
    "slug": "GITHUB_GIST_S_LIST_PUBLIC",
    "input_parameters": {
      "description": "Input model for the `ListPublicGists` action, defining parameters to filter and paginate public gists.",
      "properties": {
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch for pagination.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of gists to return per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "since": {
          "description": "Filters results to gists last updated at or after this ISO 8601 timestamp (e.g., `YYYY-MM-DDTHH:MM:SSZ`).",
          "examples": ["2023-01-15T00:00:00Z"],
          "title": "Since",
          "type": "string"
        }
      },
      "title": "ListPublicGistsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The data payload from the API response. For the `/gists/public` endpoint, GitHub returns a list of Gist objects.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListPublicGistsResponseWrapper",
      "type": "object"
    },
    "description": "(deprecated: use `list public gists` instead) lists public gists from github, optionally filtering by a 'since' timestamp and supporting pagination; results are generally newest first.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "Get GitHub API root",
    "slug": "GITHUB_GITHUB_API_ROOT",
    "input_parameters": {
      "description": "Request schema for retrieving the root endpoint details of the GitHub REST API.",
      "properties": {},
      "title": "GithubApiRootRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary where keys are descriptive names of GitHub API resources (e.g., 'current_user_url', 'emojis_url') and values are their corresponding API endpoint URLs or URL templates. This map serves as an entry point to discover various functionalities of the GitHub REST API.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GithubApiRootResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a map of all top-level github rest api resource urls and their templates.",
    "tags": ["meta", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get allowed actions and workflows for a repository",
    "slug": "GITHUB_GITHUB_GET_REPO_ALLOWED_ACTIONS",
    "input_parameters": {
      "description": "Request schema for `GetAllowedActionsAndReusableWorkflowsForARepository`",
      "properties": {
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetAllowedActionsAndReusableWorkflowsForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the configuration of allowed actions and reusable workflows for the repository. This typically includes fields such as `github_owned_allowed` (boolean, true if actions published by GitHub are allowed), `verified_allowed` (boolean, true if actions published by verified creators are allowed), and `patterns_allowed` (list of strings, specifying patterns of allowed actions and reusable workflows).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAllowedActionsAndReusableWorkflowsForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Gets the settings for allowed actions and reusable workflows that can be run in the specified repository.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Set custom labels for repo runner",
    "slug": "GITHUB_GITHUB_SET_REPO_RUNNER_LABELS",
    "input_parameters": {
      "description": "Request to set custom labels for a self-hosted runner in a repository.",
      "properties": {
        "labels": {
          "description": "Custom labels to set for the runner; an empty list removes all custom labels and replaces existing ones.",
          "examples": ["['prod-runner', 'gpu-enabled']", "['ci', 'testing']", "[]"],
          "items": { "properties": {}, "type": "string" },
          "title": "Labels",
          "type": "array"
        },
        "owner": {
          "description": "Account owner of the repository (not case-sensitive).",
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (not case-sensitive).",
          "title": "Repo",
          "type": "string"
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "title": "Runner Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "runner_id", "labels"],
      "title": "SetCustomLabelsForASelfHostedRunnerForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SetCustomLabelsForASelfHostedRunnerForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Replaces all custom labels for a specific self-hosted runner in a repository; an empty list for `labels` removes all existing custom labels.",
    "tags": ["actions", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create an issue",
    "slug": "GITHUB_ISSUES_CREATE",
    "input_parameters": {
      "description": "Request schema for creating a new issue in a GitHub repository.",
      "properties": {
        "assignee": {
          "description": "Login for the user to whom this issue should be assigned. NOTE: Only users with push access can set the assignee; it is silently dropped otherwise. **This field is deprecated in favor of `assignees`.**",
          "examples": ["octocat", "monalisa"],
          "title": "Assignee",
          "type": "string"
        },
        "assignees": {
          "description": "GitHub login names for users to assign to this issue. NOTE: Only users with push access can set assignees; they are silently dropped otherwise.",
          "examples": [["octocat"], ["monalisa", "hubot"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Assignees",
          "type": "array"
        },
        "body": {
          "description": "The detailed textual contents of the new issue.",
          "examples": [
            "Detailed description of the bug with steps to reproduce.",
            "I think adding a dark mode would improve user experience..."
          ],
          "title": "Body",
          "type": "string"
        },
        "labels": {
          "description": "Label names to associate with this issue (generally case-insensitive). NOTE: Only users with push access can set labels; they are silently dropped otherwise. Pass an empty list to clear all labels.",
          "examples": [["bug", "critical"], ["enhancement", "ui"], ["documentation"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Labels",
          "type": "array"
        },
        "milestone": {
          "description": "The ID of the milestone to associate this issue with (e.g., \"5\"). NOTE: Only users with push access can set the milestone; it is silently dropped otherwise.",
          "examples": ["1", "5"],
          "title": "Milestone",
          "type": "string"
        },
        "owner": {
          "description": "The GitHub account owner of the repository (case-insensitive).",
          "examples": ["octocat", "torvalds"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension (case-insensitive).",
          "examples": ["Spoon-Knife", "linux"],
          "title": "Repo",
          "type": "string"
        },
        "title": {
          "description": "The title for the new issue.",
          "examples": ["Found a critical bug", "Feature request: Add dark mode"],
          "title": "Title",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "title"],
      "title": "CreateAnIssueRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the full data representation of the newly created GitHub issue, including its ID, title, body, state, assignees, labels, etc.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAnIssueResponseWrapper",
      "type": "object"
    },
    "description": "(deprecated: use `create an issue` instead) creates a new issue in a github repository, provided issues are enabled and the user has sufficient permissions.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "Create an issue comment",
    "slug": "GITHUB_ISSUES_CREATE_COMMENT",
    "input_parameters": {
      "description": "Parameters to create a comment on a GitHub issue or pull request.",
      "properties": {
        "body": {
          "description": "Comment content in GitHub Flavored Markdown.",
          "examples": ["This is a **bold** comment!", "Thanks for the update :+1:", "Fixes #123"],
          "title": "Body",
          "type": "string"
        },
        "issue_number": {
          "description": "Number identifying the issue or pull request for the comment.",
          "examples": [42, 101],
          "title": "Issue Number",
          "type": "integer"
        },
        "owner": {
          "description": "Account owner of the repository (username or organization); not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository (without `.git` extension); not case-sensitive.",
          "examples": ["Spoon-Knife", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "issue_number", "body"],
      "title": "CreateAnIssueCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Full API response for the created issue comment, including ID, author, body, and timestamps.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAnIssueCommentResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: use `create an issue comment` to create a comment on an existing github issue or pull request.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "Get an issue",
    "slug": "GITHUB_ISSUES_GET",
    "input_parameters": {
      "description": "Request schema for `GetAnIssue`",
      "properties": {
        "issue_number": {
          "description": "The identifying number of the issue.",
          "examples": [1347],
          "title": "Issue Number",
          "type": "integer"
        },
        "owner": {
          "description": "Username of the account owning the repository. Not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository (without `.git` extension). Not case-sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "issue_number"],
      "title": "GetAnIssueRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the issue details. Key fields include 'id', 'node_id', 'url', 'repository_url', 'labels_url', 'comments_url', 'events_url', 'html_url', 'number', 'state', 'title', 'body', 'user', 'labels', 'assignee', 'assignees', 'milestone', 'locked', 'active_lock_reason', 'comments', 'pull_request', 'closed_at', 'created_at', 'updated_at', 'closed_by', 'author_association', 'state_reason', and 'reactions'. The API does not return custom fields.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAnIssueResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: use the `get an issue` action instead to retrieve details for a specific issue in a repository.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "List assignees",
    "slug": "GITHUB_ISSUES_LIST_ASSIGN_EES",
    "input_parameters": {
      "description": "Request schema to list assignees for a repository, including pagination.",
      "properties": {
        "owner": {
          "description": "The username of the account that owns the repository. This is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results (1-indexed).",
          "examples": ["1", "2"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page. Max 100.",
          "examples": ["30", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This is not case-sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListAssigneesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "List of user objects, each detailing a user assignable to issues (e.g., login, ID, avatar_url).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListAssigneesResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: use `list assignees`. lists users who can be assigned to issues in a repository, typically those with push access.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "List issue events for a repository",
    "slug": "GITHUB_ISSUES_LIST_EVENTS_FOR_REPO",
    "input_parameters": {
      "description": "Request to list issue events for a repository.",
      "properties": {
        "owner": {
          "description": "Account owner of the repository (username or organization name); case-insensitive.",
          "examples": ["octocat", "kubernetes"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for pagination.",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 1,
          "description": "Number of results per page (max 100).",
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension; case-insensitive.",
          "examples": ["Spoon-Knife", "minikube"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListIssueEventsForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Raw API response, typically a list of issue events.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListIssueEventsForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Lists all issue events for a specified repository. <<deprecated: this action is deprecated. use `list issue events for a repository` instead.>>",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "List repository issues",
    "slug": "GITHUB_ISSUES_LIST_FOR_REPO",
    "input_parameters": {
      "description": "Defines the parameters for the `ListRepositoryIssues` action, used to filter and paginate issues from a GitHub repository.",
      "properties": {
        "assignee": {
          "description": "Filter issues by assignee's username. Use 'none' for issues with no assignee, or '*' for issues assigned to any user.",
          "examples": ["codertocat", "none", "*"],
          "title": "Assignee",
          "type": "string"
        },
        "creator": {
          "description": "Filter issues by the username of the user who created the issue.",
          "examples": ["octocat"],
          "title": "Creator",
          "type": "string"
        },
        "direction": {
          "default": "desc",
          "description": "The direction of the sort.",
          "enum": ["asc", "desc"],
          "examples": ["asc", "desc"],
          "title": "Direction",
          "type": "string"
        },
        "labels": {
          "description": "A comma-separated list of label names to filter issues by. Example: 'bug,ui,@high'.",
          "examples": ["bug,ui,@high", "enhancement", "help wanted,good first issue"],
          "title": "Labels",
          "type": "string"
        },
        "mentioned": {
          "description": "Filter issues by a user mentioned in the issue's description or comments. Provide the username.",
          "examples": ["octodocs", "hubot"],
          "title": "Mentioned",
          "type": "string"
        },
        "milestone": {
          "description": "Filter issues by milestone. Provide the milestone `number` as a string, '*' for issues with any milestone, or 'none' for issues without a milestone.",
          "examples": ["1", "*", "none"],
          "title": "Milestone",
          "type": "string"
        },
        "owner": {
          "description": "The GitHub account owner of the repository. This name is not case-sensitive.",
          "examples": ["octocat", "microsoft"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for the set of results. Refer to GitHub's REST API documentation for pagination details.",
          "examples": ["1", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 1,
          "description": "Number of results per page (max 100). Refer to GitHub's REST API documentation for pagination details.",
          "examples": ["30", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Spoon-Knife", "vscode"],
          "title": "Repo",
          "type": "string"
        },
        "since": {
          "description": "Filters issues to include only those updated at or after the specified time. This should be a timestamp in ISO 8601 format (e.g., `YYYY-MM-DDTHH:MM:SSZ`).",
          "examples": ["2023-01-15T10:00:00Z", "2024-03-10T00:00:00+05:30"],
          "title": "Since",
          "type": "string"
        },
        "sort": {
          "default": "created",
          "description": "The field to sort the results by.",
          "enum": ["created", "updated", "comments"],
          "examples": ["created", "updated", "comments"],
          "title": "Sort",
          "type": "string"
        },
        "state": {
          "default": "open",
          "description": "Filters issues based on their state.",
          "enum": ["open", "closed", "all"],
          "examples": ["open", "closed", "all"],
          "title": "State",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListRepositoryIssuesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Parsed JSON response from GitHub API, typically a list of issues.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoryIssuesResponseWrapper",
      "type": "object"
    },
    "description": "Lists all issues (including pull requests) in a github repository; deprecated: use list repository issues.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "List accepted assignments for an assignment",
    "slug": "GITHUB_LIST_ACCEPTED_ASSIGNMENTS_FOR_AN_ASSIGNMENT",
    "input_parameters": {
      "description": "Request schema for `ListAcceptedAssignmentsForAnAssignment`",
      "properties": {
        "assignment_id": {
          "description": "The unique identifier of the classroom assignment for which to list accepted assignments.",
          "examples": ["12345"],
          "title": "Assignment Id",
          "type": "integer"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to retrieve.",
          "examples": ["1", "2"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results to return per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "required": ["assignment_id"],
      "title": "ListAcceptedAssignmentsForAnAssignmentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListAcceptedAssignmentsForAnAssignmentResponseWrapper",
      "type": "object"
    },
    "description": "Lists accepted assignments (student repositories created after acceptance) for an existing github classroom assignment, identified by its unique `assignment id`.",
    "tags": ["classroom", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List app installations for user token",
    "slug": "GITHUB_LIST_APP_INSTALLATIONS_ACCESSIBLE_TO_THE_USER_ACCESS_TOKEN",
    "input_parameters": {
      "description": "Request schema for `ListAppInstallationsAccessibleToTheUserAccessToken`",
      "properties": {
        "page": {
          "default": 1,
          "description": "Page number of results to retrieve.",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "title": "Per Page",
          "type": "integer"
        }
      },
      "title": "ListAppInstallationsAccessibleToTheUserAccessTokenRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Raw GitHub API response containing `total_count` of accessible installations and a list of `installations`, each with details like `id`, `account`, `app_id`, `permissions`, `repository_selection`, and `access_tokens_url`.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListAppInstallationsAccessibleToTheUserAccessTokenResponseWrapper",
      "type": "object"
    },
    "description": "Lists github app installations accessible to the authenticated user via their access token, including installation details, permissions, and repository access.",
    "tags": ["apps", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List artifacts for a repository",
    "slug": "GITHUB_LIST_ARTIFACTS_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for the `ListArtifactsForARepository` action, detailing parameters to list workflow artifacts from a GitHub repository.",
      "properties": {
        "name": {
          "description": "The name of an artifact. If specified, only artifacts with this exact name will be returned. If omitted or null, all artifacts in the repository are listed (subject to pagination).",
          "examples": ["my-build-artifact", "coverage-report-linux"],
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository (username or organization name). This field is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to fetch, starting from 1.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of artifacts to return per page; maximum is 100.",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Hello-World", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListArtifactsForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the raw JSON response from the GitHub API. This typically includes a 'total_count' field indicating the total number of artifacts and an 'artifacts' array, where each element is an object detailing a workflow artifact (e.g., its ID, name, size, creation date, and download URL).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListArtifactsForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Lists github actions workflow artifacts for a specified repository, which must exist.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List assigned issues for authenticated user",
    "slug": "GITHUB_LIST_ASSIGNED_ISSUES",
    "input_parameters": {
      "description": "Request schema for `ListUserAccountIssuesAssignedToTheAuthenticatedUser`",
      "properties": {
        "direction": {
          "default": "desc",
          "description": "Sort direction: `asc` (ascending) or `desc` (descending).",
          "enum": ["asc", "desc"],
          "examples": ["asc", "desc"],
          "title": "Direction",
          "type": "string"
        },
        "filter": {
          "default": "assigned",
          "description": "Filter by user interaction: `assigned` (issues assigned to the user), `created` (issues created by the user), `mentioned` (issues where the user is mentioned), `subscribed` (issues the user is subscribed to for updates), `repos` (all issues in repositories the user has access to, e.g., owned, member), or `all` (all issues the user can see, regardless of direct participation).",
          "enum": ["assigned", "created", "mentioned", "subscribed", "repos", "all"],
          "examples": ["assigned", "created", "mentioned", "subscribed", "repos", "all"],
          "title": "Filter",
          "type": "string"
        },
        "labels": {
          "description": "Comma-separated label names; issues must match *all* specified labels (e.g., `bug,ui,@high`).",
          "examples": ["bug,ui,@high", "enhancement", "documentation,help wanted"],
          "title": "Labels",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for paginated results.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "since": {
          "description": "Include issues last updated at or after this ISO 8601 timestamp (e.g., `YYYY-MM-DDTHH:MM:SSZ`).",
          "examples": ["2023-01-15T10:00:00Z", "2024-07-01T00:00:00+05:30"],
          "title": "Since",
          "type": "string"
        },
        "sort": {
          "default": "created",
          "description": "Sort field for issues: `created` (by creation date), `updated` (by last update date), or `comments` (by number of comments).",
          "enum": ["created", "updated", "comments"],
          "examples": ["created", "updated", "comments"],
          "title": "Sort",
          "type": "string"
        },
        "state": {
          "default": "open",
          "description": "Filter issues by state: `open`, `closed`, or `all`.",
          "enum": ["open", "closed", "all"],
          "examples": ["open", "closed", "all"],
          "title": "State",
          "type": "string"
        }
      },
      "title": "ListUserAccountIssuesAssignedToTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListUserAccountIssuesAssignedToTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists github issues for the authenticated user, defaulting to 'assigned' but filterable by other interactions, state, labels, and time, with sorting and pagination.",
    "tags": ["issues", "openWorldHint", "readOnlyHint", "idempotentHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List assignees",
    "slug": "GITHUB_LIST_ASSIGNEES",
    "input_parameters": {
      "description": "Request schema to list assignees for a repository, including pagination.",
      "properties": {
        "owner": {
          "description": "The username of the account that owns the repository. This is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results (1-indexed).",
          "examples": ["1", "2"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page. Max 100.",
          "examples": ["30", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This is not case-sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListAssigneesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "List of user objects, each detailing a user assignable to issues (e.g., login, ID, avatar_url).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListAssigneesResponseWrapper",
      "type": "object"
    },
    "description": "Lists users who can be assigned to issues in a repository, typically those with push access.",
    "tags": ["issues", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List assignments for a classroom",
    "slug": "GITHUB_LIST_ASSIGNMENTS_FOR_A_CLASSROOM",
    "input_parameters": {
      "description": "Request schema for `ListAssignmentsForAClassroom`",
      "properties": {
        "classroom_id": {
          "description": "The unique identifier of the classroom for which assignments are to be listed.",
          "examples": ["12345", "67890"],
          "title": "Classroom Id",
          "type": "integer"
        },
        "page": {
          "default": 1,
          "description": "Specifies the page number of the results to retrieve. For more information, refer to GitHub's documentation on [Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Specifies the number of results to return per page (maximum is 100). For more information, refer to GitHub's documentation on [Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "required": ["classroom_id"],
      "title": "ListAssignmentsForAClassroomRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The JSON response from the API. For this 'List Assignments' endpoint, this is expected to be a list of assignment objects. Each object details an assignment within the classroom, including attributes like ID, title, type (e.g., individual, group), invite link, and status.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListAssignmentsForAClassroomResponseWrapper",
      "type": "object"
    },
    "description": "Lists all assignments for a given github classroom `classroom id`; the classroom must exist and be accessible.",
    "tags": ["classroom", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List available machine types for a repository",
    "slug": "GITHUB_LIST_AVAILABLE_MACHINE_TYPES_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for listing available machine types for GitHub Codespaces in a repository.",
      "properties": {
        "client_ip": {
          "description": "An IP address used for auto-detecting the location if `location` is not specified. This is particularly useful when requests are proxied, to ensure location-based machine availability is accurate.",
          "title": "Client Ip",
          "type": "string"
        },
        "location": {
          "description": "The geographic location to check for available machine types. If not provided, the location may be inferred. Specifying a location can help find machines in a preferred region.",
          "examples": ["EastUs", "WestUs", "EuropeWest"],
          "title": "Location",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. This is typically the username (for personal repositories) or the organization name (for organization-owned repositories). The name is not case sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "ref": {
          "description": "The Git reference (branch name, tag name, or commit SHA) to check for prebuild availability and devcontainer configuration restrictions. This ensures listed machine types are compatible with the specified repository version.",
          "examples": ["main", "develop", "v1.0.0", "07a006b914801f699926087f317a910f07610547"],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. The name is not case sensitive.",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListAvailableMachineTypesForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The raw response from the API. Typically, this dictionary includes a 'total_count' of available machine types and a 'machines' array. Each element in the 'machines' array details a specific machine type, including its name, display name, CPU cores, memory, storage, and operating system.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListAvailableMachineTypesForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Lists machine types available for github codespaces in a repository, optionally using a git ref to check compatibility based on prebuild availability and devcontainer configurations.",
    "tags": ["codespaces", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List branches",
    "slug": "GITHUB_LIST_BRANCHES",
    "input_parameters": {
      "description": "Request schema for listing branches in a GitHub repository.",
      "properties": {
        "owner": {
          "description": "Account owner's username (case-insensitive).",
          "examples": ["octocat", "torvalds"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for paginated results.",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "title": "Per Page",
          "type": "integer"
        },
        "protected": {
          "description": "Filter by protection status: `true` for protected, `false` for unprotected; omit for all branches.",
          "title": "Protected",
          "type": "boolean"
        },
        "repo": {
          "description": "Repository name, excluding `.git` extension (case-insensitive).",
          "examples": ["Spoon-Knife", "linux"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListBranchesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response containing a list of branches, each with details like name, commit, and protection status.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListBranchesResponseWrapper",
      "type": "object"
    },
    "description": "Lists branches for an existing github repository, with an option to filter by protection status.",
    "tags": ["important", "openWorldHint", "readOnlyHint", "repos"]
  },
  {
    "available_versions": ["latest"],
    "name": "List branches for head commit",
    "slug": "GITHUB_LIST_BRANCHES_FOR_HEAD_COMMIT",
    "input_parameters": {
      "description": "Request schema to list branches where a specific commit is the head.",
      "properties": {
        "commit_sha": {
          "description": "The full SHA-1 hash of the commit. This action will find branches where this commit is the most recent one (the head).",
          "examples": [
            "c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc",
            "0123456789abcdef0123456789abcdef01234567"
          ],
          "title": "Commit Sha",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository (e.g., a user or organization). This name is not case-sensitive.",
          "examples": ["octocat", "my-github-org"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Hello-World", "my-repository"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "commit_sha"],
      "title": "ListBranchesForHeadCommitRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListBranchesForHeadCommitResponseWrapper",
      "type": "object"
    },
    "description": "Lists branches in an accessible repository where the provided commit sha is the head, useful for identifying development lines based on that commit.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List check runs for a git reference",
    "slug": "GITHUB_LIST_CHECK_RUNS_FOR_A_GIT_REFERENCE",
    "input_parameters": {
      "description": "Specifies the repository, Git reference, and optional filters for listing check runs.",
      "properties": {
        "app_id": {
          "description": "Filter check runs by the ID of the creating GitHub App.",
          "examples": [15368, 24032],
          "title": "App Id",
          "type": "integer"
        },
        "check_name": {
          "description": "Return only check runs with this specific name.",
          "examples": ["my-check-suite"],
          "title": "Check Name",
          "type": "string"
        },
        "filter": {
          "default": "latest",
          "description": "Filter logic for check runs: `latest` returns the most recent for each unique check name, `all` returns all.",
          "enum": ["latest", "all"],
          "examples": ["latest", "all"],
          "title": "Filter",
          "type": "string"
        },
        "owner": {
          "description": "Account owner of the repository (case-insensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch.",
          "examples": [1, 2, 3],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page for pagination (max 100).",
          "examples": [30, 50, 100],
          "title": "Per Page",
          "type": "integer"
        },
        "ref": {
          "description": "Git reference: a commit SHA, branch name (e.g., `heads/main`), or tag name (e.g., `tags/v1.0.0`).",
          "examples": [
            "main",
            "heads/develop",
            "tags/v1.2.3",
            "0c036a3586c193726887c0e79dc1ff94361176cb"
          ],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension (case-insensitive).",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "status": {
          "description": "Filter check runs by their status.",
          "enum": ["queued", "in_progress", "completed"],
          "title": "Status",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "ref"],
      "title": "ListCheckRunsForAGitReferenceRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Raw API response data, including check runs and their details.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListCheckRunsForAGitReferenceResponseWrapper",
      "type": "object"
    },
    "description": "Lists check runs for a given git reference within a repository; ensure the reference exists and the repository is accessible.",
    "tags": ["checks", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List check runs in a check suite",
    "slug": "GITHUB_LIST_CHECK_RUNS_IN_A_CHECK_SUITE",
    "input_parameters": {
      "description": "Request schema for `ListCheckRunsInACheckSuite`",
      "properties": {
        "check_name": {
          "description": "Filter check runs by this name; returns all names if omitted.",
          "examples": ["LinterTest", "unit-tests"],
          "title": "Check Name",
          "type": "string"
        },
        "check_suite_id": {
          "description": "Numeric ID of the check suite.",
          "examples": ["1234567890"],
          "title": "Check Suite Id",
          "type": "integer"
        },
        "filter": {
          "default": "latest",
          "description": "Filter by `completed_at` timestamp: 'latest' for most recent, 'all' for all check runs.",
          "enum": ["latest", "all"],
          "examples": ["latest", "all"],
          "title": "Filter",
          "type": "string"
        },
        "owner": {
          "description": "Username or organization name of the repository owner (case-insensitive).",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results to fetch (starts at 1).",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of check runs per page (max 100).",
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension (case-insensitive).",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        },
        "status": {
          "description": "Filter check runs by status; returns all statuses if omitted.",
          "enum": ["queued", "in_progress", "completed"],
          "examples": ["queued", "in_progress", "completed"],
          "title": "Status",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "check_suite_id"],
      "title": "ListCheckRunsInACheckSuiteRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response including `total_count` of matching check runs and an array `check_runs` detailing individual runs.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListCheckRunsInACheckSuiteResponseWrapper",
      "type": "object"
    },
    "description": "Lists check runs for a specific check suite in a github repository, optionally filtering by check name or status.",
    "tags": ["Check Suites & Runs", "openWorldHint", "readOnlyHint", "idempotentHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List check run annotations",
    "slug": "GITHUB_LIST_CHECK_RUN_ANNOTATIONS",
    "input_parameters": {
      "description": "Request schema for listing annotations for a check run in a GitHub repository.",
      "properties": {
        "check_run_id": {
          "description": "The unique identifier of the check run for which annotations are to be listed.",
          "examples": [21031067, 12345],
          "title": "Check Run Id",
          "type": "integer"
        },
        "owner": {
          "description": "The account owner of the repository. This is typically the username or organization name. The name is not case sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to fetch. See \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)\" for more details.",
          "examples": [1, 2, 5],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of results per page (maximum 100). See \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)\" for more details.",
          "examples": [30, 50, 100],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. The name is not case sensitive.",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "check_run_id"],
      "title": "ListCheckRunAnnotationsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "List of annotation objects detailing code points (e.g., lint errors, test failures). Key properties: `path`, `start_line`, `end_line`, `annotation_level` ('notice', 'warning', 'failure'), `message`, `title`.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListCheckRunAnnotationsResponseWrapper",
      "type": "object"
    },
    "description": "Lists annotations for a specific check run in a github repository, detailing issues like errors or warnings on particular code lines.",
    "tags": ["Check Suites & Runs", "openWorldHint", "readOnlyHint", "idempotentHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List check suites for a git reference",
    "slug": "GITHUB_LIST_CHECK_SUITES_FOR_A_GIT_REFERENCE",
    "input_parameters": {
      "description": "Request schema for `ListCheckSuitesForAGitReference`",
      "properties": {
        "app_id": {
          "description": "Filters check suites by the `id` of the GitHub App that created them. If omitted, check suites from all apps are returned.",
          "title": "App Id",
          "type": "integer"
        },
        "check_name": {
          "description": "Filters check suites by the name of a check run. Only check suites that contain at least one check run with this name will be returned. If omitted, check suites are not filtered by check run name.",
          "title": "Check Name",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository (username or organization name). This name is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results to fetch (1-indexed).",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "title": "Per Page",
          "type": "integer"
        },
        "ref": {
          "description": "Git reference (commit SHA, branch name like `heads/BRANCH_NAME` or `BRANCH_NAME`, or tag name like `tags/TAG_NAME` or `TAG_NAME`) to list check suites for.",
          "examples": [
            "main",
            "heads/feature-branch",
            "tags/v1.2.3",
            "066d8ef129c1eb7c2756098a52604399d4577551"
          ],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "ref"],
      "title": "ListCheckSuitesForAGitReferenceRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the API response. This typically includes `total_count`, an integer indicating the total number of check suites found that match the query, and `check_suites`, a list of check suite objects. Each check suite object provides details about the suite, such as its status, conclusion, and associated check runs.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListCheckSuitesForAGitReferenceResponseWrapper",
      "type": "object"
    },
    "description": "Lists check suites for a git reference (commit sha, branch, or tag) in a repository, optionally filtering by github app id or check run name.",
    "tags": ["Check Suites & Runs", "openWorldHint", "readOnlyHint", "idempotentHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List child teams",
    "slug": "GITHUB_LIST_CHILD_TEAMS",
    "input_parameters": {
      "description": "Request schema for listing immediate child teams of a parent team within an organization.",
      "properties": {
        "org": {
          "description": "The organization name (not case-sensitive).",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to retrieve.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "team_slug": {
          "description": "The slug (URL-friendly version) of the parent team's name.",
          "examples": ["justice-league"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug"],
      "title": "ListChildTeamsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The raw API response data, typically a list of child team objects.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListChildTeamsResponseWrapper",
      "type": "object"
    },
    "description": "Lists the immediate child teams of a parent team within an organization.",
    "tags": ["Teams", "openWorldHint", "readOnlyHint", "idempotentHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List classrooms",
    "slug": "GITHUB_LIST_CLASSROOMS",
    "input_parameters": {
      "description": "Pagination parameters for listing classrooms.",
      "properties": {
        "page": {
          "default": 1,
          "description": "Page number for the results.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "title": "ListClassroomsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListClassroomsResponseWrapper",
      "type": "object"
    },
    "description": "Lists github classrooms to which the authenticated user has administrative access.",
    "tags": [
      "Education and Classrooms",
      "openWorldHint",
      "readOnlyHint",
      "idempotentHint",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "List codeowners errors",
    "slug": "GITHUB_LIST_CODEOWNERS_ERRORS",
    "input_parameters": {
      "description": "Parameters to specify the repository and the ref for checking its CODEOWNERS file.",
      "properties": {
        "owner": {
          "description": "Username of the account owning the repository (not case-sensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "ref": {
          "description": "Branch name, tag, or commit SHA for the CODEOWNERS file; defaults to the repository's default branch if unspecified.",
          "examples": ["main", "v1.0.0", "c7615726cb55b377c824671ea10ea0e7c695b5f7"],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (not case-sensitive).",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListCodeownersErrorsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Dictionary, typically with an 'errors' key mapping to a list of syntax error objects (each detailing line, kind, and message). An empty list for 'errors' or a success message indicates no errors found.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListCodeownersErrorsResponseWrapper",
      "type": "object"
    },
    "description": "Lists syntax errors in a repository's codeowners file, which must be located at the root, `.github/`, or `docs/` directory for the specified ref.",
    "tags": ["Code Management", "openWorldHint", "readOnlyHint", "idempotentHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List codespaces for a user in organization",
    "slug": "GITHUB_LIST_CODESPACES_FOR_A_USER_IN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for `ListCodespacesForAUserInOrganization`",
      "properties": {
        "org": {
          "description": "Name of the GitHub organization (case-insensitive).",
          "examples": ["github", "my-company-org"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to retrieve (starts from 1).",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of codespaces to return per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "username": {
          "description": "GitHub username of the organization member.",
          "examples": ["octocat", "john-doe"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["org", "username"],
      "title": "ListCodespacesForAUserInOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListCodespacesForAUserInOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Lists all github codespaces owned by a specified member of a given organization.",
    "tags": ["Miscellaneous", "openWorldHint", "readOnlyHint", "idempotentHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List codespaces for the authenticated user",
    "slug": "GITHUB_LIST_CODESPACES_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Parameters for listing GitHub Codespaces accessible to the authenticated user.",
      "properties": {
        "page": {
          "default": 1,
          "description": "Page number for results (starts at 1). For pagination details, see: https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of codespaces per page (max 100). For pagination details, see: https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api.",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repository_id": {
          "description": "If provided, filters codespaces to this repository ID.",
          "examples": ["12345678", "98765432"],
          "title": "Repository Id",
          "type": "integer"
        }
      },
      "title": "ListCodespacesForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response including 'total_count' and a 'codespaces' list, where each codespace object has details like ID, name, state, and repository.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListCodespacesForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists github codespaces for the authenticated user, optionally filtering by repository id and supporting pagination.",
    "tags": ["Miscellaneous", "openWorldHint", "readOnlyHint", "idempotentHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List codespaces for the organization",
    "slug": "GITHUB_LIST_CODESPACES_FOR_THE_ORGANIZATION",
    "input_parameters": {
      "description": "Request to list Codespaces for a GitHub organization.",
      "properties": {
        "org": {
          "description": "Non-case-sensitive unique identifier of the GitHub organization.",
          "examples": ["github", "my-organization"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results. Details: '[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)'.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100). Details: '[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)'.",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "required": ["org"],
      "title": "ListCodespacesForTheOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response with `total_count` of organization codespaces and a `codespaces` list, each with full details.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListCodespacesForTheOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Lists active/pending github codespaces for an existing organization; admins list all, members list their own.",
    "tags": ["Miscellaneous", "openWorldHint", "readOnlyHint", "idempotentHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List CodeQL databases for a repository",
    "slug": "GITHUB_LIST_CODE_QL_DATABASES_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request model for listing CodeQL databases for a repository.",
      "properties": {
        "owner": {
          "description": "Username of the account owning the repository (not case-sensitive).",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (not case-sensitive).",
          "examples": ["hello-world", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListCodeQlDatabasesForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListCodeQlDatabasesForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Lists all codeql databases for a repository where codeql analysis has been previously run and completed.",
    "tags": ["Code Management", "openWorldHint", "readOnlyHint", "idempotentHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List code scanning alerts for an organization",
    "slug": "GITHUB_LIST_CODE_SCANNING_ALERTS_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Defines the parameters for listing code scanning alerts within a GitHub organization.",
      "properties": {
        "after": {
          "description": "A pagination cursor to retrieve results appearing after this.",
          "examples": ["Y3Vyc29yOnYyOpHAAexM3A=="],
          "title": "After",
          "type": "string"
        },
        "before": {
          "description": "A pagination cursor to retrieve results appearing before this.",
          "examples": ["Y3Vyc29yOnYyOpHPRb_PyQ=="],
          "title": "Before",
          "type": "string"
        },
        "direction": {
          "default": "desc",
          "description": "Sort direction.",
          "enum": ["asc", "desc"],
          "title": "Direction",
          "type": "string"
        },
        "org": {
          "description": "The GitHub organization name (case-insensitive).",
          "examples": ["github", "my-company-org"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for results. Used if `before` or `after` cursors are not provided.",
          "examples": ["1", "5", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "severity": {
          "description": "Filter alerts by severity.",
          "enum": ["critical", "high", "medium", "low", "warning", "note", "error"],
          "title": "Severity",
          "type": "string"
        },
        "sort": {
          "default": "created",
          "description": "Sort field.",
          "enum": ["created", "updated"],
          "title": "Sort",
          "type": "string"
        },
        "state": {
          "description": "Filter alerts by state.",
          "enum": ["open", "closed", "dismissed", "fixed"],
          "title": "State",
          "type": "string"
        },
        "tool_guid": {
          "description": "GUID of the code scanning tool. Some tools may not report a GUID. Cannot be used with `tool_name`.",
          "examples": ["cb192f00-main-32f9-4383-87e8-0f1813000619"],
          "title": "Tool Guid",
          "type": "string"
        },
        "tool_name": {
          "description": "Name of the code scanning tool (e.g., 'CodeQL'). Cannot be used with `tool_guid`.",
          "examples": ["CodeQL", "Snyk"],
          "title": "Tool Name",
          "type": "string"
        }
      },
      "required": ["org"],
      "title": "ListCodeScanningAlertsForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Raw JSON response from the GitHub API, typically a list of alert objects. Refer to GitHub API documentation for the alert object schema.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListCodeScanningAlertsForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Lists code scanning alerts for a github organization; use either `tool name` or `tool guid` if filtering by tool, not both.",
    "tags": ["Code Management", "openWorldHint", "readOnlyHint", "idempotentHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List code scanning alerts for a repository",
    "slug": "GITHUB_LIST_CODE_SCANNING_ALERTS_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for `ListCodeScanningAlertsForARepository`",
      "properties": {
        "direction": {
          "default": "desc",
          "description": "Sort direction: `asc` (ascending) or `desc` (descending).",
          "enum": ["asc", "desc"],
          "title": "Direction",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository (username or organization name); not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for paginated results, starting at 1.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "ref": {
          "description": "Git reference (branch, tag, or pull request merge reference, e.g., `refs/pull/42/merge`) for retrieving alerts; defaults to the repository's default branch if unspecified.",
          "examples": ["refs/heads/main", "develop", "refs/pull/123/merge"],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension; not case-sensitive.",
          "examples": ["Hello-World", "linguist"],
          "title": "Repo",
          "type": "string"
        },
        "severity": {
          "description": "Filters alerts by severity.",
          "enum": ["critical", "high", "medium", "low", "warning", "note", "error"],
          "title": "Severity",
          "type": "string"
        },
        "sort": {
          "default": "created",
          "description": "Sort property: `created` (alert creation time) or `updated` (last update time).",
          "enum": ["created", "updated"],
          "title": "Sort",
          "type": "string"
        },
        "state": {
          "description": "Filters alerts by state.",
          "enum": ["open", "closed", "dismissed", "fixed"],
          "title": "State",
          "type": "string"
        },
        "tool_guid": {
          "description": "The GUID of a code scanning tool to filter alerts by; use either `tool_guid` or `tool_name`, not both. Some tools may not provide a GUID.",
          "examples": ["01234567-89ab-cdef-0123-456789abcdef"],
          "title": "Tool Guid",
          "type": "string"
        },
        "tool_name": {
          "description": "The name of a code scanning tool to filter alerts by; use either `tool_name` or `tool_guid`, not both.",
          "examples": ["CodeQL", "Semgrep"],
          "title": "Tool Name",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListCodeScanningAlertsForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "List of code scanning alert objects matching the query, filters, and pagination.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListCodeScanningAlertsForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Lists code scanning alerts for a repository, optionally filtering by tool (which must have produced scan results for the repository), git reference, state, or severity.",
    "tags": ["Code Management", "openWorldHint", "readOnlyHint", "idempotentHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List code scanning analyses for a repository",
    "slug": "GITHUB_LIST_CODE_SCANNING_ANALYSES_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for `ListCodeScanningAnalysesForARepository`",
      "properties": {
        "direction": {
          "default": "desc",
          "description": "Direction to sort results. 'asc' for ascending, 'desc' for descending.",
          "enum": ["asc", "desc"],
          "title": "Direction",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case-sensitive.",
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to retrieve.",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results to return per page (maximum 100).",
          "title": "Per Page",
          "type": "integer"
        },
        "ref": {
          "description": "The Git reference for which to list analyses. This can be a branch name (e.g., 'main' or 'refs/heads/main') or a pull request merge reference (e.g., 'refs/pull/123/merge').",
          "examples": ["main", "refs/heads/develop", "refs/pull/42/merge"],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "title": "Repo",
          "type": "string"
        },
        "sarif_id": {
          "description": "Filter analyses to those associated with a specific SARIF upload ID.",
          "title": "Sarif Id",
          "type": "string"
        },
        "sort": {
          "default": "created",
          "description": "Property by which to sort the results. Currently, only 'created' is a supported sort field.",
          "enum": ["created"],
          "title": "Sort",
          "type": "string"
        },
        "tool_guid": {
          "description": "The GUID of a code scanning tool used to filter analyses. Only results from this tool will be listed. Some tools may not provide a GUID. Mutually exclusive with `tool_name`.",
          "examples": ["01234567-89ab-cdef-0123-456789abcdef"],
          "title": "Tool Guid",
          "type": "string"
        },
        "tool_name": {
          "description": "The name of a code scanning tool used to filter analyses. Only results from this tool will be listed. Mutually exclusive with `tool_guid`.",
          "examples": ["CodeQL", "Dependabot", "Snyk"],
          "title": "Tool Name",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListCodeScanningAnalysesForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListCodeScanningAnalysesForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Lists code scanning analyses for an existing repository, optionally filtering by tool (name or guid), git reference, or sarif id.",
    "tags": ["Code Management", "openWorldHint", "readOnlyHint", "idempotentHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List comments for a pull request review",
    "slug": "GITHUB_LIST_COMMENTS_FOR_A_PULL_REQUEST_REVIEW",
    "input_parameters": {
      "description": "Input model for listing comments on a pull request review.",
      "properties": {
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch. See GitHub's [pagination guide](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).",
          "examples": ["1"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of comments to retrieve per page (max 100). See GitHub's [pagination guide](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).",
          "examples": ["50"],
          "title": "Per Page",
          "type": "integer"
        },
        "pull_number": {
          "description": "The unique number that identifies the pull request within the repository.",
          "examples": ["123"],
          "title": "Pull Number",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        },
        "review_id": {
          "description": "The unique identifier of the pull request review.",
          "examples": ["42"],
          "title": "Review Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "pull_number", "review_id"],
      "title": "ListCommentsForAPullRequestReviewRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListCommentsForAPullRequestReviewResponseWrapper",
      "type": "object"
    },
    "description": "Lists all comments for a specific review on a github pull request.",
    "tags": ["Comments", "openWorldHint", "readOnlyHint", "idempotentHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List commits",
    "slug": "GITHUB_LIST_COMMITS",
    "input_parameters": {
      "description": "Request schema for `ListCommits`",
      "properties": {
        "author": {
          "description": "Filter commits by the commit author's GitHub login or email address.",
          "examples": ["octocat", "mona@github.com"],
          "title": "Author",
          "type": "string"
        },
        "committer": {
          "description": "Filter commits by the commit committer's GitHub login or email address. The committer is the user who applied the patch and may differ from the original author.",
          "examples": ["web-flow", "octocat@github.com"],
          "title": "Committer",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch when using pagination.",
          "examples": ["1", "2"],
          "title": "Page",
          "type": "integer"
        },
        "path": {
          "description": "Only commits modifying this specific file path will be returned.",
          "examples": ["README.md", "src/utils/helpers.py"],
          "title": "Path",
          "type": "string"
        },
        "per_page": {
          "default": 1,
          "description": "Number of results to return per page (max 100).",
          "examples": ["30", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "examples": ["Spoon-Knife", "my-project"],
          "title": "Repo",
          "type": "string"
        },
        "sha": {
          "description": "SHA hash or branch name to start listing commits from. If not provided, the GitHub API uses the repository's default branch (usually `main` or `master`).",
          "examples": ["main", "develop", "a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0"],
          "title": "Sha",
          "type": "string"
        },
        "since": {
          "description": "Only commits created on or after this timestamp will be returned. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "examples": ["2023-01-01T00:00:00Z"],
          "title": "Since",
          "type": "string"
        },
        "until": {
          "description": "Only commits created before this timestamp will be returned. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "examples": ["2023-12-31T23:59:59Z"],
          "title": "Until",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListCommitsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the API response, typically a list of commit objects and related information.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListCommitsResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves commits for a repository, optionally filtering by sha (must be valid commit sha or existing branch), path, author, committer, or date range.",
    "tags": ["Commits", "openWorldHint", "readOnlyHint", "idempotentHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "List commits on a pull request",
    "slug": "GITHUB_LIST_COMMITS_ON_A_PULL_REQUEST",
    "input_parameters": {
      "description": "Request schema for `ListCommitsOnAPullRequest`",
      "properties": {
        "owner": {
          "description": "Account owner of the repository. This name is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to fetch.",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of results per page (maximum 100).",
          "title": "Per Page",
          "type": "integer"
        },
        "pull_number": {
          "description": "The number that identifies the pull request.",
          "examples": [1347],
          "title": "Pull Number",
          "type": "integer"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "pull_number"],
      "title": "ListCommitsOnAPullRequestRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "List of commit objects for the pull request, including details such as SHA, author, committer, and message.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListCommitsOnAPullRequestResponseWrapper",
      "type": "object"
    },
    "description": "Lists commits for a pull request; requires the repository and pull request to exist and be accessible, and supports pagination.",
    "tags": ["Commits", "openWorldHint", "readOnlyHint", "idempotentHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "List commit comments",
    "slug": "GITHUB_LIST_COMMIT_COMMENTS",
    "input_parameters": {
      "description": "Request schema for listing comments on a specific commit in a repository.",
      "properties": {
        "commit_sha": {
          "description": "The SHA hash of the commit for which comments are to be listed.",
          "examples": ["a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0"],
          "title": "Commit Sha",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to retrieve. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of comments to return per page. Maximum value is 100. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "commit_sha"],
      "title": "ListCommitCommentsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A list of commit comments. Each comment object provides details such as its ID, author information (user), comment body, HTML URL, and creation/update timestamps.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListCommitCommentsResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves all comments for a specific commit in a github repository, supporting pagination.",
    "tags": ["Comments", "openWorldHint", "readOnlyHint", "idempotentHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "List commit comments for a repository",
    "slug": "GITHUB_LIST_COMMIT_COMMENTS_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for `ListCommitCommentsForARepository`",
      "properties": {
        "owner": {
          "description": "The account owner of the repository (not case-sensitive).",
          "examples": ["octocat", "kubernetes"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch (starts at 1).",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results to return per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension (not case-sensitive).",
          "examples": ["Spoon-Knife", "website"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListCommitCommentsForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListCommitCommentsForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Lists all commit comments for a specified repository, which must exist and be accessible.",
    "tags": ["Comments", "openWorldHint", "readOnlyHint", "idempotentHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List commit statuses for a reference",
    "slug": "GITHUB_LIST_COMMIT_STATUSES_FOR_A_REFERENCE",
    "input_parameters": {
      "description": "Request schema for `ListCommitStatusesForAReference`",
      "properties": {
        "owner": {
          "description": "The account owner of the repository. This name is not case sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results to retrieve.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "ref": {
          "description": "Commit reference: full commit SHA, branch name (e.g., `heads/BRANCH_NAME`), or tag name (e.g., `tags/TAG_NAME`).",
          "examples": [
            "main",
            "heads/develop",
            "tags/v1.0.0",
            "062ef244f2361c0357e0275612411ea438113401"
          ],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case sensitive.",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "ref"],
      "title": "ListCommitStatusesForAReferenceRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Contains the API response, typically a list of commit status objects. For detailed structure, refer to official GitHub API documentation.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListCommitStatusesForAReferenceResponseWrapper",
      "type": "object"
    },
    "description": "Lists commit statuses for a specific reference (commit sha, branch, or tag) in a repository, useful for tracking ci/test outcomes.",
    "tags": ["Commits", "openWorldHint", "readOnlyHint", "idempotentHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List custom property values for organization repositories",
    "slug": "GITHUB_LIST_CUSTOM_PROPERTY_VALUES_FOR_ORGANIZATION_REPOSITORIES",
    "input_parameters": {
      "description": "Request schema for listing custom property values for repositories in an organization.",
      "properties": {
        "org": {
          "description": "The name of the organization. This name is not case-sensitive.",
          "examples": ["octo-org", "github"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number for the set of results to retrieve. For more details, refer to the GitHub REST API documentation on pagination.",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of results to display per page (maximum 100). For more details, refer to the GitHub REST API documentation on pagination.",
          "title": "Per Page",
          "type": "integer"
        },
        "repository_query": {
          "description": "A query string to filter repositories within the organization. Uses GitHub's standard search syntax, including keywords and qualifiers (e.g., 'is:public', 'topic:security'). For detailed syntax, consult GitHub's documentation on constructing search queries and searching for repositories.",
          "examples": ["is:public language:python", "archived:false topic:javascript"],
          "title": "Repository Query",
          "type": "string"
        }
      },
      "required": ["org"],
      "title": "ListCustomPropertyValuesForOrganizationRepositoriesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The response from the API, typically a list of repository objects. Each object includes repository details (like `repository_id`, `repository_name`, `repository_full_name`) and a `properties` array listing its custom property names and their assigned values. Note: The API returns a list of objects, but the type hint is `t.Dict[str, t.Any]`; the data should be processed as a list of dictionaries where each dictionary represents a repository.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListCustomPropertyValuesForOrganizationRepositoriesResponseWrapper",
      "type": "object"
    },
    "description": "Lists custom property values for repositories in a specified, existing organization, optionally filtered by a repository query.",
    "tags": [
      "Copilot and Custom Properties",
      "openWorldHint",
      "readOnlyHint",
      "idempotentHint",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "List deliveries for an organization webhook",
    "slug": "GITHUB_LIST_DELIVERIES_FOR_AN_ORGANIZATION_WEBHOOK",
    "input_parameters": {
      "description": "Request schema for `ListDeliveriesForAnOrganizationWebhook`",
      "properties": {
        "cursor": {
          "description": "Pagination cursor specifying the starting delivery for the page.",
          "examples": ["vZHVyY29yOnYyOpHOB0hNaCJ6ZQ=="],
          "title": "Cursor",
          "type": "string"
        },
        "hook_id": {
          "description": "Unique identifier of the webhook.",
          "examples": [123456789],
          "title": "Hook Id",
          "type": "integer"
        },
        "org": {
          "description": "Name of the organization (case-insensitive).",
          "examples": ["github"],
          "title": "Org",
          "type": "string"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results to return per page (max 100).",
          "examples": [50],
          "title": "Per Page",
          "type": "integer"
        },
        "redelivery": {
          "description": "Filter for redeliveries: `true` for only redeliveries, `false` to exclude them.",
          "examples": [true],
          "title": "Redelivery",
          "type": "boolean"
        }
      },
      "required": ["org", "hook_id"],
      "title": "ListDeliveriesForAnOrganizationWebhookRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListDeliveriesForAnOrganizationWebhookResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a list of webhook deliveries for a specific webhook in an organization, allowing inspection of delivery history and details.",
    "tags": [
      "Webhooks and Deliveries",
      "openWorldHint",
      "readOnlyHint",
      "idempotentHint",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "List deliveries for a repository webhook",
    "slug": "GITHUB_LIST_DELIVERIES_FOR_A_REPOSITORY_WEBHOOK",
    "input_parameters": {
      "description": "Request schema for `ListDeliveriesForARepositoryWebhook`",
      "properties": {
        "cursor": {
          "description": "Specifies the starting delivery for pagination. The `Link` header in the response provides cursors for the next and previous pages.",
          "examples": ["dW5pbFRoZW5EYXRhbWF0aW9u"],
          "title": "Cursor",
          "type": "string"
        },
        "hook_id": {
          "description": "The unique identifier of the webhook. This ID can be found in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "examples": [123456789],
          "title": "Hook Id",
          "type": "integer"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This field is case-insensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "per_page": {
          "default": 30,
          "description": "Maximum 100 results per page. For more details, refer to \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)\".",
          "examples": [50],
          "title": "Per Page",
          "type": "integer"
        },
        "redelivery": {
          "description": "If set to `true`, the response will include the latest redelivery attempt for each delivery, rather than the original delivery.",
          "examples": [true],
          "title": "Redelivery",
          "type": "boolean"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is case-insensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "hook_id"],
      "title": "ListDeliveriesForARepositoryWebhookRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListDeliveriesForARepositoryWebhookResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves delivery attempts for a specific repository webhook to inspect its history; ensure the webhook id exists.",
    "tags": [
      "Webhooks and Deliveries",
      "openWorldHint",
      "readOnlyHint",
      "idempotentHint",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "List deployments",
    "slug": "GITHUB_LIST_DEPLOYMENTS",
    "input_parameters": {
      "description": "Defines the parameters for listing deployments in a repository.",
      "properties": {
        "environment": {
          "default": "none",
          "description": "Filter by the environment name to which deployed.",
          "examples": ["production", "staging", "development"],
          "title": "Environment",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to retrieve. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of results to display per page (maximum 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "title": "Per Page",
          "type": "integer"
        },
        "ref": {
          "default": "none",
          "description": "Filter by the ref name (branch, tag, or commit SHA).",
          "examples": [
            "main",
            "users/USERNAME/featureBranch",
            "v1.2.3",
            "c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc"
          ],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case sensitive.",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        },
        "sha": {
          "default": "none",
          "description": "Filter by the commit SHA recorded when the deployment was created.",
          "examples": [
            "c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc",
            "0000000000000000000000000000000000000000"
          ],
          "title": "Sha",
          "type": "string"
        },
        "task": {
          "default": "none",
          "description": "Filter by the task name specified for the deployment.",
          "examples": ["deploy", "deploy:migrations"],
          "title": "Task",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListDeploymentsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListDeploymentsResponseWrapper",
      "type": "object"
    },
    "description": "Lists deployments for a specified repository; repository must exist.",
    "tags": [
      "Deployments and Environments",
      "openWorldHint",
      "readOnlyHint",
      "idempotentHint",
      "important"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "List deployment branch policies",
    "slug": "GITHUB_LIST_DEPLOYMENT_BRANCH_POLICIES",
    "input_parameters": {
      "description": "Request to list deployment branch policies for a repository environment.",
      "properties": {
        "environment_name": {
          "description": "Name of the environment; URL encode if it contains special characters (e.g., slashes to `%2F`).",
          "examples": ["production", "staging%2Ffeature-x"],
          "title": "Environment Name",
          "type": "string"
        },
        "owner": {
          "description": "Account owner of the repository; not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results (starts at 1).",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension; not case sensitive.",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "environment_name"],
      "title": "ListDeploymentBranchPoliciesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Deployment branch policies, typically including 'total_count' and a 'branch_policies' array.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListDeploymentBranchPoliciesResponseWrapper",
      "type": "object"
    },
    "description": "Lists all deployment branch policies for a specified environment in a github repository.",
    "tags": [
      "Deployments and Environments",
      "openWorldHint",
      "readOnlyHint",
      "idempotentHint",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "List deployment statuses",
    "slug": "GITHUB_LIST_DEPLOYMENT_STATUSES",
    "input_parameters": {
      "description": "Request schema for retrieving the list of statuses for a specific deployment.",
      "properties": {
        "deployment_id": {
          "description": "The unique identifier of the deployment for which statuses are being requested.",
          "examples": [42],
          "title": "Deployment Id",
          "type": "integer"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch.",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (maximum 100).",
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. ",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "deployment_id"],
      "title": "ListDeploymentStatusesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the list of deployment statuses. The structure of this dictionary conforms to the GitHub API specification for deployment statuses.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListDeploymentStatusesResponseWrapper",
      "type": "object"
    },
    "description": "Lists all statuses for a given deployment in a repository.",
    "tags": [
      "Deployments and Environments",
      "openWorldHint",
      "readOnlyHint",
      "idempotentHint",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "List deploy keys",
    "slug": "GITHUB_LIST_DEPLOY_KEYS",
    "input_parameters": {
      "description": "Specifies the repository and pagination parameters for fetching deploy keys.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository. This name is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to fetch, starting from 1.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of deploy keys to return per page. Maximum value is 100.",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Hello-World", "my-internal-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListDeployKeysRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The GitHub API response containing a list of deploy key objects for the repository. Each object typically includes fields such as `id`, `key`, `title`, `url`, `verified`, `created_at`, and `read_only`.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListDeployKeysResponseWrapper",
      "type": "object"
    },
    "description": "Lists deploy ssh keys for a specified repository; the repository must exist.",
    "tags": ["Repositories", "openWorldHint", "readOnlyHint", "idempotentHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List discussions",
    "slug": "GITHUB_LIST_DISCUSSIONS",
    "input_parameters": {
      "description": "Request to list discussions for a team in an organization.",
      "properties": {
        "direction": {
          "default": "desc",
          "description": "Sort direction for results. Defaults to 'desc'.",
          "enum": ["asc", "desc"],
          "examples": ["asc", "desc"],
          "title": "Direction",
          "type": "string"
        },
        "org": {
          "description": "The organization's name (case-insensitive).",
          "examples": ["octo-org", "my-company"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for pagination. Defaults to 1.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100). Defaults to 30.",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "pinned": {
          "description": "Filter for pinned discussions (e.g., '1' or 'true'). Omit to not filter by pinned status.",
          "examples": ["1", "true"],
          "title": "Pinned",
          "type": "string"
        },
        "team_slug": {
          "description": "The team's slug (URL-friendly name).",
          "examples": ["justice-league", "engineering-team"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug"],
      "title": "ListDiscussionsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListDiscussionsResponseWrapper",
      "type": "object"
    },
    "description": "Lists discussions for a specific team within an organization, with options for sorting, pagination, and filtering by pinned status.",
    "tags": ["Discussions", "openWorldHint", "readOnlyHint", "idempotentHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List discussion comments",
    "slug": "GITHUB_LIST_DISCUSSION_COMMENTS",
    "input_parameters": {
      "description": "Input model for retrieving comments from a team discussion.",
      "properties": {
        "direction": {
          "default": "desc",
          "description": "Sort direction for comments: 'asc' (oldest first) or 'desc' (newest first).",
          "enum": ["asc", "desc"],
          "title": "Direction",
          "type": "string"
        },
        "discussion_number": {
          "description": "The unique number identifying the team discussion.",
          "examples": ["42", "153"],
          "title": "Discussion Number",
          "type": "integer"
        },
        "org": {
          "description": "The organization name (case-insensitive).",
          "examples": ["github", "octo-org"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results.",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of comments per page (max 100).",
          "title": "Per Page",
          "type": "integer"
        },
        "team_slug": {
          "description": "The team's slug (URL-friendly identifier).",
          "examples": ["justice-league", "developers"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug", "discussion_number"],
      "title": "ListDiscussionCommentsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response data containing an array of discussion comment objects.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListDiscussionCommentsResponseWrapper",
      "type": "object"
    },
    "description": "Lists all comments for a specific team discussion within an organization.",
    "tags": ["Discussions", "openWorldHint", "readOnlyHint", "idempotentHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List email addresses for the authenticated user",
    "slug": "GITHUB_LIST_EMAIL_ADDRESSES_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for listing email addresses for the authenticated user.",
      "properties": {
        "page": {
          "default": 1,
          "description": "Page number of the results to retrieve.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "title": "ListEmailAddressesForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListEmailAddressesForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists all email addresses for the authenticated user, including their primary status, verification status, and visibility.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Users", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List environments",
    "slug": "GITHUB_LIST_ENVIRONMENTS",
    "input_parameters": {
      "description": "Request schema for retrieving all deployment environments for a repository.",
      "properties": {
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to retrieve. Starts from 1.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of results to return per page. Maximum value is 100.",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["hello-world", "my-action-repo"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListEnvironmentsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the API response. It includes 'total_count' (the total number of environments) and 'environments' (a list of environment objects detailing each environment, including its name, ID, creation/update timestamps, and any protection rules).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListEnvironmentsResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves all deployment environments for a specified repository, which are used to configure protection rules and secrets for different software lifecycle stages.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List environment custom deployment rules",
    "slug": "GITHUB_LIST_ENVIRONMENT_CUSTOM_DEPLOYMENT_RULES",
    "input_parameters": {
      "description": "Request to list custom deployment protection rule integrations for a repository environment.",
      "properties": {
        "environment_name": {
          "description": "Name of the environment, which must be URL-encoded (e.g., slashes `/` replaced with `%2F`).",
          "examples": ["production", "staging%2Fdev", "feature%2Fnew-login"],
          "title": "Environment Name",
          "type": "string"
        },
        "owner": {
          "description": "Account owner of the repository (user or organization); not case-sensitive.",
          "examples": ["octocat", "my-organization", "user123"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch, starting from 1.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page, with a maximum of 100.",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension; not case-sensitive.",
          "examples": ["my-app", "web-platform", "DataProcessor"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["environment_name", "repo", "owner"],
      "title": "ListEnvironmentCustomDeploymentRulesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the API response. This typically includes `total_count` (the total number of custom deployment protection rule integrations available for the environment) and `integrations` (a list of integration objects, each detailing a custom deployment protection rule).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListEnvironmentCustomDeploymentRulesResponseWrapper",
      "type": "object"
    },
    "description": "Lists all custom deployment protection rule integrations for a repository environment; the `environment name` must be url-encoded.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List environment secrets",
    "slug": "GITHUB_LIST_ENVIRONMENT_SECRETS",
    "input_parameters": {
      "description": "Request schema for `ListEnvironmentSecrets`",
      "properties": {
        "environment_name": {
          "description": "Name of the environment; URL-encode if it contains special characters (e.g., '/' becomes '%2F').",
          "examples": ["production", "staging%2Fapp-server"],
          "title": "Environment Name",
          "type": "string"
        },
        "owner": {
          "description": "The account owner's username (case-insensitive).",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for results (1-indexed).",
          "examples": ["1", "2"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of secrets per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension (case-insensitive).",
          "examples": ["hello-world", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "environment_name"],
      "title": "ListEnvironmentSecretsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListEnvironmentSecretsResponseWrapper",
      "type": "object"
    },
    "description": "Lists the names and metadata (not values) of secrets for a specified, existing environment within an existing github repository.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List environment variables",
    "slug": "GITHUB_LIST_ENVIRONMENT_VARIABLES",
    "input_parameters": {
      "description": "Request schema for listing environment variables in a repository's environment.",
      "properties": {
        "environment_name": {
          "description": "The name of the environment. The name must be URL-encoded. For example, any slashes `/` in the name must be replaced with `%2F`. ",
          "examples": ["production", "development", "staging%2Fv1"],
          "title": "Environment Name",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository (e.g., a user or organization). This name is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch.",
          "examples": ["1", "2"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 10,
          "description": "Number of results per page (maximum 30).",
          "examples": ["10", "25", "30"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive. ",
          "examples": ["hello-world", "linguist"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "environment_name"],
      "title": "ListEnvironmentVariablesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response, typically including 'total_count' and a 'variables' list with details for each environment variable (e.g., 'name', 'value').",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListEnvironmentVariablesResponseWrapper",
      "type": "object"
    },
    "description": "Lists all environment variables, which are plaintext key-value pairs for github actions workflows, for a specified environment within a github repository.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List events for the authenticated user",
    "slug": "GITHUB_LIST_EVENTS_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for listing events for a specified GitHub user.",
      "properties": {
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch.",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of events to return per page (maximum 100).",
          "title": "Per Page",
          "type": "integer"
        },
        "username": {
          "description": "The GitHub username for whom to list events. For example, 'octocat' or 'torvalds'.",
          "examples": ["octocat", "torvalds"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["username"],
      "title": "ListEventsForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the list of events for the specified user.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListEventsForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists public events for the specified github user, or private events if authenticated as that user, in reverse chronological order.",
    "tags": ["activity", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List events received by the authenticated user",
    "slug": "GITHUB_LIST_EVENTS_RECEIVED_BY_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for listing events received by a GitHub user.",
      "properties": {
        "page": {
          "default": 1,
          "description": "Indicates the page number of the results to fetch. For more information, see GitHub's REST API pagination guide.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Specifies the number of events to return per page (maximum 100). For more information, see GitHub's REST API pagination guide.",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "username": {
          "description": "The GitHub username for whom to fetch received events.",
          "examples": ["octocat", "torvalds"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["username"],
      "title": "ListEventsReceivedByTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A list of event objects detailing activities (e.g., PushEvent, IssueCommentEvent), each including details like 'id', 'type', 'actor', 'repo', and a 'payload'.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListEventsReceivedByTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists events a specific github user received from followed users and watched repositories; returns private events if authenticated for `username`, otherwise public.",
    "tags": ["activity", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List followers of a user",
    "slug": "GITHUB_LIST_FOLLOWERS_OF_A_USER",
    "input_parameters": {
      "description": "Request schema for listing the followers of a specified GitHub user.",
      "properties": {
        "page": {
          "default": 1,
          "description": "Page number for pagination of results (starts at 1).",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (maximum 100). Used for pagination.",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "username": {
          "description": "The GitHub username (e.g., 'octocat', 'torvalds').",
          "examples": ["octocat", "torvalds"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["username"],
      "title": "ListFollowersOfAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListFollowersOfAUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists followers for a specified, existing github user.",
    "tags": ["openWorldHint", "readOnlyHint", "users", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List followers of the authenticated user",
    "slug": "GITHUB_LIST_FOLLOWERS_OF_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request model for listing followers of the authenticated user, allowing pagination.",
      "properties": {
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "title": "ListFollowersOfTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A list of user objects, where each object contains follower information (e.g., `login`, `id`). Refer to GitHub API documentation for user object structure.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListFollowersOfTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists users following the authenticated github user, returning an empty list if the user has no followers.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Users", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List forks",
    "slug": "GITHUB_LIST_FORKS",
    "input_parameters": {
      "description": "Parameters for listing repository forks.",
      "properties": {
        "owner": {
          "description": "The username of the account that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "microsoft"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to retrieve, used for pagination. Defaults to 1.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of fork results to return per page. Maximum value is 100. Defaults to 30.",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife", "vscode"],
          "title": "Repo",
          "type": "string"
        },
        "sort": {
          "default": "newest",
          "description": "The sort order for the returned forks. `stargazers` sorts by the number of stars. Defaults to `newest`.",
          "enum": ["newest", "oldest", "stargazers", "watchers"],
          "examples": ["newest", "oldest", "stargazers", "watchers"],
          "title": "Sort",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListForksRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary holding the raw response from the GitHub API. This typically contains an array of fork objects, each detailing a fork of the repository.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListForksResponseWrapper",
      "type": "object"
    },
    "description": "Lists forks for a specified repository, which must exist, with options for sorting and pagination.",
    "tags": ["openWorldHint", "readOnlyHint", "repos"]
  },
  {
    "available_versions": ["latest"],
    "name": "List gists for a user",
    "slug": "GITHUB_LIST_GISTS_FOR_A_USER",
    "input_parameters": {
      "description": "Request schema for `ListGistsForAUser`",
      "properties": {
        "page": {
          "default": 1,
          "description": "Indicates the page number of the results to retrieve.",
          "examples": [1, 2, 5],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Specifies the number of gists to return per page. Maximum value is 100.",
          "examples": [20, 50, 100],
          "title": "Per Page",
          "type": "integer"
        },
        "since": {
          "description": "Filters gists to those updated on or after this ISO 8601 timestamp (e.g., `YYYY-MM-DDTHH:MM:SSZ`).",
          "examples": ["2023-01-15T10:00:00Z"],
          "title": "Since",
          "type": "string"
        },
        "username": {
          "description": "The GitHub username of the user whose gists are to be listed.",
          "examples": ["octocat", "torvalds"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["username"],
      "title": "ListGistsForAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Raw JSON response from the API, typically a list of gists for the specified user. Each gist object usually includes details like 'id', 'html_url', 'files', 'public', 'created_at', 'description', and 'owner'.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListGistsForAUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists public gists for a specified github user.",
    "tags": ["gists", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List gists for the authenticated user",
    "slug": "GITHUB_LIST_GISTS_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for `ListGistsForTheAuthenticatedUser`",
      "properties": {
        "page": {
          "default": 1,
          "description": "Page number of results to retrieve.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of gists to return per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "since": {
          "description": "Filters gists to include only those updated at or after this ISO 8601 timestamp (e.g., `YYYY-MM-DDTHH:MM:SSZ`).",
          "examples": ["2023-01-01T00:00:00Z"],
          "title": "Since",
          "type": "string"
        }
      },
      "title": "ListGistsForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListGistsForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists gists for the authenticated user, with optional filtering by update time and pagination.",
    "tags": ["gists", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List gist comments",
    "slug": "GITHUB_LIST_GIST_COMMENTS",
    "input_parameters": {
      "description": "Request parameters to list comments on a GitHub Gist.",
      "properties": {
        "gist_id": {
          "description": "The unique identifier of the Gist for which comments are to be listed.",
          "examples": ["039c1767462645fe28f1489919486795"],
          "title": "Gist Id",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of comments to return per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "required": ["gist_id"],
      "title": "ListGistCommentsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A list of comment objects for the Gist, including details such as ID, author, content ('body'), and timestamps.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListGistCommentsResponseWrapper",
      "type": "object"
    },
    "description": "Lists comments for a specified github gist.",
    "tags": ["gists", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List gist commits",
    "slug": "GITHUB_LIST_GIST_COMMITS",
    "input_parameters": {
      "description": "Request schema for `ListGistCommits`",
      "properties": {
        "gist_id": {
          "description": "The unique identifier of the gist.",
          "examples": ["aa5a315d61ae9438b18d"],
          "title": "Gist Id",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch.",
          "examples": [1, 2, 3],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (maximum 100).",
          "examples": [30, 50, 100],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "required": ["gist_id"],
      "title": "ListGistCommitsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListGistCommitsResponseWrapper",
      "type": "object"
    },
    "description": "Lists all commits for a specified gist.",
    "tags": ["gists", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List gist forks",
    "slug": "GITHUB_LIST_GIST_FORKS",
    "input_parameters": {
      "description": "Request schema for listing forks of a GitHub gist.",
      "properties": {
        "gist_id": {
          "description": "The unique identifier (ID) of the gist for which to list forks.",
          "examples": ["aa5a315d61ae9438b18d", "gist_identifier_123"],
          "title": "Gist Id",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to retrieve, starting from 1. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of fork results to display per page. Maximum value is 100. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "required": ["gist_id"],
      "title": "ListGistForksRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The API response payload, containing the collection of gist forks. Each fork object provides details such as the forking user, URLs, and creation/update timestamps.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListGistForksResponseWrapper",
      "type": "object"
    },
    "description": "Lists all forks for a given github gist id.",
    "tags": ["gists", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List github actions caches for a repository",
    "slug": "GITHUB_LIST_GITHUB_ACTIONS_CACHES_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Parameters for listing GitHub Actions caches for a repository.",
      "properties": {
        "direction": {
          "default": "desc",
          "description": "Direction for sorting results: `asc` (ascending) or `desc` (descending).",
          "enum": ["asc", "desc"],
          "examples": ["asc", "desc"],
          "title": "Direction",
          "type": "string"
        },
        "key": {
          "description": "An explicit key or a prefix to filter caches that match the key or start with the prefix.",
          "examples": ["linux-npm-cache-", "runner-node-modules-"],
          "title": "Key",
          "type": "string"
        },
        "owner": {
          "description": "Username of the account owning the repository (case-insensitive).",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results to retrieve (starts from 1).",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of cache entries per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "ref": {
          "description": "Full Git reference for filtering caches (e.g., `refs/heads/<branch_name>` or `refs/pull/<pull_request_number>/merge`).",
          "examples": ["refs/heads/main", "refs/pull/123/merge"],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (case-insensitive).",
          "examples": ["hello-world", "my-repo-name"],
          "title": "Repo",
          "type": "string"
        },
        "sort": {
          "default": "last_accessed_at",
          "description": "Property for sorting results: `created_at` (creation time), `last_accessed_at` (last access time), or `size_in_bytes` (cache size).",
          "enum": ["created_at", "last_accessed_at", "size_in_bytes"],
          "examples": ["created_at", "last_accessed_at", "size_in_bytes"],
          "title": "Sort",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListGithubActionsCachesForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response payload containing `total_count` (total matching caches) and `actions_caches` (an array of cache objects).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListGithubActionsCachesForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Lists github actions caches for a repository, with options to filter by git reference or cache key, and to sort and paginate results.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List GitHub Pages builds",
    "slug": "GITHUB_LIST_GITHUB_PAGES_BUILDS",
    "input_parameters": {
      "description": "Request model for listing GitHub Pages builds for a repository. Specifies the repository and pagination parameters.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository (e.g., username or organization). This name is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" ",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" ",
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListGithubPagesBuildsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Contains GitHub Pages builds data, typically a list of build objects. For structure details, refer to the GitHub API documentation for 'List GitHub Pages builds'.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListGithubPagesBuildsResponseWrapper",
      "type": "object"
    },
    "description": "Lists github pages builds for a repository; github pages must be enabled on the repository for builds to be listed.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List global security advisories",
    "slug": "GITHUB_LIST_GLOBAL_SECURITY_ADVISORIES",
    "input_parameters": {
      "description": "Request schema for `ListGlobalSecurityAdvisories`",
      "properties": {
        "affects": {
          "description": "Filter by affected 'package' or 'package@version'. Max 100 items. Example: `affects=pkg1,pkg2@1.0.0`.",
          "items": { "properties": {}, "type": "string" },
          "title": "Affects",
          "type": "array"
        },
        "after": {
          "description": "Pagination cursor to retrieve results after this value.",
          "title": "After",
          "type": "string"
        },
        "before": {
          "description": "Pagination cursor to retrieve results before this value.",
          "title": "Before",
          "type": "string"
        },
        "cve_id": {
          "description": "Filter by Common Vulnerabilities and Exposures (CVE) identifier.",
          "title": "Cve Id",
          "type": "string"
        },
        "cwes": {
          "description": "Filter by Common Weakness Enumeration (CWE) identifiers. Accepts comma-separated string or multiple parameters. Example: `cwes=79,284`.",
          "items": { "properties": {}, "type": "string" },
          "title": "Cwes",
          "type": "array"
        },
        "direction": {
          "default": "desc",
          "description": "Sort direction for results (asc, desc).",
          "enum": ["asc", "desc"],
          "title": "Direction",
          "type": "string"
        },
        "ecosystem": {
          "description": "Filter by package ecosystem (e.g., npm, pip).",
          "enum": [
            "rubygems",
            "npm",
            "pip",
            "maven",
            "nuget",
            "composer",
            "go",
            "rust",
            "erlang",
            "actions",
            "pub",
            "other",
            "swift"
          ],
          "title": "Ecosystem",
          "type": "string"
        },
        "ghsa_id": {
          "description": "Filter by GitHub Security Advisory (GHSA) identifier.",
          "title": "Ghsa Id",
          "type": "string"
        },
        "is_withdrawn": {
          "description": "Filter for withdrawn advisories.",
          "title": "Is Withdrawn",
          "type": "boolean"
        },
        "modified": {
          "description": "Filter by last modification (update or publication) date or date range. For syntax, see GitHub's 'understanding the search syntax' documentation.",
          "title": "Modified",
          "type": "string"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "title": "Per Page",
          "type": "integer"
        },
        "published": {
          "description": "Filter by publication date or date range. For syntax, see GitHub's 'understanding the search syntax' documentation.",
          "title": "Published",
          "type": "string"
        },
        "severity": {
          "description": "Filter by advisory severity (e.g., high, critical).",
          "enum": ["unknown", "low", "medium", "high", "critical"],
          "title": "Severity",
          "type": "string"
        },
        "sort": {
          "default": "published",
          "description": "Property to sort results by (updated, published).",
          "enum": ["updated", "published"],
          "title": "Sort",
          "type": "string"
        },
        "type": {
          "default": "reviewed",
          "description": "Filter by advisory type (e.g., reviewed, malware). Defaults to 'reviewed'; if this default is active and no other search parameters are used, malware advisories are also excluded.",
          "enum": ["reviewed", "malware", "unreviewed"],
          "title": "Type",
          "type": "string"
        },
        "updated": {
          "description": "Filter by update date or date range. For syntax, see GitHub's 'understanding the search syntax' documentation.",
          "title": "Updated",
          "type": "string"
        }
      },
      "title": "ListGlobalSecurityAdvisoriesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListGlobalSecurityAdvisoriesResponseWrapper",
      "type": "object"
    },
    "description": "Lists github's global security advisories, filterable by various attributes including id, type, ecosystem, severity, and dates.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "List installation requests for the authenticated app",
    "slug": "GITHUB_LIST_INSTALLATION_REQUESTS_FOR_THE_AUTHENTICATED_APP",
    "input_parameters": {
      "description": "Request schema for listing pending installation requests for the authenticated GitHub App.",
      "properties": {
        "page": {
          "default": 1,
          "description": "Page number of the results to retrieve.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results to return per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "title": "ListInstallationRequestsForTheAuthenticatedAppRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListInstallationRequestsForTheAuthenticatedAppResponseWrapper",
      "type": "object"
    },
    "description": "Lists pending installation requests made by users or organizations for the authenticated github app.",
    "tags": ["apps", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List instances of a code scanning alert",
    "slug": "GITHUB_LIST_INSTANCES_OF_A_CODE_SCANNING_ALERT",
    "input_parameters": {
      "description": "Specifies the repository, alert number, and optional filters for listing code scanning alert instances.",
      "properties": {
        "alert_number": {
          "description": "The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. ",
          "examples": [42],
          "title": "Alert Number",
          "type": "integer"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" ",
          "examples": [1],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" ",
          "examples": [30],
          "title": "Per Page",
          "type": "integer"
        },
        "ref": {
          "description": "The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. ",
          "examples": ["refs/heads/main"],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. ",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "alert_number"],
      "title": "ListInstancesOfACodeScanningAlertRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListInstancesOfACodeScanningAlertResponseWrapper",
      "type": "object"
    },
    "description": "Lists all instances of a specific code scanning alert, optionally filtered by git ref; requires code scanning to be enabled on the repository.",
    "tags": ["code-scanning", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List issues for user",
    "slug": "GITHUB_LIST_ISSUES_ASSIGNED_TO_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "properties": {
        "collab": {
          "default": null,
          "description": "Filter for issues in collaborator repositories; behavior may vary.",
          "examples": ["true", "false"],
          "nullable": true,
          "title": "Collab",
          "type": "boolean"
        },
        "direction": {
          "default": "desc",
          "description": "Sort direction.",
          "examples": ["asc", "desc"],
          "nullable": true,
          "title": "Direction",
          "type": "string"
        },
        "filter": {
          "default": "assigned",
          "description": "Specifies the relationship for filtering issues (e.g., 'assigned', 'created').",
          "examples": ["assigned", "created", "mentioned", "subscribed", "all"],
          "nullable": true,
          "title": "Filter",
          "type": "string"
        },
        "labels": {
          "default": null,
          "description": "Comma-separated list of label names for filtering.",
          "examples": ["bug", "enhancement,docs", "priority:high"],
          "nullable": true,
          "title": "Labels",
          "type": "string"
        },
        "orgs": {
          "default": null,
          "description": "Filter for issues in user's organization repositories; behavior may vary.",
          "examples": ["true", "false"],
          "nullable": true,
          "title": "Orgs",
          "type": "boolean"
        },
        "owned": {
          "default": null,
          "description": "Filter for issues in user-owned repositories; behavior may vary.",
          "examples": ["true", "false"],
          "nullable": true,
          "title": "Owned",
          "type": "boolean"
        },
        "page": {
          "default": 1,
          "description": "Page number for results.",
          "examples": ["1", "2", "10"],
          "nullable": true,
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "examples": ["30", "50", "100"],
          "nullable": true,
          "title": "Per Page",
          "type": "integer"
        },
        "pulls": {
          "default": null,
          "description": "Filter for pull requests (true) or issues (false); behavior may vary as PRs are often included by default.",
          "examples": ["true", "false"],
          "nullable": true,
          "title": "Pulls",
          "type": "boolean"
        },
        "since": {
          "default": null,
          "description": "Return issues updated at or after this ISO 8601 timestamp (YYYY-MM-DDTHH:MM:SSZ).",
          "examples": ["2023-01-15T10:00:00Z"],
          "nullable": true,
          "title": "Since",
          "type": "string"
        },
        "sort": {
          "default": "created",
          "description": "Field to sort issues by.",
          "examples": ["created", "updated", "comments"],
          "nullable": true,
          "title": "Sort",
          "type": "string"
        },
        "state": {
          "default": "open",
          "description": "Filter issues by state (e.g., 'open', 'closed').",
          "examples": ["open", "closed", "all"],
          "nullable": true,
          "title": "State",
          "type": "string"
        }
      },
      "title": "ListIssuesForUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "issues": {
              "description": "List of issues matching the query criteria.",
              "items": {
                "properties": {
                  "active_lock_reason": {
                    "default": null,
                    "description": "Reason issue was locked; null if not locked or no reason.",
                    "nullable": true,
                    "title": "Active Lock Reason",
                    "type": "string"
                  },
                  "assignee": {
                    "additionalProperties": false,
                    "default": null,
                    "description": "User assigned to the issue; null if unassigned.",
                    "nullable": true,
                    "properties": {
                      "avatar_url": {
                        "default": null,
                        "description": "User's avatar image URL.",
                        "nullable": true,
                        "title": "Avatar Url",
                        "type": "string"
                      },
                      "events_url": {
                        "default": null,
                        "description": "API URL for user's performed events (e.g., `.../{/privacy}`).",
                        "nullable": true,
                        "title": "Events Url",
                        "type": "string"
                      },
                      "followers_url": {
                        "default": null,
                        "description": "User's followers API URL.",
                        "nullable": true,
                        "title": "Followers Url",
                        "type": "string"
                      },
                      "following_url": {
                        "default": null,
                        "description": "API URL for users this user is following (e.g., `.../{/other_user}`).",
                        "nullable": true,
                        "title": "Following Url",
                        "type": "string"
                      },
                      "gists_url": {
                        "default": null,
                        "description": "User's gists API URL (e.g., `.../{/gist_id}`).",
                        "nullable": true,
                        "title": "Gists Url",
                        "type": "string"
                      },
                      "gravatar_id": {
                        "default": null,
                        "description": "Gravatar ID; can be empty string.",
                        "nullable": true,
                        "title": "Gravatar Id",
                        "type": "string"
                      },
                      "html_url": {
                        "default": null,
                        "description": "User's GitHub HTML URL.",
                        "nullable": true,
                        "title": "Html Url",
                        "type": "string"
                      },
                      "id": {
                        "default": null,
                        "description": "Unique numerical identifier.",
                        "nullable": true,
                        "title": "Id",
                        "type": "integer"
                      },
                      "login": {
                        "default": null,
                        "description": "Unique login name.",
                        "nullable": true,
                        "title": "Login",
                        "type": "string"
                      },
                      "node_id": {
                        "default": null,
                        "description": "Globally unique identifier (Node ID).",
                        "nullable": true,
                        "title": "Node Id",
                        "type": "string"
                      },
                      "organizations_url": {
                        "default": null,
                        "description": "User's organizations API URL.",
                        "nullable": true,
                        "title": "Organizations Url",
                        "type": "string"
                      },
                      "received_events_url": {
                        "default": null,
                        "description": "API URL for user's received events.",
                        "nullable": true,
                        "title": "Received Events Url",
                        "type": "string"
                      },
                      "repos_url": {
                        "default": null,
                        "description": "User's repositories API URL.",
                        "nullable": true,
                        "title": "Repos Url",
                        "type": "string"
                      },
                      "site_admin": {
                        "default": null,
                        "description": "Indicates if user is a GitHub site administrator.",
                        "nullable": true,
                        "title": "Site Admin",
                        "type": "boolean"
                      },
                      "starred_url": {
                        "default": null,
                        "description": "API URL for user's starred repositories (e.g., `.../{/owner}{/repo}`).",
                        "nullable": true,
                        "title": "Starred Url",
                        "type": "string"
                      },
                      "subscriptions_url": {
                        "default": null,
                        "description": "User's subscriptions API URL.",
                        "nullable": true,
                        "title": "Subscriptions Url",
                        "type": "string"
                      },
                      "type": {
                        "default": null,
                        "description": "GitHub account type (e.g., 'User', 'Organization').",
                        "nullable": true,
                        "title": "Type",
                        "type": "string"
                      },
                      "url": {
                        "default": null,
                        "description": "User's REST API URL.",
                        "nullable": true,
                        "title": "Url",
                        "type": "string"
                      }
                    },
                    "title": "IssueUser",
                    "type": "object"
                  },
                  "assignees": {
                    "default": null,
                    "description": "List of users assigned to the issue.",
                    "items": {
                      "properties": {
                        "avatar_url": {
                          "default": null,
                          "description": "User's avatar image URL.",
                          "nullable": true,
                          "title": "Avatar Url",
                          "type": "string"
                        },
                        "events_url": {
                          "default": null,
                          "description": "API URL for user's performed events (e.g., `.../{/privacy}`).",
                          "nullable": true,
                          "title": "Events Url",
                          "type": "string"
                        },
                        "followers_url": {
                          "default": null,
                          "description": "User's followers API URL.",
                          "nullable": true,
                          "title": "Followers Url",
                          "type": "string"
                        },
                        "following_url": {
                          "default": null,
                          "description": "API URL for users this user is following (e.g., `.../{/other_user}`).",
                          "nullable": true,
                          "title": "Following Url",
                          "type": "string"
                        },
                        "gists_url": {
                          "default": null,
                          "description": "User's gists API URL (e.g., `.../{/gist_id}`).",
                          "nullable": true,
                          "title": "Gists Url",
                          "type": "string"
                        },
                        "gravatar_id": {
                          "default": null,
                          "description": "Gravatar ID; can be empty string.",
                          "nullable": true,
                          "title": "Gravatar Id",
                          "type": "string"
                        },
                        "html_url": {
                          "default": null,
                          "description": "User's GitHub HTML URL.",
                          "nullable": true,
                          "title": "Html Url",
                          "type": "string"
                        },
                        "id": {
                          "default": null,
                          "description": "Unique numerical identifier.",
                          "nullable": true,
                          "title": "Id",
                          "type": "integer"
                        },
                        "login": {
                          "default": null,
                          "description": "Unique login name.",
                          "nullable": true,
                          "title": "Login",
                          "type": "string"
                        },
                        "node_id": {
                          "default": null,
                          "description": "Globally unique identifier (Node ID).",
                          "nullable": true,
                          "title": "Node Id",
                          "type": "string"
                        },
                        "organizations_url": {
                          "default": null,
                          "description": "User's organizations API URL.",
                          "nullable": true,
                          "title": "Organizations Url",
                          "type": "string"
                        },
                        "received_events_url": {
                          "default": null,
                          "description": "API URL for user's received events.",
                          "nullable": true,
                          "title": "Received Events Url",
                          "type": "string"
                        },
                        "repos_url": {
                          "default": null,
                          "description": "User's repositories API URL.",
                          "nullable": true,
                          "title": "Repos Url",
                          "type": "string"
                        },
                        "site_admin": {
                          "default": null,
                          "description": "Indicates if user is a GitHub site administrator.",
                          "nullable": true,
                          "title": "Site Admin",
                          "type": "boolean"
                        },
                        "starred_url": {
                          "default": null,
                          "description": "API URL for user's starred repositories (e.g., `.../{/owner}{/repo}`).",
                          "nullable": true,
                          "title": "Starred Url",
                          "type": "string"
                        },
                        "subscriptions_url": {
                          "default": null,
                          "description": "User's subscriptions API URL.",
                          "nullable": true,
                          "title": "Subscriptions Url",
                          "type": "string"
                        },
                        "type": {
                          "default": null,
                          "description": "GitHub account type (e.g., 'User', 'Organization').",
                          "nullable": true,
                          "title": "Type",
                          "type": "string"
                        },
                        "url": {
                          "default": null,
                          "description": "User's REST API URL.",
                          "nullable": true,
                          "title": "Url",
                          "type": "string"
                        }
                      },
                      "title": "IssueUser",
                      "type": "object"
                    },
                    "nullable": true,
                    "title": "Assignees",
                    "type": "array"
                  },
                  "author_association": {
                    "default": null,
                    "description": "Author's relationship to the repository (e.g., 'OWNER', 'MEMBER').",
                    "nullable": true,
                    "title": "Author Association",
                    "type": "string"
                  },
                  "body": {
                    "default": null,
                    "description": "Main content/description; can be null.",
                    "nullable": true,
                    "title": "Body",
                    "type": "string"
                  },
                  "closed_at": {
                    "default": null,
                    "description": "Closure timestamp (ISO 8601: YYYY-MM-DDTHH:MM:SSZ); null if open.",
                    "nullable": true,
                    "title": "Closed At",
                    "type": "string"
                  },
                  "comments": {
                    "default": null,
                    "description": "Number of comments on the issue.",
                    "nullable": true,
                    "title": "Comments",
                    "type": "integer"
                  },
                  "comments_url": {
                    "default": null,
                    "description": "API URL for issue's comments.",
                    "nullable": true,
                    "title": "Comments Url",
                    "type": "string"
                  },
                  "created_at": {
                    "default": null,
                    "description": "Creation timestamp (ISO 8601: YYYY-MM-DDTHH:MM:SSZ).",
                    "nullable": true,
                    "title": "Created At",
                    "type": "string"
                  },
                  "events_url": {
                    "default": null,
                    "description": "API URL for issue's events.",
                    "nullable": true,
                    "title": "Events Url",
                    "type": "string"
                  },
                  "html_url": {
                    "default": null,
                    "description": "Issue's GitHub HTML URL.",
                    "nullable": true,
                    "title": "Html Url",
                    "type": "string"
                  },
                  "id": {
                    "default": null,
                    "description": "Unique numerical identifier.",
                    "nullable": true,
                    "title": "Id",
                    "type": "integer"
                  },
                  "labels": {
                    "default": null,
                    "description": "List of labels applied to the issue.",
                    "items": {
                      "properties": {
                        "color": {
                          "default": null,
                          "description": "Hexadecimal color code (no leading '#').",
                          "nullable": true,
                          "title": "Color",
                          "type": "string"
                        },
                        "default": {
                          "default": null,
                          "description": "Indicates if this is a default GitHub label.",
                          "nullable": true,
                          "title": "Default",
                          "type": "boolean"
                        },
                        "description": {
                          "default": null,
                          "description": "Short description; can be null.",
                          "nullable": true,
                          "title": "Description",
                          "type": "string"
                        },
                        "id": {
                          "default": null,
                          "description": "Unique numerical identifier.",
                          "nullable": true,
                          "title": "Id",
                          "type": "integer"
                        },
                        "name": {
                          "default": null,
                          "description": "Label name.",
                          "nullable": true,
                          "title": "Name",
                          "type": "string"
                        },
                        "node_id": {
                          "default": null,
                          "description": "Globally unique identifier (Node ID).",
                          "nullable": true,
                          "title": "Node Id",
                          "type": "string"
                        },
                        "url": {
                          "default": null,
                          "description": "Label's REST API URL.",
                          "nullable": true,
                          "title": "Url",
                          "type": "string"
                        }
                      },
                      "title": "IssueLabel",
                      "type": "object"
                    },
                    "nullable": true,
                    "title": "Labels",
                    "type": "array"
                  },
                  "labels_url": {
                    "default": null,
                    "description": "API URL for issue's labels (URI template).",
                    "nullable": true,
                    "title": "Labels Url",
                    "type": "string"
                  },
                  "locked": {
                    "default": null,
                    "description": "Indicates if issue is locked (prevents new comments).",
                    "nullable": true,
                    "title": "Locked",
                    "type": "boolean"
                  },
                  "milestone": {
                    "additionalProperties": false,
                    "default": null,
                    "description": "Associated milestone; null if not part of one.",
                    "nullable": true,
                    "properties": {
                      "closed_at": {
                        "default": null,
                        "description": "Closure timestamp (ISO 8601: YYYY-MM-DDTHH:MM:SSZ); null if open.",
                        "nullable": true,
                        "title": "Closed At",
                        "type": "string"
                      },
                      "closed_issues": {
                        "default": null,
                        "description": "Number of closed issues in milestone.",
                        "nullable": true,
                        "title": "Closed Issues",
                        "type": "integer"
                      },
                      "created_at": {
                        "default": null,
                        "description": "Creation timestamp (ISO 8601: YYYY-MM-DDTHH:MM:SSZ).",
                        "nullable": true,
                        "title": "Created At",
                        "type": "string"
                      },
                      "creator": {
                        "additionalProperties": false,
                        "default": null,
                        "description": "User who created the milestone.",
                        "nullable": true,
                        "properties": {
                          "avatar_url": {
                            "default": null,
                            "description": "User's avatar image URL.",
                            "nullable": true,
                            "title": "Avatar Url",
                            "type": "string"
                          },
                          "events_url": {
                            "default": null,
                            "description": "API URL for user's performed events (e.g., `.../{/privacy}`).",
                            "nullable": true,
                            "title": "Events Url",
                            "type": "string"
                          },
                          "followers_url": {
                            "default": null,
                            "description": "User's followers API URL.",
                            "nullable": true,
                            "title": "Followers Url",
                            "type": "string"
                          },
                          "following_url": {
                            "default": null,
                            "description": "API URL for users this user is following (e.g., `.../{/other_user}`).",
                            "nullable": true,
                            "title": "Following Url",
                            "type": "string"
                          },
                          "gists_url": {
                            "default": null,
                            "description": "User's gists API URL (e.g., `.../{/gist_id}`).",
                            "nullable": true,
                            "title": "Gists Url",
                            "type": "string"
                          },
                          "gravatar_id": {
                            "default": null,
                            "description": "Gravatar ID; can be empty string.",
                            "nullable": true,
                            "title": "Gravatar Id",
                            "type": "string"
                          },
                          "html_url": {
                            "default": null,
                            "description": "User's GitHub HTML URL.",
                            "nullable": true,
                            "title": "Html Url",
                            "type": "string"
                          },
                          "id": {
                            "default": null,
                            "description": "Unique numerical identifier.",
                            "nullable": true,
                            "title": "Id",
                            "type": "integer"
                          },
                          "login": {
                            "default": null,
                            "description": "Unique login name.",
                            "nullable": true,
                            "title": "Login",
                            "type": "string"
                          },
                          "node_id": {
                            "default": null,
                            "description": "Globally unique identifier (Node ID).",
                            "nullable": true,
                            "title": "Node Id",
                            "type": "string"
                          },
                          "organizations_url": {
                            "default": null,
                            "description": "User's organizations API URL.",
                            "nullable": true,
                            "title": "Organizations Url",
                            "type": "string"
                          },
                          "received_events_url": {
                            "default": null,
                            "description": "API URL for user's received events.",
                            "nullable": true,
                            "title": "Received Events Url",
                            "type": "string"
                          },
                          "repos_url": {
                            "default": null,
                            "description": "User's repositories API URL.",
                            "nullable": true,
                            "title": "Repos Url",
                            "type": "string"
                          },
                          "site_admin": {
                            "default": null,
                            "description": "Indicates if user is a GitHub site administrator.",
                            "nullable": true,
                            "title": "Site Admin",
                            "type": "boolean"
                          },
                          "starred_url": {
                            "default": null,
                            "description": "API URL for user's starred repositories (e.g., `.../{/owner}{/repo}`).",
                            "nullable": true,
                            "title": "Starred Url",
                            "type": "string"
                          },
                          "subscriptions_url": {
                            "default": null,
                            "description": "User's subscriptions API URL.",
                            "nullable": true,
                            "title": "Subscriptions Url",
                            "type": "string"
                          },
                          "type": {
                            "default": null,
                            "description": "GitHub account type (e.g., 'User', 'Organization').",
                            "nullable": true,
                            "title": "Type",
                            "type": "string"
                          },
                          "url": {
                            "default": null,
                            "description": "User's REST API URL.",
                            "nullable": true,
                            "title": "Url",
                            "type": "string"
                          }
                        },
                        "title": "IssueUser",
                        "type": "object"
                      },
                      "description": {
                        "default": null,
                        "description": "Description; can be null.",
                        "nullable": true,
                        "title": "Description",
                        "type": "string"
                      },
                      "due_on": {
                        "default": null,
                        "description": "Due date timestamp (ISO 8601: YYYY-MM-DDTHH:MM:SSZ); can be null.",
                        "nullable": true,
                        "title": "Due On",
                        "type": "string"
                      },
                      "html_url": {
                        "default": null,
                        "description": "Milestone's GitHub HTML URL.",
                        "nullable": true,
                        "title": "Html Url",
                        "type": "string"
                      },
                      "id": {
                        "default": null,
                        "description": "Unique numerical identifier.",
                        "nullable": true,
                        "title": "Id",
                        "type": "integer"
                      },
                      "labels_url": {
                        "default": null,
                        "description": "API URL for milestone's labels.",
                        "nullable": true,
                        "title": "Labels Url",
                        "type": "string"
                      },
                      "node_id": {
                        "default": null,
                        "description": "Globally unique identifier (Node ID).",
                        "nullable": true,
                        "title": "Node Id",
                        "type": "string"
                      },
                      "number": {
                        "default": null,
                        "description": "Repository-unique number for the milestone.",
                        "nullable": true,
                        "title": "Number",
                        "type": "integer"
                      },
                      "open_issues": {
                        "default": null,
                        "description": "Number of open issues in milestone.",
                        "nullable": true,
                        "title": "Open Issues",
                        "type": "integer"
                      },
                      "state": {
                        "default": null,
                        "description": "Milestone state (e.g., 'open', 'closed').",
                        "nullable": true,
                        "title": "State",
                        "type": "string"
                      },
                      "title": {
                        "default": null,
                        "description": "Milestone title.",
                        "nullable": true,
                        "title": "Title",
                        "type": "string"
                      },
                      "updated_at": {
                        "default": null,
                        "description": "Last update timestamp (ISO 8601: YYYY-MM-DDTHH:MM:SSZ).",
                        "nullable": true,
                        "title": "Updated At",
                        "type": "string"
                      },
                      "url": {
                        "default": null,
                        "description": "Milestone's REST API URL.",
                        "nullable": true,
                        "title": "Url",
                        "type": "string"
                      }
                    },
                    "title": "IssueMilestone",
                    "type": "object"
                  },
                  "node_id": {
                    "default": null,
                    "description": "Globally unique identifier (Node ID).",
                    "nullable": true,
                    "title": "Node Id",
                    "type": "string"
                  },
                  "number": {
                    "default": null,
                    "description": "Repository-unique issue number.",
                    "nullable": true,
                    "title": "Number",
                    "type": "integer"
                  },
                  "pull_request": {
                    "additionalProperties": false,
                    "default": null,
                    "description": "Details if issue is linked to a pull request; present if issue is a PR.",
                    "nullable": true,
                    "properties": {
                      "diff_url": {
                        "default": null,
                        "description": "Pull request's diff URL.",
                        "nullable": true,
                        "title": "Diff Url",
                        "type": "string"
                      },
                      "html_url": {
                        "default": null,
                        "description": "Pull request's GitHub HTML URL.",
                        "nullable": true,
                        "title": "Html Url",
                        "type": "string"
                      },
                      "patch_url": {
                        "default": null,
                        "description": "Pull request's patch URL.",
                        "nullable": true,
                        "title": "Patch Url",
                        "type": "string"
                      },
                      "url": {
                        "default": null,
                        "description": "Pull request's details REST API URL.",
                        "nullable": true,
                        "title": "Url",
                        "type": "string"
                      }
                    },
                    "title": "IssuePullRequest",
                    "type": "object"
                  },
                  "repository": {
                    "additionalProperties": false,
                    "default": null,
                    "description": "Repository to which this issue belongs.",
                    "nullable": true,
                    "properties": {
                      "description": {
                        "default": null,
                        "description": "Description; can be null.",
                        "nullable": true,
                        "title": "Description",
                        "type": "string"
                      },
                      "fork": {
                        "default": null,
                        "description": "Indicates if repository is a fork.",
                        "nullable": true,
                        "title": "Fork",
                        "type": "boolean"
                      },
                      "full_name": {
                        "default": null,
                        "description": "Full name in 'owner/name' format.",
                        "nullable": true,
                        "title": "Full Name",
                        "type": "string"
                      },
                      "html_url": {
                        "default": null,
                        "description": "Repository's GitHub HTML URL.",
                        "nullable": true,
                        "title": "Html Url",
                        "type": "string"
                      },
                      "id": {
                        "default": null,
                        "description": "Unique numerical identifier.",
                        "nullable": true,
                        "title": "Id",
                        "type": "integer"
                      },
                      "name": {
                        "default": null,
                        "description": "Repository name.",
                        "nullable": true,
                        "title": "Name",
                        "type": "string"
                      },
                      "node_id": {
                        "default": null,
                        "description": "Globally unique identifier (Node ID).",
                        "nullable": true,
                        "title": "Node Id",
                        "type": "string"
                      },
                      "private": {
                        "default": null,
                        "description": "Indicates if repository is private.",
                        "nullable": true,
                        "title": "Private",
                        "type": "boolean"
                      },
                      "url": {
                        "default": null,
                        "description": "Repository's REST API URL.",
                        "nullable": true,
                        "title": "Url",
                        "type": "string"
                      }
                    },
                    "title": "IssueRepository",
                    "type": "object"
                  },
                  "repository_url": {
                    "default": null,
                    "description": "Containing repository's REST API URL.",
                    "nullable": true,
                    "title": "Repository Url",
                    "type": "string"
                  },
                  "state": {
                    "default": null,
                    "description": "Issue state (e.g., 'open', 'closed').",
                    "nullable": true,
                    "title": "State",
                    "type": "string"
                  },
                  "title": {
                    "default": null,
                    "description": "Issue title.",
                    "nullable": true,
                    "title": "Title",
                    "type": "string"
                  },
                  "updated_at": {
                    "default": null,
                    "description": "Last update timestamp (ISO 8601: YYYY-MM-DDTHH:MM:SSZ).",
                    "nullable": true,
                    "title": "Updated At",
                    "type": "string"
                  },
                  "url": {
                    "default": null,
                    "description": "Issue's REST API URL.",
                    "nullable": true,
                    "title": "Url",
                    "type": "string"
                  },
                  "user": {
                    "additionalProperties": false,
                    "default": null,
                    "description": "User who created the issue.",
                    "nullable": true,
                    "properties": {
                      "avatar_url": {
                        "default": null,
                        "description": "User's avatar image URL.",
                        "nullable": true,
                        "title": "Avatar Url",
                        "type": "string"
                      },
                      "events_url": {
                        "default": null,
                        "description": "API URL for user's performed events (e.g., `.../{/privacy}`).",
                        "nullable": true,
                        "title": "Events Url",
                        "type": "string"
                      },
                      "followers_url": {
                        "default": null,
                        "description": "User's followers API URL.",
                        "nullable": true,
                        "title": "Followers Url",
                        "type": "string"
                      },
                      "following_url": {
                        "default": null,
                        "description": "API URL for users this user is following (e.g., `.../{/other_user}`).",
                        "nullable": true,
                        "title": "Following Url",
                        "type": "string"
                      },
                      "gists_url": {
                        "default": null,
                        "description": "User's gists API URL (e.g., `.../{/gist_id}`).",
                        "nullable": true,
                        "title": "Gists Url",
                        "type": "string"
                      },
                      "gravatar_id": {
                        "default": null,
                        "description": "Gravatar ID; can be empty string.",
                        "nullable": true,
                        "title": "Gravatar Id",
                        "type": "string"
                      },
                      "html_url": {
                        "default": null,
                        "description": "User's GitHub HTML URL.",
                        "nullable": true,
                        "title": "Html Url",
                        "type": "string"
                      },
                      "id": {
                        "default": null,
                        "description": "Unique numerical identifier.",
                        "nullable": true,
                        "title": "Id",
                        "type": "integer"
                      },
                      "login": {
                        "default": null,
                        "description": "Unique login name.",
                        "nullable": true,
                        "title": "Login",
                        "type": "string"
                      },
                      "node_id": {
                        "default": null,
                        "description": "Globally unique identifier (Node ID).",
                        "nullable": true,
                        "title": "Node Id",
                        "type": "string"
                      },
                      "organizations_url": {
                        "default": null,
                        "description": "User's organizations API URL.",
                        "nullable": true,
                        "title": "Organizations Url",
                        "type": "string"
                      },
                      "received_events_url": {
                        "default": null,
                        "description": "API URL for user's received events.",
                        "nullable": true,
                        "title": "Received Events Url",
                        "type": "string"
                      },
                      "repos_url": {
                        "default": null,
                        "description": "User's repositories API URL.",
                        "nullable": true,
                        "title": "Repos Url",
                        "type": "string"
                      },
                      "site_admin": {
                        "default": null,
                        "description": "Indicates if user is a GitHub site administrator.",
                        "nullable": true,
                        "title": "Site Admin",
                        "type": "boolean"
                      },
                      "starred_url": {
                        "default": null,
                        "description": "API URL for user's starred repositories (e.g., `.../{/owner}{/repo}`).",
                        "nullable": true,
                        "title": "Starred Url",
                        "type": "string"
                      },
                      "subscriptions_url": {
                        "default": null,
                        "description": "User's subscriptions API URL.",
                        "nullable": true,
                        "title": "Subscriptions Url",
                        "type": "string"
                      },
                      "type": {
                        "default": null,
                        "description": "GitHub account type (e.g., 'User', 'Organization').",
                        "nullable": true,
                        "title": "Type",
                        "type": "string"
                      },
                      "url": {
                        "default": null,
                        "description": "User's REST API URL.",
                        "nullable": true,
                        "title": "Url",
                        "type": "string"
                      }
                    },
                    "title": "IssueUser",
                    "type": "object"
                  }
                },
                "title": "IssueItem",
                "type": "object"
              },
              "title": "Issues",
              "type": "array"
            }
          },
          "required": ["issues"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListIssuesForUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists github issues for the authenticated user across visible repositories, with filtering by user relationship, state, labels, an iso 8601 `since` timestamp (yyyy-mm-ddthh:mm:ssz), and sorting options; pull requests are typically included.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List issue comments",
    "slug": "GITHUB_LIST_ISSUE_COMMENTS",
    "input_parameters": {
      "description": "Request parameters to list comments on a GitHub issue.",
      "properties": {
        "issue_number": {
          "description": "Number that identifies the issue.",
          "examples": ["42", "101"],
          "title": "Issue Number",
          "type": "integer"
        },
        "owner": {
          "description": "Username of the account owning the repository (not case-sensitive).",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to retrieve.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of comments to return per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (not case-sensitive).",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        },
        "since": {
          "description": "Filters comments to include only those updated at or after this ISO 8601 timestamp (e.g., `YYYY-MM-DDTHH:MM:SSZ`).",
          "examples": ["2023-01-01T00:00:00Z"],
          "title": "Since",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "issue_number"],
      "title": "ListIssueCommentsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListIssueCommentsResponseWrapper",
      "type": "object"
    },
    "description": "Lists comments for a specified issue in a github repository.",
    "tags": ["issues", "openWorldHint", "readOnlyHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "List issue comments for a repository",
    "slug": "GITHUB_LIST_ISSUE_COMMENTS_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for retrieving issue comments for a repository.",
      "properties": {
        "direction": {
          "description": "The direction for sorting results. Valid values are `asc` (ascending) or `desc` (descending). This parameter is effective only when `sort` is also specified.",
          "enum": ["asc", "desc"],
          "title": "Direction",
          "type": "string"
        },
        "owner": {
          "description": "The username of the account or the organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "kubernetes"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to fetch, used for pagination. Default is 1. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" ",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of issue comments to retrieve per page. Default is 30, maximum is 100. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" ",
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife", "website"],
          "title": "Repo",
          "type": "string"
        },
        "since": {
          "description": "Filters comments to include only those last updated at or after the specified time. This should be a timestamp in ISO 8601 format (e.g., `YYYY-MM-DDTHH:MM:SSZ`).",
          "examples": ["2023-01-01T10:00:00Z"],
          "title": "Since",
          "type": "string"
        },
        "sort": {
          "default": "created",
          "description": "Specifies the field by which to sort the issue comments. Valid values are `created` (for creation date, default) or `updated` (for last update date).",
          "enum": ["created", "updated"],
          "title": "Sort",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListIssueCommentsForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the API's response data. For this endpoint, it typically holds a list of issue comment objects. Refer to the GitHub API documentation for the exact structure of these comment objects.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListIssueCommentsForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Lists issue comments, including those on pull requests, for an accessible repository.",
    "tags": ["issues", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List issue events",
    "slug": "GITHUB_LIST_ISSUE_EVENTS",
    "input_parameters": {
      "description": "Request schema for retrieving events associated with a GitHub issue.",
      "properties": {
        "issue_number": {
          "description": "The unique number that identifies the issue within the repository.",
          "examples": ["1347", "2365"],
          "title": "Issue Number",
          "type": "integer"
        },
        "owner": {
          "description": "The username of the account that owns the repository. This name is not case-sensitive.",
          "examples": ["octocat", "expressjs"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "examples": ["1", "2", "3"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of results to return per page. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Spoon-Knife", "express"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "issue_number"],
      "title": "ListIssueEventsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing a list of event objects for an issue. Each event object details a specific activity or change related to the issue (e.g., 'mentioned', 'subscribed', 'closed').",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListIssueEventsResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a list of all events for a specific issue within a github repository.",
    "tags": ["issues", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List issue events for a repository",
    "slug": "GITHUB_LIST_ISSUE_EVENTS_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request to list issue events for a repository.",
      "properties": {
        "owner": {
          "description": "Account owner of the repository (username or organization name); case-insensitive.",
          "examples": ["octocat", "kubernetes"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for pagination.",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 1,
          "description": "Number of results per page (max 100).",
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension; case-insensitive.",
          "examples": ["Spoon-Knife", "minikube"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListIssueEventsForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Raw API response, typically a list of issue events.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListIssueEventsForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Lists all issue events (e.g., closed, reopened, assigned) for a specified repository.",
    "tags": ["issues", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List jobs for a workflow run",
    "slug": "GITHUB_LIST_JOBS_FOR_A_WORKFLOW_RUN",
    "input_parameters": {
      "description": "Request schema for listing jobs associated with a specific workflow run in a GitHub repository.",
      "properties": {
        "filter": {
          "default": "latest",
          "description": "Filters jobs by their `completed_at` timestamp. `latest` returns jobs from the most recent execution attempt of the workflow run. `all` returns all jobs for a workflow run, including from previous execution attempts.",
          "enum": ["latest", "all"],
          "examples": ["latest", "all"],
          "title": "Filter",
          "type": "string"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to fetch. For more details, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "examples": [1, 2, 5],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of results to return per page, with a maximum of 100. For more details, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "examples": [30, 50, 100],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the .git extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        },
        "run_id": {
          "description": "The unique identifier of the workflow run for which jobs are to be listed.",
          "examples": [123456789],
          "title": "Run Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "run_id"],
      "title": "ListJobsForAWorkflowRunRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the list of jobs and related metadata. Each job typically includes details like 'id', 'name', 'status' (e.g., 'queued', 'in_progress', 'completed'), 'conclusion' (e.g., 'success', 'failure', 'skipped'), 'started_at', and 'completed_at' timestamps. For a detailed structure, refer to the official GitHub API documentation for workflow jobs.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListJobsForAWorkflowRunResponseWrapper",
      "type": "object"
    },
    "description": "Lists jobs for a specific workflow run in a github repository.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List jobs for a workflow run attempt",
    "slug": "GITHUB_LIST_JOBS_FOR_A_WORKFLOW_RUN_ATTEMPT",
    "input_parameters": {
      "description": "Request schema for `ListJobsForAWorkflowRunAttempt`",
      "properties": {
        "attempt_number": {
          "description": "Attempt number of the workflow run, corresponding to a specific retry.",
          "title": "Attempt Number",
          "type": "integer"
        },
        "owner": {
          "description": "Account owner of the repository (not case-sensitive).",
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch.",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (not case-sensitive).",
          "title": "Repo",
          "type": "string"
        },
        "run_id": {
          "description": "Unique identifier of the workflow run.",
          "title": "Run Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "run_id", "attempt_number"],
      "title": "ListJobsForAWorkflowRunAttemptRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response, typically including 'total_count' and a 'jobs' list with details like 'id', 'status', 'name', and 'steps'.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListJobsForAWorkflowRunAttemptResponseWrapper",
      "type": "object"
    },
    "description": "Lists jobs, including details like id, status, and steps, for a specific attempt of a github actions workflow run.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List labels for an issue",
    "slug": "GITHUB_LIST_LABELS_FOR_AN_ISSUE",
    "input_parameters": {
      "description": "Request model for listing labels associated with a specific GitHub issue.",
      "properties": {
        "issue_number": {
          "description": "The unique number identifying the issue within the repository.",
          "examples": ["1347", "42"],
          "title": "Issue Number",
          "type": "integer"
        },
        "owner": {
          "description": "The account owner of the repository (username or organization name). This is not case-sensitive.",
          "examples": ["octocat", "kubernetes"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to fetch. Defaults to 1. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "examples": ["1", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of results to return per page. Maximum value is 100. Defaults to 30. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "examples": ["30", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This is not case-sensitive.",
          "examples": ["Hello-World", "minikube"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "issue_number"],
      "title": "ListLabelsForAnIssueRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListLabelsForAnIssueResponseWrapper",
      "type": "object"
    },
    "description": "Lists all labels for a specified issue in a github repository.",
    "tags": ["issues", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List labels for a repository",
    "slug": "GITHUB_LIST_LABELS_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Lists labels for a specified repository, with pagination support.",
      "properties": {
        "owner": {
          "description": "Username of the account owning the repository (case-insensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch (starts from 1).",
          "examples": [1, 2, 5],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results to return per page (maximum 100).",
          "examples": [30, 50, 100],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "Name of the repository, without the .git extension (case-insensitive).",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListLabelsForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "description": "List of label objects, each detailing `id`, `node_id`, `url`, `name`, `description`, `color` (hex), and `default` status.",
          "items": { "additionalProperties": true, "properties": {}, "type": "object" },
          "title": "Data",
          "type": "array"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListLabelsForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves all labels for a specified, existing github repository.",
    "tags": ["issues", "openWorldHint", "readOnlyHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "List labels for a self-hosted runner for an organization",
    "slug": "GITHUB_LIST_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for `ListLabelsForASelfHostedRunnerForAnOrganization`",
      "properties": {
        "org": {
          "description": "The name of the GitHub organization. This name is not case-sensitive.",
          "examples": ["octo-org", "github"],
          "title": "Org",
          "type": "string"
        },
        "runner_id": {
          "description": "The unique identifier (ID) of the self-hosted runner.",
          "examples": [123, 42],
          "title": "Runner Id",
          "type": "integer"
        }
      },
      "required": ["org", "runner_id"],
      "title": "ListLabelsForASelfHostedRunnerForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The API response, including `total_count` (total number of labels for the runner) and a `labels` array detailing each assigned label (e.g., `id`, `name`, `type`).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListLabelsForASelfHostedRunnerForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Lists all labels assigned to a specific self-hosted runner within a github organization, which are used to route workflows.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List labels for a self-hosted runner for a repository",
    "slug": "GITHUB_LIST_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request to list labels for a self-hosted runner in a repository.",
      "properties": {
        "owner": {
          "description": "The username of the account that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the '.git' extension. This field is not case-sensitive.",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        },
        "runner_id": {
          "description": "The unique identifier (ID) of the self-hosted runner.",
          "examples": [14],
          "title": "Runner Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "runner_id"],
      "title": "ListLabelsForASelfHostedRunnerForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the API response. It typically includes 'total_count' (integer indicating the total number of labels for the runner) and 'labels' (a list of label objects, where each object has 'id', 'name', and 'type').",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListLabelsForASelfHostedRunnerForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Lists all labels assigned to a specific self-hosted runner registered with the given repository.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List labels for issues in a milestone",
    "slug": "GITHUB_LIST_LABELS_FOR_ISSUES_IN_A_MILESTONE",
    "input_parameters": {
      "description": "Request schema for `ListLabelsForIssuesInAMilestone`",
      "properties": {
        "milestone_number": {
          "description": "The unique number that identifies the milestone.",
          "examples": [1],
          "title": "Milestone Number",
          "type": "integer"
        },
        "owner": {
          "description": "The username of the account that owns the repository. This is case-insensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to retrieve. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "examples": [1],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of results to return per page. The maximum value is 100. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "examples": [30],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This is case-insensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "milestone_number"],
      "title": "ListLabelsForIssuesInAMilestoneRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListLabelsForIssuesInAMilestoneResponseWrapper",
      "type": "object"
    },
    "description": "Lists all labels for issues within a specific milestone in a repository.",
    "tags": ["issues", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List machine types for a codespace",
    "slug": "GITHUB_LIST_MACHINE_TYPES_FOR_A_CODESPACE",
    "input_parameters": {
      "description": "Request schema for `ListMachineTypesForACodespace`",
      "properties": {
        "codespace_name": {
          "description": "The unique name of the codespace for which to list available machine types. This is often a combination of a username, repository name, and a unique identifier.",
          "examples": [
            "octocat-ideal-space-engine-vx79j779qg7fpv8x",
            "monalisa-glorious-guacamole-g4j6w7pq9p2xr7"
          ],
          "title": "Codespace Name",
          "type": "string"
        }
      },
      "required": ["codespace_name"],
      "title": "ListMachineTypesForACodespaceRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the details of available machine types. Typically includes a 'total_count' indicating the number of machine types and a 'machines' list. Each item in the 'machines' list provides details such as 'name', 'display_name', 'operating_system', 'storage_in_bytes', 'memory_in_bytes', and 'cpus'.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListMachineTypesForACodespaceResponseWrapper",
      "type": "object"
    },
    "description": "Lists available machine types for a specific, accessible codespace, enabling it to be transitioned to a new hardware configuration.",
    "tags": ["codespaces", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List matching references",
    "slug": "GITHUB_LIST_MATCHING_REFERENCES",
    "input_parameters": {
      "description": "Request schema for `ListMatchingReferences`",
      "properties": {
        "owner": {
          "description": "The username or organization name that owns the repository. This is case-insensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "ref": {
          "description": "Partial Git reference path (e.g., 'heads/main', 'tags/v1.0') to match from the beginning of the reference name; do not include the `refs/` prefix.",
          "examples": ["heads/main", "tags/v1.0.0", "heads/feature/new-login"],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This is case-insensitive.",
          "examples": ["Spoon-Knife", "my-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "ref"],
      "title": "ListMatchingReferencesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Contains the API's response. The core data from GitHub is an array of matching Git reference objects, each detailing the full `ref` name (e.g., `refs/heads/main`), `node_id`, `url`, and the `object` it points to (including commit SHA and type).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListMatchingReferencesResponseWrapper",
      "type": "object"
    },
    "description": "Lists all git references (branches or tags) in a repository that start with the provided partial reference path (e.g., `heads/my-feature` or `tags/v1.2`).",
    "tags": ["git", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List milestones",
    "slug": "GITHUB_LIST_MILESTONES",
    "input_parameters": {
      "description": "Request schema for the `ListMilestones` action, defining parameters to list repository milestones.",
      "properties": {
        "direction": {
          "default": "asc",
          "description": "Sort direction: `asc` (ascending) or `desc` (descending).",
          "enum": ["asc", "desc"],
          "examples": ["asc", "desc"],
          "title": "Direction",
          "type": "string"
        },
        "owner": {
          "description": "The username of the account that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for paginated results.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the '.git' extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        },
        "sort": {
          "default": "due_on",
          "description": "Sort by `due_on` (due date) or `completeness` (percentage of issues completed).",
          "enum": ["due_on", "completeness"],
          "examples": ["due_on", "completeness"],
          "title": "Sort",
          "type": "string"
        },
        "state": {
          "default": "open",
          "description": "Filters milestones by their state.",
          "enum": ["open", "closed", "all"],
          "examples": ["open", "closed", "all"],
          "title": "State",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListMilestonesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response payload. GitHub returns a JSON array of milestone objects; this may be a dictionary wrapping or transforming the list.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListMilestonesResponseWrapper",
      "type": "object"
    },
    "description": "Lists milestones, which track progress for groups of issues and pull requests, for an existing repository, allowing filtering by state and sorting.",
    "tags": ["issues", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List notifications for the authenticated user",
    "slug": "GITHUB_LIST_NOTIFICATIONS_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for `ListNotificationsForTheAuthenticatedUser`",
      "properties": {
        "all": {
          "default": false,
          "description": "If `true`, shows all notifications including those marked as read.",
          "title": "All",
          "type": "boolean"
        },
        "before": {
          "description": "Only show notifications updated before this ISO 8601 timestamp (e.g., `YYYY-MM-DDTHH:MM:SSZ`).",
          "examples": ["2023-12-31T23:59:59Z"],
          "title": "Before",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results to fetch.",
          "examples": ["1", "2", "3"],
          "title": "Page",
          "type": "integer"
        },
        "participating": {
          "default": false,
          "description": "If `true`, shows only notifications in which the authenticated user is directly participating or has been mentioned.",
          "title": "Participating",
          "type": "boolean"
        },
        "per_page": {
          "default": 50,
          "description": "Number of results per page (max 50).",
          "examples": ["30", "50"],
          "title": "Per Page",
          "type": "integer"
        },
        "since": {
          "description": "Only show notifications updated after this ISO 8601 timestamp (e.g., `YYYY-MM-DDTHH:MM:SSZ`).",
          "examples": ["2023-01-01T00:00:00Z"],
          "title": "Since",
          "type": "string"
        }
      },
      "title": "ListNotificationsForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A list of notification objects and related metadata from the GitHub API.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListNotificationsForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists notifications for the authenticated user, sorted by most recent update, with filtering and pagination options.",
    "tags": ["activity", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List organizations",
    "slug": "GITHUB_LIST_ORGANIZATIONS",
    "input_parameters": {
      "description": "Request to list GitHub organizations for the authenticated user.",
      "properties": {
        "per_page": {
          "default": 30,
          "description": "Number of results to return per page, max 100.",
          "examples": [30, 50, 100],
          "title": "Per Page",
          "type": "integer"
        },
        "since": {
          "description": "An organization ID. If provided, only organizations with an ID greater than this will be returned, for pagination.",
          "examples": [12345, 54321],
          "title": "Since",
          "type": "integer"
        }
      },
      "title": "ListOrganizationsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "List of GitHub organizations. Each entry typically includes details like 'login', 'id', 'url', 'repos_url', 'avatar_url', and 'description'; exact fields may vary.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListOrganizationsResponseWrapper",
      "type": "object"
    },
    "description": "Lists github organizations for the authenticated user, sorted by id in ascending order.",
    "tags": ["openWorldHint", "orgs", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List organizations for a user",
    "slug": "GITHUB_LIST_ORGANIZATIONS_FOR_A_USER",
    "input_parameters": {
      "description": "Lists public organizations for a specific GitHub user.",
      "properties": {
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "username": {
          "description": "GitHub username (handle) of the user.",
          "examples": ["octocat", "torvalds", "github"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["username"],
      "title": "ListOrganizationsForAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response payload containing a list of public organizations for the specified user.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListOrganizationsForAUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists public organizations for a specified github user; the `username` must be a valid github handle.",
    "tags": ["openWorldHint", "orgs", "readOnlyHint", "important"]
  },
  {
    "available_versions": ["latest"],
    "name": "List organizations for the authenticated user",
    "slug": "GITHUB_LIST_ORGANIZATIONS_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Defines the parameters for paginating the list of organizations for the authenticated user.",
      "properties": {
        "page": {
          "default": 1,
          "description": "The page number of the results to retrieve, used for pagination. Default is 1.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of organization results to return per page. Default is 30, maximum is 100.",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "title": "ListOrganizationsForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the API response. It includes a list of organizations that the authenticated user is a member of, along with details for each organization.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListOrganizationsForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists organizations the authenticated github user is a member of, returning details for each organization.",
    "tags": ["openWorldHint", "orgs", "readOnlyHint", "important"]
  },
  {
    "available_versions": ["latest"],
    "name": "List organization events for the authenticated user",
    "slug": "GITHUB_LIST_ORGANIZATION_EVENTS_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request to list organization events for the authenticated user.",
      "properties": {
        "org": {
          "description": "Name of the GitHub organization (case-insensitive).",
          "examples": ["github", "my-company-org"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to retrieve.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of events to return per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "username": {
          "description": "GitHub login of the authenticated user; must match the credentials used for the API request.",
          "examples": ["octocat", "your-github-username"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["username", "org"],
      "title": "ListOrganizationEventsForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListOrganizationEventsForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists events within a specified organization that were performed by the authenticated user, whose `username` (path parameter) must match the api request credentials.",
    "tags": ["activity", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List organization members",
    "slug": "GITHUB_LIST_ORGANIZATION_MEMBERS",
    "input_parameters": {
      "description": "Request schema for listing members of a GitHub organization.",
      "properties": {
        "filter": {
          "default": "all",
          "description": "Filter for members: '2fa_disabled' returns only members without two-factor authentication (available only to organization owners).",
          "enum": ["2fa_disabled", "all"],
          "examples": ["all", "2fa_disabled"],
          "title": "Filter",
          "type": "string"
        },
        "org": {
          "description": "The GitHub organization's name (case-insensitive).",
          "examples": ["octokit"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to fetch (1-indexed).",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of results per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "role": {
          "default": "all",
          "description": "Filter members by their role in the organization.",
          "enum": ["all", "admin", "member"],
          "examples": ["all", "admin", "member"],
          "title": "Role",
          "type": "string"
        }
      },
      "required": ["org"],
      "title": "ListOrganizationMembersRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A list of user objects, each detailing an organization member.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListOrganizationMembersResponseWrapper",
      "type": "object"
    },
    "description": "Lists public and concealed members of a github organization; viewing concealed members requires authenticated user to be an organization member.",
    "tags": ["openWorldHint", "orgs", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List organization projects",
    "slug": "GITHUB_LIST_ORGANIZATION_PROJECTS",
    "input_parameters": {
      "description": "Request model for listing projects within a specific GitHub organization.",
      "properties": {
        "org": {
          "description": "The name of the GitHub organization (e.g., 'octocat', 'microsoft'). This name is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch. For pagination details, see GitHub's REST API documentation.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of projects to return per page (maximum 100). For pagination details, see GitHub's REST API documentation.",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "state": {
          "default": "open",
          "description": "Filters projects by their state.",
          "enum": ["open", "closed", "all"],
          "examples": ["open", "closed", "all"],
          "title": "State",
          "type": "string"
        }
      },
      "required": ["org"],
      "title": "ListOrganizationProjectsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListOrganizationProjectsResponseWrapper",
      "type": "object"
    },
    "description": "Lists projects for a specified github organization, optionally filtering by state and supporting pagination.",
    "tags": ["openWorldHint", "projects", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List organization repositories",
    "slug": "GITHUB_LIST_ORGANIZATION_REPOSITORIES",
    "input_parameters": {
      "description": "Request to list repositories for a specified GitHub organization.",
      "properties": {
        "direction": {
          "description": "Sort order: `asc` (ascending) or `desc` (descending). Defaults to `asc` if `sort` is `full_name`, else `desc`.",
          "enum": ["asc", "desc"],
          "examples": ["asc", "desc"],
          "title": "Direction",
          "type": "string"
        },
        "org": {
          "description": "Name of the GitHub organization (not case-sensitive).",
          "examples": ["github", "microsoft", "google"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for pagination (starts from 1).",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 1,
          "description": "Number of results per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "sort": {
          "default": "created",
          "description": "Property to sort repositories by: `created`, `updated`, `pushed`, or `full_name`.",
          "enum": ["created", "updated", "pushed", "full_name"],
          "examples": ["created", "updated", "pushed", "full_name"],
          "title": "Sort",
          "type": "string"
        },
        "type": {
          "default": "all",
          "description": "Specifies the type of repositories to return: `all`, `public`, `private` (requires permissions), `forks`, `sources` (not forks), or `member` (repositories with explicit user access).",
          "enum": ["all", "public", "private", "forks", "sources", "member"],
          "examples": ["all", "public", "private", "forks", "sources", "member"],
          "title": "Type",
          "type": "string"
        }
      },
      "required": ["org"],
      "title": "ListOrganizationRepositoriesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "List of repository objects, each detailing a repository with fields like `id`, `name`, `full_name`, `description`, and `html_url`.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListOrganizationRepositoriesResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a list of repositories for a specified github organization, allowing filtering by type and sorting.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List organization secrets",
    "slug": "GITHUB_LIST_ORGANIZATION_SECRETS",
    "input_parameters": {
      "description": "Request to list GitHub Actions secrets for an organization.",
      "properties": {
        "org": {
          "description": "Name of the GitHub organization (case-insensitive).",
          "examples": ["octocat", "github"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for results.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of secrets to return per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "required": ["org"],
      "title": "ListOrganizationSecretsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListOrganizationSecretsResponseWrapper",
      "type": "object"
    },
    "description": "Lists github actions secrets available for a specified organization.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List organization variables",
    "slug": "GITHUB_LIST_ORGANIZATION_VARIABLES",
    "input_parameters": {
      "description": "Request schema for listing GitHub Actions variables for an organization.",
      "properties": {
        "org": {
          "description": "The organization name (not case-sensitive).",
          "examples": ["github", "my-company-org"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results to fetch (starts at 1).",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 10,
          "description": "Number of results per page (max 30).",
          "examples": ["10", "25", "30"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "required": ["org"],
      "title": "ListOrganizationVariablesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response containing the total count and a list of organization variables with their details.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListOrganizationVariablesResponseWrapper",
      "type": "object"
    },
    "description": "Lists all github actions variables for a specified organization.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List organization webhooks",
    "slug": "GITHUB_LIST_ORGANIZATION_WEBHOOKS",
    "input_parameters": {
      "description": "Parameters for listing webhooks for a GitHub organization.",
      "properties": {
        "org": {
          "description": "The GitHub organization name (not case-sensitive).",
          "examples": ["octocat", "github"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results to fetch.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "required": ["org"],
      "title": "ListOrganizationWebhooksRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response data, typically a list of webhook objects.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListOrganizationWebhooksResponseWrapper",
      "type": "object"
    },
    "description": "Lists all webhooks for a specified github organization; the organization must exist.",
    "tags": ["openWorldHint", "orgs", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List organization fine-grained permissions",
    "slug": "GITHUB_LIST_ORG_FINE_GRAINED_PERMISSIONS",
    "input_parameters": {
      "description": "Request schema for `ListOrganizationFineGrainedPermissionsForAnOrganization`",
      "properties": {
        "org": {
          "description": "The name of the organization. This name is not case-sensitive.",
          "examples": ["github", "my-company-org"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org"],
      "title": "ListOrganizationFineGrainedPermissionsForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Contains the list of fine-grained permissions, typically under a key (e.g., 'permissions', 'items'). Each permission object includes details like 'name' (e.g., 'actions_read') and 'description' (e.g., 'Read access to Actions').",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListOrganizationFineGrainedPermissionsForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves all fine-grained permissions for a specified github organization, essential for creating or updating custom roles.",
    "tags": ["openWorldHint", "orgs", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List organization issues assigned to the authenticated user",
    "slug": "GITHUB_LIST_ORG_ISSUES_FOR_USER",
    "input_parameters": {
      "description": "Request schema for listing organization issues for the authenticated user.",
      "properties": {
        "direction": {
          "default": "desc",
          "description": "Direction for sorting results.",
          "enum": ["asc", "desc"],
          "examples": ["asc", "desc"],
          "title": "Direction",
          "type": "string"
        },
        "filter": {
          "default": "assigned",
          "description": "Filter indicating the type of issues to return based on user involvement (e.g., `assigned`, `created`, `mentioned`, `subscribed`, or `all`/`repos` for all accessible issues).",
          "enum": ["assigned", "created", "mentioned", "subscribed", "repos", "all"],
          "examples": ["assigned", "created", "mentioned", "subscribed", "repos", "all"],
          "title": "Filter",
          "type": "string"
        },
        "labels": {
          "description": "A comma-separated list of label names to filter issues by. For example: `bug,ui,@high`. Issues returned must match all specified labels.",
          "examples": ["bug,documentation", "enhancement"],
          "title": "Labels",
          "type": "string"
        },
        "org": {
          "description": "The name of the GitHub organization. This name is not case-sensitive.",
          "examples": ["my-organization-name"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to retrieve.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of issues to return per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "since": {
          "description": "Only issues updated at or after this time are returned. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "examples": ["2023-01-01T00:00:00Z"],
          "title": "Since",
          "type": "string"
        },
        "sort": {
          "default": "created",
          "description": "Field to sort results by.",
          "enum": ["created", "updated", "comments"],
          "examples": ["created", "updated", "comments"],
          "title": "Sort",
          "type": "string"
        },
        "state": {
          "default": "open",
          "description": "Filters issues by their state.",
          "enum": ["open", "closed", "all"],
          "examples": ["open", "closed", "all"],
          "title": "State",
          "type": "string"
        }
      },
      "required": ["org"],
      "title": "ListOrganizationIssuesAssignedToTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response containing a list of issue objects with their details, such as `id`, `title`, `user`, `assignees`, `state`, `labels`, and `body`.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListOrganizationIssuesAssignedToTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists issues for the authenticated user within a specified github organization, with options to filter by involvement type, state, labels, and to sort results.",
    "tags": ["issues", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List org level codespaces secrets",
    "slug": "GITHUB_LIST_ORG_LEVEL_CODESPACES_SECRETS",
    "input_parameters": {
      "description": "Request schema for retrieving a list of Codespaces secrets at the organization level.",
      "properties": {
        "org": {
          "description": "The GitHub organization name (case-insensitive).",
          "examples": ["github", "my-company-org"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for pagination.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "required": ["org"],
      "title": "ListOrgLevelCodespacesSecretsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListOrgLevelCodespacesSecretsResponseWrapper",
      "type": "object"
    },
    "description": "Lists all codespaces secrets available for a specified organization, which must exist.",
    "tags": ["codespaces", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List package versions for an organization package",
    "slug": "GITHUB_LIST_ORG_PACKAGE_VERSIONS",
    "input_parameters": {
      "description": "Lists all versions of a specific package owned by a GitHub organization.",
      "properties": {
        "org": {
          "description": "Name of the GitHub organization owning the package (case-insensitive).",
          "examples": ["my-company", "github"],
          "title": "Org",
          "type": "string"
        },
        "package_name": {
          "description": "Unique package name within its ecosystem.",
          "examples": ["my-web-app", "com.example.database-connector"],
          "title": "Package Name",
          "type": "string"
        },
        "package_type": {
          "description": "Package's ecosystem. Important notes: GitHub Gradle packages use `maven`; images in ghcr.io use `container`; `docker` type can find images from docker.pkg.github.com, including those migrated to ghcr.io.",
          "enum": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "examples": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "title": "Package Type",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for results (starts at 1).",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Results per page (max 100).",
          "title": "Per Page",
          "type": "integer"
        },
        "state": {
          "default": "active",
          "description": "Filters package versions by state.",
          "enum": ["active", "deleted"],
          "examples": ["active", "deleted"],
          "title": "State",
          "type": "string"
        }
      },
      "required": ["package_type", "package_name", "org"],
      "title": "ListPackageVersionsForAPackageOwnedByAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Raw API response from GitHub, typically a list of package version objects. Refer to GitHub API documentation for detailed structure.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListPackageVersionsForAPackageOwnedByAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Lists all versions for a specified package, if it exists and is owned by the given github organization.",
    "tags": ["openWorldHint", "packages", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List organization repositories with Github Actions enabled",
    "slug": "GITHUB_LIST_ORG_REPOS_WITHGITHUB_ACTIONS_ENABLED",
    "input_parameters": {
      "description": "Request schema for `ListOrgReposWithgithubActionsEnabled`",
      "properties": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "examples": ["octocat", "my-company-org"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to fetch.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of results per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "required": ["org"],
      "title": "ListOrgReposWithgithubActionsEnabledRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the API response from GitHub. This typically includes a 'total_count' field representing the total number of repositories explicitly selected and enabled for GitHub Actions in the organization, and a 'repositories' field which is an array of objects, each detailing such a repository.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListOrgReposWithgithubActionsEnabledResponseWrapper",
      "type": "object"
    },
    "description": "Lists repositories in an organization with github actions enabled, for use when the organization's policy restricts actions to a specific list of repositories rather than enabling it for all.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List org resources with personal tokens",
    "slug": "GITHUB_LIST_ORG_RESOURCES_WITH_PERSONAL_TOKENS",
    "input_parameters": {
      "description": "Request schema for listing fine-grained personal access token requests within an organization.",
      "properties": {
        "direction": {
          "default": "desc",
          "description": "Sort direction: 'asc' for ascending or 'desc' for descending.",
          "enum": ["asc", "desc"],
          "examples": ["asc", "desc"],
          "title": "Direction",
          "type": "string"
        },
        "last_used_after": {
          "description": "Filters for tokens last used after this ISO 8601 timestamp.",
          "examples": ["2023-01-15T12:30:00Z"],
          "title": "Last Used After",
          "type": "string"
        },
        "last_used_before": {
          "description": "Filters for tokens last used before this ISO 8601 timestamp.",
          "examples": ["2023-01-01T00:00:00Z"],
          "title": "Last Used Before",
          "type": "string"
        },
        "org": {
          "description": "The GitHub organization name (case-insensitive).",
          "examples": ["my-organization", "github"],
          "title": "Org",
          "type": "string"
        },
        "owner": {
          "description": "Filter by a list of token owner GitHub usernames.",
          "examples": ["octocat", "monalisa"],
          "items": { "properties": {}, "type": "string" },
          "title": "Owner",
          "type": "array"
        },
        "page": {
          "default": 1,
          "description": "Page number for results (1-based).",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "permission": {
          "description": "Filters requests by the specific permission granted to the token.",
          "examples": ["issues:read", "pull_requests:write", "admin:org"],
          "title": "Permission",
          "type": "string"
        },
        "repository": {
          "description": "Filter by repository name for tokens that access this repository.",
          "examples": ["my-cool-repo", "octocat/Spoon-Knife"],
          "title": "Repository",
          "type": "string"
        },
        "sort": {
          "default": "created_at",
          "description": "Sorts results by 'created_at' (currently the only supported property).",
          "enum": ["created_at"],
          "examples": ["created_at"],
          "title": "Sort",
          "type": "string"
        }
      },
      "required": ["org"],
      "title": "ListOrgResourcesWithPersonalTokensRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Raw API response, typically a list of an organization's fine-grained personal access token requests. Refer to GitHub API documentation for structure.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListOrgResourcesWithPersonalTokensResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a list of an organization's fine-grained personal access token requests (pending, approved, or denied), with options for filtering and sorting.",
    "tags": ["openWorldHint", "orgs", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List org resource access tokens",
    "slug": "GITHUB_LIST_ORG_RESOURCE_ACCESS_TOKENS",
    "input_parameters": {
      "description": "Request schema for listing fine-grained personal access tokens with access to organization resources.",
      "properties": {
        "direction": {
          "default": "desc",
          "description": "Sort direction.",
          "enum": ["asc", "desc"],
          "examples": ["asc", "desc"],
          "title": "Direction",
          "type": "string"
        },
        "last_used_after": {
          "description": "Filter for tokens last used after this ISO 8601 timestamp (YYYY-MM-DDTHH:MM:SSZ).",
          "examples": ["2024-01-01T00:00:00Z"],
          "title": "Last Used After",
          "type": "string"
        },
        "last_used_before": {
          "description": "Filter for tokens last used before this ISO 8601 timestamp (YYYY-MM-DDTHH:MM:SSZ).",
          "examples": ["2023-01-01T00:00:00Z"],
          "title": "Last Used Before",
          "type": "string"
        },
        "org": {
          "description": "Name of the GitHub organization (not case-sensitive).",
          "examples": ["my-organization"],
          "title": "Org",
          "type": "string"
        },
        "owner": {
          "description": "Filter by a list of owner usernames.",
          "examples": [["user1", "user2"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Owner",
          "type": "array"
        },
        "page": {
          "default": 1,
          "description": "Page number of results to fetch (starts from 1).",
          "examples": [1, 2, 5],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "examples": [30, 50, 100],
          "title": "Per Page",
          "type": "integer"
        },
        "permission": {
          "description": "Filter by permission string (e.g., 'issues:read'). See GitHub docs for valid strings.",
          "examples": ["actions:read", "issues:write"],
          "title": "Permission",
          "type": "string"
        },
        "repository": {
          "description": "Filter by repository name.",
          "examples": ["my-repo"],
          "title": "Repository",
          "type": "string"
        },
        "sort": {
          "default": "created_at",
          "description": "Property to sort results by.",
          "enum": ["created_at"],
          "examples": ["created_at"],
          "title": "Sort",
          "type": "string"
        }
      },
      "required": ["org"],
      "title": "ListOrgResourceAccessTokensRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListOrgResourceAccessTokensResponseWrapper",
      "type": "object"
    },
    "description": "Lists approved fine-grained personal access tokens (pats) with access to resources in a github organization, optionally filtering by owner, repository, permissions, or last usage time.",
    "tags": ["openWorldHint", "orgs", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List organization Dependabot secrets without values",
    "slug": "GITHUB_LIST_ORG_SECRETS_WITHOUT_VALUES",
    "input_parameters": {
      "description": "Request schema for listing Dependabot secrets for an organization without their encrypted values.",
      "properties": {
        "org": {
          "description": "The unique identifier of the GitHub organization. This name is not case-sensitive.",
          "examples": ["my-org-name"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to fetch. Starts from 1. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" ",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of results to return per page. The maximum value is 100. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" ",
          "title": "Per Page",
          "type": "integer"
        }
      },
      "required": ["org"],
      "title": "ListOrgSecretsWithoutValuesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the list of secrets. The dictionary includes a 'total_count' field indicating the total number of secrets and a 'secrets' field which is a list of secret objects. Each secret object contains details like 'name', 'created_at', and 'updated_at', but not the encrypted value of the secret.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListOrgSecretsWithoutValuesResponseWrapper",
      "type": "object"
    },
    "description": "Lists all dependabot secrets (metadata like names, creation/update timestamps, but not their encrypted values) for a specified organization, which must exist.",
    "tags": ["dependabot", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List outside collaborators for an organization",
    "slug": "GITHUB_LIST_OUTSIDE_COLLABORATORS_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for listing outside collaborators of a GitHub organization.",
      "properties": {
        "filter": {
          "default": "all",
          "description": "Filter for the list: '2fa_disabled' for those without two-factor authentication, 'all' for every collaborator.",
          "enum": ["2fa_disabled", "all"],
          "examples": ["2fa_disabled", "all"],
          "title": "Filter",
          "type": "string"
        },
        "org": {
          "description": "The GitHub organization name (not case-sensitive).",
          "examples": ["mercury-labs", "github"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for pagination.",
          "examples": [1, 2, 5],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (maximum 100).",
          "examples": [30, 50, 100],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "required": ["org"],
      "title": "ListOutsideCollaboratorsForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "User objects representing the outside collaborators, typically including details like 'login', 'id', 'avatar_url', and 'html_url'.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListOutsideCollaboratorsForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Lists outside collaborators for a github organization, with options to filter (e.g., by 2fa status) and paginate results.",
    "tags": ["openWorldHint", "orgs", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List owned package versions",
    "slug": "GITHUB_LIST_OWNED_PACKAGE_VERSIONS",
    "input_parameters": {
      "description": "Request schema for `ListOwnedPackageVersions`",
      "properties": {
        "package_name": {
          "description": "Unique name of the package.",
          "examples": ["my-github-package", "another-repo-package"],
          "title": "Package Name",
          "type": "string"
        },
        "package_type": {
          "description": "Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. Use `docker` to find images from GitHub's Docker registry (`docker.pkg.github.com`), even if migrated.",
          "enum": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "examples": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "title": "Package Type",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch, starting from 1.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "state": {
          "default": "active",
          "description": "Filters package versions by state.",
          "enum": ["active", "deleted"],
          "examples": ["active", "deleted"],
          "title": "State",
          "type": "string"
        }
      },
      "required": ["package_type", "package_name"],
      "title": "ListOwnedPackageVersionsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListOwnedPackageVersionsResponseWrapper",
      "type": "object"
    },
    "description": "Lists all versions for an existing package owned by the authenticated user, identified by its type and name.",
    "tags": ["openWorldHint", "packages", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List packages for an organization",
    "slug": "GITHUB_LIST_PACKAGES_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request to list packages for a GitHub organization.",
      "properties": {
        "org": {
          "description": "Name of the GitHub organization (case-insensitive).",
          "examples": ["github", "my-company-org"],
          "title": "Org",
          "type": "string"
        },
        "package_type": {
          "description": "Package type to filter by. Note: Gradle packages use 'maven'; ghcr.io Docker images use 'container'; 'docker' type finds images from docker.pkg.github.com.",
          "enum": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "examples": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "title": "Package Type",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for paginated results.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "visibility": {
          "description": "Filter packages by visibility. 'internal' is for registries with granular permissions; otherwise, it's treated as 'private'.",
          "enum": ["public", "private", "internal"],
          "examples": ["public", "private", "internal"],
          "title": "Visibility",
          "type": "string"
        }
      },
      "required": ["package_type", "org"],
      "title": "ListPackagesForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Raw API response, typically a list of package objects.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListPackagesForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Lists github packages for an organization, noting specific interpretations for package type and visibility parameters.",
    "tags": ["openWorldHint", "packages", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List packages for a user",
    "slug": "GITHUB_LIST_PACKAGES_FOR_A_USER",
    "input_parameters": {
      "description": "Request schema for `ListPackagesForAUser`",
      "properties": {
        "package_type": {
          "description": "Filters by package type. Note: GitHub's Gradle packages are type `maven`. Images in `ghcr.io` (Container registry) are `container`. Use `docker` for images from `docker.pkg.github.com`, including those migrated to the Container registry.",
          "enum": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "examples": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "title": "Package Type",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to retrieve.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results to return per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "username": {
          "description": "The GitHub username of the account whose packages are to be listed.",
          "examples": ["octocat", "torvalds"],
          "title": "Username",
          "type": "string"
        },
        "visibility": {
          "description": "Filters packages by visibility. The `internal` visibility is supported only for GitHub Packages registries allowing granular permissions; for others, `internal` is synonymous with `private`.",
          "enum": ["public", "private", "internal"],
          "examples": ["public", "private", "internal"],
          "title": "Visibility",
          "type": "string"
        }
      },
      "required": ["package_type", "username"],
      "title": "ListPackagesForAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the list of packages for the specified user, matching the filter criteria.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListPackagesForAUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists packages for a specified github user, filterable by package type and visibility.",
    "tags": ["openWorldHint", "packages", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List packages for the authenticated user's namespace",
    "slug": "GITHUB_LIST_PACKAGES_FOR_THE_AUTHENTICATED_USER_S_NAMESPACE",
    "input_parameters": {
      "description": "Defines the parameters for listing packages in the authenticated user's namespace.",
      "properties": {
        "package_type": {
          "description": "The type of package to list. For GitHub's Gradle registry, use 'maven'; for Docker images from GitHub's Container registry (ghcr.io), use 'container'. 'docker' finds images from the original Docker registry (docker.pkg.github.com), even if migrated.",
          "enum": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "examples": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "title": "Package Type",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results to return per page, maximum 100.",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "visibility": {
          "description": "Filters packages by visibility. 'internal' is specific to GitHub Packages registries with granular permissions; for others, it's treated as 'private'.",
          "enum": ["public", "private", "internal"],
          "examples": ["public", "private", "internal"],
          "title": "Visibility",
          "type": "string"
        }
      },
      "required": ["package_type"],
      "title": "ListPackagesForTheAuthenticatedUserSNamespaceRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListPackagesForTheAuthenticatedUserSNamespaceResponseWrapper",
      "type": "object"
    },
    "description": "Lists packages of a specific type and visibility within the authenticated user's namespace on github.",
    "tags": ["openWorldHint", "packages", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List package versions for a package owned by a user",
    "slug": "GITHUB_LIST_PACKAGE_VERSIONS_FOR_A_PACKAGE_OWNED_BY_A_USER",
    "input_parameters": {
      "description": "Request schema for retrieving all versions of a public package owned by a specific user.",
      "properties": {
        "package_name": {
          "description": "The name of the package as it is registered in GitHub Packages.",
          "examples": ["my-package", "awesome-tool"],
          "title": "Package Name",
          "type": "string"
        },
        "package_type": {
          "description": "Type of the package. Note: GitHub Gradle registry packages use `maven`. GitHub Container registry (ghcr.io) images use `container`. The `docker` type can find images from the older GitHub Docker registry (docker.pkg.github.com), even if migrated to the Container registry.",
          "enum": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "examples": ["npm", "maven", "container", "rubygems"],
          "title": "Package Type",
          "type": "string"
        },
        "username": {
          "description": "The GitHub username of the account that owns the package (e.g., 'octocat').",
          "examples": ["octocat", "githubuser"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["package_type", "package_name", "username"],
      "title": "ListPackageVersionsForAPackageOwnedByAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response from GitHub detailing package versions. The structure conforms to GitHub's API documentation for this endpoint.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListPackageVersionsForAPackageOwnedByAUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists all versions of a public package owned by a specific github user, identified by package type, package name, and username.",
    "tags": ["openWorldHint", "packages", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List pending team invitations",
    "slug": "GITHUB_LIST_PENDING_TEAM_INVITATIONS",
    "input_parameters": {
      "description": "Request schema for listing pending team invitations in an organization.",
      "properties": {
        "org": {
          "description": "The name of the organization. This field is not case-sensitive.",
          "examples": ["octo-org", "my-company"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results to fetch.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "team_slug": {
          "description": "The slug (URL-friendly version) of the team name. This is typically the lowercase, hyphenated version of the team name.",
          "examples": ["justice-league", "developers"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug"],
      "title": "ListPendingTeamInvitationsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response data, typically a list of objects detailing pending team invitations.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListPendingTeamInvitationsResponseWrapper",
      "type": "object"
    },
    "description": "Lists all pending membership invitations for a specified team within an organization.",
    "tags": ["openWorldHint", "readOnlyHint", "teams", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List project cards",
    "slug": "GITHUB_LIST_PROJECT_CARDS",
    "input_parameters": {
      "description": "Request to list project cards from a specific project column.",
      "properties": {
        "archived_state": {
          "default": "not_archived",
          "description": "Filters the project cards based on their archived state. \"all\" returns all cards, \"archived\" returns only archived cards, and \"not_archived\" returns only unarchived cards.",
          "enum": ["all", "archived", "not_archived"],
          "title": "Archived State",
          "type": "string"
        },
        "column_id": {
          "description": "The unique identifier of the project column for which to list cards.",
          "examples": [10247084],
          "title": "Column Id",
          "type": "integer"
        },
        "page": {
          "default": 1,
          "description": "Page number of results to retrieve.",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of project cards to return per page (maximum 100).",
          "title": "Per Page",
          "type": "integer"
        }
      },
      "required": ["column_id"],
      "title": "ListProjectCardsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A list of project card objects. Each object represents a card in the project column and includes details such as its ID, note, creator, and timestamps.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListProjectCardsResponseWrapper",
      "type": "object"
    },
    "description": "Lists all project cards for a given `column id`, which must correspond to an existing project column.",
    "tags": ["openWorldHint", "projects", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List project collaborators",
    "slug": "GITHUB_LIST_PROJECT_COLLABORATORS",
    "input_parameters": {
      "description": "Request to list collaborators for a GitHub project.",
      "properties": {
        "affiliation": {
          "default": "all",
          "description": "Filter by affiliation: 'outside' (non-organization members of the project), 'direct' (collaborators with direct project permissions), or 'all' (all collaborators visible to the authenticated user).",
          "enum": ["outside", "direct", "all"],
          "examples": ["outside", "direct", "all"],
          "title": "Affiliation",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for the results to fetch.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "project_id": {
          "description": "The unique identifier of the project.",
          "examples": ["1024809"],
          "title": "Project Id",
          "type": "integer"
        }
      },
      "required": ["project_id"],
      "title": "ListProjectCollaboratorsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A list of collaborators associated with the project.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListProjectCollaboratorsResponseWrapper",
      "type": "object"
    },
    "description": "Fetches a list of collaborators for a specified, existing github project.",
    "tags": ["openWorldHint", "projects", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List project columns",
    "slug": "GITHUB_LIST_PROJECT_COLUMNS",
    "input_parameters": {
      "description": "Request schema for listing columns in a GitHub project.",
      "properties": {
        "page": {
          "default": 1,
          "description": "The page number of the results to fetch. Starts from 1. For more information on pagination, see GitHub's REST API documentation: https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api.",
          "examples": [1, 2, 5],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of results to return per page. The maximum value is 100. For more information on pagination, see GitHub's REST API documentation: https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api.",
          "examples": [30, 50, 100],
          "title": "Per Page",
          "type": "integer"
        },
        "project_id": {
          "description": "The unique identifier of the project for which columns are to be listed.",
          "examples": [1001, 42],
          "title": "Project Id",
          "type": "integer"
        }
      },
      "required": ["project_id"],
      "title": "ListProjectColumnsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the API's response. The GitHub API endpoint for listing project columns typically returns a JSON array of column objects. This dictionary is expected to encapsulate this list or represent the full response structure. Each column object usually includes fields such as 'id', 'node_id', 'name', 'url', 'project_url', 'cards_url', 'created_at', and 'updated_at'.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListProjectColumnsResponseWrapper",
      "type": "object"
    },
    "description": "Lists all of a github project's columns (e.g., 'to do', 'in progress'); project id must identify a valid, accessible project.",
    "tags": ["openWorldHint", "projects", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List public email addresses for the authenticated user",
    "slug": "GITHUB_LIST_PUBLIC_EMAIL_ADDRESSES_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for `ListPublicEmailAddressesForTheAuthenticatedUser`.",
      "properties": {
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results to return per page. Maximum value is 100.",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "title": "ListPublicEmailAddressesForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListPublicEmailAddressesForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists the public email addresses for the authenticated user.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Users", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List public events",
    "slug": "GITHUB_LIST_PUBLIC_EVENTS",
    "input_parameters": {
      "description": "Request schema for `ListPublicEvents`, used to specify pagination parameters.",
      "properties": {
        "page": {
          "default": 1,
          "description": "Specifies the page number of the results to retrieve. Starts from 1. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Specifies the number of events to return per page. Maximum value is 100. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "title": "ListPublicEventsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the response from the GitHub API. This typically includes a list of public GitHub events, where each event object provides details about activities such as code pushes, issue creations, and repository creations across public GitHub repositories.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListPublicEventsResponseWrapper",
      "type": "object"
    },
    "description": "Lists public github events, which may be delayed by up to 5 minutes, with support for pagination.",
    "tags": ["activity", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List public events for a network of repositories",
    "slug": "GITHUB_LIST_PUBLIC_EVENTS_FOR_A_NETWORK_OF_REPOSITORIES",
    "input_parameters": {
      "description": "Parameters to list public events from a GitHub repository network.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository. This name is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Specifies the page number for the results to be fetched. For further details, consult \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Sets the number of results to return per page, with a maximum of 100. For further details, consult \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListPublicEventsForANetworkOfRepositoriesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListPublicEventsForANetworkOfRepositoriesResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves public events (up to 90 days old, newest first) for a github repository network, including the repository and its forks.",
    "tags": ["activity", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List public events for a user",
    "slug": "GITHUB_LIST_PUBLIC_EVENTS_FOR_A_USER",
    "input_parameters": {
      "description": "Parameters to list public events for a GitHub user.",
      "properties": {
        "page": {
          "default": 1,
          "description": "Page number for paginated results.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of events to return per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "username": {
          "description": "The GitHub username (e.g., 'octocat').",
          "examples": ["octocat", "torvalds"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["username"],
      "title": "ListPublicEventsForAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A list of public events performed by the user, where each event details a specific activity (e.g., PushEvent, CreateEvent).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListPublicEventsForAUserResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a list of public events for a specified github user, in reverse chronological order.",
    "tags": ["activity", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List public events received by a user",
    "slug": "GITHUB_LIST_PUBLIC_EVENTS_RECEIVED_BY_A_USER",
    "input_parameters": {
      "description": "Request model detailing the parameters to list public events received by a GitHub user.",
      "properties": {
        "page": {
          "default": 1,
          "description": "The page number for the set of results to be fetched. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of public events to retrieve per page. The maximum value is 100. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "username": {
          "description": "The GitHub username for the user whose received public events are to be listed.",
          "examples": ["octocat", "torvalds"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["username"],
      "title": "ListPublicEventsReceivedByAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListPublicEventsReceivedByAUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists public events for a specified github user (e.g., activities in repositories they watch or are involved in); the target user's profile must be public, and if blocked by the authenticated user, a 404 error is returned.",
    "tags": ["activity", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List public gists",
    "slug": "GITHUB_LIST_PUBLIC_GISTS",
    "input_parameters": {
      "description": "Input model for the `ListPublicGists` action, defining parameters to filter and paginate public gists.",
      "properties": {
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch for pagination.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of gists to return per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "since": {
          "description": "Filters results to gists last updated at or after this ISO 8601 timestamp (e.g., `YYYY-MM-DDTHH:MM:SSZ`).",
          "examples": ["2023-01-15T00:00:00Z"],
          "title": "Since",
          "type": "string"
        }
      },
      "title": "ListPublicGistsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The data payload from the API response. For the `/gists/public` endpoint, GitHub returns a list of Gist objects.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListPublicGistsResponseWrapper",
      "type": "object"
    },
    "description": "Lists public gists from github, optionally filtering by a 'since' timestamp and supporting pagination; results are generally newest first.",
    "tags": ["gists", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List public keys for a user",
    "slug": "GITHUB_LIST_PUBLIC_KEYS_FOR_A_USER",
    "input_parameters": {
      "description": "Request model for retrieving a list of public SSH keys associated with a specific GitHub user.",
      "properties": {
        "page": {
          "default": 1,
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" ",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of results to return per page (maximum 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" ",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "username": {
          "description": "The GitHub username (handle) of the user whose public SSH keys are to be listed. For example, 'octocat'.",
          "examples": ["octocat", "torvalds"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["username"],
      "title": "ListPublicKeysForAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListPublicKeysForAUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists the verified public ssh keys for a specified github user.",
    "tags": ["openWorldHint", "readOnlyHint", "users", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List public organization events",
    "slug": "GITHUB_LIST_PUBLIC_ORGANIZATION_EVENTS",
    "input_parameters": {
      "description": "Defines the parameters for the `ListPublicOrganizationEvents` action.",
      "properties": {
        "org": {
          "description": "The GitHub organization name (case-insensitive).",
          "examples": ["github", "google", "microsoft"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results to retrieve (starts from 1).",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "required": ["org"],
      "title": "ListPublicOrganizationEventsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListPublicOrganizationEventsResponseWrapper",
      "type": "object"
    },
    "description": "Lists public events for a specified github organization, which must exist.",
    "tags": ["activity", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List public organization members",
    "slug": "GITHUB_LIST_PUBLIC_ORGANIZATION_MEMBERS",
    "input_parameters": {
      "description": "Parameters for listing public members of a GitHub organization.",
      "properties": {
        "org": {
          "description": "The name of the GitHub organization. This field is not case-sensitive.",
          "examples": ["github", "octodemo", "google"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to retrieve.",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 1,
          "description": "Number of results to return per page (maximum 100).",
          "title": "Per Page",
          "type": "integer"
        }
      },
      "required": ["org"],
      "title": "ListPublicOrganizationMembersRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListPublicOrganizationMembersResponseWrapper",
      "type": "object"
    },
    "description": "Lists users who have publicly declared their membership in a specified, existing github organization.",
    "tags": ["openWorldHint", "orgs", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List public repositories",
    "slug": "GITHUB_LIST_PUBLIC_REPOSITORIES",
    "input_parameters": {
      "description": "Request model to list public repositories, optionally starting after a specific repository ID.",
      "properties": {
        "since": {
          "description": "A repository ID. Returns only repositories with an ID greater than this value, for pagination.",
          "examples": ["1296269", "1500000"],
          "title": "Since",
          "type": "integer"
        }
      },
      "title": "ListPublicRepositoriesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListPublicRepositoriesResponseWrapper",
      "type": "object"
    },
    "description": "Lists all public repositories on github; use the `since` parameter with a repository id from a previous result for pagination.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List pull requests",
    "slug": "GITHUB_LIST_PULL_REQUESTS",
    "input_parameters": {
      "description": "Request schema for listing pull requests in a repository.",
      "properties": {
        "base": {
          "description": "Filter by base branch name.",
          "examples": ["main", "develop", "gh-pages"],
          "title": "Base",
          "type": "string"
        },
        "direction": {
          "description": "Sort direction. Valid values: 'asc', 'desc'. Defaults to 'desc' if sort is 'created' or unspecified, else 'asc'.",
          "examples": ["asc", "desc"],
          "title": "Direction",
          "type": "string"
        },
        "head": {
          "description": "Filter by head user/org and branch name, e.g., `user:ref-name`.",
          "examples": ["octocat:test-branch", "github:new-script-format"],
          "title": "Head",
          "type": "string"
        },
        "owner": {
          "description": "Username or organization name of the repository owner.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for results.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension.",
          "examples": ["Spoon-Knife", "my-project"],
          "title": "Repo",
          "type": "string"
        },
        "sort": {
          "default": "created",
          "description": "Sorts results. Valid values: 'created', 'updated', 'popularity', 'long-running'. 'popularity' is by comment count; 'long-running' by age and recent activity.",
          "examples": ["created", "updated", "popularity", "long-running"],
          "title": "Sort",
          "type": "string"
        },
        "state": {
          "default": "open",
          "description": "Filter by pull request state. Valid values: 'open', 'closed', 'all'.",
          "examples": ["open", "closed", "all"],
          "title": "State",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListPullRequestsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Filtered pull request data with only essential information",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListPullRequestsResponseWrapper",
      "type": "object"
    },
    "description": "Lists pull requests for a specified github repository with ai-friendly filtering.",
    "tags": ["important", "openWorldHint", "pulls", "readOnlyHint", "idempotentHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "List pull requests associated with a commit",
    "slug": "GITHUB_LIST_PULL_REQUESTS_ASSOCIATED_WITH_A_COMMIT",
    "input_parameters": {
      "description": "Request schema for `ListPullRequestsAssociatedWithACommit`",
      "properties": {
        "commit_sha": {
          "description": "SHA of the commit to list associated pull requests for.",
          "examples": [
            "c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc",
            "0000000000000000000000000000000000000000"
          ],
          "title": "Commit Sha",
          "type": "string"
        },
        "owner": {
          "description": "Account owner of the repository (GitHub username or organization name, case-insensitive).",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results to retrieve.",
          "examples": ["1", "2"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "examples": ["30", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension (case-insensitive).",
          "examples": ["Hello-World", "linguist"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "commit_sha"],
      "title": "ListPullRequestsAssociatedWithACommitRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response payload, typically a list of pull requests associated with the commit.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListPullRequestsAssociatedWithACommitResponseWrapper",
      "type": "object"
    },
    "description": "Lists pull requests for a commit; returns merged prs that introduced the commit if on the default branch, or open prs including the commit if on other branches.",
    "tags": ["openWorldHint", "readOnlyHint", "repos"]
  },
  {
    "available_versions": ["latest"],
    "name": "List pull requests files",
    "slug": "GITHUB_LIST_PULL_REQUESTS_FILES",
    "input_parameters": {
      "description": "Defines the parameters required to list files for a specific pull request in a repository.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository (e.g., a GitHub username or organization name). This field is not case sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to retrieve for pagination.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of file results to return per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "pull_number": {
          "description": "The numeric identifier of the pull request whose files are to be listed.",
          "examples": ["1", "123", "42"],
          "title": "Pull Number",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case sensitive.",
          "examples": ["Hello-World", "my-cool-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "pull_number"],
      "title": "ListPullRequestsFilesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListPullRequestsFilesResponseWrapper",
      "type": "object"
    },
    "description": "Lists all files (including additions, modifications, and removals) associated with a specific pull request in a github repository.",
    "tags": ["openWorldHint", "pulls", "readOnlyHint", "idempotentHint", "important"]
  },
  {
    "available_versions": ["latest"],
    "name": "List reactions for an issue",
    "slug": "GITHUB_LIST_REACTIONS_FOR_AN_ISSUE",
    "input_parameters": {
      "description": "Request schema for the `ListReactionsForAnIssue` action. Specifies the repository, issue, and optional filters for listing reactions.",
      "properties": {
        "content": {
          "description": "Filters reactions by a specific type. If omitted, all reactions to the issue are listed.",
          "enum": ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
          "examples": ["+1", "laugh", "heart"],
          "title": "Content",
          "type": "string"
        },
        "issue_number": {
          "description": "The unique number identifying the issue within the repository.",
          "examples": ["1347"],
          "title": "Issue Number",
          "type": "integer"
        },
        "owner": {
          "description": "The username of the account that owns the repository. This is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to fetch for pagination.",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of results to return per page, up to a maximum of 100.",
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This is not case-sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "issue_number"],
      "title": "ListReactionsForAnIssueRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListReactionsForAnIssueResponseWrapper",
      "type": "object"
    },
    "description": "Lists reactions for a specific, existing issue within an accessible github repository, optionally filtering by content type.",
    "tags": ["openWorldHint", "reactions", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List reactions for an issue comment",
    "slug": "GITHUB_LIST_REACTIONS_FOR_AN_ISSUE_COMMENT",
    "input_parameters": {
      "description": "Request schema for listing reactions for an issue comment on GitHub.",
      "properties": {
        "comment_id": {
          "description": "The unique identifier of the issue comment for which to list reactions.",
          "examples": ["123456789", "987654321"],
          "title": "Comment Id",
          "type": "integer"
        },
        "content": {
          "description": "Filters reactions by their content type (e.g., '+1', 'laugh'). Omit to list all types of reactions.",
          "enum": ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
          "examples": ["+1", "heart", "rocket"],
          "title": "Content",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository (e.g., a user or organization). This name is not case sensitive.",
          "examples": ["octocat", "microsoft"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results to fetch.",
          "examples": ["1", "2"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results to return per page (max 100).",
          "examples": ["30", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case sensitive.",
          "examples": ["Spoon-Knife", "vscode"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "comment_id"],
      "title": "ListReactionsForAnIssueCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A list of reactions for the specified issue comment.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListReactionsForAnIssueCommentResponseWrapper",
      "type": "object"
    },
    "description": "Lists reactions for a specific issue comment in a github repository, optionally filtering by content type.",
    "tags": ["openWorldHint", "reactions", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List reactions for a commit comment",
    "slug": "GITHUB_LIST_REACTIONS_FOR_A_COMMIT_COMMENT",
    "input_parameters": {
      "description": "Request schema for `ListReactionsForACommitComment`",
      "properties": {
        "comment_id": {
          "description": "Identifier of the commit comment.",
          "examples": ["42", "101"],
          "title": "Comment Id",
          "type": "integer"
        },
        "content": {
          "description": "Filter by reaction type. If unspecified, all reaction types for the comment are returned.",
          "enum": ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
          "examples": ["+1", "laugh", "heart"],
          "title": "Content",
          "type": "string"
        },
        "owner": {
          "description": "Owner of the repository (username or organization, case-insensitive).",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for the results (1-indexed).",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "Repository name, excluding the '.git' extension (case-insensitive).",
          "examples": ["Spoon-Knife", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "comment_id"],
      "title": "ListReactionsForACommitCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListReactionsForACommitCommentResponseWrapper",
      "type": "object"
    },
    "description": "Lists reactions for a specific commit comment; this is a read-only operation.",
    "tags": ["openWorldHint", "reactions", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List reactions for a pull request review comment",
    "slug": "GITHUB_LIST_REACTIONS_FOR_A_PULL_REQUEST_REVIEW_COMMENT",
    "input_parameters": {
      "description": "Request schema for `ListReactionsForAPullRequestReviewComment`",
      "properties": {
        "comment_id": {
          "description": "Unique identifier of the pull request review comment.",
          "title": "Comment Id",
          "type": "integer"
        },
        "content": {
          "description": "Filters reactions by a specific type; if omitted, all reactions are listed.",
          "enum": ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
          "examples": ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
          "title": "Content",
          "type": "string"
        },
        "owner": {
          "description": "Account owner of the repository (not case sensitive).",
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch.",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (not case sensitive).",
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "comment_id"],
      "title": "ListReactionsForAPullRequestReviewCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListReactionsForAPullRequestReviewCommentResponseWrapper",
      "type": "object"
    },
    "description": "Lists reactions for a pull request review comment in a repository, optionally filtering by reaction type.",
    "tags": ["openWorldHint", "reactions", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List reactions for a release",
    "slug": "GITHUB_LIST_REACTIONS_FOR_A_RELEASE",
    "input_parameters": {
      "description": "Request schema for `ListReactionsForARelease`",
      "properties": {
        "content": {
          "description": "Filters reactions by a specific type. See [GitHub documentation on reactions](https://docs.github.com/rest/reactions/reactions#about-reactions) for details on reaction types.",
          "enum": ["+1", "laugh", "heart", "hooray", "rocket", "eyes"],
          "examples": ["+1", "laugh", "heart", "hooray", "rocket", "eyes"],
          "title": "Content",
          "type": "string"
        },
        "owner": {
          "description": "The GitHub account owner of the repository (not case-sensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch (starts from 1). For pagination details, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100). For pagination details, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "release_id": {
          "description": "The unique identifier of the release.",
          "examples": ["12345"],
          "title": "Release Id",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension (not case-sensitive).",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "release_id"],
      "title": "ListReactionsForAReleaseRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListReactionsForAReleaseResponseWrapper",
      "type": "object"
    },
    "description": "Lists all reactions, or optionally filters reactions by a specific content type, for a given github release.",
    "tags": ["openWorldHint", "reactions", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List reactions for a team discussion",
    "slug": "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION",
    "input_parameters": {
      "description": "Request to list reactions for a team discussion.",
      "properties": {
        "content": {
          "description": "Filters reactions by a specific content type (e.g., '+1', 'laugh'). See GitHub's documentation on reactions for more details.",
          "enum": ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
          "examples": ["+1", "laugh", "heart", "rocket"],
          "title": "Content",
          "type": "string"
        },
        "discussion_number": {
          "description": "Unique number identifying the team discussion.",
          "examples": ["42", "123"],
          "title": "Discussion Number",
          "type": "integer"
        },
        "org": {
          "description": "Name of the organization (case-insensitive).",
          "examples": ["github", "octo-org"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results. See GitHub's REST API pagination guide for details.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100). See GitHub's REST API pagination guide for details.",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "team_slug": {
          "description": "URL-friendly identifier (slug) of the team.",
          "examples": ["justice-league", "api-team"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug", "discussion_number"],
      "title": "ListReactionsForATeamDiscussionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListReactionsForATeamDiscussionResponseWrapper",
      "type": "object"
    },
    "description": "Lists reactions for an existing team discussion within an organization.",
    "tags": ["openWorldHint", "reactions", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List reactions for a team discussion comment",
    "slug": "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION_COMMENT",
    "input_parameters": {
      "description": "Request schema for listing reactions for a team discussion comment.",
      "properties": {
        "comment_number": {
          "description": "Unique identifier for the comment within the discussion.",
          "examples": [1, 15],
          "title": "Comment Number",
          "type": "integer"
        },
        "content": {
          "description": "Filters reactions by a specific content type.",
          "enum": ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
          "examples": ["+1", "heart", "rocket"],
          "title": "Content",
          "type": "string"
        },
        "discussion_number": {
          "description": "Unique identifier for the team discussion.",
          "examples": [42, 123],
          "title": "Discussion Number",
          "type": "integer"
        },
        "org": {
          "description": "The organization's name (case-insensitive).",
          "examples": ["github", "my-company-org"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to retrieve.",
          "examples": [1, 2, 5],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "examples": [30, 50, 100],
          "title": "Per Page",
          "type": "integer"
        },
        "team_slug": {
          "description": "URL-friendly slug of the team name.",
          "examples": ["justice-league", "engineering-team"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug", "discussion_number", "comment_number"],
      "title": "ListReactionsForATeamDiscussionCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response, typically a JSON list of reaction objects. Each object includes `id`, `node_id`, `user` (can be null), `content` (reaction type), and `created_at`. Refer to GitHub API documentation for the precise structure.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListReactionsForATeamDiscussionCommentResponseWrapper",
      "type": "object"
    },
    "description": "Lists reactions for a specific comment in a team discussion within an organization, optionally filtering by content type.",
    "tags": ["openWorldHint", "reactions", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List releases",
    "slug": "GITHUB_LIST_RELEASES",
    "input_parameters": {
      "description": "Request schema for retrieving a list of releases for a repository.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository. This name is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "examples": [1, 2, 5],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of results to return per page. The maximum value is 100. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "examples": [30, 50, 100],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListReleasesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A list of release objects for the repository. Each object contains details about a release, such as its ID, tag name, release name, publication status, assets, and notes. The structure of each release object typically includes fields like 'id', 'tag_name', 'name', 'body', 'draft', 'prerelease', 'created_at', 'published_at', 'assets', etc.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListReleasesResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a list of all releases (published, draft, and prerelease) for a specified repository.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List release assets",
    "slug": "GITHUB_LIST_RELEASE_ASSETS",
    "input_parameters": {
      "description": "Request schema for `ListReleaseAssets`",
      "properties": {
        "owner": {
          "description": "Username or organization name of the repository owner (case-insensitive).",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch (starts from 1). For pagination details, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100). For pagination details, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "release_id": {
          "description": "Unique numerical identifier for the release. Obtainable by listing a repository's releases.",
          "examples": ["12345678", "98765432"],
          "title": "Release Id",
          "type": "integer"
        },
        "repo": {
          "description": "Name of the repository, excluding the `.git` extension (case-insensitive).",
          "examples": ["Hello-World", "linguist"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "release_id"],
      "title": "ListReleaseAssetsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response payload detailing release assets, typically a list of asset objects including download URL, name, size, content type, and uploader.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListReleaseAssetsResponseWrapper",
      "type": "object"
    },
    "description": "Lists assets (e.g., compiled binaries, source code archives) for a specific github release, identified by `release id` which must be valid for an existing release in the repository.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repos accessible to app installation",
    "slug": "GITHUB_LIST_REPOSITORIES_ACCESSIBLE_TO_THE_APP_INSTALLATION",
    "input_parameters": {
      "description": "Request to list repositories accessible to an app installation.",
      "properties": {
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "title": "ListRepositoriesAccessibleToTheAppInstallationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Raw API response detailing accessible repositories; includes 'total_count', 'repository_selection', and 'repositories' array.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoriesAccessibleToTheAppInstallationResponseWrapper",
      "type": "object"
    },
    "description": "Lists repositories an app installation can access; 'total count' in response is zero if none are accessible.",
    "tags": ["apps", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repositories accessible to the user access token",
    "slug": "GITHUB_LIST_REPOSITORIES_ACCESSIBLE_TO_THE_USER_ACCESS_TOKEN",
    "input_parameters": {
      "description": "Request for listing repositories accessible via a GitHub App installation.",
      "properties": {
        "installation_id": {
          "description": "Unique identifier of the GitHub App installation.",
          "examples": ["1234567", "8765432"],
          "title": "Installation Id",
          "type": "integer"
        },
        "page": {
          "default": 1,
          "description": "Page number of results to fetch.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "required": ["installation_id"],
      "title": "ListRepositoriesAccessibleToTheUserAccessTokenRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response, including `total_count` and a list of `repositories` accessible by the installation.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoriesAccessibleToTheUserAccessTokenResponseWrapper",
      "type": "object"
    },
    "description": "Lists repositories accessible to the authenticated user through a specific github app installation (identified by `installation id`).",
    "tags": ["apps", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repositories for a user",
    "slug": "GITHUB_LIST_REPOSITORIES_FOR_A_USER",
    "input_parameters": {
      "description": "Request schema for `ListRepositoriesForAUser`",
      "properties": {
        "direction": {
          "description": "Sort direction: `asc` or `desc`. Defaults to `asc` for `full_name` sort, `desc` otherwise.",
          "enum": ["asc", "desc"],
          "examples": ["asc", "desc"],
          "title": "Direction",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for results (starts from 1). See GitHub REST API pagination docs for more info.",
          "examples": [1, 2, 3],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100). See GitHub REST API pagination docs for more info.",
          "examples": [30, 50, 100],
          "title": "Per Page",
          "type": "integer"
        },
        "sort": {
          "default": "full_name",
          "description": "Sort criterion: `created`, `updated`, `pushed`, or `full_name` (repository name).",
          "enum": ["created", "updated", "pushed", "full_name"],
          "examples": ["created", "updated", "pushed", "full_name"],
          "title": "Sort",
          "type": "string"
        },
        "type": {
          "default": "owner",
          "description": "Filter for repository type: `all` (owned or member), `owner` (directly owned), or `member` (user is a public member).",
          "enum": ["all", "owner", "member"],
          "examples": ["all", "owner", "member"],
          "title": "Type",
          "type": "string"
        },
        "username": {
          "description": "GitHub username, e.g., 'octocat'.",
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["username"],
      "title": "ListRepositoriesForAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The raw JSON response from the GitHub API. The GitHub API endpoint for listing user repositories directly returns a JSON array of repository objects. This `data` field (typed as a dictionary) will contain this response. You should inspect the contents of this dictionary to locate the list of repositories, where each repository is represented as a dictionary containing its details. For the specific structure of repository objects, refer to the official GitHub API documentation.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoriesForAUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists public repositories for a specified github user, who must have an existing account.",
    "tags": ["openWorldHint", "readOnlyHint", "repos"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repositories for the authenticated user",
    "slug": "GITHUB_LIST_REPOSITORIES_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for `ListRepositoriesForTheAuthenticatedUser`",
      "properties": {
        "before": {
          "description": "Filters for repositories updated before this specified time. Provide as an ISO 8601 formatted timestamp.",
          "examples": ["2024-01-01T00:00:00Z", "2024-03-20T18:45:00+00:00"],
          "title": "Before",
          "type": "string"
        },
        "direction": {
          "description": "The direction of the sort. Defaults to `asc` when `sort` is 'full_name', and `desc` otherwise.",
          "enum": ["asc", "desc"],
          "examples": ["asc", "desc"],
          "title": "Direction",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results to fetch.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of results to return per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "raw_response": {
          "default": false,
          "description": "Return full API response if true, optimized response for AI agents if false.",
          "examples": [true, false],
          "title": "Raw Response",
          "type": "boolean"
        },
        "since": {
          "description": "Filters for repositories updated at or after this specified time. Provide as an ISO 8601 formatted timestamp.",
          "examples": ["2023-01-01T00:00:00Z", "2023-05-15T10:30:00-07:00"],
          "title": "Since",
          "type": "string"
        },
        "sort": {
          "default": "full_name",
          "description": "The repository property by which to sort the results.",
          "enum": ["created", "updated", "pushed", "full_name"],
          "examples": ["created", "full_name", "updated"],
          "title": "Sort",
          "type": "string"
        },
        "type": {
          "default": "all",
          "description": "Filters the results to repositories of the specified type.",
          "enum": ["all", "owner", "public", "private", "member"],
          "examples": ["all", "owner", "member"],
          "title": "Type",
          "type": "string"
        }
      },
      "title": "ListRepositoriesForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The response data from the GitHub API. The underlying API endpoint (`GET /user/repos`) returns an array of repository objects. For the detailed structure of these repository objects, consult the official GitHub API documentation for 'repos/list-for-authenticated-user'.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoriesForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists repositories for the authenticated user; using 'type' with 'visibility' or 'affiliation' api parameters (not in this model) can cause a 422 error.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "important"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repositories starred by a user",
    "slug": "GITHUB_LIST_REPOSITORIES_STARRED_BY_A_USER",
    "input_parameters": {
      "description": "Request schema for `ListRepositoriesStarredByAUser`",
      "properties": {
        "direction": {
          "default": "desc",
          "description": "The direction for sorting the results. Can be `asc` for ascending or `desc` for descending.",
          "enum": ["asc", "desc"],
          "title": "Direction",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to retrieve (starts from 1). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" ",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 1,
          "description": "The number of results to display per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" ",
          "title": "Per Page",
          "type": "integer"
        },
        "sort": {
          "default": "created",
          "description": "The criteria for sorting the starred repositories. `created` sorts by the date the repository was starred. `updated` sorts by the date the repository was last pushed to.",
          "enum": ["created", "updated"],
          "title": "Sort",
          "type": "string"
        },
        "username": {
          "description": "The GitHub username of the user whose starred repositories are to be listed.",
          "examples": ["octocat", "torvalds"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["username"],
      "title": "ListRepositoriesStarredByAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoriesStarredByAUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists repositories a valid and existing github user has starred.",
    "tags": ["activity", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repositories starred by the authenticated user",
    "slug": "GITHUB_LIST_REPOSITORIES_STARRED_BY_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for `ListRepositoriesStarredByTheAuthenticatedUser`",
      "properties": {
        "direction": {
          "default": "desc",
          "description": "Sort direction: 'asc' (ascending) or 'desc' (descending).",
          "enum": ["asc", "desc"],
          "examples": ["asc", "desc"],
          "title": "Direction",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results (starts from 1).",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 1,
          "description": "Number of results per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "sort": {
          "default": "created",
          "description": "Sorts starred repositories by 'created' (date starred) or 'updated' (date last pushed).",
          "enum": ["created", "updated"],
          "examples": ["created", "updated"],
          "title": "Sort",
          "type": "string"
        }
      },
      "title": "ListRepositoriesStarredByTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoriesStarredByTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists repositories the authenticated user has starred, optionally sorted and paginated, including star creation timestamps via 'application/vnd.github.star+json' media type.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "important", "Stars"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repositories watched by a user",
    "slug": "GITHUB_LIST_REPOSITORIES_WATCHED_BY_A_USER",
    "input_parameters": {
      "description": "Parameters for listing repositories watched by a specific GitHub user.",
      "properties": {
        "page": {
          "default": 1,
          "description": "Page number of results (starts from 1).",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "username": {
          "description": "The GitHub username (case-sensitive).",
          "examples": ["octocat", "torvalds", "github_user_123"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["username"],
      "title": "ListRepositoriesWatchedByAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary of watched repository objects, indexed by string representations of numbers.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoriesWatchedByAUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists repositories a given github user is watching; the username must be a valid and existing github user handle.",
    "tags": ["activity", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repositories watched by the authenticated user",
    "slug": "GITHUB_LIST_REPOSITORIES_WATCHED_BY_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for listing repositories watched by the authenticated user.",
      "properties": {
        "page": {
          "default": 1,
          "description": "Page number of the results to retrieve.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "title": "ListRepositoriesWatchedByTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response payload containing the list of watched repositories.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoriesWatchedByTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists repositories the authenticated user is watching (subscribed to for notifications).",
    "tags": ["activity", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repository activities",
    "slug": "GITHUB_LIST_REPOSITORY_ACTIVITIES",
    "input_parameters": {
      "description": "Request schema for `ListRepositoryActivities`",
      "properties": {
        "activity_type": {
          "description": "Filters activities by a specific type, such as 'push' or 'pr_merge'. If unspecified, all relevant activity types are returned.",
          "enum": [
            "push",
            "force_push",
            "branch_creation",
            "branch_deletion",
            "pr_merge",
            "merge_queue_merge"
          ],
          "examples": ["push", "force_push", "branch_creation", "pr_merge"],
          "title": "Activity Type",
          "type": "string"
        },
        "actor": {
          "description": "The GitHub username of the person who performed the activity. Filters activities to only those performed by this user.",
          "examples": ["monalisa", "octocat"],
          "title": "Actor",
          "type": "string"
        },
        "after": {
          "description": "A pagination cursor. Returns activity items that occurred after this cursor. This cursor is typically obtained from the `Link` header in a previous API response. For more details, see GitHub's REST API documentation on \"Using pagination in the REST API\" and \"Using Link headers\".",
          "examples": ["Y3Vyc29yOnYyOpHGAS0A9A=="],
          "title": "After",
          "type": "string"
        },
        "before": {
          "description": "A pagination cursor. Returns activity items that occurred before this cursor. This cursor is typically obtained from the `Link` header in a previous API response. For more details, see GitHub's REST API documentation on \"Using pagination in the REST API\" and \"Using Link headers\".",
          "examples": ["Y3Vyc29yOnYyOpHOBfWMIQ=="],
          "title": "Before",
          "type": "string"
        },
        "direction": {
          "default": "desc",
          "description": "The direction to sort the activity results. Use 'asc' for ascending (oldest first) or 'desc' for descending (newest first).",
          "enum": ["asc", "desc"],
          "examples": ["asc", "desc"],
          "title": "Direction",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository (e.g., a GitHub username or organization name). This name is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "per_page": {
          "default": 1,
          "description": "The number of activity results to return per page. Maximum value is 100. For more information, see the GitHub REST API guide on \"Using pagination in the REST API\".",
          "title": "Per Page",
          "type": "integer"
        },
        "ref": {
          "description": "The Git reference for which to list activities (e.g., a branch name like `main` or a full ref like `refs/heads/main`). If unspecified, activities from all branches are listed.",
          "examples": ["main", "refs/heads/develop", "feature-xyz"],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        },
        "time_period": {
          "description": "Filters activities based on a predefined time period. For example, 'day' retrieves activities from the last 24 hours, and 'week' from the last 7 days (168 hours).",
          "enum": ["day", "week", "month", "quarter", "year"],
          "examples": ["day", "week", "month", "quarter", "year"],
          "title": "Time Period",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListRepositoryActivitiesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoryActivitiesResponseWrapper",
      "type": "object"
    },
    "description": "Lists activities for a github repository, ensuring the repository exists and is accessible.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repository collaborators",
    "slug": "GITHUB_LIST_REPOSITORY_COLLABORATORS",
    "input_parameters": {
      "description": "Request schema for listing repository collaborators, allowing filtering by affiliation and permission.",
      "properties": {
        "affiliation": {
          "default": "all",
          "description": "Filter collaborators by affiliation: 'outside' (collaborators of an organization-owned repository not part of the org), 'direct' (collaborators with direct permissions to an organization-owned repository), or 'all' (all collaborators visible to the authenticated user).",
          "enum": ["outside", "direct", "all"],
          "title": "Affiliation",
          "type": "string"
        },
        "owner": {
          "description": "The username of the account that owns the repository. This value is not case sensitive.",
          "examples": ["octocat", "google"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to retrieve.",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of results to return per page. Maximum value is 100.",
          "title": "Per Page",
          "type": "integer"
        },
        "permission": {
          "description": "Filter collaborators by their repository permission level.",
          "enum": ["pull", "triage", "push", "maintain", "admin"],
          "title": "Permission",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This value is not case sensitive.",
          "examples": ["hello-world", "mercury"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListRepositoryCollaboratorsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A list of collaborator objects.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoryCollaboratorsResponseWrapper",
      "type": "object"
    },
    "description": "Lists collaborators for a specified repository, provided it exists and is accessible to the authenticated user.",
    "tags": ["openWorldHint", "readOnlyHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repository contributors",
    "slug": "GITHUB_LIST_REPOSITORY_CONTRIBUTORS",
    "input_parameters": {
      "description": "Defines the parameters used to list contributors for a GitHub repository.",
      "properties": {
        "anon": {
          "description": "Set to '1' or 'true' to include anonymous contributors. If omitted, anonymous contributors are not included.",
          "examples": ["1", "true"],
          "title": "Anon",
          "type": "string"
        },
        "owner": {
          "description": "Username of the account owning the repository. Not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results to retrieve (1-based indexing).",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of contributor results per page. Maximum value is 100.",
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "Name of the repository (without `.git` extension). Not case-sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListRepositoryContributorsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoryContributorsResponseWrapper",
      "type": "object"
    },
    "description": "Lists contributors to a specified repository, sorted by number of contributions in descending order; the repository must exist and be accessible.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "important"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repository events",
    "slug": "GITHUB_LIST_REPOSITORY_EVENTS",
    "input_parameters": {
      "description": "Request schema for `ListRepositoryEvents`",
      "properties": {
        "owner": {
          "description": "Owner's username or organization name (not case-sensitive).",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for paginating results.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of events to return per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension (not case-sensitive).",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListRepositoryEventsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Parsed JSON response from the API, which is a list of event objects. For event object structure, refer to GitHub API documentation.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoryEventsResponseWrapper",
      "type": "object"
    },
    "description": "Lists chronological events (e.g., code pushes, issue activities, pr actions, forks) for a specified, existing github repository.",
    "tags": ["activity", "openWorldHint", "readOnlyHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repository invitations",
    "slug": "GITHUB_LIST_REPOSITORY_INVITATIONS",
    "input_parameters": {
      "description": "Request model for listing repository invitations, specifying the target repository and pagination.",
      "properties": {
        "owner": {
          "description": "The username of the account that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to retrieve.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results to return per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the '.git' extension. This field is not case-sensitive.",
          "examples": ["docs", "Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListRepositoryInvitationsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "List of repository invitation objects, each detailing the invitation ID, invitee, repository, permissions, and creation date.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoryInvitationsResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves all pending (unaccepted or undeclined) collaboration invitations for a specified github repository.",
    "tags": ["openWorldHint", "readOnlyHint", "repos"]
  },
  {
    "available_versions": ["latest"],
    "name": "List authenticated user's repository invitations",
    "slug": "GITHUB_LIST_REPOSITORY_INVITATIONS_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Parameters for listing repository invitations for the authenticated user.",
      "properties": {
        "page": {
          "default": 1,
          "description": "Page number of the results to retrieve.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results to return per page. Maximum allowed value is 100.",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "title": "ListRepositoryInvitationsForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "List of repository invitations. Each invitation details its ID, repository information (e.g., name, owner), inviter, invitee, granted permissions (e.g., read, write), and creation timestamp.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoryInvitationsForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists all pending repository invitations for the authenticated user.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repository issues",
    "slug": "GITHUB_LIST_REPOSITORY_ISSUES",
    "input_parameters": {
      "description": "Defines the parameters for the `ListRepositoryIssues` action, used to filter and paginate issues from a GitHub repository.",
      "properties": {
        "assignee": {
          "description": "Filter issues by assignee's username. Use 'none' for issues with no assignee, or '*' for issues assigned to any user.",
          "examples": ["codertocat", "none", "*"],
          "title": "Assignee",
          "type": "string"
        },
        "creator": {
          "description": "Filter issues by the username of the user who created the issue.",
          "examples": ["octocat"],
          "title": "Creator",
          "type": "string"
        },
        "direction": {
          "default": "desc",
          "description": "The direction of the sort.",
          "enum": ["asc", "desc"],
          "examples": ["asc", "desc"],
          "title": "Direction",
          "type": "string"
        },
        "labels": {
          "description": "A comma-separated list of label names to filter issues by. Example: 'bug,ui,@high'.",
          "examples": ["bug,ui,@high", "enhancement", "help wanted,good first issue"],
          "title": "Labels",
          "type": "string"
        },
        "mentioned": {
          "description": "Filter issues by a user mentioned in the issue's description or comments. Provide the username.",
          "examples": ["octodocs", "hubot"],
          "title": "Mentioned",
          "type": "string"
        },
        "milestone": {
          "description": "Filter issues by milestone. Provide the milestone `number` as a string, '*' for issues with any milestone, or 'none' for issues without a milestone.",
          "examples": ["1", "*", "none"],
          "title": "Milestone",
          "type": "string"
        },
        "owner": {
          "description": "The GitHub account owner of the repository. This name is not case-sensitive.",
          "examples": ["octocat", "microsoft"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for the set of results. Refer to GitHub's REST API documentation for pagination details.",
          "examples": ["1", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 1,
          "description": "Number of results per page (max 100). Refer to GitHub's REST API documentation for pagination details.",
          "examples": ["30", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Spoon-Knife", "vscode"],
          "title": "Repo",
          "type": "string"
        },
        "since": {
          "description": "Filters issues to include only those updated at or after the specified time. This should be a timestamp in ISO 8601 format (e.g., `YYYY-MM-DDTHH:MM:SSZ`).",
          "examples": ["2023-01-15T10:00:00Z", "2024-03-10T00:00:00+05:30"],
          "title": "Since",
          "type": "string"
        },
        "sort": {
          "default": "created",
          "description": "The field to sort the results by.",
          "enum": ["created", "updated", "comments"],
          "examples": ["created", "updated", "comments"],
          "title": "Sort",
          "type": "string"
        },
        "state": {
          "default": "open",
          "description": "Filters issues based on their state.",
          "enum": ["open", "closed", "all"],
          "examples": ["open", "closed", "all"],
          "title": "State",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListRepositoryIssuesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Parsed JSON response from GitHub API, typically a list of issues.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoryIssuesResponseWrapper",
      "type": "object"
    },
    "description": "Lists issues (which include pull requests) for a specified, existing github repository, with options for filtering, sorting, and pagination.",
    "tags": ["important", "issues", "openWorldHint", "readOnlyHint", "idempotentHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repository languages",
    "slug": "GITHUB_LIST_REPOSITORY_LANGUAGES",
    "input_parameters": {
      "description": "Request schema for `ListRepositoryLanguages` action.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository (username or organization name). This name is not case-sensitive.",
          "examples": ["octocat", "kubernetes"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Spoon-Knife", "community"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListRepositoryLanguagesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary where keys are programming language names (e.g., 'Python', 'JavaScript') and values are the total number of bytes of code written in that language within the repository.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoryLanguagesResponseWrapper",
      "type": "object"
    },
    "description": "Lists the programming languages used in a github repository, returning a byte count for each language.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repository notifications for the authenticated user",
    "slug": "GITHUB_LIST_REPOSITORY_NOTIFICATIONS_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for `ListRepositoryNotificationsForTheAuthenticatedUser`",
      "properties": {
        "all": {
          "default": false,
          "description": "If `true`, shows notifications marked as read; otherwise, only unread notifications are returned.",
          "title": "All",
          "type": "boolean"
        },
        "before": {
          "description": "Only includes notifications last updated before this ISO 8601 UTC timestamp (e.g., `YYYY-MM-DDTHH:MM:SSZ`).",
          "examples": ["2023-12-31T23:59:59Z", "2024-04-01T00:00:00Z"],
          "title": "Before",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat", "actions"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to retrieve.",
          "title": "Page",
          "type": "integer"
        },
        "participating": {
          "default": false,
          "description": "If `true`, shows only notifications in which the authenticated user is directly participating or was mentioned.",
          "title": "Participating",
          "type": "boolean"
        },
        "per_page": {
          "default": 30,
          "description": "The number of notifications to return per page. Maximum value is 100.",
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. The name is not case sensitive.",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        },
        "since": {
          "description": "Only includes notifications last updated on or after this ISO 8601 UTC timestamp (e.g., `YYYY-MM-DDTHH:MM:SSZ`).",
          "examples": ["2023-01-01T00:00:00Z", "2024-03-15T10:30:00Z"],
          "title": "Since",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListRepositoryNotificationsForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoryNotificationsForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves notifications for the authenticated user from a specified repository, to which the user must have access.",
    "tags": ["activity", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repository organization secrets",
    "slug": "GITHUB_LIST_REPOSITORY_ORGANIZATION_SECRETS",
    "input_parameters": {
      "description": "Request schema for `ListRepositoryOrganizationSecrets`",
      "properties": {
        "owner": {
          "description": "The username or organization name that owns the repository (case-insensitive).",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for paginated results.",
          "examples": ["1", "2", "3"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of secrets per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (case-insensitive).",
          "examples": ["hello-world", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListRepositoryOrganizationSecretsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoryOrganizationSecretsResponseWrapper",
      "type": "object"
    },
    "description": "Lists names of organization-level secrets shared with the specified repository; actual secret values are not returned and visibility depends on token access.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Secrets", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repository organization variables",
    "slug": "GITHUB_LIST_REPOSITORY_ORGANIZATION_VARIABLES",
    "input_parameters": {
      "description": "Lists organization variables available to a specific repository.",
      "properties": {
        "owner": {
          "description": "Username of the account owning the repository (case-insensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results. For pagination details, see GitHub REST API docs.",
          "examples": [1],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 10,
          "description": "Number of results per page (max 30). For pagination details, see GitHub REST API docs.",
          "examples": [20],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (case-insensitive).",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListRepositoryOrganizationVariablesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Dictionary with total count and list of organization variables (each with name, value, created_at, updated_at).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoryOrganizationVariablesResponseWrapper",
      "type": "object"
    },
    "description": "Lists organization variables accessible to a specific repository; the repository must exist.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repository projects",
    "slug": "GITHUB_LIST_REPOSITORY_PROJECTS",
    "input_parameters": {
      "description": "Parameters to list projects for a repository.",
      "properties": {
        "owner": {
          "description": "Username of the account owning the repository (case-insensitive).",
          "examples": ["octocat", "google"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to retrieve.",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of projects to return per page (maximum 100).",
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (case-insensitive).",
          "examples": ["Hello-World", "tensorflow"],
          "title": "Repo",
          "type": "string"
        },
        "state": {
          "default": "open",
          "description": "Filters projects by their state.",
          "enum": ["open", "closed", "all"],
          "examples": ["open", "closed", "all"],
          "title": "State",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListRepositoryProjectsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoryProjectsResponseWrapper",
      "type": "object"
    },
    "description": "Lists projects associated with a specific repository.",
    "tags": ["openWorldHint", "projects", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repository rule suites",
    "slug": "GITHUB_LIST_REPOSITORY_RULE_SUITES",
    "input_parameters": {
      "description": "Defines the parameters for the request to list repository rule suites.",
      "properties": {
        "actor_name": {
          "description": "GitHub username of the actor to filter by. If specified, only evaluations triggered by this user are returned.",
          "examples": ["octocat", "monalisa"],
          "title": "Actor Name",
          "type": "string"
        },
        "owner": {
          "description": "The username of the account or the organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results to retrieve.",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "title": "Per Page",
          "type": "integer"
        },
        "ref": {
          "description": "The ref (e.g., branch or tag name) to filter by; cannot contain wildcard characters. If provided, only evaluations for this ref are returned.",
          "examples": ["refs/heads/main", "refs/tags/v1.0.0"],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the '.git' extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        },
        "rule_suite_result": {
          "default": "all",
          "description": "Filter rule suites by evaluation outcome (e.g., 'pass', 'fail', 'bypass').",
          "enum": ["pass", "fail", "bypass", "all"],
          "examples": ["pass", "fail"],
          "title": "Rule Suite Result",
          "type": "string"
        },
        "time_period": {
          "default": "day",
          "description": "Time period to filter rule suites: 'hour' (last hour), 'day' (last 24 hours), 'week' (last 7 days), or 'month' (last 30 days).",
          "enum": ["hour", "day", "week", "month"],
          "examples": ["day", "week"],
          "title": "Time Period",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListRepositoryRuleSuitesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoryRuleSuitesResponseWrapper",
      "type": "object"
    },
    "description": "Lists rule suite evaluations for a repository, allowing filtering by ref (non-wildcard), time period, actor, and result.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repository secrets",
    "slug": "GITHUB_LIST_REPOSITORY_SECRETS",
    "input_parameters": {
      "description": "Request schema for listing secrets in a GitHub repository.",
      "properties": {
        "owner": {
          "description": "The GitHub account owner of the repository. This is typically a username or organization name. The name is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of secrets per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. The name is not case-sensitive.",
          "examples": ["Spoon-Knife", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListRepositorySecretsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositorySecretsResponseWrapper",
      "type": "object"
    },
    "description": "Lists metadata for all secrets in a github repository, excluding their encrypted values.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "idempotentHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repository secrets without decrypting",
    "slug": "GITHUB_LIST_REPOSITORY_SECRETS_WITHOUT_DECRYPTING",
    "input_parameters": {
      "description": "Request schema for listing Dependabot secrets in a repository without decryption.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository (e.g., a GitHub username or organization name). This field is not case sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to retrieve (starts from 1).",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of secrets to return per page (max 100).",
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case sensitive.",
          "examples": ["hello-world", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListRepositorySecretsWithoutDecryptingRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositorySecretsWithoutDecryptingResponseWrapper",
      "type": "object"
    },
    "description": "Lists metadata (e.g., name, creation/update dates) for all dependabot secrets in a repository; secret values are not included.",
    "tags": ["dependabot", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repository tags",
    "slug": "GITHUB_LIST_REPOSITORY_TAGS",
    "input_parameters": {
      "description": "Defines the request parameters for listing tags in a GitHub repository.",
      "properties": {
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to retrieve for pagination.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of tag results to return per page; maximum 100.",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListRepositoryTagsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the API response. Typically, this will be a list of objects, where each object represents a tag and includes details like the tag name, commit SHA, and tarball/zipball URLs.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoryTagsResponseWrapper",
      "type": "object"
    },
    "description": "Lists tags for a specified github repository.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repository teams",
    "slug": "GITHUB_LIST_REPOSITORY_TEAMS",
    "input_parameters": {
      "description": "Request schema for listing teams that have access to a repository.",
      "properties": {
        "owner": {
          "description": "The username of the account that owns the repository. This value is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to retrieve.",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of team results to return per page (maximum 100).",
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This value is not case-sensitive.",
          "examples": ["Spoon-Knife", "api-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListRepositoryTeamsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "description": "A list of team objects that have access to the repository. Each object typically includes details like team ID, name, slug, description, privacy status, and the permission level (e.g., 'pull', 'push', 'admin') the team has for this repository. Refer to the GitHub API documentation for the full team object structure.",
          "items": { "additionalProperties": true, "properties": {}, "type": "object" },
          "title": "Data",
          "type": "array"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoryTeamsResponseWrapper",
      "type": "object"
    },
    "description": "Lists all teams with explicit permission to access the specified repository; the repository must exist.",
    "tags": ["openWorldHint", "readOnlyHint", "idempotentHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repository variables",
    "slug": "GITHUB_LIST_REPOSITORY_VARIABLES",
    "input_parameters": {
      "description": "Request schema for listing repository variables.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository. This can be a username or an organization name. The name is not case sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 10,
          "description": "Number of repository variables to return per page (maximum 30).",
          "examples": ["10", "20", "30"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. The name is not case sensitive.",
          "examples": ["linguist", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListRepositoryVariablesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the API response. It typically includes `total_count` (the total number of variables in the repository) and `variables` (a list of variable objects). Each variable object usually contains `name`, `value`, `created_at`, and `updated_at` fields.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoryVariablesResponseWrapper",
      "type": "object"
    },
    "description": "Lists plain text key-value variables for github actions workflows within a specific, accessible repository.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "idempotentHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repository webhooks",
    "slug": "GITHUB_LIST_REPOSITORY_WEBHOOKS",
    "input_parameters": {
      "description": "Request schema to list webhooks for a repository.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository (e.g., a GitHub username or organization name). This name is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to retrieve.",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of webhook results per page. Maximum is 100.",
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Spoon-Knife", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListRepositoryWebhooksRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A list of webhook objects for the repository. Each object includes details like ID, type, name, active status, events, and configuration. Note: Represents the list of webhooks from the GitHub API, though typed as `Dict[str, t.Any]`.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoryWebhooksResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a list of webhooks for a repository, which must exist and be accessible.",
    "tags": ["openWorldHint", "readOnlyHint", "idempotentHint", "repos"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repository workflows",
    "slug": "GITHUB_LIST_REPOSITORY_WORKFLOWS",
    "input_parameters": {
      "description": "Request schema for listing repository workflows.",
      "properties": {
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to fetch.",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of workflow results to return per page. Maximum value is 100.",
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife", "my-repo-name"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListRepositoryWorkflowsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the API response from GitHub. It typically includes a `total_count` of workflows and a `workflows` array, where each element is an object detailing a workflow.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoryWorkflowsResponseWrapper",
      "type": "object"
    },
    "description": "Lists all github actions workflows for a specified repository, which must exist and be accessible.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repos with ghactions cache usage",
    "slug": "GITHUB_LIST_REPOS_WITH_GHACTIONS_CACHE_USAGE",
    "input_parameters": {
      "description": "Request schema for `ListReposWithGhactionsCacheUsage`",
      "properties": {
        "org": {
          "description": "The name of the GitHub organization for which to retrieve repository cache usage. This name is not case-sensitive.",
          "examples": ["MyOrganization", "github"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number for the set of results to fetch.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of repository cache usage results to return per page (maximum is 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "required": ["org"],
      "title": "ListReposWithGhactionsCacheUsageRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the API's response. It includes 'total_count' (integer: total number of repositories with cache usage for the organization) and 'repository_cache_usages' (list of objects). Each object in 'repository_cache_usages' details a repository's cache usage with 'full_name' (string: e.g., 'octo-org/Hello-World'), 'active_caches_size_in_bytes' (integer: sum of active cache usage in bytes), and 'active_caches_count' (integer: number of active caches).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListReposWithGhactionsCacheUsageResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a paginated list of github actions cache usage statistics for repositories within an existing github organization.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repo access by token",
    "slug": "GITHUB_LIST_REPO_ACCESS_BY_TOKEN",
    "input_parameters": {
      "description": "Request schema for `ListRepoAccessByToken` action.",
      "properties": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "examples": ["github", "my-company-org"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "title": "Page",
          "type": "integer"
        },
        "pat_request_id": {
          "description": "Unique identifier of the request for access via fine-grained personal access token.",
          "examples": ["12345", "67890"],
          "title": "Pat Request Id",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "title": "Per Page",
          "type": "integer"
        }
      },
      "required": ["org", "pat_request_id"],
      "title": "ListRepoAccessByTokenRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepoAccessByTokenResponseWrapper",
      "type": "object"
    },
    "description": "Lists repositories in an organization that a fine-grained personal access token (`pat request id`) has requested access to; must be performed by a github app.",
    "tags": ["openWorldHint", "orgs", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repo codespaces for authenticated user",
    "slug": "GITHUB_LIST_REPO_CODESPACES",
    "input_parameters": {
      "description": "Request schema for listing Codespaces in a repository for the authenticated user.",
      "properties": {
        "owner": {
          "description": "Username or organization name of the account that owns the repository (case-insensitive).",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to retrieve.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results to return per page. Maximum: 100.",
          "examples": ["25", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (case-insensitive).",
          "examples": ["hello-world", "docs"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListCodespacesInARepositoryForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The raw JSON response from the API. Typically includes a 'total_count' of codespaces and a 'codespaces' array containing detailed information for each codespace.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListCodespacesInARepositoryForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists codespaces the authenticated user can access within a specified, existing repository.",
    "tags": ["codespaces", "openWorldHint", "readOnlyHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repo dev container configs for user",
    "slug": "GITHUB_LIST_REPO_DEV_CONTAINER_CONFIGS_FOR_USER",
    "input_parameters": {
      "description": "Parameters for listing dev container configurations in a repository.",
      "properties": {
        "owner": {
          "description": "The username or organization name that owns the repository (not case-sensitive).",
          "examples": ["octocat", "microsoft"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the dev container configuration results to fetch.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of dev container configuration results to return per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension (not case-sensitive).",
          "examples": ["vscode", "TypeScript"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListRepoDevContainerConfigsForUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepoDevContainerConfigsForUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists the `devcontainer.json` configurations available in a specified repository for use with github codespaces.",
    "tags": ["codespaces", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List repo secrets without values",
    "slug": "GITHUB_LIST_REPO_SECRETS_WITHOUT_VALUES",
    "input_parameters": {
      "description": "Request schema for the `ListRepoSecretsWithoutValues` action, specifying the repository and pagination parameters.",
      "properties": {
        "owner": {
          "description": "The username of the account that owns the repository. This is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to retrieve. Used for pagination.",
          "examples": ["1", "2"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of secrets to return per page. Maximum value is 100.",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This is not case-sensitive.",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListRepoSecretsWithoutValuesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepoSecretsWithoutValuesResponseWrapper",
      "type": "object"
    },
    "description": "Lists all codespaces secrets available in a specific repository, without their encrypted values.",
    "tags": ["codespaces", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List reviews for a pull request",
    "slug": "GITHUB_LIST_REVIEWS_FOR_A_PULL_REQUEST",
    "input_parameters": {
      "description": "Request schema for `ListReviewsForAPullRequest`",
      "properties": {
        "owner": {
          "description": "The account owner of the repository (e.g., a GitHub username or organization name). This name is not case sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number for the set of results to retrieve.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of review results to display per page. Maximum 100.",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "pull_number": {
          "description": "The unique number identifying the pull request within the repository.",
          "examples": ["1347", "42"],
          "title": "Pull Number",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case sensitive.",
          "examples": ["Hello-World", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "pull_number"],
      "title": "ListReviewsForAPullRequestRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListReviewsForAPullRequestResponseWrapper",
      "type": "object"
    },
    "description": "Lists submitted reviews chronologically for a specific pull request within a github repository.",
    "tags": ["openWorldHint", "pulls", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List review comments in a repository",
    "slug": "GITHUB_LIST_REVIEW_COMMENTS_IN_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for `ListReviewCommentsInARepository`",
      "properties": {
        "direction": {
          "description": "Sort direction (`asc` or `desc`). Effective only if `sort` is specified.",
          "enum": ["asc", "desc"],
          "title": "Direction",
          "type": "string"
        },
        "owner": {
          "description": "The username of the account that owns the repository. This name is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for the results to retrieve.",
          "examples": ["2"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of review comments per page (max 100).",
          "examples": ["50"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        },
        "since": {
          "description": "Filters for comments updated at or after this ISO 8601 timestamp (e.g., `YYYY-MM-DDTHH:MM:SSZ`).",
          "examples": ["2023-01-01T00:00:00Z"],
          "title": "Since",
          "type": "string"
        },
        "sort": {
          "description": "Sort field for review comments: `created` (creation time), `updated` (last update time), or `created_at` (creation timestamp). Defaults to API's standard sort order (typically by ID, ascending) if unspecified.",
          "enum": ["created", "updated", "created_at"],
          "title": "Sort",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListReviewCommentsInARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListReviewCommentsInARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Lists all review comments on all pull requests within a specified repository.",
    "tags": ["openWorldHint", "pulls", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List review comments on a pull request",
    "slug": "GITHUB_LIST_REVIEW_COMMENTS_ON_A_PULL_REQUEST",
    "input_parameters": {
      "description": "Lists review comments on a specific pull request in a repository.",
      "properties": {
        "direction": {
          "default": null,
          "description": "Sort direction (`asc` or `desc`); ignored if `sort` is not provided.",
          "enum": ["asc", "desc"],
          "examples": ["desc"],
          "nullable": true,
          "title": "DirectionEnm",
          "type": "string"
        },
        "owner": {
          "description": "Username of the account owning the repository. Not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results to retrieve.",
          "examples": [2],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of comments per page (max 100).",
          "examples": [50],
          "title": "Per Page",
          "type": "integer"
        },
        "pull_number": {
          "description": "Unique number identifying the pull request.",
          "examples": [1347],
          "title": "Pull Number",
          "type": "integer"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension. Not case sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "since": {
          "default": null,
          "description": "Only include comments updated at or after this ISO 8601 timestamp (`YYYY-MM-DDTHH:MM:SSZ`).",
          "examples": ["2023-01-15T10:00:00Z"],
          "nullable": true,
          "title": "Since",
          "type": "string"
        },
        "sort": {
          "default": "created",
          "description": "Sort review comments by `created` or `updated`.",
          "enum": ["created", "updated"],
          "examples": ["created"],
          "title": "Sort",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "pull_number"],
      "title": "ListReviewCommentsOnAPullRequestRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListReviewCommentsOnAPullRequestResponseWrapper",
      "type": "object"
    },
    "description": "Lists all review comments on a specific pull request within a github repository.",
    "tags": ["openWorldHint", "pulls", "readOnlyHint", "idempotentHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List runner applications for an organization",
    "slug": "GITHUB_LIST_RUNNER_APPLICATIONS_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for listing runner applications for a GitHub organization.",
      "properties": {
        "org": {
          "description": "The name of the GitHub organization. This name is not case-sensitive.",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org"],
      "title": "ListRunnerApplicationsForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An array of objects, where each object represents an available runner application binary. Each object typically includes details such as the operating system, architecture, download URL, and filename for the runner application.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRunnerApplicationsForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Lists downloadable github actions runner application binaries, used for setting up self-hosted runners, for an existing github organization.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List runner applications for a repository",
    "slug": "GITHUB_LIST_RUNNER_APPLICATIONS_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for `ListRunnerApplicationsForARepository`",
      "properties": {
        "owner": {
          "description": "The username of the account or the name of the organization that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["hello-world", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListRunnerApplicationsForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Dictionary containing a list of runner application objects, each with details like 'os', 'architecture', 'download_url', and 'filename'.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRunnerApplicationsForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Lists available self-hosted runner application binaries for a specific repository, including their os, architecture, and download url.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List secrets for the authenticated user",
    "slug": "GITHUB_LIST_SECRETS_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for listing Codespaces secrets for the authenticated user.",
      "properties": {
        "page": {
          "default": 1,
          "description": "The page number of the results to retrieve (starts from 1).",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of secrets to return per page (up to 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "title": "ListSecretsForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The API response body. Contains `total_count`, an integer representing the total number of secrets available, and `secrets`, a list of secret objects. Each secret object includes details such as its `name`, `created_at` timestamp, `updated_at` timestamp, and `visibility` status.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListSecretsForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists all codespaces secrets accessible to the authenticated user for use within github codespaces.",
    "tags": ["codespaces", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List selected repositories for an organization secret",
    "slug": "GITHUB_LIST_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_SECRET",
    "input_parameters": {
      "description": "Request schema for `ListSelectedRepositoriesForAnOrganizationSecret`",
      "properties": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch.",
          "examples": ["1", "2"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "secret_name": {
          "description": "The name of the secret.",
          "examples": ["CODESPACE_SECRET_NAME"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["org", "secret_name"],
      "title": "ListSelectedRepositoriesForAnOrganizationSecretRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListSelectedRepositoriesForAnOrganizationSecretResponseWrapper",
      "type": "object"
    },
    "description": "Lists repositories within an organization that have explicit access to a specific organization secret, which must have its visibility set to 'selected'.",
    "tags": ["codespaces", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List selected repositories for an organization variable",
    "slug": "GITHUB_LIST_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_VARIABLE",
    "input_parameters": {
      "description": "Request schema for listing repositories that have access to a specific organization variable.",
      "properties": {
        "name": {
          "description": "The name of the variable.",
          "examples": ["ACTIONS_VARIABLE_NAME"],
          "title": "Name",
          "type": "string"
        },
        "org": {
          "description": "The organization's name (case-insensitive).",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for pagination.",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "title": "Per Page",
          "type": "integer"
        }
      },
      "required": ["org", "name"],
      "title": "ListSelectedRepositoriesForAnOrganizationVariableRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListSelectedRepositoriesForAnOrganizationVariableResponseWrapper",
      "type": "object"
    },
    "description": "Lists repositories in an organization that can access a specific organization variable; supports pagination and returns an empty list if no repositories have been granted access.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List selected repositories for a user secret",
    "slug": "GITHUB_LIST_SELECTED_REPOSITORIES_FOR_A_USER_SECRET",
    "input_parameters": {
      "description": "Request to list repositories for a user secret.",
      "properties": {
        "secret_name": {
          "description": "Name of the secret for which to list associated repositories.",
          "examples": ["MY_API_TOKEN"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["secret_name"],
      "title": "ListSelectedRepositoriesForAUserSecretRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListSelectedRepositoriesForAUserSecretResponseWrapper",
      "type": "object"
    },
    "description": "Lists repositories that have access to the specified user secret for the authenticated user's codespaces, provided the user has codespaces access.",
    "tags": ["codespaces", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List selected repos for secret access",
    "slug": "GITHUB_LIST_SELECTED_REPOS_FOR_SECRET_ACCESS",
    "input_parameters": {
      "description": "Input parameters for listing repositories that have access to a specific organization's Dependabot secret.",
      "properties": {
        "org": {
          "description": "The name of the GitHub organization. This field is not case-sensitive.",
          "examples": ["octo-org", "my-company"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to retrieve, starting at 1.",
          "examples": [1, 2, 5],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of results to return per page, with a maximum of 100.",
          "examples": [30, 50, 100],
          "title": "Per Page",
          "type": "integer"
        },
        "secret_name": {
          "description": "The name of the Dependabot secret for which to list repository access.",
          "examples": ["AWS_ACCESS_KEY", "CI_TOKEN"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["org", "secret_name"],
      "title": "ListSelectedReposForSecretAccessRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the API response. This typically includes `total_count` (the total number of repositories with access to the secret) and `repositories` (a list of repository objects that have been granted access).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListSelectedReposForSecretAccessResponseWrapper",
      "type": "object"
    },
    "description": "Lists repositories within a specified organization that have been granted access to a particular dependabot secret.",
    "tags": ["dependabot", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List self hosted runners for an organization",
    "slug": "GITHUB_LIST_SELF_HOSTED_RUNNERS_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for `ListSelfHostedRunnersForAnOrganization`",
      "properties": {
        "name": {
          "description": "Name to filter the list of self-hosted runners.",
          "examples": ["my-primary-runner", "gpu-runner-1"],
          "title": "Name",
          "type": "string"
        },
        "org": {
          "description": "The GitHub organization name (case-insensitive).",
          "examples": ["octo-org", "my-company"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for results retrieval (starts at 1).",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "title": "Per Page",
          "type": "integer"
        }
      },
      "required": ["org"],
      "title": "ListSelfHostedRunnersForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Raw JSON response containing 'total_count' and a 'runners' array with runner details (e.g., id, name, os, status, labels).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListSelfHostedRunnersForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Lists self-hosted runners for a github organization, optionally filtering by name and paginating results, providing details for each runner such as os, status, and labels.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List self hosted runners for a repository",
    "slug": "GITHUB_LIST_SELF_HOSTED_RUNNERS_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for `ListSelfHostedRunnersForARepository`",
      "properties": {
        "name": {
          "description": "The name of a specific self-hosted runner to filter by. If not provided, all runners for the repository are listed.",
          "examples": ["my-runner-1", "linux-stable-runner"],
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to fetch, starting from 1. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of results per page (maximum 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "examples": ["hello-world", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListSelfHostedRunnersForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the response from the GitHub API. This typically includes a `total_count` of runners and a `runners` key, which is a list of self-hosted runner objects.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListSelfHostedRunnersForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Lists all self-hosted runners configured for a repository.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List social accounts for a user",
    "slug": "GITHUB_LIST_SOCIAL_ACCOUNTS_FOR_A_USER",
    "input_parameters": {
      "description": "Input model for the `ListSocialAccountsForAUser` action, specifying the user and pagination parameters.",
      "properties": {
        "page": {
          "default": 1,
          "description": "The page number of the results to fetch when paginating. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of social account results to return per page. Maximum is 100. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "title": "Per Page",
          "type": "integer"
        },
        "username": {
          "description": "The handle (username) of the GitHub user (e.g., 'octocat') for whom to list social media accounts.",
          "examples": ["octocat", "torvalds"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["username"],
      "title": "ListSocialAccountsForAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "List of social account objects, each with 'provider' (e.g., 'linkedin', 'twitter') and 'url' (profile link).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListSocialAccountsForAUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists social media accounts publicly linked to an existing github user's profile.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "Users", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List social accounts for the authenticated user",
    "slug": "GITHUB_LIST_SOCIAL_ACCOUNTS_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for `ListSocialAccountsForTheAuthenticatedUser`",
      "properties": {
        "page": {
          "default": 1,
          "description": "Page number of the results to retrieve.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of social accounts to return per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "title": "ListSocialAccountsForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListSocialAccountsForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists all social media accounts linked to the authenticated user's github profile.",
    "tags": ["openWorldHint", "readOnlyHint", "users", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List stargazers",
    "slug": "GITHUB_LIST_STARGAZERS",
    "input_parameters": {
      "description": "Specifies the target repository and pagination preferences for listing stargazers.",
      "properties": {
        "owner": {
          "description": "Username of the account owner (user or organization) of the repository; case-insensitive.",
          "examples": ["octocat", "google"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results to display per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension; case-insensitive.",
          "examples": ["Spoon-Knife", "mercury"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListStargazersRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListStargazersResponseWrapper",
      "type": "object"
    },
    "description": "Lists users who have starred the specified github repository, which must exist.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "important", "Stars"]
  },
  {
    "available_versions": ["latest"],
    "name": "List starred gists",
    "slug": "GITHUB_LIST_STARRED_GISTS",
    "input_parameters": {
      "description": "Request schema for `ListStarredGists`",
      "properties": {
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch.",
          "examples": ["1", "2", "3"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "since": {
          "description": "Timestamp in ISO 8601 format (`YYYY-MM-DDTHH:MM:SSZ`) to filter gists updated after this time.",
          "examples": ["2023-01-01T12:00:00Z"],
          "title": "Since",
          "type": "string"
        }
      },
      "title": "ListStarredGistsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListStarredGistsResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a list of gists starred by the authenticated user.",
    "tags": ["gists", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List subscriptions for the authenticated user",
    "slug": "GITHUB_LIST_SUBSCRIPTIONS_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for `ListSubscriptionsForTheAuthenticatedUser`",
      "properties": {
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "title": "ListSubscriptionsForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A list of the authenticated user's marketplace subscriptions, including details for each subscription such as account information, billing cycle, unit count, trial status, and plan information.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListSubscriptionsForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists the authenticated user's active github marketplace subscriptions.",
    "tags": ["apps", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List stubbed subscriptions for the authenticated user",
    "slug": "GITHUB_LIST_SUBSCRIPTIONS_FOR_THE_AUTHENTICATED_USER_STUBBED",
    "input_parameters": {
      "description": "Request to list the authenticated user's stubbed (test/example data) GitHub Marketplace subscriptions.",
      "properties": {
        "page": {
          "default": 1,
          "description": "Page number of results to fetch (starts from 1).",
          "examples": ["1", "2", "3"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "examples": ["20", "30", "50"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "title": "ListSubscriptionsForTheAuthenticatedUserStubbedRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListSubscriptionsForTheAuthenticatedUserStubbedResponseWrapper",
      "type": "object"
    },
    "description": "Lists the authenticated user's stubbed (test/example data, not live) github marketplace subscriptions, useful for development or testing.",
    "tags": ["apps", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List tag protection states for a repository",
    "slug": "GITHUB_LIST_TAG_PROTECTION_STATES_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Specifies the repository for which to list tag protection states.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository. This name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListTagProtectionStatesForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The list of tag protection states. Each state includes its ID, the pattern string defining the protected tag, and whether the protection rule is enabled.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListTagProtectionStatesForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Lists all active tag protection rules for a repository, defining patterns to prevent matching tags from being created or deleted; requires repository admin permissions.",
    "tags": ["openWorldHint", "readOnlyHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List teams",
    "slug": "GITHUB_LIST_TEAMS",
    "input_parameters": {
      "description": "Request schema for listing teams in a GitHub organization.",
      "properties": {
        "org": {
          "description": "The name of the GitHub organization. This field is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to fetch when paginating through the list of teams.",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of team results to return per page. Maximum value is 100.",
          "title": "Per Page",
          "type": "integer"
        }
      },
      "required": ["org"],
      "title": "ListTeamsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The parsed JSON response from the GitHub API, expected to contain a list of team objects for the organization. Each object details team ID, name, slug, description, privacy, permissions, and member/repository counts.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListTeamsResponseWrapper",
      "type": "object"
    },
    "description": "Lists teams for a specified github organization.",
    "tags": ["openWorldHint", "readOnlyHint", "teams", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List teams for the authenticated user",
    "slug": "GITHUB_LIST_TEAMS_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request model for listing teams associated with the authenticated user. Enables pagination of results.",
      "properties": {
        "page": {
          "default": 1,
          "description": "Page number of the results to retrieve.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of team results to return per page (max 100). For more information, refer to GitHub's documentation on API pagination.",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "title": "ListTeamsForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the API's response. The GitHub API returns a list of team objects for this operation; this dictionary provides access to that team data.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListTeamsForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists all teams across all organizations to which the authenticated user belongs, supporting pagination.",
    "tags": ["openWorldHint", "readOnlyHint", "teams", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List teams assigned to an organization role",
    "slug": "GITHUB_LIST_TEAMS_THAT_ARE_ASSIGNED_TO_AN_ORGANIZATION_ROLE",
    "input_parameters": {
      "description": "Input for listing teams assigned to an organization role.",
      "properties": {
        "org": {
          "description": "Name of the GitHub organization (not case-sensitive).",
          "examples": ["github", "my-company-org"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results to fetch (starts at 1).",
          "examples": ["1", "2", "3"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "role_id": {
          "description": "Unique numerical identifier of the organization role.",
          "examples": ["101", "202"],
          "title": "Role Id",
          "type": "integer"
        }
      },
      "required": ["org", "role_id"],
      "title": "ListTeamsThatAreAssignedToAnOrganizationRoleRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListTeamsThatAreAssignedToAnOrganizationRoleResponseWrapper",
      "type": "object"
    },
    "description": "Lists teams assigned to a specific role within a github organization.",
    "tags": ["openWorldHint", "orgs", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List team members",
    "slug": "GITHUB_LIST_TEAM_MEMBERS",
    "input_parameters": {
      "description": "Request schema for `ListTeamMembers`",
      "properties": {
        "org": {
          "description": "Organization name (case-insensitive).",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for results.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "role": {
          "default": "all",
          "description": "Filters members by their role in the team.",
          "enum": ["member", "maintainer", "all"],
          "examples": ["member", "maintainer", "all"],
          "title": "Role",
          "type": "string"
        },
        "team_slug": {
          "description": "Team slug (URL-friendly name).",
          "examples": ["justice-league", "developers"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug"],
      "title": "ListTeamMembersRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "List of team member objects, each detailing user information such as 'login', 'id', and 'avatar_url'.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListTeamMembersResponseWrapper",
      "type": "object"
    },
    "description": "Lists members of a specific team within an organization, including members of child teams.",
    "tags": ["openWorldHint", "readOnlyHint", "teams"]
  },
  {
    "available_versions": ["latest"],
    "name": "List team projects",
    "slug": "GITHUB_LIST_TEAM_PROJECTS",
    "input_parameters": {
      "description": "Defines the parameters for the `ListTeamProjects` action to list projects accessible by a specific team in an organization.",
      "properties": {
        "org": {
          "description": "Name of the GitHub organization (case-insensitive). E.g., 'MyOrg' for github.com/MyOrg.",
          "examples": ["github", "octo-org", "MyOrganization"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for pagination.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of project results per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "team_slug": {
          "description": "The team's URL-friendly slug (e.g., 'web-developers' for 'Web Developers').",
          "examples": ["justice-league", "developers", "red-team"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug"],
      "title": "ListTeamProjectsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The API response as a dictionary. It's expected to contain a list of team-accessible projects, with details for each.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListTeamProjectsResponseWrapper",
      "type": "object"
    },
    "description": "Lists github projects accessible to a specific team within an organization.",
    "tags": ["openWorldHint", "readOnlyHint", "teams"]
  },
  {
    "available_versions": ["latest"],
    "name": "List team repositories",
    "slug": "GITHUB_LIST_TEAM_REPOSITORIES",
    "input_parameters": {
      "description": "Request schema for listing repositories accessible to a team.",
      "properties": {
        "org": {
          "description": "The name of the GitHub organization. This name is not case-sensitive.",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of results to return per page. The maximum value is 100. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "title": "Per Page",
          "type": "integer"
        },
        "team_slug": {
          "description": "The slug (URL-friendly version) of the team name.",
          "examples": ["justice-league"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug"],
      "title": "ListTeamRepositoriesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The raw JSON response from the GitHub API. This endpoint returns a list (JSON array) of repository objects that the team has access to. Each repository object includes details such as its ID, name, full_name, owner, and permissions.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListTeamRepositoriesResponseWrapper",
      "type": "object"
    },
    "description": "Lists repositories accessible to a specific team within a github organization.",
    "tags": ["openWorldHint", "readOnlyHint", "teams"]
  },
  {
    "available_versions": ["latest"],
    "name": "List the people a user follows",
    "slug": "GITHUB_LIST_THE_PEOPLE_A_USER_FOLLOWS",
    "input_parameters": {
      "description": "Request schema for listing users a specific GitHub user follows.",
      "properties": {
        "page": {
          "default": 1,
          "description": "Page number for the results to retrieve (starts from 1).",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results to return per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "username": {
          "description": "GitHub username (case-sensitive) of the user.",
          "examples": ["octocat", "torvalds"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["username"],
      "title": "ListThePeopleAUserFollowsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A list of user objects representing the users that the specified user follows. Each user object typically includes details such as `login` (username), `id` (user ID), `node_id`, `avatar_url`, `html_url` (profile URL), and other user-specific information.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListThePeopleAUserFollowsResponseWrapper",
      "type": "object"
    },
    "description": "Lists github users that a valid github `username` is following, supporting pagination.",
    "tags": ["openWorldHint", "readOnlyHint", "users", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List people the authenticated user follows",
    "slug": "GITHUB_LIST_THE_PEOPLE_THE_AUTHENTICATED_USER_FOLLOWS",
    "input_parameters": {
      "description": "Request to list users the authenticated user follows, with pagination options.",
      "properties": {
        "page": {
          "default": 1,
          "description": "Page number for paginated results.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "title": "ListThePeopleTheAuthenticatedUserFollowsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "List of user objects (dictionaries with user details) for users followed by the authenticated user. Empty if no users are followed.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListThePeopleTheAuthenticatedUserFollowsResponseWrapper",
      "type": "object"
    },
    "description": "Lists people the authenticated user follows.",
    "tags": ["openWorldHint", "readOnlyHint", "users", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List timeline events for an issue",
    "slug": "GITHUB_LIST_TIMELINE_EVENTS_FOR_AN_ISSUE",
    "input_parameters": {
      "description": "Parameters for listing timeline events for a specific GitHub issue.",
      "properties": {
        "issue_number": {
          "description": "Number identifying the issue within the repository.",
          "examples": ["1347", "42"],
          "title": "Issue Number",
          "type": "integer"
        },
        "owner": {
          "description": "Account owner of the repository (not case-sensitive).",
          "examples": ["octocat", "kubernetes"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for results.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of events per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (not case-sensitive).",
          "examples": ["Spoon-Knife", "community"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "issue_number"],
      "title": "ListTimelineEventsForAnIssueRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListTimelineEventsForAnIssueResponseWrapper",
      "type": "object"
    },
    "description": "Lists chronological events (e.g., comments, commits, label changes) for a specific issue in a github repository.",
    "tags": ["issues", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List token access repositories",
    "slug": "GITHUB_LIST_TOKEN_ACCESS_REPOSITORIES",
    "input_parameters": {
      "description": "Lists repositories in an organization accessible by a fine-grained personal access token.",
      "properties": {
        "org": {
          "description": "The name of the GitHub organization. This field is not case-sensitive.",
          "examples": ["my-org", "github"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "pat_id": {
          "description": "The unique identifier of the fine-grained personal access token.",
          "examples": ["12345", "67890"],
          "title": "Pat Id",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "required": ["org", "pat_id"],
      "title": "ListTokenAccessRepositoriesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListTokenAccessRepositoriesResponseWrapper",
      "type": "object"
    },
    "description": "Lists repositories in an organization accessible by a specific fine-grained personal access token; this action is for github apps.",
    "tags": ["openWorldHint", "orgs", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List users",
    "slug": "GITHUB_LIST_USERS",
    "input_parameters": {
      "description": "Defines the parameters for the `ListUsers` action, used to retrieve GitHub users with support for pagination.",
      "properties": {
        "per_page": {
          "default": 30,
          "description": "Specifies the number of user results to return per page. The maximum allowed value is 100.",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "since": {
          "description": "A user ID. If provided, only users with an ID greater than this ID will be returned. This parameter facilitates pagination. If omitted, the list starts from the first user.",
          "examples": ["1000", "500000"],
          "title": "Since",
          "type": "integer"
        }
      },
      "title": "ListUsersRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A list of GitHub user objects. Each object provides publicly available user details such as `login`, `id`, `node_id`, `avatar_url`, `html_url`, and other user-specific information as defined by the GitHub API specification.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListUsersResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves all github users (individuals and organizations) in chronological order of their sign-up date.",
    "tags": ["openWorldHint", "readOnlyHint", "idempotentHint", "users", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List users blocked by an organization",
    "slug": "GITHUB_LIST_USERS_BLOCKED_BY_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for `ListUsersBlockedByAnOrganization`",
      "properties": {
        "org": {
          "description": "The organization name. This name is not case sensitive.",
          "examples": ["octo-org", "github"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Specifies the page number of the results to fetch. Default is 1. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" ",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Specifies the number of results to return per page, with a maximum of 100. Default is 30. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" ",
          "title": "Per Page",
          "type": "integer"
        }
      },
      "required": ["org"],
      "title": "ListUsersBlockedByAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "List of 'simple user' objects detailing users blocked by the organization. Each object includes fields such as 'login', 'id', 'node_id', 'avatar_url', and 'html_url'.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListUsersBlockedByAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Lists users blocked by a specified github organization.",
    "tags": ["openWorldHint", "orgs", "readOnlyHint", "idempotentHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List users blocked by the authenticated user",
    "slug": "GITHUB_LIST_USERS_BLOCKED_BY_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for `ListUsersBlockedByTheAuthenticatedUser`",
      "properties": {
        "page": {
          "default": 1,
          "description": "The page number of the results to retrieve.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of results per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "title": "ListUsersBlockedByTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListUsersBlockedByTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Lists users blocked by the authenticated user, returning an empty list if no users are blocked.",
    "tags": ["openWorldHint", "readOnlyHint", "idempotentHint", "users", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List users assigned org role",
    "slug": "GITHUB_LIST_USERS_THAT_ARE_ASSIGNED_TO_AN_ORGANIZATION_ROLE",
    "input_parameters": {
      "description": "Request schema for listing users assigned to a specific organization role.",
      "properties": {
        "org": {
          "description": "The name of the GitHub organization. This is not case-sensitive.",
          "examples": ["octo-org", "github"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results (1-indexed).",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "role_id": {
          "description": "The unique identifier for the organization role.",
          "examples": ["123", "456"],
          "title": "Role Id",
          "type": "integer"
        }
      },
      "required": ["org", "role_id"],
      "title": "ListUsersThatAreAssignedToAnOrganizationRoleRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The API response, expected to contain a list of user objects assigned to the role, with details like 'login', 'id', 'node_id', 'avatar_url'.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListUsersThatAreAssignedToAnOrganizationRoleResponseWrapper",
      "type": "object"
    },
    "description": "Lists users assigned to a specific role within a github organization.",
    "tags": ["openWorldHint", "orgs", "readOnlyHint", "idempotentHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List user projects",
    "slug": "GITHUB_LIST_USER_PROJECTS",
    "input_parameters": {
      "description": "Request to list projects for a GitHub user.",
      "properties": {
        "page": {
          "default": 1,
          "description": "Page number for pagination.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "state": {
          "default": "open",
          "description": "Filter projects by state.",
          "enum": ["open", "closed", "all"],
          "examples": ["open", "closed", "all"],
          "title": "State",
          "type": "string"
        },
        "username": {
          "description": "GitHub username (handle).",
          "examples": ["octocat", "torvalds"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["username"],
      "title": "ListUserProjectsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response containing a list of project objects with details like ID, name, state, and URLs.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListUserProjectsResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a list of projects for a specified github user, optionally filtering by state and supporting pagination; the username must be a valid github handle.",
    "tags": ["openWorldHint", "projects", "readOnlyHint", "idempotentHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List watchers",
    "slug": "GITHUB_LIST_WATCHERS",
    "input_parameters": {
      "description": "Defines the parameters for listing repository watchers.",
      "properties": {
        "owner": {
          "description": "The username of the account that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to retrieve.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results to return per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife", "my-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListWatchersRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A list of user objects representing repository watchers, each typically including details like 'login', 'id', and 'avatar_url'.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListWatchersResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves a list of users watching a specific repository; the repository must be accessible to the authenticated user.",
    "tags": ["activity", "openWorldHint", "readOnlyHint", "idempotentHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List workflow runs for a repository",
    "slug": "GITHUB_LIST_WORKFLOW_RUNS_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for `ListWorkflowRunsForARepository`",
      "properties": {
        "actor": {
          "description": "Filter by the actor's login (e.g., the user who triggered the `push`).",
          "examples": ["octocat"],
          "title": "Actor",
          "type": "string"
        },
        "branch": {
          "description": "Filter by branch name (e.g., `main` or the branch that triggered the `push`).",
          "examples": ["main", "develop"],
          "title": "Branch",
          "type": "string"
        },
        "check_suite_id": {
          "description": "Filter by a specific `check_suite_id`.",
          "examples": ["123456789"],
          "title": "Check Suite Id",
          "type": "integer"
        },
        "created": {
          "description": "Filter by creation date or date-time range (ISO8601 format: YYYY-MM-DD or YYYY-MM-DDTHH:MM:SSZ). Supports operators like `>`, `<`, `>=`, `<=`, and `..` for ranges.",
          "examples": ["2023-01-15", ">=2023-01-01T10:00:00Z", "2023-01-01..2023-01-31"],
          "title": "Created",
          "type": "string"
        },
        "event": {
          "description": "Filter by the event that triggered the workflow (e.g., `push`, `pull_request`).",
          "examples": ["push", "pull_request", "issue"],
          "title": "Event",
          "type": "string"
        },
        "exclude_pull_requests": {
          "default": false,
          "description": "Exclude workflow runs triggered by pull request events if `true`.",
          "examples": ["true", "false"],
          "title": "Exclude Pull Requests",
          "type": "boolean"
        },
        "head_sha": {
          "description": "Filter to include only runs associated with the specified `head_sha` (commit SHA at the head of the branch).",
          "examples": ["abcdef1234567890deadbeefabcdef1234567890"],
          "title": "Head Sha",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository (not case-sensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch.",
          "examples": ["1", "2"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension (not case-sensitive).",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        },
        "status": {
          "description": "Filter by `status` or `conclusion` (e.g., `success`, `in_progress`). Note: Only GitHub Actions can set `waiting`, `pending`, or `requested`.",
          "enum": [
            "completed",
            "action_required",
            "cancelled",
            "failure",
            "neutral",
            "skipped",
            "stale",
            "success",
            "timed_out",
            "in_progress",
            "queued",
            "requested",
            "waiting",
            "pending"
          ],
          "examples": ["completed", "in_progress", "queued"],
          "title": "Status",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListWorkflowRunsForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response, typically including 'total_count' and an array of 'workflow_runs' objects.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListWorkflowRunsForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Lists workflow runs for a repository, allowing filtering by actor, branch, event, status, creation date, check suite id, or head sha; the repository must exist and be accessible.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "idempotentHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List workflow runs for a workflow",
    "slug": "GITHUB_LIST_WORKFLOW_RUNS_FOR_A_WORKFLOW",
    "input_parameters": {
      "description": "Request schema for `ListWorkflowRunsForAWorkflow`",
      "properties": {
        "actor": {
          "description": "Filter by the GitHub username of the actor who initiated the run.",
          "examples": ["octocat", "monalisa"],
          "title": "Actor",
          "type": "string"
        },
        "branch": {
          "description": "Filter by branch name, typically for `push` events.",
          "examples": ["main", "develop", "feature/new-login"],
          "title": "Branch",
          "type": "string"
        },
        "check_suite_id": {
          "description": "Filter by `check_suite_id` (identifier for a collection of check runs).",
          "examples": ["123456789", "987654321"],
          "title": "Check Suite Id",
          "type": "integer"
        },
        "created": {
          "description": "Filter by creation date/time range. For syntax, refer to GitHub's \"Understanding the search syntax\" guide for dates.",
          "examples": ["2023-01-15", "2023-01-01..2023-01-31", ">=2023-03-10T14:00:00Z"],
          "title": "Created",
          "type": "string"
        },
        "event": {
          "description": "Filter by the event that triggered the run (e.g., `push`, `pull_request`). For more event types, see GitHub's documentation on \"Events that trigger workflows\".",
          "examples": ["push", "pull_request", "workflow_dispatch"],
          "title": "Event",
          "type": "string"
        },
        "exclude_pull_requests": {
          "default": false,
          "description": "If true, exclude workflow runs triggered by pull requests.",
          "title": "Exclude Pull Requests",
          "type": "boolean"
        },
        "head_sha": {
          "description": "Filter by the head commit's SHA.",
          "examples": [
            "1c2f3a4b5d6e7f8g9h0i1j2k3l4m5n6o7p8q9r0s",
            "abcdef0123456789abcdef0123456789abcdef01"
          ],
          "title": "Head Sha",
          "type": "string"
        },
        "owner": {
          "description": "Account owner of the repository (case-insensitive).",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to retrieve.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension (case-insensitive).",
          "examples": ["Spoon-Knife", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        },
        "status": {
          "description": "Filter by status or conclusion (e.g., `success`, `in_progress`). Note: `waiting`, `pending`, or `requested` statuses are set exclusively by GitHub Actions.",
          "enum": [
            "completed",
            "action_required",
            "cancelled",
            "failure",
            "neutral",
            "skipped",
            "stale",
            "success",
            "timed_out",
            "in_progress",
            "queued",
            "requested",
            "waiting",
            "pending"
          ],
          "examples": ["completed", "success", "in_progress", "queued"],
          "title": "Status",
          "type": "string"
        },
        "workflow_id": {
          "description": "ID or filename (e.g., `main.yml`) of the workflow.",
          "examples": ["1234567", "8901234"],
          "title": "Workflow Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "workflow_id"],
      "title": "ListWorkflowRunsForAWorkflowRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Raw JSON response from the API, usually a list of workflow runs with details.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListWorkflowRunsForAWorkflowResponseWrapper",
      "type": "object"
    },
    "description": "Lists runs for a specified, existing workflow (identified by id or filename like `main.yml`) in a github repository, with filtering options.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "idempotentHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List workflow run artifacts",
    "slug": "GITHUB_LIST_WORKFLOW_RUN_ARTIFACTS",
    "input_parameters": {
      "description": "Parameters to list artifacts for a specific workflow run.",
      "properties": {
        "name": {
          "description": "If specified, filters artifacts by this exact name.",
          "examples": ["my-build-artifact", "coverage-report"],
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "description": "Account owner of the repository (not case sensitive).",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results to fetch.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension (not case sensitive).",
          "examples": ["hello-world", "linguist"],
          "title": "Repo",
          "type": "string"
        },
        "run_id": {
          "description": "Unique identifier of the workflow run.",
          "examples": ["123456789", "987654321"],
          "title": "Run Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "run_id"],
      "title": "ListWorkflowRunArtifactsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListWorkflowRunArtifactsResponseWrapper",
      "type": "object"
    },
    "description": "Lists artifacts (e.g., build outputs, test results) for a specific workflow run in a github repository.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "idempotentHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Lock an issue",
    "slug": "GITHUB_LOCK_AN_ISSUE",
    "input_parameters": {
      "description": "Request schema for locking a GitHub issue's conversation.",
      "properties": {
        "issue_number": {
          "description": "The number that uniquely identifies the issue to be locked within the repository.",
          "examples": ["1347"],
          "title": "Issue Number",
          "type": "integer"
        },
        "lock_reason": {
          "description": "Optional reason for locking the conversation; if omitted, no reason is displayed.",
          "enum": ["off-topic", "too heated", "resolved", "spam"],
          "examples": ["resolved", "off-topic"],
          "title": "Lock Reason",
          "type": "string"
        },
        "owner": {
          "description": "The username of the account that owns the repository. This name is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "issue_number"],
      "title": "LockAnIssueRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the response from the GitHub API. Upon successful locking of an issue (which typically results in a 204 No Content status), this dictionary will be empty.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "LockAnIssueResponseWrapper",
      "type": "object"
    },
    "description": "Locks an existing github issue's conversation, preventing further comments; an optional reason can be specified.",
    "tags": ["idempotentHint", "issues", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Manage access control for organization codespaces",
    "slug": "GITHUB_MANAGE_ACCESS_CONTROL_FOR_ORGANIZATION_CODESPACES",
    "input_parameters": {
      "description": "Request model for managing Codespaces access control within an organization.",
      "properties": {
        "org": {
          "description": "The name of the GitHub organization. This field is not case-sensitive.",
          "examples": ["github", "my-awesome-org"],
          "title": "Org",
          "type": "string"
        },
        "selected_usernames": {
          "description": "A list of GitHub usernames who should have access to Codespaces. This field is required and used only when `visibility` is set to `selected_members`. Providing a list here will replace any existing list of selected usernames.",
          "examples": [["monalisa", "octocat"], ["dependabot"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Selected Usernames",
          "type": "array"
        },
        "visibility": {
          "description": "Defines which users can access Codespaces within the organization.\n`disabled`: Codespaces are disabled for all users in the organization.\n`selected_members`: Only users specified in `selected_usernames` can access Codespaces.\n`all_members`: All members of the organization can access Codespaces.\n`all_members_and_outside_collaborators`: All members and outside collaborators can access Codespaces.",
          "enum": [
            "disabled",
            "selected_members",
            "all_members",
            "all_members_and_outside_collaborators"
          ],
          "examples": [
            "disabled",
            "selected_members",
            "all_members",
            "all_members_and_outside_collaborators"
          ],
          "title": "Visibility",
          "type": "string"
        }
      },
      "required": ["org", "visibility"],
      "title": "ManageAccessControlForOrganizationCodespacesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Response data, which is typically empty as a successful (HTTP 204) response has no body.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ManageAccessControlForOrganizationCodespacesResponseWrapper",
      "type": "object"
    },
    "description": "Sets the codespaces access control policy for a github organization, determining which members can use them.",
    "tags": ["codespaces", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Manage custom properties for org repos",
    "slug": "GITHUB_MANAGE_CUSTOM_PROPERTIES_FOR_ORG_REPOS",
    "input_parameters": {
      "description": "Request schema for `ManageCustomPropertiesForOrgRepos`",
      "properties": {
        "org": {
          "description": "The organization's name (case-insensitive).",
          "examples": ["github"],
          "title": "Org",
          "type": "string"
        },
        "properties": {
          "description": "Custom properties to set. Each must have `property_name` (predefined for the organization) and `value`. Example: `[{\"property_name\": \"project-status\", \"value\": \"active\"}]`.",
          "examples": [
            "[{\"property_name\": \"project-status\", \"value\": \"active\"}, {\"property_name\": \"data-sensitivity\", \"value\": \"confidential\"}]"
          ],
          "items": { "additionalProperties": true, "properties": {}, "type": "object" },
          "title": "Properties",
          "type": "array"
        },
        "repository_names": {
          "description": "Repository names (max 30) to apply the custom property values to.",
          "examples": [["my-repo1", "another-repo"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Repository Names",
          "type": "array"
        }
      },
      "required": ["org", "repository_names", "properties"],
      "title": "ManageCustomPropertiesForOrgReposRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ManageCustomPropertiesForOrgReposResponseWrapper",
      "type": "object"
    },
    "description": "Creates or updates values for an organization's predefined custom properties across multiple repositories (up to 30).",
    "tags": ["openWorldHint", "orgs", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Manage secrets in selected repositories with proper access",
    "slug": "GITHUB_MANAGE_SECRETS_IN_SELECTED_REPOSITORIES_WITH_PROPER_ACCESS",
    "input_parameters": {
      "description": "Request schema for `ManageSecretsInSelectedRepositoriesWithProperAccess`",
      "properties": {
        "org": {
          "description": "The name of the GitHub organization. This name is not case-sensitive.",
          "examples": ["octo-org", "my-company"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch. Default is 1. See '[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)' for more details.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results to return per page (maximum 100). Default is 30. See '[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)' for more details.",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "secret_name": {
          "description": "The name of the organization secret for which to list accessible repositories.",
          "examples": ["MY_API_KEY", "NPM_TOKEN"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["org", "secret_name"],
      "title": "ManageSecretsInSelectedRepositoriesWithProperAccessRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ManageSecretsInSelectedRepositoriesWithProperAccessResponseWrapper",
      "type": "object"
    },
    "description": "Lists repositories within an organization that have been explicitly granted access to a specific organization secret.",
    "tags": ["actions", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Map a commit author",
    "slug": "GITHUB_MAP_A_COMMIT_AUTHOR",
    "input_parameters": {
      "description": "Request to update author information for a commit author in a repository import.",
      "properties": {
        "author_id": {
          "description": "Numeric ID of the author to map, identified during a repository import; this ID is specific to the import process.",
          "examples": ["101", "102"],
          "title": "Author Id",
          "type": "integer"
        },
        "email": {
          "description": "New Git author email for the `author_id`. At least one of `email` or `name` must be provided.",
          "examples": ["new.author@example.com", "updated.user@email.com"],
          "title": "Email",
          "type": "string"
        },
        "name": {
          "description": "New Git author name for the `author_id`. At least one of `email` or `name` must be provided.",
          "examples": ["New Author Name", "Updated User FullName"],
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "description": "Username of the account owning the repository (not case-sensitive).",
          "examples": ["octocat", "github-linguist"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (not case-sensitive).",
          "examples": ["hello-world", "linguist"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "author_id"],
      "title": "MapACommitAuthorRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details of the updated commit author mapping, including ID, email, name, and relevant URLs.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "MapACommitAuthorResponseWrapper",
      "type": "object"
    },
    "description": "Updates git author information (name and/or email) for an `author id` obtained during a repository import, to correctly attribute commits.",
    "tags": ["migrations", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Mark a thread as done",
    "slug": "GITHUB_MARK_A_THREAD_AS_DONE",
    "input_parameters": {
      "description": "Request schema for `MarkAThreadAsDone`, used to specify the notification thread to be marked as done.",
      "properties": {
        "thread_id": {
          "description": "ID of the notification thread to mark as done. Typically obtained from the `id` field in notification list operations (e.g., `GET /notifications`).",
          "examples": ["12345", "67890"],
          "title": "Thread Id",
          "type": "integer"
        }
      },
      "required": ["thread_id"],
      "title": "MarkAThreadAsDoneRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the response from the GitHub API. For a successful operation that marks a thread as done, the API typically returns a 204 No Content or 205 Reset Content status, in which case this dictionary will likely be empty.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "MarkAThreadAsDoneResponseWrapper",
      "type": "object"
    },
    "description": "Marks the github notification thread (identified by `thread id`) as done or read for the authenticated user, effectively archiving it.",
    "tags": ["activity", "destructiveHint", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Mark a thread as read",
    "slug": "GITHUB_MARK_A_THREAD_AS_READ",
    "input_parameters": {
      "description": "Request schema for marking a GitHub notification thread as read.",
      "properties": {
        "thread_id": {
          "description": "The unique identifier of the notification thread. This ID is obtained from a notification's `id` field, for example, via the 'List notifications for the authenticated user' endpoint.",
          "examples": ["123", "456"],
          "title": "Thread Id",
          "type": "integer"
        }
      },
      "required": ["thread_id"],
      "title": "MarkAThreadAsReadRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Response data from the API. For this operation, a successful request (HTTP 205 Reset Content) typically results in an empty response body, meaning this dictionary might be empty. An HTTP 304 Not Modified status also indicates success without a body.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "MarkAThreadAsReadResponseWrapper",
      "type": "object"
    },
    "description": "Marks an existing github notification thread, identified by its `thread id`, as read.",
    "tags": ["activity", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Mark notifications as read",
    "slug": "GITHUB_MARK_NOTIFICATIONS_AS_READ",
    "input_parameters": {
      "description": "Request model to mark notifications, optionally specifying a cutoff time and read/unread status.",
      "properties": {
        "last_read_at": {
          "description": "If provided, only notifications updated at or before this timestamp are affected. If omitted, all current notifications are targeted.",
          "examples": ["2023-01-15T14:30:00Z"],
          "format": "date-time",
          "title": "Last Read At",
          "type": "string"
        },
        "read": {
          "description": "Indicates whether to mark targeted notifications as read (`true`) or unread (`false`). Defaults to `true` (mark as read) if not provided.",
          "examples": ["true", "false"],
          "title": "Read",
          "type": "boolean"
        }
      },
      "title": "MarkNotificationsAsReadRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API's response dictionary, usually empty on success. GitHub returns 202 (if `last_read_at` omitted) or 205 (if `last_read_at` provided), indicating success with no body content.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "MarkNotificationsAsReadResponseWrapper",
      "type": "object"
    },
    "description": "Marks notifications as read or unread, optionally for those updated at or before a `last read at` timestamp.",
    "tags": ["activity", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Mark repository notifications as read",
    "slug": "GITHUB_MARK_REPOSITORY_NOTIFICATIONS_AS_READ",
    "input_parameters": {
      "description": "Request schema for `MarkRepositoryNotificationsAsRead`",
      "properties": {
        "last_read_at": {
          "description": "Timestamp (ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`). If provided, notifications updated *after* this time will NOT be marked as read. If omitted, all notifications in the repository are marked as read. Defaults to the current time.",
          "examples": ["2023-01-01T12:00:00Z"],
          "format": "date-time",
          "title": "Last Read At",
          "type": "string"
        },
        "owner": {
          "description": "Username of the account owning the repository (case-insensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (case-insensitive).",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "MarkRepositoryNotificationsAsReadRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "GitHub API response. A successful request (HTTP 202 or 205) usually has an empty body; if data is present, it may be a minimal confirmation.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "MarkRepositoryNotificationsAsReadResponseWrapper",
      "type": "object"
    },
    "description": "Marks notifications in a repository as read; if 'last read at' is specified, notifications updated after this timestamp are not marked as read.",
    "tags": ["activity", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Merge a branch",
    "slug": "GITHUB_MERGE_A_BRANCH",
    "input_parameters": {
      "description": "Request schema for merging a branch into another in a repository.",
      "properties": {
        "base": {
          "description": "The name of the branch to merge the `head` branch into.",
          "examples": ["main", "master"],
          "title": "Base",
          "type": "string"
        },
        "commit_message": {
          "description": "Commit message for the merge. If omitted, GitHub uses a default message.",
          "examples": [
            "Merge pull request #123 from octocat/feature-branch",
            "Merging feature-xyz into main"
          ],
          "title": "Commit Message",
          "type": "string"
        },
        "head": {
          "description": "Source branch name or full commit SHA to merge into the `base` branch.",
          "examples": ["feature-branch", "0123456789abcdef0123456789abcdef01234567"],
          "title": "Head",
          "type": "string"
        },
        "owner": {
          "description": "Username or organization name of the repository owner. Not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension. Not case-sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "base", "head"],
      "title": "MergeABranchRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "MergeABranchResponseWrapper",
      "type": "object"
    },
    "description": "Merges a head branch or commit sha into a base branch in a repository; fails if there are merge conflicts requiring manual resolution.",
    "tags": ["destructiveHint", "openWorldHint", "repos"]
  },
  {
    "available_versions": ["latest"],
    "name": "Merge a pull request",
    "slug": "GITHUB_MERGE_A_PULL_REQUEST",
    "input_parameters": {
      "description": "Request schema for merging a pull request.",
      "properties": {
        "commit_message": {
          "description": "Additional details for the merge commit message.",
          "examples": ["This change updates the project description to be more accurate."],
          "title": "Commit Message",
          "type": "string"
        },
        "commit_title": {
          "description": "Title for the merge commit message.",
          "examples": ["Fixing a typo in the README file"],
          "title": "Commit Title",
          "type": "string"
        },
        "merge_method": {
          "description": "Merge strategy: 'merge', 'squash', or 'rebase'. Defaults to repository's setting if unspecified.",
          "enum": ["merge", "squash", "rebase"],
          "examples": ["squash"],
          "title": "Merge Method",
          "type": "string"
        },
        "owner": {
          "description": "Repository owner's username. Not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "pull_number": {
          "description": "The unique number identifying the pull request.",
          "examples": [1347],
          "title": "Pull Number",
          "type": "integer"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension. Not case-sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "sha": {
          "description": "SHA of the pull request's head commit. Must match for merge to succeed, ensuring PR hasn't changed since review.",
          "examples": ["c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc"],
          "title": "Sha",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "pull_number"],
      "title": "MergeAPullRequestRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details of the merge operation, including 'sha' (merge commit SHA), 'merged' (boolean success status), and 'message' (outcome description).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "MergeAPullRequestResponseWrapper",
      "type": "object"
    },
    "description": "Merges an open and mergeable pull request in a repository, optionally specifying merge commit details, a merge method, and a required head sha for safety.",
    "tags": ["destructiveHint", "openWorldHint", "pulls", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get GitHub API root",
    "slug": "GITHUB_META_ROOT",
    "input_parameters": {
      "description": "Request schema for retrieving the root endpoint details of the GitHub REST API.",
      "properties": {},
      "title": "GithubApiRootRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary where keys are descriptive names of GitHub API resources (e.g., 'current_user_url', 'emojis_url') and values are their corresponding API endpoint URLs or URL templates. This map serves as an entry point to discover various functionalities of the GitHub REST API.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GithubApiRootResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: retrieves github rest api root endpoint details; use `github api root` instead.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "Move a project card",
    "slug": "GITHUB_MOVE_A_PROJECT_CARD",
    "input_parameters": {
      "description": "Request schema for moving a project card, specifying its new position and optionally a new column.",
      "properties": {
        "card_id": {
          "description": "The unique identifier of the project card to be moved.",
          "title": "Card Id",
          "type": "integer"
        },
        "column_id": {
          "description": "The unique identifier of the column to move the card to. If not provided, the card is moved within its current column.",
          "title": "Column Id",
          "type": "integer"
        },
        "position": {
          "description": "The target position of the card within a column. Can be 'top' (to place at the top), 'bottom' (to place at the bottom), or 'after:<card_id>' (to place after the card with the specified <card_id>). The <card_id> in 'after:<card_id>' must refer to a card in the target column.",
          "examples": ["top", "bottom", "after:42"],
          "pattern": "^(?:top|bottom|after:\\d+)$",
          "title": "Position",
          "type": "string"
        }
      },
      "required": ["card_id", "position"],
      "title": "MoveAProjectCardRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty dictionary confirming the card was successfully moved. The HTTP status code (e.g., 201 Created) primarily indicates success.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["successful"],
      "title": "MoveAProjectCardResponseWrapper",
      "type": "object"
    },
    "description": "Moves a project card to a specified position, optionally into a new column.",
    "tags": ["openWorldHint", "projects", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Move a project column",
    "slug": "GITHUB_MOVE_A_PROJECT_COLUMN",
    "input_parameters": {
      "description": "Request schema for moving a project column to a new position within a project.",
      "properties": {
        "column_id": {
          "description": "The unique identifier of the project column to be moved.",
          "examples": [12345],
          "title": "Column Id",
          "type": "integer"
        },
        "position": {
          "description": "The new position of the column in the project. Valid values are: 'first' (to place the column at the beginning), 'last' (to place the column at the end), or 'after:<column_id>' (to place the column after the specified column, e.g., 'after:67890').",
          "examples": ["first", "last", "after:67890"],
          "pattern": "^(?:first|last|after:\\d+)$",
          "title": "Position",
          "type": "string"
        }
      },
      "required": ["column_id", "position"],
      "title": "MoveAProjectColumnRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the response. For this operation, a successful move typically results in an empty response body from the API (HTTP 204 No Content), so this dictionary will usually be empty.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["successful"],
      "title": "MoveAProjectColumnResponseWrapper",
      "type": "object"
    },
    "description": "Moves a column within a github project (classic) to a new position; `position` can be 'first', 'last', or 'after:<target column id>', where `target column id` must reference an existing column in the same project.",
    "tags": ["openWorldHint", "projects", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Ping an organization webhook",
    "slug": "GITHUB_PING_AN_ORGANIZATION_WEBHOOK",
    "input_parameters": {
      "description": "Request schema for `PingAnOrganizationWebhook`",
      "properties": {
        "hook_id": {
          "description": "The unique identifier of the webhook. This ID can be found in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "examples": ["123456789"],
          "title": "Hook Id",
          "type": "integer"
        },
        "org": {
          "description": "The name of the organization. This field is not case-sensitive.",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org", "hook_id"],
      "title": "PingAnOrganizationWebhookRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "PingAnOrganizationWebhookResponseWrapper",
      "type": "object"
    },
    "description": "Sends a 'ping' event to a specified, existing organization webhook to test its configuration and ensure it correctly receives events.",
    "tags": ["idempotentHint", "openWorldHint", "orgs", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Ping a repository webhook",
    "slug": "GITHUB_PING_A_REPOSITORY_WEBHOOK",
    "input_parameters": {
      "description": "Request schema for `PingARepositoryWebhook`",
      "properties": {
        "hook_id": {
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "examples": ["123456789"],
          "title": "Hook Id",
          "type": "integer"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "hook_id"],
      "title": "PingARepositoryWebhookRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the response data. For a successful ping (HTTP 204 No Content), this dictionary may be empty or represent an empty body.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "PingARepositoryWebhookResponseWrapper",
      "type": "object"
    },
    "description": "Pings an existing webhook on a repository to test its configuration and reachability by github.",
    "tags": ["idempotentHint", "openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Privately report a security vulnerability",
    "slug": "GITHUB_PRIVATELY_REPORT_A_SECURITY_VULNERABILITY",
    "input_parameters": {
      "description": "Request schema for privately reporting a security vulnerability in a repository.",
      "properties": {
        "cvss_vector_string": {
          "description": "The CVSS vector string for advisory severity. Mutually exclusive with `severity`.",
          "examples": ["CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"],
          "title": "Cvss Vector String",
          "type": "string"
        },
        "cwe_ids": {
          "description": "A list of Common Weakness Enumeration (CWE) identifiers relevant to the vulnerability.",
          "examples": [["CWE-79", "CWE-89"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Cwe Ids",
          "type": "array"
        },
        "description": {
          "description": "A detailed explanation of the security vulnerability, its impact, and potential mitigations.",
          "examples": [
            "User input in comments is not properly sanitized, allowing for potential XSS attacks when comments are displayed."
          ],
          "title": "Description",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        },
        "severity": {
          "description": "The advisory's severity level. Mutually exclusive with `cvss_vector_string`.",
          "enum": ["critical", "high", "medium", "low"],
          "title": "Severity",
          "type": "string"
        },
        "start_private_fork": {
          "default": false,
          "description": "Whether to create a temporary private fork to collaborate on a fix for the reported vulnerability.",
          "title": "Start Private Fork",
          "type": "boolean"
        },
        "summary": {
          "description": "A short, descriptive summary of the security vulnerability.",
          "examples": ["Cross-site scripting in comment rendering"],
          "title": "Summary",
          "type": "string"
        },
        "vulnerabilities": {
          "description": "A list of vulnerability objects detailing the affected packages or products. Each object should specify the package's ecosystem and name, the vulnerable version range, and optionally, patched versions and vulnerable functions.",
          "examples": [
            "[{\"package\": {\"ecosystem\": \"npm\", \"name\": \"lodash\"}, \"vulnerable_version_range\": \"< 4.17.21\", \"patched_versions\": \">= 4.17.21\"}]"
          ],
          "items": { "additionalProperties": true, "properties": {}, "type": "object" },
          "title": "Vulnerabilities",
          "type": "array"
        }
      },
      "required": ["owner", "repo", "summary", "description"],
      "title": "PrivatelyReportASecurityVulnerabilityRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "PrivatelyReportASecurityVulnerabilityResponseWrapper",
      "type": "object"
    },
    "description": "Privately reports a security vulnerability for a repository; specify either `severity` or `cvss vector string`, but not both.",
    "tags": ["openWorldHint", "security-advisories", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Pulls check if merged",
    "slug": "GITHUB_PULLS_CHECK_IF_MERGED",
    "input_parameters": {
      "description": "Request schema for `CheckIfAPullRequestHasBeenMerged`",
      "properties": {
        "owner": {
          "description": "The account owner of the repository (not case sensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "pull_number": {
          "description": "The number that identifies the pull request.",
          "examples": ["1347"],
          "title": "Pull Number",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension (not case sensitive).",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "pull_number"],
      "title": "CheckIfAPullRequestHasBeenMergedRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response data. Merge status is indicated by HTTP status: 204 (merged, empty body) or 404 (not merged/found, body may contain error details).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CheckIfAPullRequestHasBeenMergedResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: use `check if a pull request has been merged` instead. checks if a github pull request has been merged, indicated by a 204 http status (merged) or 404 (not merged/found).",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "Create a pull request",
    "slug": "GITHUB_PULLS_CREATE",
    "input_parameters": {
      "description": "Request schema for `CreateAPullRequest`",
      "properties": {
        "base": {
          "description": "The name of the branch you want the changes pulled into. This must be an existing branch on the current (target) repository. You cannot submit a pull request to one repository that requests a merge to a base branch of another repository. ",
          "examples": ["main", "develop"],
          "title": "Base",
          "type": "string"
        },
        "body": {
          "description": "The detailed description or contents of the pull request.",
          "examples": [
            "This PR introduces a new feature that does X, Y, and Z.",
            "Fixes #42 by addressing the off-by-one error."
          ],
          "title": "Body",
          "type": "string"
        },
        "draft": {
          "description": "Indicates whether the pull request should be created as a draft. Draft pull requests cannot be merged until marked as ready for review.",
          "examples": ["True", "False"],
          "title": "Draft",
          "type": "boolean"
        },
        "head": {
          "description": "The name of the branch where your changes are implemented. For cross-repository pull requests, namespace `head` with the source owner and branch, like `username:branch`.",
          "examples": ["feature-branch", "octocat:my-feature-branch"],
          "title": "Head",
          "type": "string"
        },
        "head_repo": {
          "description": "The name of the repository (e.g., 'octocat/Hello-World') where the changes in the pull request were made. This field is required for cross-repository pull requests if both the source and target repositories are owned by the same organization but are different repositories.",
          "examples": ["octocat/my-forked-repo"],
          "format": "repo.nwo",
          "title": "Head Repo",
          "type": "string"
        },
        "issue": {
          "description": "The number of an existing issue in the repository to convert into a pull request. If provided, the issue's title and body may be used for the pull request. Required if `title` is not specified.",
          "examples": ["123", "456"],
          "title": "Issue",
          "type": "integer"
        },
        "maintainer_can_modify": {
          "description": "Indicates whether maintainers of the upstream repository can modify the pull request. This is primarily relevant for pull requests originating from forks.",
          "examples": ["True", "False"],
          "title": "Maintainer Can Modify",
          "type": "boolean"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        },
        "title": {
          "description": "The title of the new pull request. Required unless `issue` is specified.",
          "examples": ["Amazing new feature", "Fix for critical bug #123"],
          "title": "Title",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "head", "base"],
      "title": "CreateAPullRequestRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the full representation of the created pull request.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAPullRequestResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: use `create a pull request` instead. creates a pull request, requiring existing `base` and `head` branches.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "Create a review for a pull request",
    "slug": "GITHUB_PULLS_CREATE_REVIEW",
    "input_parameters": {
      "description": "Request schema for `CreateAReviewForAPullRequest`",
      "properties": {
        "body": {
          "default": null,
          "description": "Review's main body text; required if `event` is `REQUEST_CHANGES` or `COMMENT`.",
          "examples": ["This looks great overall!", "Please address the comments below."],
          "nullable": true,
          "title": "Body",
          "type": "string"
        },
        "comments": {
          "default": null,
          "description": "Inline draft review comments. Each object requires `path` (relative file path) and `body` (comment text). Optionally, specify `line` (or `start_line` for multi-line), and `side` (or `start_side`) for diff location. `position` is deprecated; use `line`. Example: `[{'path': 'file.py', 'line': 10, 'body': 'Refactor this.'}]`",
          "examples": [
            "[{\"path\": \"README.md\", \"line\": 5, \"body\": \"Needs more detail here.\"}]",
            "[{\"path\": \"src/main.py\", \"start_line\": 10, \"line\": 12, \"side\": \"RIGHT\", \"body\": \"This logic can be simplified.\"}]"
          ],
          "items": {
            "description": "Schema for individual review comments",
            "properties": {
              "body": {
                "description": "The text of the comment",
                "title": "Body",
                "type": "string"
              },
              "line": {
                "default": null,
                "description": "The line number in the diff to comment on (required for single-line comments)",
                "nullable": true,
                "title": "Line",
                "type": "integer"
              },
              "path": {
                "description": "The relative path to the file being commented on",
                "title": "Path",
                "type": "string"
              },
              "side": {
                "default": null,
                "description": "The side of the diff to place the comment on (LEFT or RIGHT)",
                "enum": ["LEFT", "RIGHT"],
                "nullable": true,
                "title": "SideEnm",
                "type": "string"
              },
              "start_line": {
                "default": null,
                "description": "The start line number for multi-line comments",
                "nullable": true,
                "title": "Start Line",
                "type": "integer"
              },
              "start_side": {
                "default": null,
                "description": "The side of the diff to start a multi-line comment on",
                "enum": ["LEFT", "RIGHT"],
                "nullable": true,
                "title": "SideEnm",
                "type": "string"
              }
            },
            "required": ["path", "body"],
            "title": "ReviewComment",
            "type": "object"
          },
          "nullable": true,
          "title": "Comments",
          "type": "array"
        },
        "commit_id": {
          "default": null,
          "description": "SHA of the commit to review; defaults to the latest pull request commit. Outdated SHAs may lead to stale comments.",
          "examples": ["c4d3a6f8a0c2b0e8e2b8f3c9e8b4b0e5b0b0e0e0"],
          "nullable": true,
          "title": "Commit Id",
          "type": "string"
        },
        "event": {
          "default": null,
          "description": "Review action type (`APPROVE`, `REQUEST_CHANGES`, `COMMENT`); if omitted, review is `PENDING` and requires later submission.",
          "enum": ["APPROVE", "REQUEST_CHANGES", "COMMENT"],
          "examples": ["APPROVE", "REQUEST_CHANGES", "COMMENT"],
          "nullable": true,
          "title": "EventEnm",
          "type": "string"
        },
        "owner": {
          "description": "Username of the account owning the repository (case-insensitive).",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "pull_number": {
          "description": "Identifying number of the pull request.",
          "examples": [1, 123],
          "title": "Pull Number",
          "type": "integer"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension (case-insensitive).",
          "examples": ["Hello-World", "my-private-repo"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "pull_number"],
      "title": "CreateAReviewForAPullRequestRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAReviewForAPullRequestResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: use `create a review for a pull request` for creating pull request reviews; supports `pending` for drafts and comment positioning.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "Create a review comment for a pull request",
    "slug": "GITHUB_PULLS_CREATE_REVIEW_COMMENT",
    "input_parameters": {
      "description": "Request schema for `CreateAReviewCommentForAPullRequest`",
      "properties": {
        "body": {
          "description": "Text content of the review comment.",
          "examples": ["This looks great!", "Could you clarify this section?"],
          "title": "Body",
          "type": "string"
        },
        "commit_id": {
          "description": "SHA of the commit for the comment. Using an outdated `commit_id` can misplace the comment if lines change.",
          "examples": ["c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc"],
          "title": "Commit Id",
          "type": "string"
        },
        "in_reply_to": {
          "description": "ID of an existing review comment to reply to. If provided, other location parameters (except `body`) are ignored.",
          "examples": ["8663694"],
          "title": "In Reply To",
          "type": "integer"
        },
        "line": {
          "description": "**Required unless `subject_type` is 'file'**. Line number in the diff for the comment; for multi-line, this is the last line of the range.",
          "examples": ["25"],
          "title": "Line",
          "type": "integer"
        },
        "owner": {
          "description": "Account owner of the repository (not case sensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "path": {
          "description": "Relative path of the file for the comment.",
          "examples": ["file1.txt", "src/main.py"],
          "title": "Path",
          "type": "string"
        },
        "position": {
          "description": "**Deprecated: Use `line` instead.** Position in the diff hunk for the comment (not the file line number).",
          "title": "Position",
          "type": "integer"
        },
        "pull_number": {
          "description": "Identifier of the pull request.",
          "examples": ["1347"],
          "title": "Pull Number",
          "type": "integer"
        },
        "repo": {
          "description": "Repository name without the `.git` extension (not case sensitive).",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        },
        "side": {
          "description": "Side of the diff (`LEFT` or `RIGHT`) for the comment in a split diff view; for multi-line comments, refers to the last line of the range.",
          "enum": ["LEFT", "RIGHT"],
          "title": "Side",
          "type": "string"
        },
        "start_line": {
          "description": "**Required for multi-line comments unless `in_reply_to` is used.** First line in the diff for a multi-line comment.",
          "examples": ["20"],
          "title": "Start Line",
          "type": "integer"
        },
        "start_side": {
          "description": "**Required for multi-line comments unless `in_reply_to` is used.** Starting side of the diff (`LEFT` or `RIGHT`) for a multi-line comment.",
          "enum": ["LEFT", "RIGHT", "side"],
          "title": "Start Side",
          "type": "string"
        },
        "subject_type": {
          "description": "Level of the comment target: `line` (specific line) or `file` (entire file). Defaults to `line` if not provided.",
          "enum": ["line", "file"],
          "title": "Subject Type",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "pull_number", "body", "commit_id", "path"],
      "title": "CreateAReviewCommentForAPullRequestRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details of the newly created pull request review comment.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAReviewCommentForAPullRequestResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: creates a review comment on a pull request's diff. use `create a review comment for a pull request` instead.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "Get a pull request",
    "slug": "GITHUB_PULLS_GET",
    "input_parameters": {
      "description": "Request schema for `GetAPullRequest`",
      "properties": {
        "owner": {
          "description": "The username of the account that owns the repository. This value is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "pull_number": {
          "description": "The number that identifies the specific pull request.",
          "examples": [1347],
          "title": "Pull Number",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the .git extension. This value is not case sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "pull_number"],
      "title": "GetAPullRequestRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAPullRequestResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: retrieves details of a specific pull request; prefer using the `get a pull request` action.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "List pull requests",
    "slug": "GITHUB_PULLS_LIST",
    "input_parameters": {
      "description": "Request schema for listing pull requests in a repository.",
      "properties": {
        "base": {
          "description": "Filter by base branch name.",
          "examples": ["main", "develop", "gh-pages"],
          "title": "Base",
          "type": "string"
        },
        "direction": {
          "description": "Sort direction. Valid values: 'asc', 'desc'. Defaults to 'desc' if sort is 'created' or unspecified, else 'asc'.",
          "examples": ["asc", "desc"],
          "title": "Direction",
          "type": "string"
        },
        "head": {
          "description": "Filter by head user/org and branch name, e.g., `user:ref-name`.",
          "examples": ["octocat:test-branch", "github:new-script-format"],
          "title": "Head",
          "type": "string"
        },
        "owner": {
          "description": "Username or organization name of the repository owner.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for results.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension.",
          "examples": ["Spoon-Knife", "my-project"],
          "title": "Repo",
          "type": "string"
        },
        "sort": {
          "default": "created",
          "description": "Sorts results. Valid values: 'created', 'updated', 'popularity', 'long-running'. 'popularity' is by comment count; 'long-running' by age and recent activity.",
          "examples": ["created", "updated", "popularity", "long-running"],
          "title": "Sort",
          "type": "string"
        },
        "state": {
          "default": "open",
          "description": "Filter by pull request state. Valid values: 'open', 'closed', 'all'.",
          "examples": ["open", "closed", "all"],
          "title": "State",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListPullRequestsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Filtered pull request data with only essential information",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListPullRequestsResponseWrapper",
      "type": "object"
    },
    "description": "(deprecated: use `list pull requests`) lists pull requests for a specified github repository with ai-friendly filtering.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "Redeliver a delivery for an organization webhook",
    "slug": "GITHUB_REDELIVER_A_DELIVERY_FOR_AN_ORGANIZATION_WEBHOOK",
    "input_parameters": {
      "description": "Request schema for redelivering a specific webhook delivery for an organization.",
      "properties": {
        "delivery_id": {
          "description": "The unique identifier of the specific webhook delivery to be redelivered. This ID is typically obtained from the `X-GitHub-Delivery` header of the original delivery attempt or by listing deliveries for a webhook.",
          "examples": [987654321],
          "title": "Delivery Id",
          "type": "integer"
        },
        "hook_id": {
          "description": "The unique identifier of the webhook. This ID can be found in the `X-GitHub-Hook-ID` header of a webhook delivery or by listing webhooks for an organization.",
          "examples": [123456789],
          "title": "Hook Id",
          "type": "integer"
        },
        "org": {
          "description": "The name of the organization. This name is not case-sensitive.",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org", "hook_id", "delivery_id"],
      "title": "RedeliverADeliveryForAnOrganizationWebhookRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The response body from the GitHub API. Typically, this is an empty object {} upon successful redelivery request (HTTP 202 Accepted), or an object containing error details if the request fails.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RedeliverADeliveryForAnOrganizationWebhookResponseWrapper",
      "type": "object"
    },
    "description": "Redelivers a specific webhook delivery for a webhook within an organization, to resend an event that previously failed or was not processed.",
    "tags": ["openWorldHint", "orgs", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Redeliver a delivery for a repository webhook",
    "slug": "GITHUB_REDELIVER_A_DELIVERY_FOR_A_REPOSITORY_WEBHOOK",
    "input_parameters": {
      "description": "Input for redelivering a specific past webhook delivery.",
      "properties": {
        "delivery_id": {
          "description": "Unique identifier of a specific past delivery for the webhook (obtainable by listing deliveries for that webhook).",
          "examples": ["12345", "67890"],
          "title": "Delivery Id",
          "type": "integer"
        },
        "hook_id": {
          "description": "Unique identifier of the webhook (e.g., from `X-GitHub-Hook-ID` header or by listing repository webhooks).",
          "examples": ["12345678", "98765432"],
          "title": "Hook Id",
          "type": "integer"
        },
        "owner": {
          "description": "The account username that owns the repository (not case-sensitive).",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The repository name, without the `.git` extension (not case-sensitive).",
          "examples": ["Hello-World", "linguist"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "hook_id", "delivery_id"],
      "title": "RedeliverADeliveryForARepositoryWebhookRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response; typically an empty object on successful redelivery (HTTP 202 Accepted).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RedeliverADeliveryForARepositoryWebhookResponseWrapper",
      "type": "object"
    },
    "description": "Redelivers a specific, previously made webhook delivery (`delivery id`) for a repository's webhook (`hook id`).",
    "tags": ["openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove all labels from an issue",
    "slug": "GITHUB_REMOVE_ALL_LABELS_FROM_AN_ISSUE",
    "input_parameters": {
      "description": "Request schema for removing all labels from a specific issue within a repository.",
      "properties": {
        "issue_number": {
          "description": "The unique number that identifies the issue from which all labels will be removed.",
          "examples": [1347],
          "title": "Issue Number",
          "type": "integer"
        },
        "owner": {
          "description": "The username of the account that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the '.git' extension. This field is not case-sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "issue_number"],
      "title": "RemoveAllLabelsFromAnIssueRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Response data from the API; an empty dictionary is expected on success (HTTP 204 No Content).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["successful"],
      "title": "RemoveAllLabelsFromAnIssueResponseWrapper",
      "type": "object"
    },
    "description": "Removes all labels from a specified issue in a github repository; this operation is idempotent.",
    "tags": ["destructiveHint", "idempotentHint", "issues", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove all organization roles for a team",
    "slug": "GITHUB_REMOVE_ALL_ORGANIZATION_ROLES_FOR_A_TEAM",
    "input_parameters": {
      "description": "Request schema for revoking all organization roles from a team.",
      "properties": {
        "org": {
          "description": "The name of the organization. This field is not case-sensitive.",
          "examples": ["github"],
          "title": "Org",
          "type": "string"
        },
        "team_slug": {
          "description": "The slug of the team name. Team slugs are typically all lowercase and replace spaces with hyphens.",
          "examples": ["engineering-team"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug"],
      "title": "RemoveAllOrganizationRolesForATeamRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "default": null,
          "description": "Typically an empty dictionary or null, as a successful revocation returns a 204 No Content response.",
          "nullable": true,
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["successful"],
      "title": "RemoveAllOrganizationRolesForATeamResponseWrapper",
      "type": "object"
    },
    "description": "Revokes all organization roles for a team in an organization; this is destructive and succeeds even if the team initially has no roles.",
    "tags": ["destructiveHint", "openWorldHint", "orgs", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove all organization roles for a user",
    "slug": "GITHUB_REMOVE_ALL_ORGANIZATION_ROLES_FOR_A_USER",
    "input_parameters": {
      "description": "Request schema for `RemoveAllOrganizationRolesForAUser`",
      "properties": {
        "org": {
          "description": "The organization name. This name is not case sensitive.",
          "examples": ["github", "my-company-org"],
          "title": "Org",
          "type": "string"
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "examples": ["octocat", "mona-lisa"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["org", "username"],
      "title": "RemoveAllOrganizationRolesForAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the API response. For successful operations (typically HTTP 204 No Content), this dictionary may be empty or reflect that no content was returned in the response body. If the API returns a JSON payload, it will be parsed here.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveAllOrganizationRolesForAUserResponseWrapper",
      "type": "object"
    },
    "description": "Revokes all assigned organization-level roles from a specified user (who must be a member of the organization) within a github organization, without removing the user from the organization or affecting repository-specific roles.",
    "tags": ["destructiveHint", "openWorldHint", "orgs", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove an organization member",
    "slug": "GITHUB_REMOVE_AN_ORGANIZATION_MEMBER",
    "input_parameters": {
      "description": "Request schema for removing a member from a GitHub organization.",
      "properties": {
        "org": {
          "description": "The name of the organization from which to remove the member.",
          "examples": ["github-org"],
          "title": "Org",
          "type": "string"
        },
        "username": {
          "description": "The GitHub username of the member to remove.",
          "examples": ["octocat"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["org", "username"],
      "title": "RemoveAnOrganizationMemberRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response data; typically empty for a successful removal (HTTP 204 No Content), or contains error details on failure.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveAnOrganizationMemberResponseWrapper",
      "type": "object"
    },
    "description": "Removes a user, who must currently be a member, from a github organization, revoking their membership and access rights.",
    "tags": ["destructiveHint", "openWorldHint", "orgs", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove an organization role from a team",
    "slug": "GITHUB_REMOVE_AN_ORGANIZATION_ROLE_FROM_A_TEAM",
    "input_parameters": {
      "description": "Request schema for removing an organization role from a team.",
      "properties": {
        "org": {
          "description": "The name of the organization. This value is not case sensitive.",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "role_id": {
          "description": "The unique identifier of the organization role to be removed from the team.",
          "examples": ["42"],
          "title": "Role Id",
          "type": "integer"
        },
        "team_slug": {
          "description": "The slug (short name) of the team.",
          "examples": ["justice-league"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug", "role_id"],
      "title": "RemoveAnOrganizationRoleFromATeamRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Response data from the API. For this operation, it is typically empty upon successful removal (HTTP 204 No Content).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["successful"],
      "title": "RemoveAnOrganizationRoleFromATeamResponseWrapper",
      "type": "object"
    },
    "description": "Revokes an organization role that a team currently possesses within an organization.",
    "tags": ["destructiveHint", "openWorldHint", "orgs", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove an organization role from a user",
    "slug": "GITHUB_REMOVE_AN_ORGANIZATION_ROLE_FROM_A_USER",
    "input_parameters": {
      "description": "Request schema for `RemoveAnOrganizationRoleFromAUser`",
      "properties": {
        "org": {
          "description": "The GitHub organization's name (not case-sensitive).",
          "examples": ["github", "my-company-org"],
          "title": "Org",
          "type": "string"
        },
        "role_id": {
          "description": "Unique ID of the custom organization role to be removed.",
          "examples": ["42", "101"],
          "title": "Role Id",
          "type": "integer"
        },
        "username": {
          "description": "GitHub username of the user.",
          "examples": ["octocat", "mona-lisa"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["org", "username", "role_id"],
      "title": "RemoveAnOrganizationRoleFromAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Response data, typically empty for a successful (HTTP 204 No Content) removal.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveAnOrganizationRoleFromAUserResponseWrapper",
      "type": "object"
    },
    "description": "Removes a custom organization role from a user within a github organization, provided the organization exists, the user is a member, and the role id corresponds to a valid custom role in that organization.",
    "tags": [
      "destructiveHint",
      "idempotentHint",
      "openWorldHint",
      "Organization Management",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove app access restrictions",
    "slug": "GITHUB_REMOVE_APP_ACCESS_RESTRICTIONS",
    "input_parameters": {
      "description": "Request schema for `RemoveAppAccessRestrictions`",
      "properties": {
        "branch": {
          "description": "The name of the branch from which all app access restrictions will be removed. Wildcard characters are not supported; for branches with wildcards, please use the GraphQL API.",
          "examples": ["main", "develop", "feature/new-login"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "The username of the account that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["hello-world", "linguist"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "RemoveAppAccessRestrictionsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The API response. Upon success, this field contains a list of app objects detailing the apps whose access restrictions were removed from the branch. An empty list indicates all app restrictions were removed or none were present. For the app object structure, consult the GitHub API documentation.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveAppAccessRestrictionsResponseWrapper",
      "type": "object"
    },
    "description": "Removes all github app access restrictions from a protected branch in a repository; the branch must have protection rules configured, and this action does not alter user or team restrictions.",
    "tags": ["destructiveHint", "openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove assignees from an issue",
    "slug": "GITHUB_REMOVE_ASSIGNEES_FROM_AN_ISSUE",
    "input_parameters": {
      "description": "Request schema for removing assignees from a GitHub issue.",
      "properties": {
        "assignees": {
          "description": "Usernames to unassign from the issue. Note: Requires push access to the repository; attempts to remove users without permission or those not currently assigned are silently ignored.",
          "examples": [["octocat", "monalisa"], ["devonzuegel"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Assignees",
          "type": "array"
        },
        "issue_number": {
          "description": "The unique number that identifies the issue within the repository.",
          "examples": ["1347", "2023"],
          "title": "Issue Number",
          "type": "integer"
        },
        "owner": {
          "description": "The account owner of the repository (username or organization name). This name is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, excluding the `.git` extension. This name is not case-sensitive.",
          "examples": ["Spoon-Knife", "my-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "issue_number"],
      "title": "RemoveAssigneesFromAnIssueRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the GitHub issue resource from which assignees were removed, confirming the successful removal and showing the updated state of the issue.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveAssigneesFromAnIssueResponseWrapper",
      "type": "object"
    },
    "description": "Removes specified assignees from a github issue; requires push access, and invalid removal attempts are silently ignored.",
    "tags": ["destructiveHint", "idempotentHint", "issues", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove a custom property for an organization",
    "slug": "GITHUB_REMOVE_A_CUSTOM_PROPERTY_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for removing a custom property from an organization.",
      "properties": {
        "custom_property_name": {
          "description": "The name of the custom property to remove. This name is case sensitive.",
          "examples": ["project_status_tracking_id"],
          "title": "Custom Property Name",
          "type": "string"
        },
        "org": {
          "description": "The name of the organization. This name is not case sensitive.",
          "examples": ["my-org-name"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org", "custom_property_name"],
      "title": "RemoveACustomPropertyForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty dictionary indicating successful removal of the custom property.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["successful"],
      "title": "RemoveACustomPropertyForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a custom property, specified by `custom property name`, from an existing organization (`org`) for which the property is currently defined, preventing its future assignment to repositories.",
    "tags": ["destructiveHint", "openWorldHint", "orgs", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove a label from an issue",
    "slug": "GITHUB_REMOVE_A_LABEL_FROM_AN_ISSUE",
    "input_parameters": {
      "description": "Request schema for `RemoveALabelFromAnIssue`",
      "properties": {
        "issue_number": {
          "description": "The number that identifies the issue.",
          "examples": [1347],
          "title": "Issue Number",
          "type": "integer"
        },
        "name": {
          "description": "The name of the label to remove from the issue. Emoji reactions will not be removed and names with spaces or special characters must be URL-encoded.",
          "examples": ["bug"],
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. ",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "issue_number", "name"],
      "title": "RemoveALabelFromAnIssueRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveALabelFromAnIssueResponseWrapper",
      "type": "object"
    },
    "description": "Removes a label currently applied to a specific issue in a repository.",
    "tags": ["destructiveHint", "idempotentHint", "issues", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove a project from a team",
    "slug": "GITHUB_REMOVE_A_PROJECT_FROM_A_TEAM",
    "input_parameters": {
      "description": "Request schema for removing a project from a team.",
      "properties": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "examples": ["octo-org", "my-company"],
          "title": "Org",
          "type": "string"
        },
        "project_id": {
          "description": "The unique identifier of the project to be removed from the team.",
          "examples": [1023, 42],
          "title": "Project Id",
          "type": "integer"
        },
        "team_slug": {
          "description": "The slug of the team name (URL-friendly version, e.g., 'justice-league').",
          "examples": ["justice-league", "engineering-team"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug", "project_id"],
      "title": "RemoveAProjectFromATeamRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Response data from the API. For a successful removal (HTTP 204 No Content), this field is typically empty. In case of an error, it may contain error details.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveAProjectFromATeamResponseWrapper",
      "type": "object"
    },
    "description": "Removes a project from a team within an organization; this action requires the project to be currently associated with the team.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "teams", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove a repository collaborator",
    "slug": "GITHUB_REMOVE_A_REPOSITORY_COLLABORATOR",
    "input_parameters": {
      "description": "Request schema for removing a collaborator from a GitHub repository.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository (not case-sensitive).",
          "examples": ["octocat", "github-owner"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension (not case-sensitive).",
          "examples": ["Hello-World", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        },
        "username": {
          "description": "The GitHub username of the collaborator to remove.",
          "examples": ["hubot", "octo-collaborator"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "username"],
      "title": "RemoveARepositoryCollaboratorRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Response data, expected to be empty upon successful removal (204 No Content).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveARepositoryCollaboratorResponseWrapper",
      "type": "object"
    },
    "description": "Removes a collaborator from a specified github repository, provided the repository exists and the user is an existing collaborator.",
    "tags": ["destructiveHint", "openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove a repository from an app installation",
    "slug": "GITHUB_REMOVE_A_REPOSITORY_FROM_AN_APP_INSTALLATION",
    "input_parameters": {
      "description": "Request schema for `RemoveARepositoryFromAnAppInstallation`",
      "properties": {
        "installation_id": {
          "description": "The unique identifier of the GitHub App installation from which to remove the repository.",
          "examples": ["1234567"],
          "title": "Installation Id",
          "type": "integer"
        },
        "repository_id": {
          "description": "The unique identifier of the repository to be removed from the installation.",
          "examples": ["7654321"],
          "title": "Repository Id",
          "type": "integer"
        }
      },
      "required": ["installation_id", "repository_id"],
      "title": "RemoveARepositoryFromAnAppInstallationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveARepositoryFromAnAppInstallationResponseWrapper",
      "type": "object"
    },
    "description": "Removes a repository from a github app installation for the authenticated user, given a valid `installation id` and the `repository id` of a repository currently linked to that installation; this operation is idempotent.",
    "tags": ["apps", "destructiveHint", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove a repository from a team",
    "slug": "GITHUB_REMOVE_A_REPOSITORY_FROM_A_TEAM",
    "input_parameters": {
      "description": "Specifies the target organization, team, and repository to disassociate.",
      "properties": {
        "org": {
          "description": "The name of the organization where the team and repository exist. This field is case-insensitive.",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "owner": {
          "description": "The username of the account that owns the repository. This field is case-insensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the '.git' extension. This field is case-insensitive.",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        },
        "team_slug": {
          "description": "The URL-friendly identifier (slug) for the team. Team slugs are typically all lowercase with hyphens instead of spaces (e.g., 'justice-league' for 'Justice League').",
          "examples": ["justice-league"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug", "owner", "repo"],
      "title": "RemoveARepositoryFromATeamRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty dictionary is typically returned on successful removal (HTTP 204 No Content). If an error occurs, this may contain error details.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveARepositoryFromATeamResponseWrapper",
      "type": "object"
    },
    "description": "Disassociates a repository from a team; team members may lose access permissions, but the repository and team are not deleted.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "teams", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove a selected repository from a user secret",
    "slug": "GITHUB_REMOVE_A_SELECTED_REPOSITORY_FROM_A_USER_SECRET",
    "input_parameters": {
      "description": "Request schema for removing a selected repository's access to a user's Codespaces secret.",
      "properties": {
        "repository_id": {
          "description": "The unique integer identifier of the repository that will lose access to the specified Codespaces secret.",
          "examples": ["123456789", "987654321"],
          "title": "Repository Id",
          "type": "integer"
        },
        "secret_name": {
          "description": "Name of the user's Codespaces secret from which repository access will be revoked.",
          "examples": ["AWS_ACCESS_KEY_ID_USER", "GH_PAT"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["secret_name", "repository_id"],
      "title": "RemoveASelectedRepositoryFromAUserSecretRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveASelectedRepositoryFromAUserSecretResponseWrapper",
      "type": "object"
    },
    "description": "Removes a selected repository's access to a user's codespaces secret; the secret must exist and the repository must have previously been granted access.",
    "tags": ["codespaces", "destructiveHint", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove custom labels from self hosted repo runner",
    "slug": "GITHUB_REMOVE_CUSTOM_LABELS_FROM_SELF_HOSTED_REPOSITORY_RUNNER",
    "input_parameters": {
      "description": "Request schema for `RemoveCustomLabelsFromSelfHostedRepositoryRunner`",
      "properties": {
        "owner": {
          "description": "The account owner of the repository. This name is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["hello-world", "my-repo"],
          "title": "Repo",
          "type": "string"
        },
        "runner_id": {
          "description": "Unique identifier (ID) of the self-hosted runner.",
          "examples": ["42", "123"],
          "title": "Runner Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "runner_id"],
      "title": "RemoveCustomLabelsFromSelfHostedRepositoryRunnerRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the response from GitHub. This typically includes `total_count` (the number of remaining labels) and a `labels` array. Each object in the `labels` array details a remaining label, including its `id`, `name`, and `type` (e.g., 'read-only' for default labels or custom labels from the organization).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveCustomLabelsFromSelfHostedRepositoryRunnerResponseWrapper",
      "type": "object"
    },
    "description": "Removes all custom labels from a self-hosted runner registered at the repository level, leaving only its default labels and any labels inherited from its runner group or organization.",
    "tags": ["actions", "destructiveHint", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove custom label from repo runner",
    "slug": "GITHUB_REMOVE_CUSTOM_LABEL_FROM_REPO_RUNNER",
    "input_parameters": {
      "description": "Request schema for `RemoveCustomLabelFromRepoRunner`",
      "properties": {
        "name": {
          "description": "Name of the custom label to remove from the self-hosted runner.",
          "examples": ["team-alpha-builder", "macos-ci-runner"],
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "description": "Account owner of the repository (case-insensitive).",
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension (case-insensitive).",
          "title": "Repo",
          "type": "string"
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "title": "Runner Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "runner_id", "name"],
      "title": "RemoveCustomLabelFromRepoRunnerRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "GitHub API response detailing remaining labels, including `total_count` and a list of `labels` (each with `id`, `name`, `type`).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveCustomLabelFromRepoRunnerResponseWrapper",
      "type": "object"
    },
    "description": "Removes a custom label from a repository's self-hosted runner; this operation is idempotent.",
    "tags": ["actions", "destructiveHint", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove custom label from self hosted runner",
    "slug": "GITHUB_REMOVE_CUSTOM_LABEL_FROM_SELF_HOSTED_RUNNER",
    "input_parameters": {
      "description": "Request schema for removing a custom label from a self-hosted runner in an organization.",
      "properties": {
        "name": {
          "description": "The name of the custom label to remove from the self-hosted runner.",
          "examples": ["prod-runner-label"],
          "title": "Name",
          "type": "string"
        },
        "org": {
          "description": "The name of the organization. This name is not case-sensitive.",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "examples": ["5"],
          "title": "Runner Id",
          "type": "integer"
        }
      },
      "required": ["org", "runner_id", "name"],
      "title": "RemoveCustomLabelFromSelfHostedRunnerRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the remaining custom labels for the self-hosted runner. This typically includes a 'total_count' of labels and a 'labels' list, where each label object has an 'id', 'name', and 'type'.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveCustomLabelFromSelfHostedRunnerResponseWrapper",
      "type": "object"
    },
    "description": "Removes a currently assigned custom label (`name`) from a self-hosted runner (`runner id`) in an organization (`org`).",
    "tags": ["actions", "destructiveHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove interaction restrictions for an organization",
    "slug": "GITHUB_REMOVE_INTERACTION_RESTRICTIONS_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request for removing interaction restrictions for an organization.",
      "properties": {
        "org": {
          "description": "The name of the GitHub organization. This name is not case-sensitive.",
          "examples": ["github", "my-organization"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org"],
      "title": "RemoveInteractionRestrictionsForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Typically empty for a successful (HTTP 204 No Content) request; may contain details if an error occurs with a response body.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveInteractionRestrictionsForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Removes all interaction restrictions from public repositories in the specified github organization, allowing all users to resume interactions.",
    "tags": ["destructiveHint", "idempotentHint", "interactions", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove interaction restrictions for a repository",
    "slug": "GITHUB_REMOVE_INTERACTION_RESTRICTIONS_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for `RemoveInteractionRestrictionsForARepository`",
      "properties": {
        "owner": {
          "description": "Username or organization name of the repository owner; case-insensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension; case-insensitive.",
          "examples": ["Spoon-Knife", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "RemoveInteractionRestrictionsForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Response data; typically empty for this operation due to a 204 No Content success status.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveInteractionRestrictionsForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Removes all interaction restrictions for a repository, enabling all users to comment, open issues, and create pull requests by lifting any existing temporary interaction limits.",
    "tags": ["destructiveHint", "idempotentHint", "interactions", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove user public repo interaction restrictions",
    "slug": "GITHUB_REMOVE_INTERACTION_RESTRICTIONS_FROM_YOUR_PUBLIC_REPOSITORIES",
    "input_parameters": {
      "description": "No request body parameters are required for this action.",
      "properties": {},
      "title": "RemoveInteractionRestrictionsFromYourPublicRepositoriesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveInteractionRestrictionsFromYourPublicRepositoriesResponseWrapper",
      "type": "object"
    },
    "description": "Removes all interaction restrictions (limitations on comments, issues, or pull requests) from all public repositories owned by the authenticated user.",
    "tags": ["destructiveHint", "interactions", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove org dev env secret by name",
    "slug": "GITHUB_REMOVE_ORG_DEV_ENV_SECRET_BY_NAME",
    "input_parameters": {
      "description": "Removes a GitHub Codespaces secret from an organization, identified by the secret's name.",
      "properties": {
        "org": {
          "description": "Name of the GitHub organization (case-insensitive).",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "secret_name": {
          "description": "Name of the Codespaces secret to remove.",
          "examples": ["MY_API_KEY", "DATABASE_PASSWORD"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["org", "secret_name"],
      "title": "RemoveOrgDevEnvSecretByNameRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Empty, as the operation returns no content on successful deletion.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveOrgDevEnvSecretByNameResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a github codespaces secret from an organization by its name; this operation is idempotent.",
    "tags": ["codespaces", "destructiveHint", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove org secret by name",
    "slug": "GITHUB_REMOVE_ORG_SECRET_BY_NAME",
    "input_parameters": {
      "description": "Parameters to remove an organization's Dependabot secret by its name.",
      "properties": {
        "org": {
          "description": "GitHub organization name (case-insensitive).",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "secret_name": {
          "description": "Dependabot secret name to remove from the organization.",
          "examples": ["MY_SECRET_TOKEN"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["org", "secret_name"],
      "title": "RemoveOrgSecretByNameRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Response data; typically empty for successful delete operations (204 No Content).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["successful"],
      "title": "RemoveOrgSecretByNameResponseWrapper",
      "type": "object"
    },
    "description": "Permanently removes a specific dependabot secret, by its `secret name`, from the github `org`, making it unavailable to dependabot for that organization.",
    "tags": ["dependabot", "destructiveHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove outside collaborator from an organization",
    "slug": "GITHUB_REMOVE_OUTSIDE_COLLABORATOR_FROM_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for removing an outside collaborator from a GitHub organization.",
      "properties": {
        "org": {
          "description": "The name of the GitHub organization. This name is not case-sensitive.",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "username": {
          "description": "The GitHub username of the outside collaborator to remove.",
          "examples": ["octocat"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["org", "username"],
      "title": "RemoveOutsideCollaboratorFromAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Response data from the API. For a successful removal (204 No Content), this field may be empty or not present.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["successful"],
      "title": "RemoveOutsideCollaboratorFromAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Removes a user, who must be an outside collaborator, from the specified github organization, revoking their access to all its repositories.",
    "tags": ["destructiveHint", "openWorldHint", "orgs", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove public org membership",
    "slug": "GITHUB_REMOVE_PUBLIC_ORG_MEMBERSHIP",
    "input_parameters": {
      "description": "Request schema for `RemovePublicOrgMembership`",
      "properties": {
        "org": {
          "description": "Name of the GitHub organization (case-insensitive).",
          "examples": ["octo-org", "github"],
          "title": "Org",
          "type": "string"
        },
        "username": {
          "description": "GitHub username of the authenticated user, whose public organization membership will be made private.",
          "examples": ["octocat", "monalisa"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["org", "username"],
      "title": "RemovePublicOrgMembershipRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemovePublicOrgMembershipResponseWrapper",
      "type": "object"
    },
    "description": "Makes an authenticated user's public membership in an organization private (without removing them from the organization); the user must currently be a public member of that organization.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "orgs", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Removerepofromorgdevenvsecret",
    "slug": "GITHUB_REMOVE_REPO_FROM_ORG_DEV_ENV_SECRET",
    "input_parameters": {
      "description": "Request schema for removing a repository's access to an organization's Codespaces secret.",
      "properties": {
        "org": {
          "description": "The GitHub organization name (not case-sensitive).",
          "examples": ["Octocorp"],
          "title": "Org",
          "type": "string"
        },
        "repository_id": {
          "description": "The unique identifier of the repository.",
          "examples": [1296269],
          "title": "Repository Id",
          "type": "integer"
        },
        "secret_name": {
          "description": "The Codespaces secret name.",
          "examples": ["AWS_ACCESS_KEY_ID"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["org", "secret_name", "repository_id"],
      "title": "RemoveRepoFromOrgDevEnvSecretRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty dictionary, as the API returns 204 No Content on success.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveRepoFromOrgDevEnvSecretResponseWrapper",
      "type": "object"
    },
    "description": "Removes a repository's access to an organization-level codespaces secret, if it was previously granted.",
    "tags": ["codespaces", "destructiveHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove selected repo from org secret",
    "slug": "GITHUB_REMOVE_REPO_FROM_ORG_SECRET_WITH_SELECTED_VISIBILITY",
    "input_parameters": {
      "description": "Input for revoking a repository's access to an organization's Dependabot secret with 'selected' visibility.",
      "properties": {
        "org": {
          "description": "Name of the organization (not case-sensitive).",
          "examples": ["my-github-org", "OctoCorp"],
          "title": "Org",
          "type": "string"
        },
        "repository_id": {
          "description": "Unique ID of the repository.",
          "examples": ["123456789", "987654321"],
          "title": "Repository Id",
          "type": "integer"
        },
        "secret_name": {
          "description": "Name of the Dependabot secret.",
          "examples": ["ACTIONS_DEPLOY_KEY", "NPM_TOKEN"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["org", "secret_name", "repository_id"],
      "title": "RemoveRepoFromOrgSecretWithSelectedVisibilityRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveRepoFromOrgSecretWithSelectedVisibilityResponseWrapper",
      "type": "object"
    },
    "description": "Revokes a specific repository's access to an organization-level dependabot secret, applicable only when the secret has 'selected' visibility and the specified repository currently has access.",
    "tags": ["dependabot", "destructiveHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove requested reviewers from a pull request",
    "slug": "GITHUB_REMOVE_REQUESTED_REVIEWERS_FROM_A_PULL_REQUEST",
    "input_parameters": {
      "description": "Request to remove specified reviewers from a pull request.",
      "properties": {
        "owner": {
          "description": "Username of the repository owner (not case-sensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "pull_number": {
          "description": "Number of the pull request.",
          "examples": [1347],
          "title": "Pull Number",
          "type": "integer"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension (not case-sensitive).",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        },
        "reviewers": {
          "description": "GitHub user `login`s for removal. At least one of `reviewers` or `team_reviewers` must be specified.",
          "examples": ["['octocat', 'hubot']", "['gregorytest']"],
          "items": { "properties": {}, "type": "string" },
          "title": "Reviewers",
          "type": "array"
        },
        "team_reviewers": {
          "description": "GitHub team `slug`s (URL-friendly names) for removal. At least one of `reviewers` or `team_reviewers` must be specified.",
          "examples": ["['justice-league']", "['my-org/my-team']"],
          "items": { "properties": {}, "type": "string" },
          "title": "Team Reviewers",
          "type": "array"
        }
      },
      "required": ["owner", "repo", "pull_number", "reviewers"],
      "title": "RemoveRequestedReviewersFromAPullRequestRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Updated pull request object after reviewer removal, typically adhering to GitHub's pull request schema.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveRequestedReviewersFromAPullRequestResponseWrapper",
      "type": "object"
    },
    "description": "Removes currently assigned user logins and/or team slugs from a github pull request's list of requested reviewers.",
    "tags": ["destructiveHint", "openWorldHint", "pulls", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove selected repository from an organization secret",
    "slug": "GITHUB_REMOVE_SELECTED_REPOSITORY_FROM_AN_ORGANIZATION_SECRET",
    "input_parameters": {
      "description": "Request schema for `RemoveSelectedRepositoryFromAnOrganizationSecret`",
      "properties": {
        "org": {
          "description": "Organization name (case-insensitive).",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "repository_id": {
          "description": "Repository ID to remove from the secret's access.",
          "examples": [1296269],
          "title": "Repository Id",
          "type": "integer"
        },
        "secret_name": {
          "description": "Name of the organization secret.",
          "examples": ["AWS_PROD_ACCESS_KEY"],
          "title": "Secret Name",
          "type": "string"
        }
      },
      "required": ["org", "secret_name", "repository_id"],
      "title": "RemoveSelectedRepositoryFromAnOrganizationSecretRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveSelectedRepositoryFromAnOrganizationSecretResponseWrapper",
      "type": "object"
    },
    "description": "Removes a specific repository's access to an organization-level secret; the repository must have been previously granted access to this secret.",
    "tags": ["actions", "destructiveHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove selected repository from an organization variable",
    "slug": "GITHUB_REMOVE_SELECTED_REPOSITORY_FROM_AN_ORGANIZATION_VARIABLE",
    "input_parameters": {
      "description": "Specifies the organization, variable, and repository for removing access.",
      "properties": {
        "name": {
          "description": "Name of the organization variable.",
          "examples": ["CI_DEPLOY_KEY"],
          "title": "Name",
          "type": "string"
        },
        "org": {
          "description": "The organization's name (case-insensitive).",
          "examples": ["my-github-org"],
          "title": "Org",
          "type": "string"
        },
        "repository_id": {
          "description": "Unique identifier of the repository.",
          "examples": ["123456789"],
          "title": "Repository Id",
          "type": "integer"
        }
      },
      "required": ["org", "name", "repository_id"],
      "title": "RemoveSelectedRepositoryFromAnOrganizationVariableRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response data; typically empty for a successful DELETE (HTTP 204 No Content).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["successful"],
      "title": "RemoveSelectedRepositoryFromAnOrganizationVariableResponseWrapper",
      "type": "object"
    },
    "description": "Removes a repository's access to an organization variable, if the variable's visibility is 'selected' and the repository is in its access list.",
    "tags": ["actions", "destructiveHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove status check contexts",
    "slug": "GITHUB_REMOVE_STATUS_CHECK_CONTEXTS",
    "input_parameters": {
      "description": "Request schema for specifying the repository and branch from which to remove status check contexts.",
      "properties": {
        "branch": {
          "description": "The name of the branch. Wildcard characters are not allowed. To use wildcard characters in branch names, refer to the GraphQL API documentation.",
          "examples": ["main"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "RemoveStatusCheckContextsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveStatusCheckContextsResponseWrapper",
      "type": "object"
    },
    "description": "Removes specified status check contexts (passed in the request body as an array of strings) from a protected branch in a repository.",
    "tags": ["destructiveHint", "openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove status check protection",
    "slug": "GITHUB_REMOVE_STATUS_CHECK_PROTECTION",
    "input_parameters": {
      "description": "Parameters for removing status check protection from a branch.",
      "properties": {
        "branch": {
          "description": "Name of the branch; wildcard characters are not allowed.",
          "examples": ["main", "develop", "release/v1.2"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "Account owner (username or organization) of the repository; not case-sensitive.",
          "examples": ["octocat", "my-company"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension; not case-sensitive.",
          "examples": ["hello-world", "my-internal-app"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "RemoveStatusCheckProtectionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response data; this may be an empty dictionary if GitHub returns a 204 No Content, common for this DELETE operation.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveStatusCheckProtectionResponseWrapper",
      "type": "object"
    },
    "description": "Removes status check protection from a branch, disabling required status checks for merging pull requests; will only have an effect if status check protection is currently configured on the branch.",
    "tags": ["destructiveHint", "openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove team access restrictions",
    "slug": "GITHUB_REMOVE_TEAM_ACCESS_RESTRICTIONS",
    "input_parameters": {
      "description": "Request schema for removing team access restrictions from a protected branch.",
      "properties": {
        "branch": {
          "description": "The name of the branch from which to remove team access restrictions. Wildcard characters are not permitted in this branch name. To use wildcard characters for branch names, please refer to the GitHub GraphQL API.",
          "examples": ["main", "develop"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository (e.g., a GitHub username or organization name). This name is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "RemoveTeamAccessRestrictionsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveTeamAccessRestrictionsResponseWrapper",
      "type": "object"
    },
    "description": "Removes all team-based access restrictions from a specified protected branch; the branch must be protected and have existing team restrictions for this action to change settings.",
    "tags": ["destructiveHint", "openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove team membership for a user",
    "slug": "GITHUB_REMOVE_TEAM_MEMBERSHIP_FOR_A_USER",
    "input_parameters": {
      "description": "Request schema for `RemoveTeamMembershipForAUser`",
      "properties": {
        "org": {
          "description": "Organization name (not case-sensitive).",
          "examples": ["OctoCorp", "github"],
          "title": "Org",
          "type": "string"
        },
        "team_slug": {
          "description": "URL-friendly team name slug (e.g., 'justice-league').",
          "examples": ["justice-league", "all-developers"],
          "title": "Team Slug",
          "type": "string"
        },
        "username": {
          "description": "GitHub username of the user to remove from the team.",
          "examples": ["octocat", "mona-lisa"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["org", "team_slug", "username"],
      "title": "RemoveTeamMembershipForAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveTeamMembershipForAUserResponseWrapper",
      "type": "object"
    },
    "description": "Removes a user from a specific team within an organization; this action fails if team synchronization with an identity provider (idp) is enabled, and may delete the team if the user is its last member and the team is not nested.",
    "tags": ["destructiveHint", "openWorldHint", "teams", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove users from codespaces access for an organization",
    "slug": "GITHUB_REMOVE_USERS_FROM_CODESPACES_ACCESS_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request model for removing selected users from Codespaces billing access for an organization.",
      "properties": {
        "org": {
          "description": "The name of the GitHub organization. This field is not case-sensitive.",
          "title": "Org",
          "type": "string"
        },
        "selected_usernames": {
          "description": "A list of GitHub usernames, typically organization members. After removal, the organization will no longer be billed for Codespaces created by these users.",
          "examples": ["gh-username1", "octocat-dev", "another-user123"],
          "items": { "properties": {}, "type": "string" },
          "title": "Selected Usernames",
          "type": "array"
        }
      },
      "required": ["org", "selected_usernames"],
      "title": "RemoveUsersFromCodespacesAccessForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the raw response data from the GitHub API. The structure and content of this dictionary can vary based on the API's output for this operation.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveUsersFromCodespacesAccessForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Removes selected users from github codespaces billing access for an existing organization.",
    "tags": ["codespaces", "destructiveHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove user access restrictions",
    "slug": "GITHUB_REMOVE_USER_ACCESS_RESTRICTIONS",
    "input_parameters": {
      "description": "Defines the parameters for the request to remove user access restrictions from a protected branch.",
      "properties": {
        "branch": {
          "description": "The name of the branch from which to remove user access restrictions. Wildcard characters (e.g., '*') are not allowed in this field. To manage branch protections using wildcard patterns, please refer to the GitHub GraphQL API.",
          "examples": ["main", "develop", "feature/new-ux"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. This is typically a username or an organization name and is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["hello-world", "my-awesome-app"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "RemoveUserAccessRestrictionsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the data from the API response. Typically, upon successful removal of all user restrictions (which results in an HTTP 204 No Content status from GitHub), this dictionary may be empty or represent an empty JSON object, depending on how the empty response is processed.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveUserAccessRestrictionsResponseWrapper",
      "type": "object"
    },
    "description": "Removes active user-level access restrictions from a specified protected branch, enabling users with repository write access to push or merge if no other team or app restrictions apply.",
    "tags": ["destructiveHint", "openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove user as a collaborator",
    "slug": "GITHUB_REMOVE_USER_AS_A_COLLABORATOR",
    "input_parameters": {
      "description": "Request model for removing a user as a collaborator from an organization project.",
      "properties": {
        "project_id": {
          "description": "The unique identifier of the organization project from which the collaborator will be removed.",
          "examples": ["10247,"],
          "title": "Project Id",
          "type": "integer"
        },
        "username": {
          "description": "The GitHub username of the user to remove as a collaborator from the organization project.",
          "examples": ["octocat"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["project_id", "username"],
      "title": "RemoveUserAsACollaboratorRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveUserAsACollaboratorResponseWrapper",
      "type": "object"
    },
    "description": "Removes a user as a collaborator from an organization project; the user must already be a collaborator on the specified project.",
    "tags": ["destructiveHint", "openWorldHint", "projects", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Rename a branch",
    "slug": "GITHUB_RENAME_A_BRANCH",
    "input_parameters": {
      "description": "Request schema for renaming a branch in a repository.",
      "properties": {
        "branch": {
          "description": "The current name of the branch. Wildcard characters (e.g., `*`) are not allowed.",
          "examples": ["main", "develop", "feature/ui-redesign"],
          "title": "Branch",
          "type": "string"
        },
        "new_name": {
          "description": "The new name for the branch. Must be unique and adhere to GitHub's branch naming conventions (e.g., no spaces, '..', or leading/trailing slashes).",
          "examples": ["production", "release/v2.1", "bugfix/login-issue"],
          "title": "New Name",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. The name is not case sensitive.",
          "examples": ["Hello-World", "my-project-api"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch", "new_name"],
      "title": "RenameABranchRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response from GitHub, typically including details of the renamed branch like name, commit, and protection status.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RenameABranchResponseWrapper",
      "type": "object"
    },
    "description": "Renames an existing branch in a github repository; the new name must be unique and adhere to github's naming conventions, and the current branch name cannot contain wildcard characters.",
    "tags": ["destructiveHint", "openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Render a markdown document",
    "slug": "GITHUB_RENDER_A_MARKDOWN_DOCUMENT",
    "input_parameters": {
      "description": "Defines the request parameters for rendering a Markdown document to HTML.",
      "properties": {
        "context": {
          "description": "The repository context (e.g., 'owner/repo') used when `mode` is 'gfm'.",
          "examples": ["octo-org/octo-repo", "my-username/my-project"],
          "title": "Context",
          "type": "string"
        },
        "mode": {
          "default": "markdown",
          "description": "Rendering mode: 'markdown' for standard Markdown or 'gfm' for GitHub Flavored Markdown.",
          "enum": ["markdown", "gfm"],
          "examples": ["markdown", "gfm"],
          "title": "Mode",
          "type": "string"
        },
        "text": {
          "description": "The Markdown string to convert to HTML.",
          "examples": [
            "# Hello World\n\nThis is **Markdown** and an @mention with a link to issue #1."
          ],
          "title": "Text",
          "type": "string"
        }
      },
      "required": ["text"],
      "title": "RenderAMarkdownDocumentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Contains the rendered HTML output from the Markdown conversion.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RenderAMarkdownDocumentResponseWrapper",
      "type": "object"
    },
    "description": "Renders markdown to html; for 'gfm' mode, provide 'context' (owner/repo) to correctly link issues, pull requests, and user mentions.",
    "tags": ["markdown", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Replace all repository topics",
    "slug": "GITHUB_REPLACE_ALL_REPOSITORY_TOPICS",
    "input_parameters": {
      "description": "Request schema for `ReplaceAllRepositoryTopics`. Defines the parameters to replace all topics for a repository.",
      "properties": {
        "names": {
          "description": "A list of topic names to replace the current set of topics for the repository. Provide one or more topics to set them. To remove all topics, pass an empty list (`[]`). Note: Topic names cannot contain uppercase letters and are limited to 25 characters.",
          "examples": [["octocat", "atom", "electron"], []],
          "items": { "properties": {}, "type": "string" },
          "title": "Names",
          "type": "array"
        },
        "owner": {
          "description": "The username of the account that owns the repository. This is case-insensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This is case-insensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "names"],
      "title": "ReplaceAllRepositoryTopicsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the key 'names' with a list of strings representing the updated topics for the repository. For example: `{\"names\": [\"topic1\", \"topic2\"]}`.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ReplaceAllRepositoryTopicsResponseWrapper",
      "type": "object"
    },
    "description": "Replaces all topics of a repository.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Replace org secret visibility to selected",
    "slug": "GITHUB_REPLACE_ORG_SECRET_VISIBILITY_TO_SELECTED",
    "input_parameters": {
      "description": "Request schema for `ReplaceOrgSecretVisibilityToSelected`",
      "properties": {
        "org": {
          "description": "The name of the organization. This parameter is not case-sensitive.",
          "examples": ["octo-org", "github"],
          "title": "Org",
          "type": "string"
        },
        "secret_name": {
          "description": "Name of the Dependabot secret (alphanumeric characters and underscores only, no spaces allowed).",
          "examples": ["MY_SECRET_TOKEN", "DATABASE_PASSWORD_PROD"],
          "title": "Secret Name",
          "type": "string"
        },
        "selected_repository_ids": {
          "description": "List of repository IDs that will gain exclusive access to this organization secret. This list completely replaces any current repository associations; for incremental changes (add/remove), use specific repository secret actions.",
          "examples": ["[1296269, 1296270]", "[42, 99, 10123]"],
          "items": { "properties": {}, "type": "integer" },
          "title": "Selected Repository Ids",
          "type": "array"
        }
      },
      "required": ["org", "secret_name", "selected_repository_ids"],
      "title": "ReplaceOrgSecretVisibilityToSelectedRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ReplaceOrgSecretVisibilityToSelectedResponseWrapper",
      "type": "object"
    },
    "description": "Sets an existing dependabot organization secret's visibility to 'selected' and replaces the full list of repositories that can access it with the ids provided.",
    "tags": ["dependabot", "destructiveHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Replace repository access for an org Codespaces secret",
    "slug": "GITHUB_REPLACE_REPO_ACCESS_ON_ORG_DEV_ENV_SECRET_SET",
    "input_parameters": {
      "description": "Request schema for `ReplaceRepoAccessOnOrgDevEnvSecretSet`",
      "properties": {
        "org": {
          "description": "The GitHub organization name (case-insensitive).",
          "examples": ["my-github-org"],
          "title": "Org",
          "type": "string"
        },
        "secret_name": {
          "description": "Name of the development environment secret for which repository access is being configured.",
          "examples": ["CODESPACE_API_TOKEN"],
          "title": "Secret Name",
          "type": "string"
        },
        "selected_repository_ids": {
          "description": "Array of repository IDs to grant access to the organization secret, replacing any existing list and setting visibility to 'selected'.",
          "examples": ["[12345, 67890, 98765]"],
          "items": { "properties": {}, "type": "integer" },
          "title": "Selected Repository Ids",
          "type": "array"
        }
      },
      "required": ["org", "secret_name", "selected_repository_ids"],
      "title": "ReplaceRepoAccessOnOrgDevEnvSecretSetRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Response data from the API. On a successful update (typically HTTP 204 No Content), this field may be an empty dictionary if a body is returned, or often no body is returned at all.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["successful"],
      "title": "ReplaceRepoAccessOnOrgDevEnvSecretSetResponseWrapper",
      "type": "object"
    },
    "description": "Replaces the list of repositories that can access an existing organization-level codespaces secret with the provided valid repository ids owned by the organization.",
    "tags": ["codespaces", "destructiveHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a fork",
    "slug": "GITHUB_REPO_S_CREATE_FORK",
    "input_parameters": {
      "description": "Request schema for `CreateAFork` to create a new fork of a repository.",
      "properties": {
        "default_branch_only": {
          "description": "Specifies whether to fork only the default branch of the repository. If `True`, only the default branch is copied. If `False` or not specified, all branches are copied.",
          "examples": [true],
          "title": "Default Branch Only",
          "type": "boolean"
        },
        "name": {
          "description": "The desired name for the newly created fork. If not provided, the new fork will have the same name as the original repository.",
          "examples": ["my-awesome-fork"],
          "title": "Name",
          "type": "string"
        },
        "organization": {
          "description": "The GitHub organization name to fork the repository into. If not specified, the fork will be created in the authenticated user's account.",
          "examples": ["my-github-org"],
          "title": "Organization",
          "type": "string"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "CreateAForkRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the full repository object of the newly created fork. This includes details such as `id`, `node_id`, `name`, `full_name`, `html_url`, `clone_url`, `forks_url`, `commits_url`, etc.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAForkResponseWrapper",
      "type": "object"
    },
    "description": "(deprecated: use `create a fork` instead) creates a fork of a specified repository.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "Create a repository for the authenticated user",
    "slug": "GITHUB_REPO_S_CREATE_FOR_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for `CreateARepositoryForTheAuthenticatedUser`",
      "properties": {
        "allow_auto_merge": {
          "default": false,
          "description": "Whether to allow auto-merge on pull requests.",
          "title": "Allow Auto Merge",
          "type": "boolean"
        },
        "allow_merge_commit": {
          "default": true,
          "description": "Whether to allow merging pull requests with a merge commit.",
          "title": "Allow Merge Commit",
          "type": "boolean"
        },
        "allow_rebase_merge": {
          "default": true,
          "description": "Whether to allow rebase-merging pull requests.",
          "title": "Allow Rebase Merge",
          "type": "boolean"
        },
        "allow_squash_merge": {
          "default": true,
          "description": "Whether to allow squash-merging pull requests.",
          "title": "Allow Squash Merge",
          "type": "boolean"
        },
        "auto_init": {
          "default": false,
          "description": "Whether to initialize the repository with a README.",
          "title": "Auto Init",
          "type": "boolean"
        },
        "delete_branch_on_merge": {
          "default": false,
          "description": "Whether to automatically delete head branches when pull requests are merged.",
          "title": "Delete Branch On Merge",
          "type": "boolean"
        },
        "description": {
          "description": "A short description of the repository.",
          "examples": ["This is a project about X.", "My personal blog."],
          "title": "Description",
          "type": "string"
        },
        "gitignore_template": {
          "description": "Desired .gitignore template (e.g., 'Python', 'Node').",
          "examples": ["Python", "Node", "Ruby"],
          "title": "Gitignore Template",
          "type": "string"
        },
        "has_discussions": {
          "default": false,
          "description": "Whether discussions are enabled.",
          "title": "Has Discussions",
          "type": "boolean"
        },
        "has_downloads": {
          "default": true,
          "description": "Whether downloads are enabled (deprecated by GitHub and may not be configurable).",
          "title": "Has Downloads",
          "type": "boolean"
        },
        "has_issues": {
          "default": true,
          "description": "Whether issues are enabled.",
          "title": "Has Issues",
          "type": "boolean"
        },
        "has_projects": {
          "default": true,
          "description": "Whether projects are enabled.",
          "title": "Has Projects",
          "type": "boolean"
        },
        "has_wiki": {
          "default": true,
          "description": "Whether the wiki is enabled.",
          "title": "Has Wiki",
          "type": "boolean"
        },
        "homepage": {
          "description": "A URL with more information about the repository.",
          "examples": ["https://example.com/my-new-repo"],
          "title": "Homepage",
          "type": "string"
        },
        "is_template": {
          "default": false,
          "description": "Whether this repository is a template repository.",
          "title": "Is Template",
          "type": "boolean"
        },
        "license_template": {
          "description": "License template keyword (e.g., 'mit', 'apache-2.0').",
          "examples": ["mit", "apache-2.0", "gpl-3.0"],
          "title": "License Template",
          "type": "string"
        },
        "merge_commit_message": {
          "description": "The default message for a merge commit. `PR_BODY` uses the pull request's body. `PR_TITLE` uses the pull request's title. `BLANK` results in a blank commit message.",
          "enum": ["PR_BODY", "PR_TITLE", "BLANK"],
          "examples": ["PR_BODY", "PR_TITLE", "BLANK"],
          "title": "Merge Commit Message",
          "type": "string"
        },
        "merge_commit_title": {
          "description": "The default title for a merge commit. `PR_TITLE` uses the pull request's title. `MERGE_MESSAGE` uses a classic title like 'Merge pull request #123 from branch-name'.",
          "enum": ["PR_TITLE", "MERGE_MESSAGE"],
          "examples": ["PR_TITLE", "MERGE_MESSAGE"],
          "title": "Merge Commit Title",
          "type": "string"
        },
        "name": {
          "description": "The name of the repository.",
          "examples": ["my-new-repo", "octo-project"],
          "title": "Name",
          "type": "string"
        },
        "private": {
          "default": false,
          "description": "Whether the repository is private (true) or public (false).",
          "title": "Private",
          "type": "boolean"
        },
        "squash_merge_commit_message": {
          "description": "The default message for a squash merge commit. `PR_BODY` uses the pull request's body. `COMMIT_MESSAGES` uses the branch's commit messages. `BLANK` results in a blank commit message.",
          "enum": ["PR_BODY", "COMMIT_MESSAGES", "BLANK"],
          "examples": ["PR_BODY", "COMMIT_MESSAGES", "BLANK"],
          "title": "Squash Merge Commit Message",
          "type": "string"
        },
        "squash_merge_commit_title": {
          "description": "The default title for a squash merge commit. `PR_TITLE` uses the pull request's title. `COMMIT_OR_PR_TITLE` uses the commit's title (if only one commit) or the pull request's title (if multiple commits).",
          "enum": ["PR_TITLE", "COMMIT_OR_PR_TITLE"],
          "examples": ["PR_TITLE", "COMMIT_OR_PR_TITLE"],
          "title": "Squash Merge Commit Title",
          "type": "string"
        },
        "team_id": {
          "description": "The ID of the team to be granted access. Only valid if creating in an organization.",
          "examples": [12345],
          "title": "Team Id",
          "type": "integer"
        }
      },
      "required": ["name"],
      "title": "CreateARepositoryForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateARepositoryForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: use 'create a repository for the authenticated user' instead. creates a new repository for the authenticated user.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "Create an organization repository",
    "slug": "GITHUB_REPO_S_CREATE_IN_ORG",
    "input_parameters": {
      "description": "Request schema for creating a new repository in a GitHub organization.",
      "properties": {
        "allow_auto_merge": {
          "default": false,
          "description": "Allow auto-merge on pull requests.",
          "title": "Allow Auto Merge",
          "type": "boolean"
        },
        "allow_merge_commit": {
          "default": true,
          "description": "Allow merging pull requests with a merge commit.",
          "title": "Allow Merge Commit",
          "type": "boolean"
        },
        "allow_rebase_merge": {
          "default": true,
          "description": "Allow rebase-merging pull requests.",
          "title": "Allow Rebase Merge",
          "type": "boolean"
        },
        "allow_squash_merge": {
          "default": true,
          "description": "Allow squash-merging pull requests.",
          "title": "Allow Squash Merge",
          "type": "boolean"
        },
        "auto_init": {
          "default": false,
          "description": "Create an initial commit with an empty README.",
          "title": "Auto Init",
          "type": "boolean"
        },
        "custom_properties": {
          "additionalProperties": true,
          "description": "Custom properties for the repository as a key-value dictionary.",
          "examples": [{ "project_lead": "octocat", "status": "alpha" }],
          "title": "Custom Properties",
          "type": "object"
        },
        "delete_branch_on_merge": {
          "default": false,
          "description": "Automatically delete head branches when pull requests are merged. Requires organization owner privileges if true.",
          "title": "Delete Branch On Merge",
          "type": "boolean"
        },
        "description": {
          "description": "Short description of the repository.",
          "examples": ["A project to demonstrate awesome capabilities."],
          "title": "Description",
          "type": "string"
        },
        "gitignore_template": {
          "description": "Name of the .gitignore template to apply (e.g., \"Python\", \"Node\"). Refer to the [GitHub gitignore template list](https://github.com/github/gitignore).",
          "examples": ["Python"],
          "title": "Gitignore Template",
          "type": "string"
        },
        "has_downloads": {
          "default": true,
          "description": "Enable downloads for this repository (deprecated).",
          "title": "Has Downloads",
          "type": "boolean"
        },
        "has_issues": {
          "default": true,
          "description": "Enable issues for this repository.",
          "title": "Has Issues",
          "type": "boolean"
        },
        "has_projects": {
          "default": true,
          "description": "Enable projects for this repository. Fails if organization has disabled repository projects and this is true.",
          "title": "Has Projects",
          "type": "boolean"
        },
        "has_wiki": {
          "default": true,
          "description": "Enable wiki for this repository.",
          "title": "Has Wiki",
          "type": "boolean"
        },
        "homepage": {
          "description": "URL for the repository's homepage.",
          "examples": ["https://example.com/my-awesome-project"],
          "title": "Homepage",
          "type": "string"
        },
        "is_template": {
          "default": false,
          "description": "Make this repository a template repository.",
          "title": "Is Template",
          "type": "boolean"
        },
        "license_template": {
          "description": "License template keyword (e.g., \"mit\", \"apache-2.0\"). See [GitHub license documentation](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) for options.",
          "examples": ["mit"],
          "title": "License Template",
          "type": "string"
        },
        "merge_commit_message": {
          "description": "Default message for merge commits: 'PR_TITLE', 'PR_BODY', or 'BLANK'.",
          "enum": ["PR_BODY", "PR_TITLE", "BLANK"],
          "examples": ["PR_BODY"],
          "title": "Merge Commit Message",
          "type": "string"
        },
        "merge_commit_title": {
          "description": "Default title for merge commits: 'PR_TITLE' or 'MERGE_MESSAGE'.",
          "enum": ["PR_TITLE", "MERGE_MESSAGE"],
          "examples": ["MERGE_MESSAGE"],
          "title": "Merge Commit Title",
          "type": "string"
        },
        "name": {
          "description": "Name of the new repository.",
          "examples": ["new-awesome-project"],
          "title": "Name",
          "type": "string"
        },
        "org": {
          "description": "Name of the organization where the repository will be created (case-insensitive).",
          "examples": ["MyGitHubOrg"],
          "title": "Org",
          "type": "string"
        },
        "private": {
          "default": false,
          "description": "Whether the repository is private. `visibility` takes precedence if both are set.",
          "title": "Private",
          "type": "boolean"
        },
        "squash_merge_commit_message": {
          "description": "Default message for squash merge commits: 'PR_BODY', 'COMMIT_MESSAGES', or 'BLANK'.",
          "enum": ["PR_BODY", "COMMIT_MESSAGES", "BLANK"],
          "examples": ["PR_BODY"],
          "title": "Squash Merge Commit Message",
          "type": "string"
        },
        "squash_merge_commit_title": {
          "description": "Default title for squash merge commits: 'PR_TITLE' or 'COMMIT_OR_PR_TITLE'.",
          "enum": ["PR_TITLE", "COMMIT_OR_PR_TITLE"],
          "examples": ["PR_TITLE"],
          "title": "Squash Merge Commit Title",
          "type": "string"
        },
        "team_id": {
          "description": "ID of the team to grant access to this repository within the organization.",
          "examples": [12345],
          "title": "Team Id",
          "type": "integer"
        },
        "use_squash_pr_title_as_default": {
          "default": false,
          "description": "DEPRECATED: Use `squash_merge_commit_title`. Default to pull request title for squash-merge commits.",
          "title": "Use Squash Pr Title As Default",
          "type": "boolean"
        },
        "visibility": {
          "description": "Repository visibility: 'public' (visible to everyone) or 'private' (visible to collaborators).",
          "enum": ["public", "private"],
          "examples": ["public"],
          "title": "Visibility",
          "type": "string"
        }
      },
      "required": ["org", "name"],
      "title": "CreateAnOrganizationRepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the full representation of the newly created repository.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateAnOrganizationRepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: use `create an organization repository` instead. creates a new repository in the specified organization.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "Create or update file contents",
    "slug": "GITHUB_REPO_S_CREATE_OR_UPDATE_FILE_CONTENTS",
    "input_parameters": {
      "description": "Request schema for creating or updating a file's contents in a GitHub repository.",
      "properties": {
        "author__date": {
          "description": "Author's timestamp (ISO 8601 format). Defaults to committer's date if author details are provided but date is not.",
          "examples": ["2023-10-26T11:30:00Z"],
          "title": "Author  Date",
          "type": "string"
        },
        "author__email": {
          "description": "Author's email. If specified, `author_name` is also required. Defaults to committer details; if all committer/author details omitted, GitHub uses authenticated user.",
          "examples": ["jane.smith@example.com"],
          "title": "Author  Email",
          "type": "string"
        },
        "author__name": {
          "description": "Author's name. If specified, `author_email` is also required. Defaults to committer details; if all committer/author details omitted, GitHub uses authenticated user.",
          "examples": ["Jane Smith"],
          "title": "Author  Name",
          "type": "string"
        },
        "branch": {
          "description": "The branch name. Defaults to the repository’s default branch if omitted.",
          "examples": ["main", "develop"],
          "title": "Branch",
          "type": "string"
        },
        "committer__date": {
          "description": "Committer's commit timestamp (ISO 8601 format). Defaults to current time if committer details are provided but date is not.",
          "examples": ["2023-10-26T12:00:00Z"],
          "title": "Committer  Date",
          "type": "string"
        },
        "committer__email": {
          "description": "Committer's email. If specified, `committer_name` is also required. GitHub uses authenticated user if all committer/author details omitted.",
          "examples": ["john.doe@example.com"],
          "title": "Committer  Email",
          "type": "string"
        },
        "committer__name": {
          "description": "Committer's name. If specified, `committer_email` is also required. GitHub uses authenticated user if all committer/author details omitted.",
          "examples": ["John Doe"],
          "title": "Committer  Name",
          "type": "string"
        },
        "content": {
          "description": "The new file content, Base64 encoded. For example, to upload the text 'Hello World', use 'SGVsbG8gV29ybGQ='.",
          "examples": ["SGVsbG8gV29ybGQ="],
          "title": "Content",
          "type": "string"
        },
        "message": {
          "description": "The commit message for this file creation or update.",
          "examples": ["feat: add new documentation", "docs: update README"],
          "title": "Message",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository (not case sensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "path": {
          "description": "The full path to the file in the repository, including the filename and extension.",
          "examples": ["README.md", "src/main.js"],
          "title": "Path",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository (not case sensitive, without the `.git` extension).",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        },
        "sha": {
          "description": "The blob SHA of the file being replaced. Required to update an existing file; omit to create a new file.",
          "examples": ["aa218f56b14c9653891f9e74264a383fa43fefbd"],
          "title": "Sha",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "path", "message", "content"],
      "title": "CreateOrUpdateFileContentsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateOrUpdateFileContentsResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: use `create or update file contents` instead; creates or replaces a file in a repository.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "Get the weekly commit activity",
    "slug": "GITHUB_REPO_S_GET_CODE_FREQUENCY_STATS",
    "input_parameters": {
      "description": "Defines the request parameters for fetching weekly commit activity for a repository.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository (e.g., a user or organization). This name is not case-sensitive.",
          "examples": ["octocat", "kubernetes"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Spoon-Knife", "sig-release"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetTheWeeklyCommitActivityRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetTheWeeklyCommitActivityResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: use `get the weekly commit activity` instead. fetches weekly commit statistics (additions/deletions) for a repository; less reliable for over 10,000 commits.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "Get a commit",
    "slug": "GITHUB_REPO_S_GET_COMMIT",
    "input_parameters": {
      "description": "Request schema for `GetACommit` action, used to retrieve a specific commit from a repository.",
      "properties": {
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for paginating the commit's diff if it's too large. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page when paginating the commit's diff (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "title": "Per Page",
          "type": "integer"
        },
        "ref": {
          "description": "The commit reference. Can be a commit SHA (e.g., '`sha`'), a branch name (e.g., 'heads/`BRANCH_NAME`' or simply '`BRANCH_NAME`'), or a tag name (e.g., 'tags/`TAG_NAME`'). For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation.",
          "examples": [
            "main",
            "heads/develop",
            "tags/v1.0.0",
            "007a47250555ae82606ac2cb00f8f731976059a5"
          ],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife", "linguist"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "ref"],
      "title": "GetACommitRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the comprehensive details of the commit, including author, committer, message, and file changes.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetACommitResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: use `get a commit`. retrieves a specific commit from a repository by its owner, name, and a valid commit reference (sha, branch, or tag), supporting pagination for large diffs.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "Get repository content",
    "slug": "GITHUB_REPO_S_GET_CONTENT",
    "input_parameters": {
      "description": "Request schema for retrieving content from a GitHub repository.",
      "properties": {
        "owner": {
          "description": "The account owner of the repository. This name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "path": {
          "description": "The path to the content in the repository. This can be a file or a directory path.",
          "examples": ["README.md", "src/main.js", "docs"],
          "title": "Path",
          "type": "string"
        },
        "ref": {
          "description": "The name of the commit, branch, or tag. If not provided, the repository's default branch will be used.",
          "examples": ["main", "v1.2.0", "c8bca7c6a66f490c70b29cf3ac3d64070049ea73"],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "path"],
      "title": "GetRepositoryContentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the file content or directory metadata. If `path` points to a file, this dictionary includes keys such as `name`, `path`, `sha`, `size`, `type` ('file'), `content` (Base64 encoded string of the file's contents), and `download_url`. If `path` points to a directory, this dictionary represents metadata for the directory object itself (e.g., its `name`, `path`, `sha`, `type` ('dir')). Note: To list the actual items *within* a directory, a different API endpoint or action might be needed, as the GitHub API returns an array of items for directory listings.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetRepositoryContentResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: gets repository file content or directory metadata; use `get repository content` instead.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "Get all contributor commit activity",
    "slug": "GITHUB_REPO_S_GET_CONTRIBUTORS_STATS",
    "input_parameters": {
      "description": "Request to retrieve commit activity for all contributors to a repository.",
      "properties": {
        "owner": {
          "description": "Username of the repository owner (case-insensitive).",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Repository name, excluding `.git` (case-insensitive).",
          "examples": ["Spoon-Knife", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "GetAllContributorCommitActivityRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Raw GitHub API response. Typically a list of contributor activity objects, each detailing an 'author' (with user info like 'login'), 'total' commits, and 'weeks' array (weekly 'w'-timestamp, 'a'-additions, 'd'-deletions, 'c'-commits).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAllContributorCommitActivityResponseWrapper",
      "type": "object"
    },
    "description": "(deprecated: use `getallcontributorcommitactivity`) fetches commit activity (total commits, weekly additions/deletions/commits) for all repository contributors; retry if github returns 202.",
    "tags": [
      "Repository Management",
      "readOnlyHint",
      "idempotentHint",
      "openWorldHint",
      "mcpIgnore"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "List branches",
    "slug": "GITHUB_REPO_S_LIST_BRANCHES",
    "input_parameters": {
      "description": "Request schema for listing branches in a GitHub repository.",
      "properties": {
        "owner": {
          "description": "Account owner's username (case-insensitive).",
          "examples": ["octocat", "torvalds"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for paginated results.",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "title": "Per Page",
          "type": "integer"
        },
        "protected": {
          "description": "Filter by protection status: `true` for protected, `false` for unprotected; omit for all branches.",
          "title": "Protected",
          "type": "boolean"
        },
        "repo": {
          "description": "Repository name, excluding `.git` extension (case-insensitive).",
          "examples": ["Spoon-Knife", "linux"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListBranchesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response containing a list of branches, each with details like name, commit, and protection status.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListBranchesResponseWrapper",
      "type": "object"
    },
    "description": "(deprecated: use 'list branches' instead) lists branches for an existing github repository, with an option to filter by protection status.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "List repository collaborators (deprecated)",
    "slug": "GITHUB_REPO_S_LIST_COLLABORATORS",
    "input_parameters": {
      "description": "Request schema for listing repository collaborators, allowing filtering by affiliation and permission.",
      "properties": {
        "affiliation": {
          "default": "all",
          "description": "Filter collaborators by affiliation: 'outside' (collaborators of an organization-owned repository not part of the org), 'direct' (collaborators with direct permissions to an organization-owned repository), or 'all' (all collaborators visible to the authenticated user).",
          "enum": ["outside", "direct", "all"],
          "title": "Affiliation",
          "type": "string"
        },
        "owner": {
          "description": "The username of the account that owns the repository. This value is not case sensitive.",
          "examples": ["octocat", "google"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to retrieve.",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of results to return per page. Maximum value is 100.",
          "title": "Per Page",
          "type": "integer"
        },
        "permission": {
          "description": "Filter collaborators by their repository permission level.",
          "enum": ["pull", "triage", "push", "maintain", "admin"],
          "title": "Permission",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This value is not case sensitive.",
          "examples": ["hello-world", "mercury"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListRepositoryCollaboratorsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A list of collaborator objects.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoryCollaboratorsResponseWrapper",
      "type": "object"
    },
    "description": "(deprecated: use `listrepositorycollaborators`) lists repository collaborators, especially for organization-owned repositories including team members from child teams; requires repository access and potentially `read:org`/`repo` scopes for organization repos.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "List commits",
    "slug": "GITHUB_REPO_S_LIST_COMMITS",
    "input_parameters": {
      "description": "Request schema for `ListCommits`",
      "properties": {
        "author": {
          "description": "Filter commits by the commit author's GitHub login or email address.",
          "examples": ["octocat", "mona@github.com"],
          "title": "Author",
          "type": "string"
        },
        "committer": {
          "description": "Filter commits by the commit committer's GitHub login or email address. The committer is the user who applied the patch and may differ from the original author.",
          "examples": ["web-flow", "octocat@github.com"],
          "title": "Committer",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch when using pagination.",
          "examples": ["1", "2"],
          "title": "Page",
          "type": "integer"
        },
        "path": {
          "description": "Only commits modifying this specific file path will be returned.",
          "examples": ["README.md", "src/utils/helpers.py"],
          "title": "Path",
          "type": "string"
        },
        "per_page": {
          "default": 1,
          "description": "Number of results to return per page (max 100).",
          "examples": ["30", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "examples": ["Spoon-Knife", "my-project"],
          "title": "Repo",
          "type": "string"
        },
        "sha": {
          "description": "SHA hash or branch name to start listing commits from. If not provided, the GitHub API uses the repository's default branch (usually `main` or `master`).",
          "examples": ["main", "develop", "a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0"],
          "title": "Sha",
          "type": "string"
        },
        "since": {
          "description": "Only commits created on or after this timestamp will be returned. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "examples": ["2023-01-01T00:00:00Z"],
          "title": "Since",
          "type": "string"
        },
        "until": {
          "description": "Only commits created before this timestamp will be returned. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "examples": ["2023-12-31T23:59:59Z"],
          "title": "Until",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListCommitsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the API response, typically a list of commit objects and related information.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListCommitsResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: use `list commits` instead; lists repository commits, including gpg/s/mime signature verification details if available.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "List repository contributors",
    "slug": "GITHUB_REPO_S_LIST_CONTRIBUTORS",
    "input_parameters": {
      "description": "Defines the parameters used to list contributors for a GitHub repository.",
      "properties": {
        "anon": {
          "description": "Set to '1' or 'true' to include anonymous contributors. If omitted, anonymous contributors are not included.",
          "examples": ["1", "true"],
          "title": "Anon",
          "type": "string"
        },
        "owner": {
          "description": "Username of the account owning the repository. Not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results to retrieve (1-based indexing).",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of contributor results per page. Maximum value is 100.",
          "title": "Per Page",
          "type": "integer"
        },
        "repo": {
          "description": "Name of the repository (without `.git` extension). Not case-sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "ListRepositoryContributorsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoryContributorsResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: use `list repository contributors`. lists repository contributors, sorted by contributions; repository must exist and be accessible.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "List repositories for the authenticated user",
    "slug": "GITHUB_REPO_S_LIST_FOR_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for `ListRepositoriesForTheAuthenticatedUser`",
      "properties": {
        "before": {
          "description": "Filters for repositories updated before this specified time. Provide as an ISO 8601 formatted timestamp.",
          "examples": ["2024-01-01T00:00:00Z", "2024-03-20T18:45:00+00:00"],
          "title": "Before",
          "type": "string"
        },
        "direction": {
          "description": "The direction of the sort. Defaults to `asc` when `sort` is 'full_name', and `desc` otherwise.",
          "enum": ["asc", "desc"],
          "examples": ["asc", "desc"],
          "title": "Direction",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results to fetch.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of results to return per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "raw_response": {
          "default": false,
          "description": "Return full API response if true, optimized response for AI agents if false.",
          "examples": [true, false],
          "title": "Raw Response",
          "type": "boolean"
        },
        "since": {
          "description": "Filters for repositories updated at or after this specified time. Provide as an ISO 8601 formatted timestamp.",
          "examples": ["2023-01-01T00:00:00Z", "2023-05-15T10:30:00-07:00"],
          "title": "Since",
          "type": "string"
        },
        "sort": {
          "default": "full_name",
          "description": "The repository property by which to sort the results.",
          "enum": ["created", "updated", "pushed", "full_name"],
          "examples": ["created", "full_name", "updated"],
          "title": "Sort",
          "type": "string"
        },
        "type": {
          "default": "all",
          "description": "Filters the results to repositories of the specified type.",
          "enum": ["all", "owner", "public", "private", "member"],
          "examples": ["all", "owner", "member"],
          "title": "Type",
          "type": "string"
        }
      },
      "title": "ListRepositoriesForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The response data from the GitHub API. The underlying API endpoint (`GET /user/repos`) returns an array of repository objects. For the detailed structure of these repository objects, consult the official GitHub API documentation for 'repos/list-for-authenticated-user'.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoriesForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: use `list repositories for the authenticated user` to list the authenticated user's repositories.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "List organization repositories",
    "slug": "GITHUB_REPO_S_LIST_FOR_ORG",
    "input_parameters": {
      "description": "Request to list repositories for a specified GitHub organization.",
      "properties": {
        "direction": {
          "description": "Sort order: `asc` (ascending) or `desc` (descending). Defaults to `asc` if `sort` is `full_name`, else `desc`.",
          "enum": ["asc", "desc"],
          "examples": ["asc", "desc"],
          "title": "Direction",
          "type": "string"
        },
        "org": {
          "description": "Name of the GitHub organization (not case-sensitive).",
          "examples": ["github", "microsoft", "google"],
          "title": "Org",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for pagination (starts from 1).",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 1,
          "description": "Number of results per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "sort": {
          "default": "created",
          "description": "Property to sort repositories by: `created`, `updated`, `pushed`, or `full_name`.",
          "enum": ["created", "updated", "pushed", "full_name"],
          "examples": ["created", "updated", "pushed", "full_name"],
          "title": "Sort",
          "type": "string"
        },
        "type": {
          "default": "all",
          "description": "Specifies the type of repositories to return: `all`, `public`, `private` (requires permissions), `forks`, `sources` (not forks), or `member` (repositories with explicit user access).",
          "enum": ["all", "public", "private", "forks", "sources", "member"],
          "examples": ["all", "public", "private", "forks", "sources", "member"],
          "title": "Type",
          "type": "string"
        }
      },
      "required": ["org"],
      "title": "ListOrganizationRepositoriesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "List of repository objects, each detailing a repository with fields like `id`, `name`, `full_name`, `description`, and `html_url`.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListOrganizationRepositoriesResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: lists repositories for a github organization; use `list organization repositories` instead.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "List repositories for a user",
    "slug": "GITHUB_REPO_S_LIST_FOR_USER",
    "input_parameters": {
      "description": "Request schema for `ListRepositoriesForAUser`",
      "properties": {
        "direction": {
          "description": "Sort direction: `asc` or `desc`. Defaults to `asc` for `full_name` sort, `desc` otherwise.",
          "enum": ["asc", "desc"],
          "examples": ["asc", "desc"],
          "title": "Direction",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for results (starts from 1). See GitHub REST API pagination docs for more info.",
          "examples": [1, 2, 3],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100). See GitHub REST API pagination docs for more info.",
          "examples": [30, 50, 100],
          "title": "Per Page",
          "type": "integer"
        },
        "sort": {
          "default": "full_name",
          "description": "Sort criterion: `created`, `updated`, `pushed`, or `full_name` (repository name).",
          "enum": ["created", "updated", "pushed", "full_name"],
          "examples": ["created", "updated", "pushed", "full_name"],
          "title": "Sort",
          "type": "string"
        },
        "type": {
          "default": "owner",
          "description": "Filter for repository type: `all` (owned or member), `owner` (directly owned), or `member` (user is a public member).",
          "enum": ["all", "owner", "member"],
          "examples": ["all", "owner", "member"],
          "title": "Type",
          "type": "string"
        },
        "username": {
          "description": "GitHub username, e.g., 'octocat'.",
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["username"],
      "title": "ListRepositoriesForAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The raw JSON response from the GitHub API. The GitHub API endpoint for listing user repositories directly returns a JSON array of repository objects. This `data` field (typed as a dictionary) will contain this response. You should inspect the contents of this dictionary to locate the list of repositories, where each repository is represented as a dictionary containing its details. For the specific structure of repository objects, refer to the official GitHub API documentation.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepositoriesForAUserResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: lists public repositories for the specified github user; use `list repositories for a user` instead.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "Request a github pages build",
    "slug": "GITHUB_REQUEST_A_GITHUB_PAGES_BUILD",
    "input_parameters": {
      "description": "Request schema for `RequestAGithubPagesBuild`",
      "properties": {
        "owner": {
          "description": "The account owner of the repository. This name is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["hello-world", "Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "RequestAGithubPagesBuildRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the status of the GitHub Pages build. Typically includes 'url' (API URL for the build status), 'status' (e.g., 'queued', 'building', 'built'), 'commit' (the commit SHA for the build), and timestamps.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RequestAGithubPagesBuildResponseWrapper",
      "type": "object"
    },
    "description": "Manually triggers a github pages build for a repository if github pages is enabled, useful for deployments not automatically built or for retrying failed builds.",
    "tags": ["openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Request reviewers for a pull request",
    "slug": "GITHUB_REQUEST_REVIEWERS_FOR_A_PULL_REQUEST",
    "input_parameters": {
      "description": "Request schema for `RequestReviewersForAPullRequest`",
      "properties": {
        "owner": {
          "description": "Account owner of the repository (username or organization name); not case sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "pull_number": {
          "description": "Number identifying the pull request.",
          "examples": [42, 101],
          "title": "Pull Number",
          "type": "integer"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension; not case sensitive.",
          "examples": ["hello-world", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        },
        "reviewers": {
          "description": "GitHub user `login` strings (usernames) to request reviews from.",
          "examples": [["octocat", "hubot"], ["monalisa"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Reviewers",
          "type": "array"
        },
        "team_reviewers": {
          "description": "GitHub team `slug` strings (e.g., 'justice-league') to request reviews from. Slugs are typically lowercase and use hyphens for spaces.",
          "examples": [["justice-league", "core-developers"], ["my-org/team-alpha"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Team Reviewers",
          "type": "array"
        }
      },
      "required": ["owner", "repo", "pull_number"],
      "title": "RequestReviewersForAPullRequestRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Updated pull request object after reviewers are requested, including details like state, branches, and new `requested_reviewers` and `requested_teams` arrays.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RequestReviewersForAPullRequestResponseWrapper",
      "type": "object"
    },
    "description": "Requests user and/or team reviewers for an open pull request in a repository; requires `owner`, `repo`, `pull number`, and at least one of `reviewers` or `team reviewers`.",
    "tags": ["openWorldHint", "pulls", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Rerequest a check run",
    "slug": "GITHUB_REREQUEST_A_CHECK_RUN",
    "input_parameters": {
      "description": "Request schema for re-requesting a check run. Specifies the repository and the check run to be re-triggered.",
      "properties": {
        "check_run_id": {
          "description": "The unique numerical identifier of the check run to be re-requested.",
          "examples": ["123456789"],
          "title": "Check Run Id",
          "type": "integer"
        },
        "owner": {
          "description": "The account owner of the repository (username or organization name). This field is case-insensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is case-insensitive. ",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "check_run_id"],
      "title": "RerequestACheckRunRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty dictionary indicating a successful rerequest. The HTTP status code will be 201 Created upon success.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RerequestACheckRunResponseWrapper",
      "type": "object"
    },
    "description": "Triggers a re-run of a specific check run in a github repository, which resets its status to 'queued', clears its conclusion, and triggers the `check run` webhook with `rerequested`.",
    "tags": ["checks", "destructiveHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Rerequest a check suite",
    "slug": "GITHUB_REREQUEST_A_CHECK_SUITE",
    "input_parameters": {
      "description": "Request schema for `RerequestACheckSuite`",
      "properties": {
        "check_suite_id": {
          "description": "The unique identifier of the check suite.",
          "examples": [12345],
          "title": "Check Suite Id",
          "type": "integer"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. ",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "check_suite_id"],
      "title": "RerequestACheckSuiteRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The response body from the GitHub API. Typically, this is an empty object for a successful request, as the main outcome is the rerequest of the check suite.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RerequestACheckSuiteResponseWrapper",
      "type": "object"
    },
    "description": "Triggers a new run of an existing check suite within a repository, useful for re-running checks without new code.",
    "tags": ["checks", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Reset a token",
    "slug": "GITHUB_RESET_A_TOKEN",
    "input_parameters": {
      "description": "Request schema for `ResetAToken`",
      "properties": {
        "access_token": {
          "description": "The existing OAuth access token that needs to be reset. This token will be invalidated and replaced by a new one.",
          "examples": ["gho_16C7e42F292c6912E7710c838347Ae178B4a"],
          "title": "Access Token",
          "type": "string"
        },
        "client_id": {
          "description": "The client ID of the GitHub OAuth App.",
          "examples": ["Iv1.1234567890abcdef"],
          "title": "Client Id",
          "type": "string"
        }
      },
      "required": ["client_id", "access_token"],
      "title": "ResetATokenRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the details of the newly generated OAuth token. Key information typically includes the new `token` string, `scopes` array, `token_type` (e.g., 'bearer'), and other relevant metadata.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ResetATokenResponseWrapper",
      "type": "object"
    },
    "description": "Invalidates the provided oauth `access token` and generates a new one for the github oauth app identified by `client id`, used for token compromise or security rotation.",
    "tags": ["apps", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Restore a package for an organization",
    "slug": "GITHUB_RESTORE_A_PACKAGE_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request to restore a deleted package in an organization.",
      "properties": {
        "org": {
          "description": "Name of the GitHub organization that owns the package (case-insensitive).",
          "examples": ["github", "my-company"],
          "title": "Org",
          "type": "string"
        },
        "package_name": {
          "description": "Unique name of the package to be restored.",
          "examples": ["my-awesome-package", "com.example.application"],
          "title": "Package Name",
          "type": "string"
        },
        "package_type": {
          "description": "Type of the package. Gradle packages use `maven`. Docker images in `ghcr.io` use `container`; `docker` finds images from `docker.pkg.github.com`, even if migrated.",
          "enum": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "examples": ["npm", "maven", "container", "nuget"],
          "title": "Package Type",
          "type": "string"
        },
        "token": {
          "description": "Optional token for restoring private packages or specific versions requiring special permissions.",
          "title": "Token",
          "type": "string"
        }
      },
      "required": ["package_type", "package_name", "org"],
      "title": "RestoreAPackageForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response data. Typically empty on success (HTTP 204 No Content).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RestoreAPackageForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Restores a package in an organization, provided it was deleted within the last 30 days.",
    "tags": ["openWorldHint", "packages", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Restore a package for a user",
    "slug": "GITHUB_RESTORE_A_PACKAGE_FOR_A_USER",
    "input_parameters": {
      "description": "Request schema for `RestoreAPackageForAUser`",
      "properties": {
        "package_name": {
          "description": "Unique name of the package.",
          "examples": ["my-awesome-package", "internal-app-image"],
          "title": "Package Name",
          "type": "string"
        },
        "package_type": {
          "description": "The package's type. Use `maven` for Gradle packages. `docker` can be used for images migrated from `docker.pkg.github.com` to the Container registry (`ghcr.io`), while `container` is for images originally pushed to `ghcr.io`.",
          "enum": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "examples": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "title": "Package Type",
          "type": "string"
        },
        "token": {
          "description": "Optional token, potentially for specific GitHub Enterprise configurations or certain package types/visibilities. Omit if unsure.",
          "examples": ["specific-package-restore-token"],
          "title": "Token",
          "type": "string"
        },
        "username": {
          "description": "GitHub username of the package owner.",
          "examples": ["octocat", "monalisa"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["package_type", "package_name", "username"],
      "title": "RestoreAPackageForAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response data. Typically empty for a successful (204 No Content) restoration.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RestoreAPackageForAUserResponseWrapper",
      "type": "object"
    },
    "description": "Restores a user-owned package previously deleted from github packages, if restorable under github's data retention policy (typically within 30 days of deletion).",
    "tags": ["openWorldHint", "packages", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Restore a package for the authenticated user",
    "slug": "GITHUB_RESTORE_A_PACKAGE_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for restoring a package for the authenticated user.",
      "properties": {
        "package_name": {
          "description": "The unique name of the package to be restored within its namespace and type.",
          "examples": ["my-library", "my-application"],
          "title": "Package Name",
          "type": "string"
        },
        "package_type": {
          "description": "The type of the package to be restored, specifying its ecosystem. For example, `npm` for Node.js packages, `maven` for Java packages. Special cases: packages in GitHub's Gradle registry use the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) use the type `container`. The `docker` type can be used to find images originally pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if they have been migrated to the Container registry.",
          "enum": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "examples": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "title": "Package Type",
          "type": "string"
        },
        "token": {
          "description": "Optional token to identify a specific package version to restore, useful if multiple versions were deleted. If omitted, the most recently deleted version is typically restored.",
          "examples": ["1.0.2", "version-identifier-string"],
          "title": "Token",
          "type": "string"
        }
      },
      "required": ["package_type", "package_name"],
      "title": "RestoreAPackageForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RestoreAPackageForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Restores a package deleted by the authenticated user within the last 30 days, if its namespace and version are still available.",
    "tags": ["openWorldHint", "packages", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Restore a package version for the authenticated user",
    "slug": "GITHUB_RESTORE_A_PACKAGE_VERSION_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Parameters to restore a package version for the authenticated user.",
      "properties": {
        "package_name": {
          "description": "Name of the package.",
          "examples": ["my-awesome-package", "internal-tool-library"],
          "title": "Package Name",
          "type": "string"
        },
        "package_type": {
          "description": "Specifies the package type. Use `maven` for GitHub's Gradle registry. Use `container` for images in GitHub's Container registry (ghcr.io). `docker` can be used for images previously in GitHub's Docker registry (docker.pkg.github.com), even if migrated.",
          "enum": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "examples": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "title": "Package Type",
          "type": "string"
        },
        "package_version_id": {
          "description": "Unique ID of the package version to restore.",
          "examples": ["102345", "98712"],
          "title": "Package Version Id",
          "type": "integer"
        }
      },
      "required": ["package_type", "package_name", "package_version_id"],
      "title": "RestoreAPackageVersionForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RestoreAPackageVersionForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Restores a package version that was deleted by the authenticated user within the last 30 days.",
    "tags": ["openWorldHint", "packages", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Restore package version for an organization",
    "slug": "GITHUB_RESTORE_PACKAGE_VERSION_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request to restore a deleted package version for an organization.",
      "properties": {
        "org": {
          "description": "Organization name (case-insensitive).",
          "examples": ["octo-org", "github"],
          "title": "Org",
          "type": "string"
        },
        "package_name": {
          "description": "Unique name of the package.",
          "examples": ["my-package", "your-awesome-app"],
          "title": "Package Name",
          "type": "string"
        },
        "package_type": {
          "description": "The type of package. Supported types include \"npm\", \"maven\", \"rubygems\", \"docker\", \"nuget\", and \"container\". Packages in GitHub's Gradle registry use the `maven` type. Docker images in GitHub's Container registry (`ghcr.io`) use the `container` type. The `docker` type can be used for images previously in GitHub's Docker registry (`docker.pkg.github.com`), even if migrated to the Container registry.",
          "enum": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "examples": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "title": "Package Type",
          "type": "string"
        },
        "package_version_id": {
          "description": "Unique identifier of the package version.",
          "examples": ["12345", "67890"],
          "title": "Package Version Id",
          "type": "integer"
        }
      },
      "required": ["package_type", "package_name", "org", "package_version_id"],
      "title": "RestorePackageVersionForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty dictionary indicating successful restoration of the package version. The GitHub API returns a 204 No Content status for this operation, so this field will generally be an empty dictionary if the request is successful.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["successful"],
      "title": "RestorePackageVersionForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Restores a package version for an organization, provided it was deleted within the last 30 days.",
    "tags": ["openWorldHint", "packages", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Restore package version for a user",
    "slug": "GITHUB_RESTORE_PACKAGE_VERSION_FOR_A_USER",
    "input_parameters": {
      "description": "Request schema for restoring a package version for a user.",
      "properties": {
        "package_name": {
          "description": "The name of the package.",
          "examples": ["my-awesome-package", "com.example.my-library"],
          "title": "Package Name",
          "type": "string"
        },
        "package_type": {
          "description": "Specifies the package type. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. Use `docker` for images from GitHub's Docker registry (`docker.pkg.github.com`), even if migrated to the Container registry.",
          "enum": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "examples": ["npm", "maven", "rubygems", "docker", "nuget", "container"],
          "title": "Package Type",
          "type": "string"
        },
        "package_version_id": {
          "description": "The unique identifier of the package version to be restored.",
          "examples": ["12345", "67890"],
          "title": "Package Version Id",
          "type": "integer"
        },
        "username": {
          "description": "The GitHub username of the package owner.",
          "examples": ["octocat", "monalisa"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["package_type", "package_name", "username", "package_version_id"],
      "title": "RestorePackageVersionForAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RestorePackageVersionForAUserResponseWrapper",
      "type": "object"
    },
    "description": "Restores a specific, user-owned package version if it was deleted within the last 30 days and its original namespace and version name are still available.",
    "tags": ["openWorldHint", "packages", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Retrieve repo public key for encryption",
    "slug": "GITHUB_RETRIEVE_REPO_PUBLIC_KEY_FOR_ENCRYPTION",
    "input_parameters": {
      "description": "Request schema for `RetrieveRepoPublicKeyForEncryption`",
      "properties": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "examples": ["hello-world", "my-repo"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "RetrieveRepoPublicKeyForEncryptionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the public key details. Typically includes 'key_id' (the unique identifier for the public key) and 'key' (the public key itself, Base64 encoded, which you can use to encrypt secrets).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RetrieveRepoPublicKeyForEncryptionResponseWrapper",
      "type": "object"
    },
    "description": "Gets a repository's public key, used to encrypt secrets for dependabot.",
    "tags": ["dependabot", "openWorldHint", "readOnlyHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Review access with personal token",
    "slug": "GITHUB_REVIEW_ACCESS_WITH_PERSONAL_TOKEN",
    "input_parameters": {
      "description": "Request schema for approving or denying a fine-grained personal access token request.",
      "properties": {
        "action": {
          "description": "The action to take on the personal access token request. Must be 'approve' to approve the request or 'deny' to deny it.",
          "enum": ["approve", "deny"],
          "examples": ["approve", "deny"],
          "title": "Action",
          "type": "string"
        },
        "org": {
          "description": "The name of the GitHub organization. This field is not case-sensitive.",
          "examples": ["my-github-org", "AnotherOrganization"],
          "title": "Org",
          "type": "string"
        },
        "pat_request_id": {
          "description": "The unique identifier of the pending fine-grained personal access token request that needs to be reviewed.",
          "examples": [123, 4567],
          "title": "Pat Request Id",
          "type": "integer"
        },
        "reason": {
          "description": "An optional comment explaining the reason for approving or denying the request. Maximum length is 1024 characters.",
          "examples": [
            "Approved due to project requirements.",
            "Denied as the scope is too broad."
          ],
          "title": "Reason",
          "type": "string"
        }
      },
      "required": ["org", "pat_request_id", "action"],
      "title": "ReviewAccessWithPersonalTokenRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The API response data. Typically empty for a successful review (which returns a 204 No Content status). In case of errors, this dictionary may contain details about the error.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["successful"],
      "title": "ReviewAccessWithPersonalTokenResponseWrapper",
      "type": "object"
    },
    "description": "Approves or denies a pending fine-grained personal access token request for organization resources; must be performed by a github app.",
    "tags": ["destructiveHint", "openWorldHint", "orgs", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Review Custom Deployment Rules For Workflow Run",
    "slug": "GITHUB_REVIEW_DEPLOYMENT_PROTECTION_RULES",
    "input_parameters": {
      "description": "Parameters to identify the repository and workflow run for reviewing deployment protection rules.",
      "properties": {
        "owner": {
          "description": "Repository owner's username or organization name (case-insensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Repository name, without `.git` extension (case-insensitive).",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        },
        "run_id": {
          "description": "Unique identifier of the workflow run.",
          "examples": ["123456789"],
          "title": "Run Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "run_id"],
      "title": "ReviewCustomDeploymentProtectionRulesForAWorkflowRunRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response data; structure may vary based on the review outcome.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ReviewCustomDeploymentProtectionRulesForAWorkflowRunResponseWrapper",
      "type": "object"
    },
    "description": "Approves or rejects pending custom deployment protection rules for a workflow run by posting a review with `environment name` (str), `state` (str: 'approved'/'rejected'), and optional `comment` (str) in the request body, targeting a run with rules awaiting review.",
    "tags": ["actions", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Review pending deployments for a workflow run",
    "slug": "GITHUB_REVIEW_PENDING_DEPLOYMENTS_FOR_A_WORKFLOW_RUN",
    "input_parameters": {
      "description": "Request to approve or reject pending deployments for a workflow run.",
      "properties": {
        "comment": {
          "description": "Comment to include with the review decision.",
          "examples": ["Approving deployment to production.", "Rejecting: needs further testing."],
          "title": "Comment",
          "type": "string"
        },
        "environment_ids": {
          "description": "Environments targeted by the review; they must be configured for the repository and be part of the pending deployments for this run.",
          "examples": ["[67890, 67891]", "[12345]"],
          "items": { "properties": {}, "type": "integer" },
          "title": "Environment Ids",
          "type": "array"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        },
        "run_id": {
          "description": "The unique identifier of the workflow run.",
          "examples": ["123456789"],
          "title": "Run Id",
          "type": "integer"
        },
        "state": {
          "description": "State to apply to the pending deployments.",
          "enum": ["approved", "rejected"],
          "examples": ["approved", "rejected"],
          "title": "State",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "run_id", "environment_ids", "state", "comment"],
      "title": "ReviewPendingDeploymentsForAWorkflowRunRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response containing the list of deployment objects that were approved or rejected. Refer to GitHub API documentation for deployment object structure.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ReviewPendingDeploymentsForAWorkflowRunResponseWrapper",
      "type": "object"
    },
    "description": "Approves or rejects pending deployments for a specific workflow run that are in a 'waiting' state within specified, configured environments.",
    "tags": ["actions", "destructiveHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Review resource requests with fine grained tokens",
    "slug": "GITHUB_REVIEW_RESOURCE_REQUESTS_WITH_FINE_GRAINED_TOKENS",
    "input_parameters": {
      "description": "Request schema for `ReviewResourceRequestsWithFineGrainedTokens`",
      "properties": {
        "action": {
          "description": "Action to perform on the token requests.",
          "enum": ["approve", "deny"],
          "examples": ["approve", "deny"],
          "title": "Action",
          "type": "string"
        },
        "org": {
          "description": "GitHub organization name (not case-sensitive).",
          "examples": ["my-github-org"],
          "title": "Org",
          "type": "string"
        },
        "pat_request_ids": {
          "description": "Unique identifiers (1 to 100) for the fine-grained personal access token requests.",
          "examples": ["[1, 2, 3]", "[101, 102]"],
          "items": { "properties": {}, "type": "integer" },
          "title": "Pat Request Ids",
          "type": "array"
        },
        "reason": {
          "description": "Reason for the action (max 1024 characters).",
          "examples": ["Approved for project X", "Access no longer required"],
          "title": "Reason",
          "type": "string"
        }
      },
      "required": ["org", "action"],
      "title": "ReviewResourceRequestsWithFineGrainedTokensRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response from the review operation.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ReviewResourceRequestsWithFineGrainedTokensResponseWrapper",
      "type": "object"
    },
    "description": "Approves or denies fine-grained personal access token requests for an organization; any specified `pat request ids` must refer to currently pending requests.",
    "tags": ["destructiveHint", "openWorldHint", "orgs", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Revoke an installation access token",
    "slug": "GITHUB_REVOKE_AN_INSTALLATION_ACCESS_TOKEN",
    "input_parameters": {
      "description": "Request model for revoking the current installation access token.",
      "properties": {},
      "title": "RevokeAnInstallationAccessTokenRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RevokeAnInstallationAccessTokenResponseWrapper",
      "type": "object"
    },
    "description": "Revokes the github app's current installation access token, immediately invalidating it for api authentication.",
    "tags": ["apps", "destructiveHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Re-run a job from a workflow run",
    "slug": "GITHUB_RE_RUN_A_JOB_FROM_A_WORKFLOW_RUN",
    "input_parameters": {
      "description": "Request schema for re-running a specific job from a workflow run in a GitHub repository.",
      "properties": {
        "enable_debug_logging": {
          "default": false,
          "description": "If `true`, enables additional debug logging for the re-run of the job. Defaults to `false` if not provided.",
          "examples": ["true", "false"],
          "title": "Enable Debug Logging",
          "type": "boolean"
        },
        "job_id": {
          "description": "The unique numerical identifier of the job to be re-run. This ID can be obtained by listing jobs for a workflow run.",
          "examples": ["1234567890"],
          "title": "Job Id",
          "type": "integer"
        },
        "owner": {
          "description": "The account owner of the repository (e.g., a GitHub username or organization name). This name is not case sensitive.",
          "examples": ["octo-org"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case sensitive.",
          "examples": ["octo-repo"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "job_id"],
      "title": "ReRunAJobFromAWorkflowRunRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty dictionary indicating the successful re-run of the job.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ReRunAJobFromAWorkflowRunResponseWrapper",
      "type": "object"
    },
    "description": "Re-runs a specific job and any dependent jobs from a github actions workflow run in the specified repository, optionally enabling debug logging.",
    "tags": ["actions", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Rerun a workflow",
    "slug": "GITHUB_RE_RUN_A_WORKFLOW",
    "input_parameters": {
      "description": "Input for re-running a specific GitHub Actions workflow run.",
      "properties": {
        "enable_debug_logging": {
          "default": false,
          "description": "Set to `true` to enable diagnostic logging for the re-run, helpful for troubleshooting.",
          "examples": ["true", "false"],
          "title": "Enable Debug Logging",
          "type": "boolean"
        },
        "owner": {
          "description": "Account owner of the repository where the workflow run exists (not case-sensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository (without the `.git` extension) where the workflow run exists (not case-sensitive).",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "run_id": {
          "description": "Unique ID of the workflow run to re-execute.",
          "examples": ["123456789"],
          "title": "Run Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "run_id"],
      "title": "ReRunAWorkflowRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Data from the workflow re-run response; usually an empty body (HTTP 201 Created) on success, but captures any API-returned data.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ReRunAWorkflowResponseWrapper",
      "type": "object"
    },
    "description": "Re-runs a specific github actions workflow run identified by its owner, repository, and run id, optionally enabling debug logging.",
    "tags": ["actions", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Rerun failed jobs from a workflow run",
    "slug": "GITHUB_RE_RUN_FAILED_JOBS_FROM_A_WORKFLOW_RUN",
    "input_parameters": {
      "description": "Input model to re-run failed jobs from a workflow run.",
      "properties": {
        "enable_debug_logging": {
          "default": false,
          "description": "Set to `true` to enable extensive debug logging for the re-run, providing additional logs to aid in diagnosing issues.",
          "examples": ["true", "false"],
          "title": "Enable Debug Logging",
          "type": "boolean"
        },
        "owner": {
          "description": "The account owner of the repository (username or organization name); not case-sensitive.",
          "examples": ["octocat", "your-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension; not case-sensitive.",
          "examples": ["Hello-World", "my-repository"],
          "title": "Repo",
          "type": "string"
        },
        "run_id": {
          "description": "The unique identifier of the workflow run.",
          "examples": ["123456789", "987654321"],
          "title": "Run Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "run_id"],
      "title": "ReRunFailedJobsFromAWorkflowRunRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary, typically empty, returned upon successful acceptance of the re-run request. An empty object `{}` signifies GitHub's acceptance.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ReRunFailedJobsFromAWorkflowRunResponseWrapper",
      "type": "object"
    },
    "description": "Re-runs all failed jobs and their dependent jobs from a specified workflow run if the run contains previously failed jobs.",
    "tags": ["actions", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Search code",
    "slug": "GITHUB_SEARCH_CODE",
    "input_parameters": {
      "properties": {
        "order": {
          "default": "desc",
          "description": "DEPRECATED. Order ('asc' or 'desc') for results; effective only if `sort` is specified. Docs: [ranking search results](https://docs.github.com/rest/search/search#ranking-search-results).",
          "enum": ["desc", "asc"],
          "examples": ["desc", "asc"],
          "title": "Order",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for results. For pagination details, see GitHub docs: [Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Results per page (max 100). For pagination details, see GitHub docs: [Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "q": {
          "description": "Code search query, including keywords and qualifiers (e.g., `language:python`, `user:octocat`, `repo:owner/repo`). For full syntax and qualifiers, see GitHub docs: [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query) and [code search qualifiers](https://docs.github.com/search-github/searching-on-github/searching-code).",
          "examples": [
            "HelloWorld in:file language:python",
            "user:octocat repo:hello-world extension:js",
            "form path:/app/models language:ruby"
          ],
          "title": "Q",
          "type": "string"
        },
        "sort": {
          "description": "DEPRECATED. Valid: 'indexed' (sorts by last indexed time). If unspecified, results sorted by best match. Docs: [ranking search results](https://docs.github.com/rest/search/search#ranking-search-results).",
          "enum": ["indexed"],
          "examples": ["indexed"],
          "title": "Sort",
          "type": "string"
        }
      },
      "required": ["q"],
      "title": "SearchCodeRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Search results. Includes 'total_count', 'incomplete_results' (boolean), and 'items' (list of code objects with 'name', 'path', 'sha', 'repository' etc.).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SearchCodeResponseWrapper",
      "type": "object"
    },
    "description": "Searches code file contents and paths on the default branch of github repositories using a query string; searches only files under 384kb, returns max 1000 results by best match, and is optimized for precision.",
    "tags": ["openWorldHint", "readOnlyHint", "search", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Search commits",
    "slug": "GITHUB_SEARCH_COMMITS",
    "input_parameters": {
      "description": "Request schema for `SearchCommits`",
      "properties": {
        "order": {
          "default": "desc",
          "description": "Sort order. Effective only when 'sort' is specified.",
          "enum": ["desc", "asc"],
          "examples": ["desc", "asc"],
          "title": "Order",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number of results to retrieve.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (maximum 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "q": {
          "description": "Keywords and qualifiers for filtering commits. Refer to GitHub's commit search documentation for advanced query syntax details.",
          "examples": [
            "fix:bug user:octocat",
            "merge pull request repo:owner/repo path:/src type:pr"
          ],
          "title": "Q",
          "type": "string"
        },
        "sort": {
          "description": "Sorts results by 'author-date' or 'committer-date'. If unspecified, GitHub defaults to 'best match' ranking.",
          "enum": ["author-date", "committer-date"],
          "examples": ["author-date", "committer-date"],
          "title": "Sort",
          "type": "string"
        }
      },
      "required": ["q"],
      "title": "SearchCommitsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Search results, typically including a list of commits and metadata like total_count.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SearchCommitsResponseWrapper",
      "type": "object"
    },
    "description": "Finds commits on github using a query string (q) supporting keywords and qualifiers, with options for sorting and pagination.",
    "tags": ["openWorldHint", "readOnlyHint", "search", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Search issues and pull requests",
    "slug": "GITHUB_SEARCH_ISSUES_AND_PULL_REQUESTS",
    "input_parameters": {
      "description": "Request schema for searching issues and pull requests on GitHub.",
      "properties": {
        "order": {
          "default": "desc",
          "description": "Order for sorted results (ascending/descending). Effective only if `sort` is also provided.",
          "enum": ["desc", "asc"],
          "examples": ["desc", "asc"],
          "title": "Order",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for results (starts at 1). Refer to GitHub's REST API documentation on pagination for details.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (maximum 100). Refer to GitHub's REST API documentation on pagination for details.",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "q": {
          "description": "Search query using GitHub's specific syntax (keywords, qualifiers, operators). Refer to GitHub's search documentation for query construction and available qualifiers.",
          "examples": [
            "repo:octocat/Spoon-Knife is:issue is:open label:\"help wanted\"",
            "mentions:octocat is:pr state:merged"
          ],
          "title": "Q",
          "type": "string"
        },
        "raw_response": {
          "default": false,
          "description": "Return full API response if true, optimized response for AI agents if false.",
          "examples": [true, false],
          "title": "Raw Response",
          "type": "boolean"
        },
        "sort": {
          "description": "Field for sorting results. GitHub defaults to 'best match' if unspecified.",
          "enum": [
            "comments",
            "reactions",
            "reactions-+1",
            "reactions--1",
            "reactions-smile",
            "reactions-thinking_face",
            "reactions-heart",
            "reactions-tada",
            "interactions",
            "created",
            "updated"
          ],
          "examples": ["comments", "created", "updated"],
          "title": "Sort",
          "type": "string"
        }
      },
      "required": ["q"],
      "title": "SearchIssuesAndPullRequestsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Dictionary with search results, including 'total_count', 'incomplete_results' (boolean indicating timeout), and 'items' (list of issue/pull request objects with their details).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SearchIssuesAndPullRequestsResponseWrapper",
      "type": "object"
    },
    "description": "Searches github for issues and pull requests. use qualifiers to scope searches: `repo:owner/name` for specific repos, `org:orgname` for organizations, `user:username` for personal repos, `assignee:@me` for your assignments. combine with `is:issue`, `is:pr`, `state:open`, `label:\"name\"` filters.",
    "tags": ["openWorldHint", "readOnlyHint", "idempotentHint", "search", "important"]
  },
  {
    "available_versions": ["latest"],
    "name": "Search labels",
    "slug": "GITHUB_SEARCH_LABELS",
    "input_parameters": {
      "description": "Request schema for searching labels in a GitHub repository.",
      "properties": {
        "order": {
          "default": "desc",
          "description": "Determines the sorting order of results, either 'asc' (ascending) or 'desc' (descending). This parameter is only effective when `sort` is also specified. Defaults to 'desc'.",
          "enum": ["desc", "asc"],
          "title": "Order",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number of the results to retrieve, starting from 1. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "examples": [2],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of search results to return per page. The maximum value is 100. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "examples": [50],
          "title": "Per Page",
          "type": "integer"
        },
        "q": {
          "description": "The search keywords or query to find labels. This endpoint does not accept qualifiers in the query. For more details on query construction, refer to GitHub's documentation on [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query).",
          "examples": ["bug", "enhancement critical"],
          "title": "Q",
          "type": "string"
        },
        "repository_id": {
          "description": "The unique identifier of the repository where labels will be searched.",
          "examples": [1296269],
          "title": "Repository Id",
          "type": "integer"
        },
        "sort": {
          "description": "Specifies the field to sort the search results by. Valid options are 'created' or 'updated'. If not provided, results are sorted by best match according to GitHub's default ranking: [best match](https://docs.github.com/rest/search/search#ranking-search-results).",
          "enum": ["created", "updated"],
          "title": "Sort",
          "type": "string"
        }
      },
      "required": ["repository_id", "q"],
      "title": "SearchLabelsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the search results. This typically includes keys such as `total_count` (the total number of labels found), `incomplete_results` (a boolean indicating if the search timed out), and `items` (a list of label objects matching the query). Each label object in the `items` list contains details like `id`, `node_id`, `url`, `name`, `description`, `color` (hexadecimal code without '#'), and `default` (boolean indicating if it's a default label).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SearchLabelsResponseWrapper",
      "type": "object"
    },
    "description": "Searches for labels within a github repository by keywords in their names or descriptions.",
    "tags": ["openWorldHint", "readOnlyHint", "search", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Search repositories",
    "slug": "GITHUB_SEARCH_REPOSITORIES",
    "input_parameters": {
      "description": "Defines the parameters for a GitHub repository search query.",
      "properties": {
        "order": {
          "default": "desc",
          "description": "Determines the order of search results: `desc` for descending or `asc` for ascending. This parameter is only effective when `sort` is also specified. Defaults to `desc`.",
          "enum": ["desc", "asc"],
          "examples": ["desc", "asc"],
          "title": "Order",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number for pagination of search results. Defaults to 1. Used in conjunction with `per_page` to fetch subsequent sets of results. See GitHub API documentation for more on pagination.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of repository results to return per page. The maximum value is 100. Defaults to 30. See GitHub API documentation for more on pagination.",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "q": {
          "description": "The search query string. Can contain keywords and qualifiers (e.g., `language:python`, `user:octocat`, `stars:>1000`). Qualifiers help narrow down the search to specific areas of GitHub. Refer to GitHub's official documentation for detailed syntax on constructing search queries and the full list of available qualifiers.",
          "examples": [
            "tensorflow language:python",
            "user:torvalds linux",
            "topic:react stars:>=10000"
          ],
          "title": "Q",
          "type": "string"
        },
        "sort": {
          "description": "Specifies the field to sort the search results by. Options include `stars`, `forks`, `help-wanted-issues`, or `updated` (recency of update). If not provided, results are sorted by GitHub's default 'best match' ranking.",
          "enum": ["stars", "forks", "help-wanted-issues", "updated"],
          "examples": ["stars", "forks", "help-wanted-issues", "updated"],
          "title": "Sort",
          "type": "string"
        }
      },
      "required": ["q"],
      "title": "SearchRepositoriesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SearchRepositoriesResponseWrapper",
      "type": "object"
    },
    "description": "Searches github repositories using a flexible query (keywords, qualifiers) with sorting, ordering, and pagination.",
    "tags": ["openWorldHint", "readOnlyHint", "search", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Search repositories",
    "slug": "GITHUB_SEARCH_REPO_S",
    "input_parameters": {
      "description": "Defines the parameters for a GitHub repository search query.",
      "properties": {
        "order": {
          "default": "desc",
          "description": "Determines the order of search results: `desc` for descending or `asc` for ascending. This parameter is only effective when `sort` is also specified. Defaults to `desc`.",
          "enum": ["desc", "asc"],
          "examples": ["desc", "asc"],
          "title": "Order",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "The page number for pagination of search results. Defaults to 1. Used in conjunction with `per_page` to fetch subsequent sets of results. See GitHub API documentation for more on pagination.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of repository results to return per page. The maximum value is 100. Defaults to 30. See GitHub API documentation for more on pagination.",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "q": {
          "description": "The search query string. Can contain keywords and qualifiers (e.g., `language:python`, `user:octocat`, `stars:>1000`). Qualifiers help narrow down the search to specific areas of GitHub. Refer to GitHub's official documentation for detailed syntax on constructing search queries and the full list of available qualifiers.",
          "examples": [
            "tensorflow language:python",
            "user:torvalds linux",
            "topic:react stars:>=10000"
          ],
          "title": "Q",
          "type": "string"
        },
        "sort": {
          "description": "Specifies the field to sort the search results by. Options include `stars`, `forks`, `help-wanted-issues`, or `updated` (recency of update). If not provided, results are sorted by GitHub's default 'best match' ranking.",
          "enum": ["stars", "forks", "help-wanted-issues", "updated"],
          "examples": ["stars", "forks", "help-wanted-issues", "updated"],
          "title": "Sort",
          "type": "string"
        }
      },
      "required": ["q"],
      "title": "SearchRepositoriesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SearchRepositoriesResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: use `search repositories`; this version finds repositories by criteria, including text match metadata and pagination. example: `q=\"tetris language:assembly\", sort=\"stars\"`",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "Search topics",
    "slug": "GITHUB_SEARCH_TOPICS",
    "input_parameters": {
      "description": "Request schema to find topics by keywords and qualifiers.",
      "properties": {
        "page": {
          "default": 1,
          "description": "Page number of the results to retrieve for pagination.",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of topic results per page (maximum 100).",
          "title": "Per Page",
          "type": "integer"
        },
        "q": {
          "description": "Search query string. Supports keywords, qualifiers, and GitHub's search syntax; see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query).",
          "examples": [
            "machine-learning",
            "is:featured",
            "python language:python",
            "decentralized created:>=2023-01-01"
          ],
          "title": "Q",
          "type": "string"
        }
      },
      "required": ["q"],
      "title": "SearchTopicsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Raw API response from GitHub, including a list of topics matching the search query and pagination information.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SearchTopicsResponseWrapper",
      "type": "object"
    },
    "description": "Finds topics on github using keywords and qualifiers with github's search syntax, supporting pagination.",
    "tags": ["openWorldHint", "readOnlyHint", "search", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Search users",
    "slug": "GITHUB_SEARCH_USERS",
    "input_parameters": {
      "description": "Parameters for searching users on GitHub.",
      "properties": {
        "order": {
          "default": "desc",
          "description": "Sort order for results when `sort` is specified; ignored otherwise.",
          "enum": ["desc", "asc"],
          "examples": ["asc", "desc"],
          "title": "Order",
          "type": "string"
        },
        "page": {
          "default": 1,
          "description": "Page number for results (1-indexed).",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of search results per page. Maximum 100.",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        },
        "q": {
          "description": "Search query string supporting keywords and qualifiers for user attributes (e.g., `username`, `location`, `followers`). See examples for syntax.",
          "examples": [
            "user:octocat",
            "tom followers:>1000 location:\"San Francisco\"",
            "joined:>=2023-01-01"
          ],
          "title": "Q",
          "type": "string"
        },
        "sort": {
          "description": "Field to sort results by. If not specified, GitHub's 'best match' algorithm is used.",
          "enum": ["followers", "repositories", "joined"],
          "examples": ["followers", "repositories", "joined"],
          "title": "Sort",
          "type": "string"
        }
      },
      "required": ["q"],
      "title": "SearchUsersRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Dictionary containing search results, typically including a list of user objects, total count, and an incomplete results flag.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SearchUsersResponseWrapper",
      "type": "object"
    },
    "description": "Searches for users on github by criteria like username, email, location, followers, or repository associations, using a flexible query string `q`.",
    "tags": ["openWorldHint", "readOnlyHint", "search", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "List global security advisories",
    "slug": "GITHUB_SECURITY_ADVISORIES_LIST_GLOBAL_ADVISORIES",
    "input_parameters": {
      "description": "Request schema for `ListGlobalSecurityAdvisories`",
      "properties": {
        "affects": {
          "description": "Filter by affected 'package' or 'package@version'. Max 100 items. Example: `affects=pkg1,pkg2@1.0.0`.",
          "items": { "properties": {}, "type": "string" },
          "title": "Affects",
          "type": "array"
        },
        "after": {
          "description": "Pagination cursor to retrieve results after this value.",
          "title": "After",
          "type": "string"
        },
        "before": {
          "description": "Pagination cursor to retrieve results before this value.",
          "title": "Before",
          "type": "string"
        },
        "cve_id": {
          "description": "Filter by Common Vulnerabilities and Exposures (CVE) identifier.",
          "title": "Cve Id",
          "type": "string"
        },
        "cwes": {
          "description": "Filter by Common Weakness Enumeration (CWE) identifiers. Accepts comma-separated string or multiple parameters. Example: `cwes=79,284`.",
          "items": { "properties": {}, "type": "string" },
          "title": "Cwes",
          "type": "array"
        },
        "direction": {
          "default": "desc",
          "description": "Sort direction for results (asc, desc).",
          "enum": ["asc", "desc"],
          "title": "Direction",
          "type": "string"
        },
        "ecosystem": {
          "description": "Filter by package ecosystem (e.g., npm, pip).",
          "enum": [
            "rubygems",
            "npm",
            "pip",
            "maven",
            "nuget",
            "composer",
            "go",
            "rust",
            "erlang",
            "actions",
            "pub",
            "other",
            "swift"
          ],
          "title": "Ecosystem",
          "type": "string"
        },
        "ghsa_id": {
          "description": "Filter by GitHub Security Advisory (GHSA) identifier.",
          "title": "Ghsa Id",
          "type": "string"
        },
        "is_withdrawn": {
          "description": "Filter for withdrawn advisories.",
          "title": "Is Withdrawn",
          "type": "boolean"
        },
        "modified": {
          "description": "Filter by last modification (update or publication) date or date range. For syntax, see GitHub's 'understanding the search syntax' documentation.",
          "title": "Modified",
          "type": "string"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "title": "Per Page",
          "type": "integer"
        },
        "published": {
          "description": "Filter by publication date or date range. For syntax, see GitHub's 'understanding the search syntax' documentation.",
          "title": "Published",
          "type": "string"
        },
        "severity": {
          "description": "Filter by advisory severity (e.g., high, critical).",
          "enum": ["unknown", "low", "medium", "high", "critical"],
          "title": "Severity",
          "type": "string"
        },
        "sort": {
          "default": "published",
          "description": "Property to sort results by (updated, published).",
          "enum": ["updated", "published"],
          "title": "Sort",
          "type": "string"
        },
        "type": {
          "default": "reviewed",
          "description": "Filter by advisory type (e.g., reviewed, malware). Defaults to 'reviewed'; if this default is active and no other search parameters are used, malware advisories are also excluded.",
          "enum": ["reviewed", "malware", "unreviewed"],
          "title": "Type",
          "type": "string"
        },
        "updated": {
          "description": "Filter by update date or date range. For syntax, see GitHub's 'understanding the search syntax' documentation.",
          "title": "Updated",
          "type": "string"
        }
      },
      "title": "ListGlobalSecurityAdvisoriesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListGlobalSecurityAdvisoriesResponseWrapper",
      "type": "object"
    },
    "description": " tags = [\"openworldhint\", \"readonlyhint\", \"mcpignore\"] the text describes how to find global security advisories with specific parameters. by default, it excludes malware advisories, which can be included by setting the `type` parameter to `malware`. more on advisory types at github docs.<<DEPRECATED use list_global_security_advisories>>",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "Set admin branch protection",
    "slug": "GITHUB_SET_ADMIN_BRANCH_PROTECTION",
    "input_parameters": {
      "description": "Request schema for `SetAdminBranchProtection`",
      "properties": {
        "branch": {
          "description": "Branch name. Wildcards not permitted (use GitHub GraphQL API for wildcard patterns).",
          "examples": ["main", "develop", "feature/new-login"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "Account owner of the repository (user or organization name). Not case sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension. Not case sensitive.",
          "examples": ["Spoon-Knife", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "SetAdminBranchProtectionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SetAdminBranchProtectionResponseWrapper",
      "type": "object"
    },
    "description": "Enables administrator enforcement on a branch, making existing protection rules also apply to administrators; branch protection rules must already be configured.",
    "tags": ["idempotentHint", "openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Set app access restrictions",
    "slug": "GITHUB_SET_APP_ACCESS_RESTRICTIONS",
    "input_parameters": {
      "description": "Request schema for `SetAppAccessRestrictions`",
      "properties": {
        "branch": {
          "description": "The name of the branch to apply restrictions to. Wildcard characters are not permitted. To use wildcard characters in branch names, refer to the GitHub GraphQL API (see https://docs.github.com/graphql).",
          "examples": ["main", "develop", "feature/login-v2"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This is not case-sensitive.",
          "examples": ["Spoon-Knife", "my-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "SetAppAccessRestrictionsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SetAppAccessRestrictionsResponseWrapper",
      "type": "object"
    },
    "description": "Replaces the list of github apps permitted to push to a protected branch; the branch must already be protected and apps must be installed with 'contents' permission.",
    "tags": ["destructiveHint", "openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Set a repository subscription",
    "slug": "GITHUB_SET_A_REPOSITORY_SUBSCRIPTION",
    "input_parameters": {
      "description": "Request schema for `SetARepositorySubscription`",
      "properties": {
        "ignored": {
          "description": "Determines if all notifications should be blocked from this repository. If `true`, this repository will be ignored, and the `subscribed` parameter will be disregarded (effectively setting subscribed to `false`).",
          "examples": ["true", "false"],
          "title": "Ignored",
          "type": "boolean"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case-sensitive.",
          "examples": ["Spoon-Knife", "docs"],
          "title": "Repo",
          "type": "string"
        },
        "subscribed": {
          "description": "Determines if notifications should be received from this repository. Set to `true` to watch the repository, `false` to unwatch. This parameter is overridden if `ignored` is set to `true`.",
          "examples": ["true", "false"],
          "title": "Subscribed",
          "type": "boolean"
        }
      },
      "required": ["owner", "repo"],
      "title": "SetARepositorySubscriptionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the details of the repository subscription, such as `subscribed`, `ignored`, `reason`, `created_at`, `url`, and `repository_url`.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SetARepositorySubscriptionResponseWrapper",
      "type": "object"
    },
    "description": "Sets the authenticated user's notification subscription for a repository.",
    "tags": ["activity", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Set a thread subscription",
    "slug": "GITHUB_SET_A_THREAD_SUBSCRIPTION",
    "input_parameters": {
      "description": "Request to set the ignored (muted) state of a GitHub notification thread.",
      "properties": {
        "ignored": {
          "default": false,
          "description": "Whether to ignore (mute) the thread. `True` blocks notifications; `False` allows them if otherwise subscribed.",
          "examples": ["True", "False"],
          "title": "Ignored",
          "type": "boolean"
        },
        "thread_id": {
          "description": "Unique identifier of the notification thread (e.g., from `GET /notifications`).",
          "examples": ["1347", "2031"],
          "title": "Thread Id",
          "type": "integer"
        }
      },
      "required": ["thread_id"],
      "title": "SetAThreadSubscriptionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Updated subscription details, typically including 'subscribed' and 'ignored' status, and other relevant GitHub API metadata.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SetAThreadSubscriptionResponseWrapper",
      "type": "object"
    },
    "description": "Sets whether a github notification thread is ignored (muted) or unignored (unmuted), for a `thread id` that must identify an existing notification thread.",
    "tags": ["activity", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Set default workflow permissions for an organization",
    "slug": "GITHUB_SET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for setting default workflow permissions for a GitHub organization.",
      "properties": {
        "can_approve_pull_request_reviews": {
          "description": "Whether GitHub Actions can approve pull requests; enabling this (`true`) can be a security risk. If omitted, the current setting is preserved.",
          "examples": ["True", "False"],
          "title": "Can Approve Pull Request Reviews",
          "type": "boolean"
        },
        "default_workflow_permissions": {
          "description": "Default GITHUB_TOKEN permissions for workflows in the organization. If omitted, the current setting is preserved.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Default Workflow Permissions",
          "type": "string"
        },
        "org": {
          "description": "The name of the GitHub organization. This name is not case-sensitive.",
          "examples": ["my-github-org"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org"],
      "title": "SetDefaultWorkflowPermissionsForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SetDefaultWorkflowPermissionsForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Updates an organization's default github token permissions for workflows and whether github actions can approve pull requests; note that allowing actions to approve pull requests (`can approve pull request reviews: true`) is a security risk.",
    "tags": ["actions", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Set default workflow permissions for a repository",
    "slug": "GITHUB_SET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Parameters for setting a repository's default GITHUB_TOKEN permissions for workflows and its pull request approval capabilities by Actions.",
      "properties": {
        "can_approve_pull_request_reviews": {
          "description": "Specifies whether GitHub Actions workflows, using the GITHUB_TOKEN, can approve pull requests. Enabling this can pose a security risk by allowing automated processes to approve code changes.",
          "examples": [true, false],
          "title": "Can Approve Pull Request Reviews",
          "type": "boolean"
        },
        "default_workflow_permissions": {
          "description": "The default permissions granted to the GITHUB_TOKEN when running workflows in the repository. 'read' allows read-only access, while 'write' allows write access.",
          "enum": ["read", "write"],
          "examples": ["read", "write"],
          "title": "Default Workflow Permissions",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case sensitive. ",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "SetDefaultWorkflowPermissionsForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Contains response data. For this operation, successful execution typically means an empty body (HTTP 204 No Content); otherwise, may contain error details.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["successful"],
      "title": "SetDefaultWorkflowPermissionsForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Sets the default permissions for the github token within a repository and configures whether github actions can approve pull requests.",
    "tags": ["actions", "destructiveHint", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Set GitHub Actions permissions for an organization",
    "slug": "GITHUB_SET_GITHUB_ACTIONS_PERMISSIONS_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for `SetGithubActionsPermissionsForAnOrganization`",
      "properties": {
        "allowed_actions": {
          "description": "Policy for which actions and reusable workflows are allowed. If 'selected', manage the list of specific actions/workflows via other GitHub API endpoints.",
          "enum": ["all", "local_only", "selected"],
          "examples": ["all", "local_only", "selected"],
          "title": "Allowed Actions",
          "type": "string"
        },
        "enabled_repositories": {
          "description": "Policy for which repositories can run GitHub Actions. If 'selected', manage the list of specific repositories via other GitHub API endpoints.",
          "enum": ["all", "none", "selected"],
          "examples": ["all", "none", "selected"],
          "title": "Enabled Repositories",
          "type": "string"
        },
        "org": {
          "description": "The organization name (not case-sensitive).",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org", "enabled_repositories"],
      "title": "SetGithubActionsPermissionsForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SetGithubActionsPermissionsForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Sets the github actions permissions policy for an organization, specifying which repositories can run actions and which actions/workflows are allowed; if 'selected' is chosen for either, manage the specific lists via other endpoints.",
    "tags": ["actions", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Set github actions permissions for a repository",
    "slug": "GITHUB_SET_GITHUB_ACTIONS_PERMISSIONS_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Input parameters for setting GitHub Actions permissions for a repository.",
      "properties": {
        "allowed_actions": {
          "description": "Permissions policy: `all` (all actions/workflows allowed), `local_only` (only from this repository), or `selected` (configured in settings). Optional; inherits from organization/enterprise or GitHub defaults if omitted.",
          "enum": ["all", "local_only", "selected"],
          "examples": ["all", "local_only", "selected"],
          "title": "Allowed Actions",
          "type": "string"
        },
        "enabled": {
          "description": "Specifies whether GitHub Actions is enabled for the repository. Set to `True` to enable, `False` to disable.",
          "examples": ["True", "False"],
          "title": "Enabled",
          "type": "boolean"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "MyOrganization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["hello-world", "my-app"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "enabled"],
      "title": "SetGithubActionsPermissionsForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SetGithubActionsPermissionsForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Sets github actions permissions for a repository, enabling/disabling actions and defining the policy for allowed actions and reusable workflows.",
    "tags": ["actions", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Set interaction restrictions for an organization",
    "slug": "GITHUB_SET_INTERACTION_RESTRICTIONS_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for `SetInteractionRestrictionsForAnOrganization`",
      "properties": {
        "expiry": {
          "description": "Duration of the restriction; if omitted, the API defaults to `one_day`. A new limit overwrites any existing one.",
          "enum": ["one_day", "three_days", "one_week", "one_month", "six_months"],
          "examples": ["one_day", "three_days", "one_month"],
          "title": "Expiry",
          "type": "string"
        },
        "limit": {
          "description": "Type of GitHub user to be restricted from commenting, opening issues, or creating pull requests in the organization's public repositories.",
          "enum": ["existing_users", "contributors_only", "collaborators_only"],
          "examples": ["existing_users", "contributors_only", "collaborators_only"],
          "title": "Limit",
          "type": "string"
        },
        "org": {
          "description": "Name of the organization (case-insensitive).",
          "examples": ["octo-org", "github"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org", "limit"],
      "title": "SetInteractionRestrictionsForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details of the applied interaction restriction, including `limit` type, `origin` (e.g., 'organization'), and `expires_at` timestamp.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SetInteractionRestrictionsForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Limits interactions (comments, new issues, prs) in an organization's public repositories by user type and duration, typically to mitigate high traffic or unwanted activity.",
    "tags": ["idempotentHint", "interactions", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Set interaction restrictions for a repository",
    "slug": "GITHUB_SET_INTERACTION_RESTRICTIONS_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for `SetInteractionRestrictionsForARepository`.",
      "properties": {
        "expiry": {
          "description": "Duration for the interaction restriction (e.g., one_day, six_months); API defaults to 'one_day' if not provided.",
          "enum": ["one_day", "three_days", "one_week", "one_month", "six_months"],
          "examples": ["one_day", "three_days", "one_week", "one_month", "six_months"],
          "title": "Expiry",
          "type": "string"
        },
        "limit": {
          "description": "Specifies which group of GitHub users (e.g., existing_users, contributors_only) can interact with the repository.",
          "enum": ["existing_users", "contributors_only", "collaborators_only"],
          "examples": ["existing_users", "contributors_only", "collaborators_only"],
          "title": "Limit",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository (username or organization name, case-insensitive).",
          "examples": ["octocat", "my-github-org"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository (without .git extension, case-insensitive).",
          "examples": ["Spoon-Knife", "my-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "limit"],
      "title": "SetInteractionRestrictionsForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SetInteractionRestrictionsForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Temporarily limits which github users (e.g., existing users, contributors only) can interact (comment, open issues, create pull requests) in a repository for a specified duration.",
    "tags": ["interactions", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Set interaction restrictions for your public repositories",
    "slug": "GITHUB_SET_INTERACTION_RESTRICTIONS_FOR_YOUR_PUBLIC_REPOSITORIES",
    "input_parameters": {
      "description": "Request schema for configuring interaction restrictions on the user's public repositories.",
      "properties": {
        "expiry": {
          "description": "Specifies the duration of the interaction restriction; API defaults to `one_day` if not provided.",
          "enum": ["one_day", "three_days", "one_week", "one_month", "six_months"],
          "examples": ["one_day", "three_days", "one_week", "one_month", "six_months"],
          "title": "Expiry",
          "type": "string"
        },
        "limit": {
          "description": "Specifies the type of GitHub user that can comment, open issues, or create pull requests in your public repositories while the interaction limit is in effect.",
          "enum": ["existing_users", "contributors_only", "collaborators_only"],
          "examples": ["existing_users", "contributors_only", "collaborators_only"],
          "title": "Limit",
          "type": "string"
        }
      },
      "required": ["limit"],
      "title": "SetInteractionRestrictionsForYourPublicRepositoriesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the details of the newly set interaction restriction, such as the 'limit' type, 'origin' of the restriction (e.g., 'user'), and its 'expires_at' timestamp.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SetInteractionRestrictionsForYourPublicRepositoriesResponseWrapper",
      "type": "object"
    },
    "description": "Sets or updates temporary interaction restrictions for all public repositories owned by the authenticated user, overriding any repository-specific limits.",
    "tags": ["destructiveHint", "idempotentHint", "interactions", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Set labels for an issue",
    "slug": "GITHUB_SET_LABELS_FOR_AN_ISSUE",
    "input_parameters": {
      "description": "Request schema for `SetLabelsForAnIssue`, detailing parameters to set or replace labels on a GitHub issue.",
      "properties": {
        "issue_number": {
          "description": "The number that identifies the issue within the repository.",
          "examples": ["1347", "101"],
          "title": "Issue Number",
          "type": "integer"
        },
        "labels": {
          "description": "A list of label names to apply to the issue. This replaces all existing labels on the issue. Providing an empty list will remove all labels from the issue.",
          "examples": [["bug", "enhancement"], ["documentation", "help wanted"], []],
          "items": { "properties": {}, "type": "string" },
          "title": "Labels",
          "type": "array"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "examples": ["Hello-World", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "issue_number", "labels"],
      "title": "SetLabelsForAnIssueRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The raw response from the GitHub API. Typically, this is a list of label objects representing the labels applied to the issue.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SetLabelsForAnIssueResponseWrapper",
      "type": "object"
    },
    "description": "Replaces all existing labels on a github issue with a new set of labels.",
    "tags": ["destructiveHint", "issues", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Set allowed actions and workflows for an organization",
    "slug": "GITHUB_SET_ORG_ALLOWED_ACTIONS",
    "input_parameters": {
      "description": "Request schema for `SetAllowedActionsAndReusableWorkflowsForAnOrganization`",
      "properties": {
        "github_owned_allowed": {
          "description": "Whether GitHub-owned actions (e.g., from the `actions` organization) are allowed.",
          "examples": ["true", "false"],
          "title": "Github Owned Allowed",
          "type": "boolean"
        },
        "org": {
          "description": "The name of the organization. This name is not case-sensitive.",
          "examples": ["my-organization", "github"],
          "title": "Org",
          "type": "string"
        },
        "patterns_allowed": {
          "description": "String-matching patterns for allowed actions/workflows from public repositories (e.g., `monalisa/octocat@*`, `monalisa/*`); supports wildcards, tags, SHAs.",
          "examples": [
            "monalisa/octocat@*",
            "your-org/repository-name@v1.0.0",
            "actions/checkout@main"
          ],
          "items": { "properties": {}, "type": "string" },
          "title": "Patterns Allowed",
          "type": "array"
        },
        "verified_allowed": {
          "description": "Whether actions from GitHub Marketplace verified creators are allowed.",
          "examples": ["true", "false"],
          "title": "Verified Allowed",
          "type": "boolean"
        }
      },
      "required": ["org"],
      "title": "SetAllowedActionsAndReusableWorkflowsForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The API response data. For this action, a successful update typically results in a 204 No Content HTTP status, meaning this dictionary may be empty or not applicable in such cases.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SetAllowedActionsAndReusableWorkflowsForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Sets the github actions permissions for an existing organization, specifying allowed github-owned actions, verified creator actions, and action/workflow patterns from public repositories.",
    "tags": ["actions", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Set custom labels for a self-hosted runner for an organization",
    "slug": "GITHUB_SET_ORG_RUNNER_LABELS",
    "input_parameters": {
      "description": "Request schema for `SetCustomLabelsForASelfHostedRunnerForAnOrganization`",
      "properties": {
        "labels": {
          "description": "A list of custom label names to set for the runner. This replaces all existing custom labels. Provide an empty list to remove all custom labels from the runner.",
          "examples": [["gpu", "linux", "x64"], []],
          "items": { "properties": {}, "type": "string" },
          "title": "Labels",
          "type": "array"
        },
        "org": {
          "description": "The name of the organization. This name is not case-sensitive.",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "examples": [123],
          "title": "Runner Id",
          "type": "integer"
        }
      },
      "required": ["org", "runner_id", "labels"],
      "title": "SetCustomLabelsForASelfHostedRunnerForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the details of the updated labels for the self-hosted runner. This typically includes 'total_count' (the total number of labels applied to the runner) and 'labels' (a list of label objects, each detailing a label's 'id', 'name', and 'type').",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SetCustomLabelsForASelfHostedRunnerForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Sets the custom labels for a self-hosted runner in an organization; this operation does not affect default system-assigned labels (e.g., 'self-hosted', 'linux', 'x64').",
    "tags": ["actions", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Set primary email visibility",
    "slug": "GITHUB_SET_PRIMARY_EMAIL_VISIBILITY_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request to set the visibility for the authenticated user's primary email address.",
      "properties": {
        "visibility": {
          "description": "Desired visibility for the authenticated user's primary email. Use 'public' to make the email visible on the user's profile, or 'private' to hide it.",
          "enum": ["public", "private"],
          "examples": ["public", "private"],
          "title": "Visibility",
          "type": "string"
        }
      },
      "required": ["visibility"],
      "title": "SetPrimaryEmailVisibilityForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A list of all email addresses associated with the authenticated user. Each entry details the email address, its primary status (true/false), verification status (true/false), and current visibility ('public' or 'private').",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SetPrimaryEmailVisibilityForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Sets the visibility ('public' or 'private') of the authenticated user's primary email address on github, if one is configured.",
    "tags": ["idempotentHint", "openWorldHint", "users", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Set repo allowed actions",
    "slug": "GITHUB_SET_REPO_ALLOWED_ACTIONS",
    "input_parameters": {
      "description": "Request schema for `SetAllowedActionsAndReusableWorkflowsForARepository`",
      "properties": {
        "github_owned_allowed": {
          "description": "Determines if GitHub-owned actions (e.g., from the `actions` organization) are allowed.",
          "title": "Github Owned Allowed",
          "type": "boolean"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "patterns_allowed": {
          "description": "String-matching patterns (wildcards, tags, SHAs allowed) for specific actions/workflows; **Note**: Only applies to public repositories.",
          "examples": [
            "monalisa/octocat@*",
            "monalisa/octocat@v2",
            "monalisa/*",
            "actions/checkout@v3",
            "your-org/your-repo/.github/workflows/main.yml@refs/heads/main"
          ],
          "items": { "properties": {}, "type": "string" },
          "title": "Patterns Allowed",
          "type": "array"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case-sensitive.",
          "examples": ["hello-world", "my-actions-repo"],
          "title": "Repo",
          "type": "string"
        },
        "verified_allowed": {
          "description": "Determines if actions from GitHub Marketplace verified creators are allowed.",
          "title": "Verified Allowed",
          "type": "boolean"
        }
      },
      "required": ["owner", "repo"],
      "title": "SetAllowedActionsAndReusableWorkflowsForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SetAllowedActionsAndReusableWorkflowsForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Sets allowed github actions and reusable workflows for a repository, managing permissions for github-owned, verified creator, or specific pattern-matched actions/workflows (note: `patterns allowed` applies only to public repositories).",
    "tags": ["actions", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Set selected repositories for an organization secret",
    "slug": "GITHUB_SET_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_SECRET",
    "input_parameters": {
      "description": "Request schema for `SetSelectedRepositoriesForAnOrganizationSecret`",
      "properties": {
        "org": {
          "description": "The name of the GitHub organization. This name is not case-sensitive.",
          "examples": ["github", "my-company-org"],
          "title": "Org",
          "type": "string"
        },
        "secret_name": {
          "description": "The name of the organization secret whose repository access list is being updated.",
          "examples": ["CI_TOKEN", "NPM_AUTH_TOKEN"],
          "title": "Secret Name",
          "type": "string"
        },
        "selected_repository_ids": {
          "description": "An array of unique integer IDs for repositories that will be granted access to the organization secret. Use dedicated actions to add or remove individual repositories without replacing the entire list.",
          "examples": ["[1296269, 1296270]", "[789012]", "[]"],
          "items": { "properties": {}, "type": "integer" },
          "title": "Selected Repository Ids",
          "type": "array"
        }
      },
      "required": ["org", "secret_name", "selected_repository_ids"],
      "title": "SetSelectedRepositoriesForAnOrganizationSecretRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary that would contain response data. However, for this specific operation (setting selected repositories), a successful request typically returns an HTTP 204 No Content status with an empty body. Therefore, this dictionary is expected to be empty on success.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SetSelectedRepositoriesForAnOrganizationSecretResponseWrapper",
      "type": "object"
    },
    "description": "Replaces the list of repositories that can access an organization secret; only effective if the secret's visibility is 'selected'.",
    "tags": ["actions", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Set selected repositories for an organization variable",
    "slug": "GITHUB_SET_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_VARIABLE",
    "input_parameters": {
      "description": "Request schema for `SetSelectedRepositoriesForAnOrganizationVariable`",
      "properties": {
        "name": {
          "description": "The name of the organization variable for which to set repository access.",
          "examples": ["CI_ENVIRONMENT_SECRET", "DEPLOY_API_KEY"],
          "title": "Name",
          "type": "string"
        },
        "org": {
          "description": "The slug or name of the GitHub organization. This value is not case-sensitive.",
          "examples": ["my-github-org", "OctoCorp"],
          "title": "Org",
          "type": "string"
        },
        "selected_repository_ids": {
          "description": "A list of unique integer identifiers for the repositories that can access the organization variable. This list will replace any current selection of repositories. An empty list will remove access for all repositories.",
          "examples": ["[12345, 67890, 101112]", "[98765]"],
          "items": { "properties": {}, "type": "integer" },
          "title": "Selected Repository Ids",
          "type": "array"
        }
      },
      "required": ["org", "name", "selected_repository_ids"],
      "title": "SetSelectedRepositoriesForAnOrganizationVariableRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty dictionary. This endpoint typically returns a 204 No Content response upon successful execution, indicating no response body.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["successful"],
      "title": "SetSelectedRepositoriesForAnOrganizationVariableResponseWrapper",
      "type": "object"
    },
    "description": "Replaces the list of repositories that can access an organization-level variable; the variable's visibility must be 'selected'.",
    "tags": ["actions", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Set selected repositories for a user secret",
    "slug": "GITHUB_SET_SELECTED_REPOSITORIES_FOR_A_USER_SECRET",
    "input_parameters": {
      "description": "Request schema for `SetSelectedRepositoriesForAUserSecret`",
      "properties": {
        "secret_name": {
          "description": "The name of the Codespaces secret for which to set repository access. This secret must already exist for the authenticated user.",
          "examples": ["PERSONAL_API_TOKEN", "AWS_SECRET_KEY"],
          "title": "Secret Name",
          "type": "string"
        },
        "selected_repository_ids": {
          "description": "A list of repository IDs to which the secret will be granted access. This list completely replaces any existing set of repositories for the secret. Each repository ID must correspond to a repository accessible by the authenticated user.",
          "examples": ["[1296269, 1530601]", "[987654, 1234567]"],
          "items": { "properties": {}, "type": "integer" },
          "title": "Selected Repository Ids",
          "type": "array"
        }
      },
      "required": ["secret_name", "selected_repository_ids"],
      "title": "SetSelectedRepositoriesForAUserSecretRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SetSelectedRepositoriesForAUserSecretResponseWrapper",
      "type": "object"
    },
    "description": "Defines the list of repositories permitted to access a specific codespaces secret for the authenticated user.",
    "tags": ["codespaces", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Set status check contexts",
    "slug": "GITHUB_SET_STATUS_CHECK_CONTEXTS",
    "input_parameters": {
      "description": "Parameters to set or overwrite the required status check contexts for a protected branch.",
      "properties": {
        "branch": {
          "description": "The name of the branch for which to set status check contexts; cannot contain wildcard characters.",
          "examples": ["main"],
          "title": "Branch",
          "type": "string"
        },
        "contexts": {
          "description": "Names of the status checks to require; an empty array removes all required status checks.",
          "examples": [["continuous-integration/jenkins", "security/snyk"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Contexts",
          "type": "array"
        },
        "owner": {
          "description": "The account owner (username or organization) of the repository; not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension; not case sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch", "contexts"],
      "title": "SetStatusCheckContextsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "description": "Names of status check contexts successfully set or updated for the branch.",
          "items": { "properties": {}, "type": "string" },
          "title": "Data",
          "type": "array"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SetStatusCheckContextsResponseWrapper",
      "type": "object"
    },
    "description": "Replaces required status check contexts for a protected branch, requiring admin permissions; an empty `contexts` array removes all checks.",
    "tags": ["idempotentHint", "openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Set team access restrictions",
    "slug": "GITHUB_SET_TEAM_ACCESS_RESTRICTIONS",
    "input_parameters": {
      "description": "Request schema for configuring team access restrictions on a protected branch.",
      "properties": {
        "branch": {
          "description": "The name of the branch to apply restrictions to. Wildcard characters are not supported for this field. For wildcard branch protection, please use the GraphQL API.",
          "examples": ["main"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "SetTeamAccessRestrictionsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A list of team objects granted push access to the protected branch, each including details like team ID, slug, name, and permissions.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SetTeamAccessRestrictionsResponseWrapper",
      "type": "object"
    },
    "description": "Sets team push access for a protected branch by replacing all current teams with a new list of valid team slugs (provided in the request body); an empty list of slugs removes all team restrictions.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Set user access restrictions",
    "slug": "GITHUB_SET_USER_ACCESS_RESTRICTIONS",
    "input_parameters": {
      "description": "Defines the path parameters for setting user access restrictions.",
      "properties": {
        "branch": {
          "description": "Branch name for applying restrictions; wildcards are not permitted via this endpoint (use GraphQL API for wildcard support).",
          "examples": ["main", "develop"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "Username of the account owning the repository (case-insensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (case-insensitive).",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "SetUserAccessRestrictionsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response, typically including a list of user objects with push access to the protected branch after the update.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SetUserAccessRestrictionsResponseWrapper",
      "type": "object"
    },
    "description": "Replaces the list of users with push access to a protected branch using a request body (not in this schema) containing an array of github usernames; this enables branch protection if not already active.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Set workflow access level outside repository",
    "slug": "GITHUB_SET_WORKFLOW_EXTERNAL_ACCESS",
    "input_parameters": {
      "description": "Parameters for setting a repository's workflow access level.",
      "properties": {
        "access_level": {
          "description": "Specifies the level of access workflows outside this repository have to its actions and reusable workflows.\n- `none`: Actions and reusable workflows are accessible only from workflows within this repository.\n- `user`: Actions and reusable workflows can be shared with other private repositories owned by the same user.\n- `organization`: Actions and reusable workflows can be shared with other repositories within the same organization.",
          "enum": ["none", "user", "organization"],
          "examples": ["none", "user", "organization"],
          "title": "Access Level",
          "type": "string"
        },
        "owner": {
          "description": "Owner's username or organization name. Not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Repository name, without `.git` extension. Not case-sensitive.",
          "examples": ["hello-world", "linguist"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "access_level"],
      "title": "SetWorkflowAccessLevelRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response data. Often empty for successful PUT updates (indicated by a 204 HTTP status).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SetWorkflowAccessLevelResponseWrapper",
      "type": "object"
    },
    "description": "Sets the access level for workflows outside a repository to use actions and reusable workflows within that repository.",
    "tags": ["actions", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Start a codespace for the authenticated user",
    "slug": "GITHUB_START_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Defines the request structure for starting a GitHub Codespace for the authenticated user.",
      "properties": {
        "codespace_name": {
          "description": "The unique name of the codespace to be started. This is the identifier for the codespace, often system-generated or user-defined.",
          "examples": [
            "monalisa-glorious-github-template-x79j7wg6q62w7r",
            "my-dev-environment-123"
          ],
          "title": "Codespace Name",
          "type": "string"
        }
      },
      "required": ["codespace_name"],
      "title": "StartACodespaceForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Detailed representation of the codespace after the start operation, typically including its name, current state (e.g., 'Starting'), owner, associated Git repository, and machine configuration.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "StartACodespaceForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Initiates the startup process for an existing github codespace (identified by `codespace name`) if it's in a startable state like 'available' or 'stopped'.",
    "tags": ["codespaces", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Star a gist",
    "slug": "GITHUB_STAR_A_GIST",
    "input_parameters": {
      "description": "Request schema for `StarAGist`",
      "properties": {
        "gist_id": {
          "description": "The unique identifier of the gist. This ID is the string of characters found at the end of a gist's URL.",
          "examples": ["5555251", "a1b2c3d4e5f6a7b8"],
          "title": "Gist Id",
          "type": "string"
        }
      },
      "required": ["gist_id"],
      "title": "StarAGistRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response; typically empty as the GitHub API returns a 204 No Content status on successful starring.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "StarAGistResponseWrapper",
      "type": "object"
    },
    "description": "Stars a github gist identified by `gist id`; this action is idempotent and returns a 204 no content status upon success, even if the gist is already starred.",
    "tags": ["gists", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Star a repository for the authenticated user",
    "slug": "GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for starring a repository for the authenticated user.",
      "properties": {
        "owner": {
          "description": "The username of the account that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat", "torvalds"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["hello-world", "linux"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "StarARepositoryForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the API response data. Upon a successful star operation (HTTP 204 No Content), this field will typically be an empty dictionary or not populated.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "StarARepositoryForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Stars an existing and accessible repository for the authenticated user; this action is idempotent and succeeds even if the repository is already starred.",
    "tags": ["updateHint", "openWorldHint", "important", "Stars"]
  },
  {
    "available_versions": ["latest"],
    "name": "Stop a codespace for an organization user",
    "slug": "GITHUB_STOP_A_CODESPACE_FOR_AN_ORGANIZATION_USER",
    "input_parameters": {
      "description": "Request schema for `StopACodespaceForAnOrganizationUser`",
      "properties": {
        "codespace_name": {
          "description": "The unique name of the Codespace to be stopped (e.g., 'monalisa-project-x-g4v969xp96x2rxx6').",
          "examples": [
            "octocat-literate-space-parakeet-7gwrpvq7g7pcx979",
            "monalisa-project-x-g4v969xp96x2rxx6"
          ],
          "title": "Codespace Name",
          "type": "string"
        },
        "org": {
          "description": "The unique identifier for the GitHub organization. This name is not case sensitive.",
          "examples": ["github", "mercury-actions"],
          "title": "Org",
          "type": "string"
        },
        "username": {
          "description": "The GitHub username of the organization member whose Codespace is to be stopped.",
          "examples": ["octocat", "monalisa"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["org", "username", "codespace_name"],
      "title": "StopACodespaceForAnOrganizationUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "StopACodespaceForAnOrganizationUserResponseWrapper",
      "type": "object"
    },
    "description": "Stops a codespace, which must be currently running, for a specified member of an organization.",
    "tags": ["codespaces", "destructiveHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Stop a codespace for the authenticated user",
    "slug": "GITHUB_STOP_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Input to stop a specific GitHub Codespace for the authenticated user.",
      "properties": {
        "codespace_name": {
          "description": "The unique name of the Codespace to be stopped. This name is assigned by GitHub when the Codespace is created.",
          "examples": ["monalisa-glowing-space-zebra-j7pqx9g9h92x"],
          "title": "Codespace Name",
          "type": "string"
        }
      },
      "required": ["codespace_name"],
      "title": "StopACodespaceForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "StopACodespaceForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Stops a running or available codespace for the authenticated user, pausing its execution and billing.",
    "tags": ["codespaces", "destructiveHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Submit a review for a pull request",
    "slug": "GITHUB_SUBMIT_A_REVIEW_FOR_A_PULL_REQUEST",
    "input_parameters": {
      "description": "Parameters to submit a pending review for a pull request.",
      "properties": {
        "body": {
          "description": "The main textual content of the review. Highly recommended for `COMMENT` events to provide context; can also supplement `APPROVE` or `REQUEST_CHANGES` actions.",
          "examples": ["This looks great!", "Consider refactoring this part for clarity."],
          "title": "Body",
          "type": "string"
        },
        "event": {
          "description": "The review action: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. An invalid/omitted event will result in an HTTP 422 error and set the review state to `PENDING`, requiring a subsequent valid submission.",
          "enum": ["APPROVE", "REQUEST_CHANGES", "COMMENT"],
          "examples": ["APPROVE", "REQUEST_CHANGES", "COMMENT"],
          "title": "Event",
          "type": "string"
        },
        "owner": {
          "description": "The username of the account that owns the repository. Case-insensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "pull_number": {
          "description": "The number that uniquely identifies the pull request.",
          "examples": ["1347"],
          "title": "Pull Number",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. Case-insensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "review_id": {
          "description": "Identifier of the pending review to be submitted. Typically obtained when a review is first created or initiated.",
          "examples": ["80"],
          "title": "Review Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "pull_number", "review_id", "event"],
      "title": "SubmitAReviewForAPullRequestRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SubmitAReviewForAPullRequestResponseWrapper",
      "type": "object"
    },
    "description": "Finalizes a pending pull request review (identified by `review id`) with a required `event` (approve, request changes, comment) and an optional `body`.",
    "tags": ["openWorldHint", "pulls", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Sync a fork branch with the upstream repository",
    "slug": "GITHUB_SYNC_A_FORK_BRANCH_WITH_THE_UPSTREAM_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for synchronizing a fork branch with its upstream repository.",
      "properties": {
        "branch": {
          "description": "The name of the branch in the forked repository that should be updated to match the corresponding branch in the upstream repository.",
          "examples": ["main", "develop", "feature-branch"],
          "title": "Branch",
          "type": "string"
        },
        "owner": {
          "description": "The username or organization name of the account that owns the forked repository. This field is not case-sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the forked repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife", "my-forked-project"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "SyncAForkBranchWithTheUpstreamRepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details of the synchronization, typically including a success message, merge type, and base branch, or an error if issues occur.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SyncAForkBranchWithTheUpstreamRepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Synchronizes a branch in a forked github repository with its upstream counterpart, assuming the repository is a fork, the branch exists, an upstream is configured, and the merge is conflict-free.",
    "tags": ["destructiveHint", "openWorldHint", "repos"]
  },
  {
    "available_versions": ["latest"],
    "name": "Test the push repository webhook",
    "slug": "GITHUB_TEST_THE_PUSH_REPOSITORY_WEBHOOK",
    "input_parameters": {
      "description": "Request schema for `TestThePushRepositoryWebhook`",
      "properties": {
        "hook_id": {
          "description": "Unique identifier of the hook, found in the `X-GitHub-Hook-ID` header of a webhook delivery or by listing repository webhooks.",
          "examples": ["12345678"],
          "title": "Hook Id",
          "type": "integer"
        },
        "owner": {
          "description": "Account owner of the repository (not case-sensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (not case-sensitive).",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "hook_id"],
      "title": "TestThePushRepositoryWebhookRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response data; typically empty for this operation as a successful test results in a 204 No Content.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "TestThePushRepositoryWebhookResponseWrapper",
      "type": "object"
    },
    "description": "Triggers a simulated push event to test a repository's push webhook; a test event is only delivered if the webhook is subscribed to 'push' events, otherwise, it returns 204 no content without sending a post.",
    "tags": ["openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Transfer a repository",
    "slug": "GITHUB_TRANSFER_A_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for initiating the transfer of a GitHub repository to a new owner.",
      "properties": {
        "new_name": {
          "description": "Optional new name for the repository post-transfer; retains current name if unspecified.",
          "examples": ["my-transferred-repo"],
          "title": "New Name",
          "type": "string"
        },
        "new_owner": {
          "description": "Target username or organization name for the repository transfer.",
          "examples": ["new-organization"],
          "title": "New Owner",
          "type": "string"
        },
        "owner": {
          "description": "Current owner's username or organization name (case-insensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository to transfer, without `.git` (case-insensitive).",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        },
        "team_ids": {
          "description": "List of team IDs to add the repository to if `new_owner` is an organization; teams must belong to the `new_owner`.",
          "examples": ["[12345, 67890]"],
          "items": { "properties": {}, "type": "integer" },
          "title": "Team Ids",
          "type": "array"
        }
      },
      "required": ["owner", "repo", "new_owner"],
      "title": "TransferARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "TransferARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Initiates a repository transfer to a new owner (who must accept the request); if the new owner is an organization, it must be configured to allow transfers.",
    "tags": ["destructiveHint", "openWorldHint", "repos", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Unblock a user",
    "slug": "GITHUB_UNBLOCK_A_USER",
    "input_parameters": {
      "description": "Specifies the GitHub username of the user to unblock.",
      "properties": {
        "username": {
          "description": "The GitHub username (handle) of the user to unblock.",
          "examples": ["octocat", "gemini-coder"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["username"],
      "title": "UnblockAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary which is typically empty upon successful unblocking, as the GitHub API returns a '204 No Content' status in such cases. It may contain data in other scenarios or if an error response with a body is returned.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UnblockAUserResponseWrapper",
      "type": "object"
    },
    "description": "Unblocks a github user, provided they are currently blocked by the authenticated user.",
    "tags": ["destructiveHint", "openWorldHint", "users", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Unblock a user from an organization",
    "slug": "GITHUB_UNBLOCK_A_USER_FROM_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for `UnblockAUserFromAnOrganization`",
      "properties": {
        "org": {
          "description": "The name of the organization. This is case-insensitive.",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "username": {
          "description": "The GitHub username of the user to unblock.",
          "examples": ["octocat"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["org", "username"],
      "title": "UnblockAUserFromAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UnblockAUserFromAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Unblocks a user from an organization, allowing renewed interaction with its resources, provided the user is currently blocked (otherwise, a 404 error may occur).",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "orgs", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Unfollow a user",
    "slug": "GITHUB_UNFOLLOW_A_USER",
    "input_parameters": {
      "description": "Specifies the GitHub username of the user to unfollow.",
      "properties": {
        "username": {
          "description": "The GitHub username (handle) of the user whom the authenticated user wishes to unfollow.",
          "examples": ["octocat", "torvalds"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["username"],
      "title": "UnfollowAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary that is typically empty, as an HTTP 204 No Content status (successful unfollow) means no body content is returned.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UnfollowAUserResponseWrapper",
      "type": "object"
    },
    "description": "Unfollows an existing github user; this action is idempotent, succeeding even if the authenticated user is not currently following them.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "users", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Unlock an issue",
    "slug": "GITHUB_UNLOCK_AN_ISSUE",
    "input_parameters": {
      "description": "Request schema for `UnlockAnIssue` action, specifying the issue to be unlocked.",
      "properties": {
        "issue_number": {
          "description": "The number that uniquely identifies the issue within the repository.",
          "examples": ["42", "1500"],
          "title": "Issue Number",
          "type": "integer"
        },
        "owner": {
          "description": "The username (account) or organization name that owns the repository. This value is not case-sensitive.",
          "examples": ["octocat", "microsoft"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This value is not case-sensitive.",
          "examples": ["Hello-World", "vscode"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "issue_number"],
      "title": "UnlockAnIssueRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Contains the API response. For a successful unlock operation (HTTP 204 No Content), this is typically an empty dictionary.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UnlockAnIssueResponseWrapper",
      "type": "object"
    },
    "description": "Unlocks a currently locked github issue in the specified repository, allowing new comments and interactions.",
    "tags": ["destructiveHint", "issues", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Unlock an organization repository",
    "slug": "GITHUB_UNLOCK_AN_ORGANIZATION_REPOSITORY",
    "input_parameters": {
      "description": "Request schema for `UnlockAnOrganizationRepository`",
      "properties": {
        "migration_id": {
          "description": "The unique identifier of the migration for which the repository was locked.",
          "examples": ["12345", "67890"],
          "title": "Migration Id",
          "type": "integer"
        },
        "org": {
          "description": "The name of the GitHub organization. This name is not case-sensitive.",
          "examples": ["my-organization", "github"],
          "title": "Org",
          "type": "string"
        },
        "repo_name": {
          "description": "The name of the repository to unlock.",
          "examples": ["my-repository", "project-alpha"],
          "title": "Repo Name",
          "type": "string"
        }
      },
      "required": ["org", "migration_id", "repo_name"],
      "title": "UnlockAnOrganizationRepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UnlockAnOrganizationRepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Unlocks an organization repository previously locked by a github migration.",
    "tags": ["destructiveHint", "migrations", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Unlock a user repository",
    "slug": "GITHUB_UNLOCK_A_USER_REPOSITORY",
    "input_parameters": {
      "description": "Request model to specify the migration and repository for an unlock operation.",
      "properties": {
        "migration_id": {
          "description": "The unique identifier of the user migration.",
          "examples": ["12345", "67890"],
          "title": "Migration Id",
          "type": "integer"
        },
        "repo_name": {
          "description": "The name of the repository to unlock.",
          "examples": ["my-migrated-repo", "old-project-archive"],
          "title": "Repo Name",
          "type": "string"
        }
      },
      "required": ["migration_id", "repo_name"],
      "title": "UnlockAUserRepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UnlockAUserRepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Unlocks a repository (`repo name`) that was locked as part of a user migration (`migration id`), making it usable or deletable; this action requires the repository to be currently locked.",
    "tags": ["destructiveHint", "migrations", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Unstar a gist",
    "slug": "GITHUB_UNSTAR_A_GIST",
    "input_parameters": {
      "description": "Request to unstar a GitHub gist.",
      "properties": {
        "gist_id": {
          "description": "The unique identifier (ID) of the gist to be unstarred. This ID can be retrieved from API endpoints that list gists or from the gist's URL.",
          "examples": ["aa5a315d61ae9438b18d", "1", "0cb0082993736a52f85d453742d266a5"],
          "title": "Gist Id",
          "type": "string"
        }
      },
      "required": ["gist_id"],
      "title": "UnstarAGistRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UnstarAGistResponseWrapper",
      "type": "object"
    },
    "description": "Removes a star from the specified gist; the action is idempotent and will not error if the gist was not previously starred by the user.",
    "tags": ["destructiveHint", "gists", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Unstar a repository",
    "slug": "GITHUB_UNSTAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Specifies the repository to be unstarred by its owner and name.",
      "properties": {
        "owner": {
          "description": "Username of the repository owner (case-insensitive).",
          "examples": ["octocat", "torvalds"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension (case-insensitive).",
          "examples": ["Hello-World", "linux"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "UnstarARepositoryForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Response body; typically empty on successful unstar (HTTP 204 No Content).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UnstarARepositoryForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Removes the authenticated user's star from a specified repository, which must already be starred by the user.",
    "tags": ["activity", "destructiveHint", "idempotentHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update an environment variable",
    "slug": "GITHUB_UPDATE_AN_ENVIRONMENT_VARIABLE",
    "input_parameters": {
      "description": "Request schema for `UpdateAnEnvironmentVariable`",
      "properties": {
        "environment_name": {
          "description": "The name of the environment. The name must be URL encoded (e.g., replace slashes `/` with `%2F`).",
          "examples": ["production", "staging", "dev%2Ffeature-branch"],
          "title": "Environment Name",
          "type": "string"
        },
        "name": {
          "default": null,
          "description": "New name for the environment variable; if omitted, the name is not changed.",
          "examples": ["NEW_VARIABLE_NAME", "UPDATED_API_KEY_NAME"],
          "nullable": true,
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "examples": ["hello-world", "my-app-repository"],
          "title": "Repo",
          "type": "string"
        },
        "value": {
          "default": null,
          "description": "New value for the environment variable; if omitted, the value is not changed.",
          "examples": ["new_secure_value", "another_example_value123"],
          "nullable": true,
          "title": "Value",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "name", "environment_name"],
      "title": "UpdateAnEnvironmentVariableRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the details of the updated environment variable.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateAnEnvironmentVariableResponseWrapper",
      "type": "object"
    },
    "description": "Updates an existing environment variable's name and/or value in a specific github repository environment; requires providing either a new name or a new value.",
    "tags": ["actions", "updateHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update an existing project card",
    "slug": "GITHUB_UPDATE_AN_EXISTING_PROJECT_CARD",
    "input_parameters": {
      "description": "Request to update a project card's note content and/or archived status.",
      "properties": {
        "archived": {
          "description": "Archive status: `true` to archive, `false` to unarchive. If omitted, status remains unchanged.",
          "examples": ["true", "false"],
          "title": "Archived",
          "type": "boolean"
        },
        "card_id": {
          "description": "The unique identifier of the project card to be updated. This ID must correspond to an existing card.",
          "examples": ["12345", "67890"],
          "title": "Card Id",
          "type": "integer"
        },
        "note": {
          "description": "New note content (supports GitHub Flavored Markdown). Use empty string or `null` to clear. If omitted, note remains unchanged.",
          "examples": ["Updated note content.", "To be discussed in the next meeting.", ""],
          "title": "Note",
          "type": "string"
        }
      },
      "required": ["card_id"],
      "title": "UpdateAnExistingProjectCardRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The complete and updated representation of the project card.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateAnExistingProjectCardResponseWrapper",
      "type": "object"
    },
    "description": "Updates an existing project card's note and/or archived status, identified by its `card id`.",
    "tags": ["updateHint", "openWorldHint", "projects", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update an existing project column",
    "slug": "GITHUB_UPDATE_AN_EXISTING_PROJECT_COLUMN",
    "input_parameters": {
      "description": "Request schema for `UpdateAnExistingProjectColumn`",
      "properties": {
        "column_id": {
          "description": "The unique identifier of the project column to be updated.",
          "title": "Column Id",
          "type": "integer"
        },
        "name": {
          "description": "The new name for the project column.",
          "examples": ["Updated To Do", "In Progress (Revised)"],
          "title": "Name",
          "type": "string"
        }
      },
      "required": ["column_id", "name"],
      "title": "UpdateAnExistingProjectColumnRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the details of the updated project column, such as its ID, name, URL, project URL, cards URL, creation and update timestamps.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateAnExistingProjectColumnResponseWrapper",
      "type": "object"
    },
    "description": "Updates the name of an existing column, identified by `column id`, in a github project (classic).",
    "tags": ["updateHint", "openWorldHint", "projects", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update an issue",
    "slug": "GITHUB_UPDATE_AN_ISSUE",
    "input_parameters": {
      "description": "Updates attributes of an existing GitHub issue.",
      "properties": {
        "assignee": {
          "description": "DEPRECATED: Username to assign; use `assignees`. Send `null` to unassign, omit to leave unchanged.",
          "examples": ["octocat"],
          "title": "Assignee",
          "type": "string"
        },
        "assignees": {
          "description": "Replaces all existing assignees. Send `[]` to remove all; omit to leave unchanged. Requires push access for changes.",
          "examples": [["octocat", "hubot"], ["monalisa"], []],
          "items": { "properties": {}, "type": "string" },
          "title": "Assignees",
          "type": "array"
        },
        "body": {
          "description": "New issue body; send `null` to clear, omit to leave unchanged.",
          "examples": [
            "Updated details about the issue.",
            "Steps to reproduce:\n1. Do this\n2. Do that\nObserved behavior..."
          ],
          "title": "Body",
          "type": "string"
        },
        "issue_number": {
          "description": "Unique number identifying the issue.",
          "examples": ["1347", "42"],
          "title": "Issue Number",
          "type": "integer"
        },
        "labels": {
          "description": "Replaces all existing labels. Send `[]` to remove all; omit to leave unchanged. Requires push access for changes.",
          "examples": [["bug", "documentation"], ["enhancement"], []],
          "items": { "properties": {}, "type": "string" },
          "title": "Labels",
          "type": "array"
        },
        "milestone": {
          "description": "Milestone ID (as string) or title. Send `null` to clear; omit to leave unchanged. Numeric ID recommended.",
          "examples": ["1", "Q3 Sprint", "42"],
          "title": "Milestone",
          "type": "string"
        },
        "owner": {
          "description": "Owner of the repository (case-insensitive).",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension (case-insensitive).",
          "examples": ["Spoon-Knife", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        },
        "state": {
          "description": "New issue state; omit to leave unchanged.",
          "enum": ["open", "closed"],
          "title": "State",
          "type": "string"
        },
        "state_reason": {
          "description": "Reason for state change, considered only if `state` also changes. Valid reasons depend on the new `state`.",
          "enum": ["completed", "not_planned", "reopened"],
          "title": "State Reason",
          "type": "string"
        },
        "title": {
          "description": "New issue title; send `null` to clear, omit to leave unchanged.",
          "examples": ["New title for issue", "Bugfix: Solves critical problem X"],
          "title": "Title",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "issue_number"],
      "title": "UpdateAnIssueRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateAnIssueResponseWrapper",
      "type": "object"
    },
    "description": "Updates an existing github issue's title, body, state, milestone, labels, or assignees; `state reason` is only processed if `state` also changes, and use `null` or `[]` to clear applicable fields.",
    "tags": ["issues", "openWorldHint", "updateHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update an issue comment",
    "slug": "GITHUB_UPDATE_AN_ISSUE_COMMENT",
    "input_parameters": {
      "description": "Parameters to update an existing comment on a GitHub issue or pull request.",
      "properties": {
        "body": {
          "description": "New content for the issue comment (GitHub Flavored Markdown supported).",
          "examples": ["This is the updated comment body. :tada:"],
          "title": "Body",
          "type": "string"
        },
        "comment_id": {
          "description": "Unique ID of the issue comment to update.",
          "examples": [427300195],
          "title": "Comment Id",
          "type": "integer"
        },
        "owner": {
          "description": "Username of the account owning the repository (not case-sensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (not case-sensitive).",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "comment_id", "body"],
      "title": "UpdateAnIssueCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The updated issue comment object as returned by the GitHub API.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateAnIssueCommentResponseWrapper",
      "type": "object"
    },
    "description": "Updates an existing comment on an issue or pull request within a specified repository.",
    "tags": ["updateHint", "issues", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update an organization",
    "slug": "GITHUB_UPDATE_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for updating an organization's settings and properties.",
      "properties": {
        "advanced_security_enabled_for_new_repositories": {
          "description": "Automatically enable GitHub Advanced Security for new repositories.",
          "title": "Advanced Security Enabled For New Repositories",
          "type": "boolean"
        },
        "billing_email": {
          "description": "Billing email address (not publicly visible).",
          "examples": ["billing@example.com"],
          "title": "Billing Email",
          "type": "string"
        },
        "blog": {
          "description": "URL of the organization's blog.",
          "examples": ["https://github.blog"],
          "title": "Blog",
          "type": "string"
        },
        "company": {
          "description": "Company name.",
          "examples": ["GitHub Inc."],
          "title": "Company",
          "type": "string"
        },
        "default_repository_permission": {
          "default": "read",
          "description": "Default permission for members on organization repositories.",
          "enum": ["read", "write", "admin", "none"],
          "examples": ["read"],
          "title": "Default Repository Permission",
          "type": "string"
        },
        "dependabot_alerts_enabled_for_new_repositories": {
          "description": "Automatically enable Dependabot alerts for new repositories.",
          "title": "Dependabot Alerts Enabled For New Repositories",
          "type": "boolean"
        },
        "dependabot_security_updates_enabled_for_new_repositories": {
          "description": "Automatically enable Dependabot security updates for new repositories.",
          "title": "Dependabot Security Updates Enabled For New Repositories",
          "type": "boolean"
        },
        "dependency_graph_enabled_for_new_repositories": {
          "description": "Automatically enable dependency graph for new repositories.",
          "title": "Dependency Graph Enabled For New Repositories",
          "type": "boolean"
        },
        "description": {
          "description": "Short description.",
          "examples": ["The official GitHub organization."],
          "title": "Description",
          "type": "string"
        },
        "email": {
          "description": "Publicly visible email address.",
          "examples": ["octocat@github.com"],
          "title": "Email",
          "type": "string"
        },
        "has_organization_projects": {
          "description": "Whether organization-level projects can be used.",
          "title": "Has Organization Projects",
          "type": "boolean"
        },
        "has_repository_projects": {
          "description": "Whether repository-level projects can be used within the organization.",
          "title": "Has Repository Projects",
          "type": "boolean"
        },
        "location": {
          "description": "Geographical location.",
          "examples": ["San Francisco, CA"],
          "title": "Location",
          "type": "string"
        },
        "members_allowed_repository_creation_type": {
          "description": "Types of repositories non-admin members can create. `private` option only on GitHub Enterprise Cloud. Deprecated; overrides `members_can_create_repositories`.",
          "enum": ["all", "private", "none"],
          "examples": ["all"],
          "title": "Members Allowed Repository Creation Type",
          "type": "string"
        },
        "members_can_create_internal_repositories": {
          "description": "Whether members can create internal repositories. Only for organizations in an enterprise account.",
          "title": "Members Can Create Internal Repositories",
          "type": "boolean"
        },
        "members_can_create_pages": {
          "default": true,
          "description": "Whether members can create GitHub Pages sites. Does not affect existing sites.",
          "title": "Members Can Create Pages",
          "type": "boolean"
        },
        "members_can_create_private_pages": {
          "default": true,
          "description": "Whether members can create private GitHub Pages sites. Does not affect existing sites.",
          "title": "Members Can Create Private Pages",
          "type": "boolean"
        },
        "members_can_create_private_repositories": {
          "description": "Whether members can create private repositories.",
          "title": "Members Can Create Private Repositories",
          "type": "boolean"
        },
        "members_can_create_public_pages": {
          "default": true,
          "description": "Whether members can create public GitHub Pages sites. Does not affect existing sites.",
          "title": "Members Can Create Public Pages",
          "type": "boolean"
        },
        "members_can_create_public_repositories": {
          "description": "Whether members can create public repositories.",
          "title": "Members Can Create Public Repositories",
          "type": "boolean"
        },
        "members_can_create_repositories": {
          "default": true,
          "description": "Whether non-admin members can create repositories. Overridden by `members_allowed_repository_creation_type`.",
          "title": "Members Can Create Repositories",
          "type": "boolean"
        },
        "members_can_fork_private_repositories": {
          "default": false,
          "description": "Whether members can fork private repositories of the organization.",
          "title": "Members Can Fork Private Repositories",
          "type": "boolean"
        },
        "name": {
          "description": "Display name.",
          "examples": ["GitHub"],
          "title": "Name",
          "type": "string"
        },
        "org": {
          "description": "The organization's unique, case-insensitive identifier.",
          "examples": ["github"],
          "title": "Org",
          "type": "string"
        },
        "secret_scanning_enabled_for_new_repositories": {
          "description": "Automatically enable secret scanning for new repositories.",
          "title": "Secret Scanning Enabled For New Repositories",
          "type": "boolean"
        },
        "secret_scanning_push_protection_custom_link": {
          "description": "URL displayed if `secret_scanning_push_protection_custom_link_enabled` is true and a push is blocked.",
          "examples": ["https://example.com/internal-sec-docs"],
          "title": "Secret Scanning Push Protection Custom Link",
          "type": "string"
        },
        "secret_scanning_push_protection_custom_link_enabled": {
          "description": "Show custom link to contributors blocked by secret scanning push protection.",
          "title": "Secret Scanning Push Protection Custom Link Enabled",
          "type": "boolean"
        },
        "secret_scanning_push_protection_enabled_for_new_repositories": {
          "description": "Automatically enable secret scanning push protection for new repositories.",
          "title": "Secret Scanning Push Protection Enabled For New Repositories",
          "type": "boolean"
        },
        "twitter_username": {
          "description": "Twitter username.",
          "examples": ["github"],
          "title": "Twitter Username",
          "type": "string"
        },
        "web_commit_signoff_required": {
          "default": false,
          "description": "Whether web interface commits require sign-off.",
          "title": "Web Commit Signoff Required",
          "type": "boolean"
        }
      },
      "required": ["org"],
      "title": "UpdateAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Updates an organization's settings; changing security-related fields requires admin, owner, or security manager permissions.",
    "tags": ["updateHint", "openWorldHint", "orgs", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update an organization variable",
    "slug": "GITHUB_UPDATE_AN_ORGANIZATION_VARIABLE",
    "input_parameters": {
      "description": "Request model for updating an organization variable.",
      "properties": {
        "name": {
          "description": "The new name for the organization variable. If provided, the variable's name will be updated. If omitted, the name remains unchanged.",
          "examples": ["NEW_VARIABLE_NAME_PROD"],
          "title": "Name",
          "type": "string"
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "examples": ["my-github-organization"],
          "title": "Org",
          "type": "string"
        },
        "selected_repository_ids": {
          "description": "A list of repository integer IDs that should have access to the organization variable. This field is required and only used when `visibility` is set to `selected`. If omitted, the selection of repositories is not changed (unless `visibility` itself is changed away from `selected`).",
          "examples": ["[1296885, 1296886]", "[42, 100500]"],
          "items": { "properties": {}, "type": "integer" },
          "title": "Selected Repository Ids",
          "type": "array"
        },
        "value": {
          "description": "The new value for the organization variable. If omitted, the value remains unchanged.",
          "examples": ["new_secure_value_for_prod_env"],
          "title": "Value",
          "type": "string"
        },
        "visibility": {
          "description": "Specifies the new visibility of the organization variable. It determines which repositories in the organization can access this variable. `selected` visibility requires `selected_repository_ids` to be populated. If omitted, visibility is not changed.",
          "enum": ["all", "private", "selected"],
          "examples": ["all", "private", "selected"],
          "title": "Visibility",
          "type": "string"
        }
      },
      "required": ["org", "name"],
      "title": "UpdateAnOrganizationVariableRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "An empty dictionary is generally returned upon successful update, corresponding to a 204 No Content HTTP status from the API.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateAnOrganizationVariableResponseWrapper",
      "type": "object"
    },
    "description": "Updates an existing github actions organization variable's name, value, or visibility (`all`, `private`, `selected`), requiring `selected repository ids` with valid repository ids if visibility is `selected`.",
    "tags": ["actions", "updateHint", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update an organization webhook",
    "slug": "GITHUB_UPDATE_AN_ORGANIZATION_WEBHOOK",
    "input_parameters": {
      "description": "Request payload for updating an organization webhook. Only include fields that need to be modified.",
      "properties": {
        "active": {
          "default": true,
          "description": "Set to `true` to send notifications, or `false` to disable them.",
          "examples": ["true", "false"],
          "title": "Active",
          "type": "boolean"
        },
        "config__content__type": {
          "description": "Media type for serializing payloads (`json` or `form`). The API defaults to `form` if this field is not provided.",
          "examples": ["json", "form"],
          "title": "Config  Content  Type",
          "type": "string"
        },
        "config__insecure__ssl": {
          "description": "Controls SSL certificate verification for payload delivery. Set to '1' to skip verification (insecure), or '0' to enforce (API default). Use with caution.",
          "examples": ["0", "1"],
          "title": "Config  Insecure  Ssl",
          "type": "string"
        },
        "config__secret": {
          "description": "Secret key for HMAC digest to ensure payload integrity. Refer to GitHub documentation on delivery headers for details.",
          "examples": ["yoursupersecretstring"],
          "title": "Config  Secret",
          "type": "string"
        },
        "config__url": {
          "description": "Target URL for webhook payloads. Required if updating other `config` properties (e.g., `content_type`, `secret`), as GitHub mandates `url` when `config` is modified.",
          "examples": ["https://example.com/webhook"],
          "format": "uri",
          "title": "Config  Url",
          "type": "string"
        },
        "events": {
          "default": ["push"],
          "description": "List of events that trigger this webhook. Use `['*']` to subscribe to all events. See GitHub docs for available event types.",
          "examples": ["push", "issues", "pull_request", "*"],
          "items": { "properties": {}, "type": "string" },
          "title": "Events",
          "type": "array"
        },
        "hook_id": {
          "description": "The unique identifier of the webhook. This ID can be found in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "examples": ["123456789"],
          "title": "Hook Id",
          "type": "integer"
        },
        "name": {
          "description": "The new name for the webhook. If provided, updates the webhook's name. If omitted, the name remains unchanged.",
          "examples": ["My CI Webhook", "Notifications Hook"],
          "title": "Name",
          "type": "string"
        },
        "org": {
          "description": "The name of the organization. This value is not case-sensitive.",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        }
      },
      "required": ["org", "hook_id"],
      "title": "UpdateAnOrganizationWebhookRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateAnOrganizationWebhookResponseWrapper",
      "type": "object"
    },
    "description": "Updates the configuration (url, content type, secret, ssl verification), subscribed events, active status, or name of an existing webhook for a specified organization.",
    "tags": ["updateHint", "openWorldHint", "orgs", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update a check run",
    "slug": "GITHUB_UPDATE_A_CHECK_RUN",
    "input_parameters": {
      "description": "Request schema for `UpdateACheckRun`",
      "properties": {
        "actions": {
          "description": "User-triggerable actions (max 3), each with `label`, `identifier`, and `description`.",
          "items": { "additionalProperties": true, "properties": {}, "type": "object" },
          "title": "Actions",
          "type": "array"
        },
        "check_run_id": {
          "description": "The unique identifier of the check run.",
          "title": "Check Run Id",
          "type": "integer"
        },
        "completed_at": {
          "description": "Timestamp of when the check run completed (ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`).",
          "format": "date-time",
          "title": "Completed At",
          "type": "string"
        },
        "conclusion": {
          "description": "Final conclusion of the check. Required if `completed_at` is provided or `status` is `completed`. Providing `conclusion` sets `status` to `completed`. Users cannot set `stale`.",
          "enum": [
            "action_required",
            "cancelled",
            "failure",
            "neutral",
            "success",
            "skipped",
            "stale",
            "timed_out"
          ],
          "title": "Conclusion",
          "type": "string"
        },
        "details_url": {
          "description": "URL of the integrator's site with full check details.",
          "title": "Details Url",
          "type": "string"
        },
        "external_id": {
          "description": "Reference for the run on the integrator's system.",
          "title": "External Id",
          "type": "string"
        },
        "name": {
          "description": "Name of the check (e.g., \"code-coverage\").",
          "title": "Name",
          "type": "string"
        },
        "output__annotations": {
          "description": "Adds line-specific analysis information, visible in PRs. Max 50 per request (appended to existing). GitHub Actions: 10 warnings/10 errors per step.",
          "items": { "additionalProperties": true, "properties": {}, "type": "object" },
          "title": "Output  Annotations",
          "type": "array"
        },
        "output__images": {
          "description": "Images for the output, displayed in the GitHub PR UI.",
          "items": { "additionalProperties": true, "properties": {}, "type": "object" },
          "title": "Output  Images",
          "type": "array"
        },
        "output__summary": {
          "description": "Summary of the output, can contain Markdown. Required if the `output` object is provided.",
          "title": "Output  Summary",
          "type": "string"
        },
        "output__text": {
          "description": "Text for the output, can contain Markdown.",
          "title": "Output  Text",
          "type": "string"
        },
        "output__title": {
          "description": "Title for the output.",
          "title": "Output  Title",
          "type": "string"
        },
        "owner": {
          "description": "Account owner of the repository (not case sensitive).",
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Repository name without the `.git` extension (not case sensitive).",
          "title": "Repo",
          "type": "string"
        },
        "started_at": {
          "description": "Timestamp of when the check run started (ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`).",
          "format": "date-time",
          "title": "Started At",
          "type": "string"
        },
        "status": {
          "description": "Current status of the check run. Only GitHub Actions can set `waiting`, `pending`, or `requested`.",
          "enum": ["queued", "in_progress", "completed", "waiting", "requested", "pending"],
          "title": "Status",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "check_run_id"],
      "title": "UpdateACheckRunRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateACheckRunResponseWrapper",
      "type": "object"
    },
    "description": "Updates an existing check run for a specific commit in a repository, allowing modifications to its status, conclusion, output, and other details.",
    "tags": ["updateHint", "checks", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update a codespace for the authenticated user",
    "slug": "GITHUB_UPDATE_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for updating an existing codespace for the authenticated user.",
      "properties": {
        "codespace_name": {
          "description": "The unique name of the codespace to be updated (e.g., 'octocat-codespace-githu-org-name-abcdef12').",
          "examples": ["monalisa-project-x-f1g2h3j4"],
          "title": "Codespace Name",
          "type": "string"
        },
        "display_name": {
          "default": null,
          "description": "New display name for the codespace.",
          "examples": ["My Dev Environment", "Project X Codespace"],
          "nullable": true,
          "title": "Display Name",
          "type": "string"
        },
        "machine": {
          "default": null,
          "description": "Target machine type for the codespace; must be valid and available for the user or organization.",
          "examples": ["basicLinux", "standardLinux", "premiumLinux64gb"],
          "nullable": true,
          "title": "Machine",
          "type": "string"
        },
        "recent_folders": {
          "default": null,
          "description": "Up to three recently opened folder paths (e.g., '/workspaces/project/src') to suggest which folder to load upon opening.",
          "examples": [
            "['/workspaces/my-repo/src', '/workspaces/another-project']",
            "['/home/user/project-alpha']"
          ],
          "items": { "properties": {}, "type": "string" },
          "nullable": true,
          "title": "Recent Folders",
          "type": "array"
        }
      },
      "required": ["codespace_name"],
      "title": "UpdateACodespaceForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the updated codespace resource.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateACodespaceForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Updates an existing github codespace's machine type, display name, or recent folders for the authenticated user; machine type changes take effect on the next start.",
    "tags": ["updateHint", "codespaces", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update a code scanning alert",
    "slug": "GITHUB_UPDATE_A_CODE_SCANNING_ALERT",
    "input_parameters": {
      "description": "Request schema for `UpdateACodeScanningAlert`",
      "properties": {
        "alert_number": {
          "description": "The number that identifies an alert. Found in the alert's URL or the `number` field of the GET alerts API response.",
          "examples": [42],
          "title": "Alert Number",
          "type": "integer"
        },
        "dismissed_comment": {
          "description": "An optional comment to provide further context when dismissing an alert. Maximum 280 characters.",
          "examples": [
            "This vulnerability is mitigated by an external control.",
            "Accepted risk for this specific scenario."
          ],
          "title": "Dismissed Comment",
          "type": "string"
        },
        "dismissed_reason": {
          "description": "The reason for dismissing or closing the alert. **Required if `state` is 'dismissed'.**",
          "enum": ["None", "false positive", "won't fix", "used in tests"],
          "examples": ["false positive", "won't fix", "used in tests", "None"],
          "title": "Dismissed Reason",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "state": {
          "description": "The new state for the code scanning alert. Must be either 'open' or 'dismissed'. If 'dismissed', `dismissed_reason` is mandatory.",
          "enum": ["open", "dismissed"],
          "examples": ["open", "dismissed"],
          "title": "State",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "alert_number", "state"],
      "title": "UpdateACodeScanningAlertRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateACodeScanningAlertResponseWrapper",
      "type": "object"
    },
    "description": "Updates a specific code scanning alert in a github repository, primarily to change its state (e.g., 'open' or 'dismissed').",
    "tags": ["updateHint", "code-scanning", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update a code scanning default setup configuration",
    "slug": "GITHUB_UPDATE_A_CODE_SCANNING_DEFAULT_SETUP_CONFIGURATION",
    "input_parameters": {
      "description": "Request schema for `UpdateACodeScanningDefaultSetupConfiguration`",
      "properties": {
        "languages": {
          "description": "CodeQL languages for analysis; if omitted, all supported repository languages are analyzed.",
          "examples": [["javascript-typescript", "python"]],
          "items": {
            "enum": [
              "c-cpp",
              "csharp",
              "go",
              "java-kotlin",
              "javascript-typescript",
              "python",
              "ruby",
              "swift"
            ],
            "properties": {},
            "title": "LanguagesEnm",
            "type": "string"
          },
          "title": "Languages",
          "type": "array"
        },
        "owner": {
          "description": "Account owner of the repository (case-insensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "query_suite": {
          "description": "CodeQL query suite to be used ('default' for curated, 'extended' for comprehensive queries).",
          "enum": ["default", "extended"],
          "examples": ["default"],
          "title": "Query Suite",
          "type": "string"
        },
        "repo": {
          "description": "Repository name (case-insensitive, without `.git` extension).",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        },
        "state": {
          "description": "Specifies whether to enable ('configured') or disable ('not-configured') code scanning default setup.",
          "enum": ["configured", "not-configured"],
          "examples": ["configured"],
          "title": "State",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "UpdateACodeScanningDefaultSetupConfigurationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateACodeScanningDefaultSetupConfigurationResponseWrapper",
      "type": "object"
    },
    "description": "Updates the default setup configuration for code scanning in a repository; github advanced security must be enabled for the repository.",
    "tags": ["updateHint", "code-scanning", "openWorldHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update a commit comment",
    "slug": "GITHUB_UPDATE_A_COMMIT_COMMENT",
    "input_parameters": {
      "description": "Request schema for `UpdateACommitComment`",
      "properties": {
        "body": {
          "description": "The new content of the comment.",
          "examples": ["This is an updated comment body."],
          "title": "Body",
          "type": "string"
        },
        "comment_id": {
          "description": "The unique identifier of the comment.",
          "examples": [1],
          "title": "Comment Id",
          "type": "integer"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. ",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "comment_id", "body"],
      "title": "UpdateACommitCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateACommitCommentResponseWrapper",
      "type": "object"
    },
    "description": "Changes the body of an existing commit comment.",
    "tags": ["updateHint", "openWorldHint", "Comments", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update a custom organization role",
    "slug": "GITHUB_UPDATE_A_CUSTOM_ORGANIZATION_ROLE",
    "input_parameters": {
      "description": "Request schema for `UpdateACustomOrganizationRole`",
      "properties": {
        "description": {
          "description": "New short description for the role. Unchanged if omitted.",
          "examples": ["Manages billing and payment settings for the organization."],
          "title": "Description",
          "type": "string"
        },
        "name": {
          "description": "New name for the custom role. Unchanged if omitted.",
          "examples": ["Billing Manager"],
          "title": "Name",
          "type": "string"
        },
        "org": {
          "description": "The organization name (not case-sensitive).",
          "examples": ["my-org"],
          "title": "Org",
          "type": "string"
        },
        "permissions": {
          "description": "New list of GitHub organization permissions for the role, replacing existing ones. An empty list removes all permissions. Unchanged if omitted.",
          "examples": [["manage_billing", "manage_organization_settings"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Permissions",
          "type": "array"
        },
        "role_id": {
          "description": "Unique identifier of the custom organization role.",
          "examples": [123],
          "title": "Role Id",
          "type": "integer"
        }
      },
      "required": ["org", "role_id"],
      "title": "UpdateACustomOrganizationRoleRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the updated custom organization role.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateACustomOrganizationRoleResponseWrapper",
      "type": "object"
    },
    "description": "Updates an existing custom role in an organization by modifying its name, description, or permissions; at least one of these fields must be provided.",
    "tags": ["updateHint", "openWorldHint", "Organizations", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update a deployment branch policy",
    "slug": "GITHUB_UPDATE_A_DEPLOYMENT_BRANCH_POLICY",
    "input_parameters": {
      "description": "Parameters to update the name pattern of a deployment branch policy.",
      "properties": {
        "branch_policy_id": {
          "description": "The unique identifier of the deployment branch policy to be updated.",
          "examples": ["123", "456"],
          "title": "Branch Policy Id",
          "type": "integer"
        },
        "environment_name": {
          "description": "The name of the deployment environment. This name must be URL-encoded if it contains special characters such as slashes (e.g., replace `/` with `%2F`).",
          "examples": ["production", "staging%2Fasia", "develop"],
          "title": "Environment Name",
          "type": "string"
        },
        "name": {
          "description": "The new name pattern that branches must match to deploy to this environment. Wildcard characters (`*`) can be used but will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*/*`. For more information about pattern matching syntax, refer to the Ruby File.fnmatch documentation (https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).",
          "examples": ["main", "release/*", "feature/*/*", "fix/issue-*"],
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case-sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["hello-world", "linguist"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "environment_name", "branch_policy_id", "name"],
      "title": "UpdateADeploymentBranchPolicyRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the full representation of the updated deployment branch policy.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateADeploymentBranchPolicyResponseWrapper",
      "type": "object"
    },
    "description": "Updates the name pattern of an existing deployment branch policy for a specific environment in a repository.",
    "tags": ["updateHint", "openWorldHint", "Deployments", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update a discussion",
    "slug": "GITHUB_UPDATE_A_DISCUSSION",
    "input_parameters": {
      "description": "Request schema for updating a specific team discussion within an organization. At least one of 'title' or 'body' must be provided.",
      "properties": {
        "body": {
          "description": "The new body for the discussion.",
          "examples": ["Updated content for the discussion."],
          "title": "Body",
          "type": "string"
        },
        "discussion_number": {
          "description": "Identifier for the discussion.",
          "examples": [42],
          "title": "Discussion Number",
          "type": "integer"
        },
        "org": {
          "description": "The organization name (not case-sensitive).",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "examples": ["justice-league"],
          "title": "Team Slug",
          "type": "string"
        },
        "title": {
          "description": "The new title for the discussion.",
          "examples": ["New discussion title"],
          "title": "Title",
          "type": "string"
        }
      },
      "required": ["org", "team_slug", "discussion_number"],
      "title": "UpdateADiscussionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The updated team discussion object.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateADiscussionResponseWrapper",
      "type": "object"
    },
    "description": "Updates the title and/or body of a specific team discussion within an organization.",
    "tags": ["updateHint", "openWorldHint", "Discussions"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update a discussion comment",
    "slug": "GITHUB_UPDATE_A_DISCUSSION_COMMENT",
    "input_parameters": {
      "description": "Request schema for `UpdateADiscussionComment`",
      "properties": {
        "body": {
          "description": "The new body text for the discussion comment.",
          "examples": ["I disagree with this point, let's discuss further."],
          "title": "Body",
          "type": "string"
        },
        "comment_number": {
          "description": "The unique number identifying the comment within the discussion.",
          "examples": [12],
          "title": "Comment Number",
          "type": "integer"
        },
        "discussion_number": {
          "description": "The unique number identifying the discussion.",
          "examples": [42],
          "title": "Discussion Number",
          "type": "integer"
        },
        "org": {
          "description": "The name of the organization. This is not case sensitive.",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "team_slug": {
          "description": "The slug of the team name. This is the team name converted to lowercase with spaces replaced by hyphens (e.g., 'justice-league').",
          "examples": ["justice-league"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug", "discussion_number", "comment_number", "body"],
      "title": "UpdateADiscussionCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the updated discussion comment resource.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateADiscussionCommentResponseWrapper",
      "type": "object"
    },
    "description": "Updates the body of a comment in a team's discussion within an organization.",
    "tags": ["updateHint", "openWorldHint", "Discussions"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update a gist",
    "slug": "GITHUB_UPDATE_A_GIST",
    "input_parameters": {
      "description": "Request schema for `UpdateAGist`",
      "properties": {
        "description": {
          "description": "A new description for the gist.",
          "title": "Description",
          "type": "string"
        },
        "files": {
          "additionalProperties": { "additionalProperties": true, "type": "object" },
          "description": "Specifies changes to gist files. Keys are current filenames (e.g., `hello.py`). For each file: update `content`, assign a new `filename` to rename (or both). To delete a file, set its value to `null` or an object without `content` or `filename`. Files not mentioned are preserved.",
          "examples": [
            "{\"old_filename.txt\": {\"filename\": \"new_filename.txt\", \"content\": \"Updated content...\"}}",
            "{\"file_to_delete.md\": null}",
            "{\"original_name.py\": {\"content\": \"print('New code!')\"}}"
          ],
          "title": "Files",
          "type": "object"
        },
        "gist_id": {
          "description": "The unique identifier of the gist to be updated.",
          "title": "Gist Id",
          "type": "string"
        }
      },
      "required": ["gist_id"],
      "title": "UpdateAGistRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateAGistResponseWrapper",
      "type": "object"
    },
    "description": "Updates a gist's description, and/or its files (including content, filename changes, or deletion).",
    "tags": ["updateHint", "openWorldHint", "Gists", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update a gist comment",
    "slug": "GITHUB_UPDATE_A_GIST_COMMENT",
    "input_parameters": {
      "description": "Request schema for `UpdateAGistComment`",
      "properties": {
        "body": {
          "description": "The updated comment text.",
          "examples": ["This is the updated comment on the Gist."],
          "title": "Body",
          "type": "string"
        },
        "comment_id": {
          "description": "The unique identifier of the comment.",
          "examples": ["12345"],
          "title": "Comment Id",
          "type": "integer"
        },
        "gist_id": {
          "description": "The unique identifier of the gist. This can be found in the URL of the Gist.",
          "examples": ["5555251"],
          "title": "Gist Id",
          "type": "string"
        }
      },
      "required": ["gist_id", "comment_id", "body"],
      "title": "UpdateAGistCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateAGistCommentResponseWrapper",
      "type": "object"
    },
    "description": "Updates an existing comment on a specified gist.",
    "tags": ["updateHint", "openWorldHint", "Gists", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update a label",
    "slug": "GITHUB_UPDATE_A_LABEL",
    "input_parameters": {
      "description": "Request schema for `UpdateALabel`",
      "properties": {
        "color": {
          "description": "Hexadecimal color code for the label, without the leading '#' (e.g., 'f29513').",
          "examples": ["f29513"],
          "title": "Color",
          "type": "string"
        },
        "description": {
          "description": "Short description for the label (max 100 characters).",
          "examples": ["Improvements or new features"],
          "title": "Description",
          "type": "string"
        },
        "name": {
          "description": "Current name of the label to be updated; value is not case-sensitive.",
          "examples": ["bug"],
          "title": "Name",
          "type": "string"
        },
        "new_name": {
          "description": "New name for the label (not case-sensitive). Emoji can be added using native characters or colon-style markup (e.g., ':strawberry:'). Refer to GitHub's emoji cheat sheet for a full list of codes.",
          "examples": ["enhancement"],
          "title": "New Name",
          "type": "string"
        },
        "owner": {
          "description": "Account owner of the repository; value is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Name of the repository, without the .git extension; value is not case-sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "name"],
      "title": "UpdateALabelRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateALabelResponseWrapper",
      "type": "object"
    },
    "description": "Updates an existing label's name, color, or description within a specified repository.",
    "tags": ["updateHint", "openWorldHint", "Labels and Milestones"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update a milestone",
    "slug": "GITHUB_UPDATE_A_MILESTONE",
    "input_parameters": {
      "description": "Request schema for updating a milestone in a GitHub repository.",
      "properties": {
        "description": {
          "description": "A new description for the milestone. If not provided, the description will remain unchanged.",
          "examples": ["Tracking improvements for Q3"],
          "title": "Description",
          "type": "string"
        },
        "due_on": {
          "description": "The milestone due date in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. If not provided, the due date will remain unchanged. To remove the due date, pass an empty string or `null`.",
          "examples": ["2024-07-21T17:32:28Z", ""],
          "format": "date-time",
          "title": "Due On",
          "type": "string"
        },
        "milestone_number": {
          "description": "The unique number that identifies the milestone.",
          "examples": [42],
          "title": "Milestone Number",
          "type": "integer"
        },
        "owner": {
          "description": "The username of the account that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        },
        "state": {
          "default": "open",
          "description": "The new state of the milestone. If not provided, the state will remain unchanged. Defaults to 'open'.",
          "enum": ["open", "closed"],
          "examples": ["open", "closed"],
          "title": "State",
          "type": "string"
        },
        "title": {
          "description": "The new title for the milestone. If not provided, the title will remain unchanged.",
          "examples": ["v1.0 Release"],
          "title": "Title",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "milestone_number"],
      "title": "UpdateAMilestoneRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateAMilestoneResponseWrapper",
      "type": "object"
    },
    "description": "Updates a milestone in a repository, identified by `owner`, `repo`, and `milestone number`, by allowing modification of its `title`, `state`, `description`, or `due on`; at least one of these four attributes must be provided to perform an update.",
    "tags": ["updateHint", "openWorldHint", "Labels and Milestones"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update a project",
    "slug": "GITHUB_UPDATE_A_PROJECT",
    "input_parameters": {
      "description": "Request schema for `UpdateAProject`",
      "properties": {
        "body": {
          "description": "The new body or description for the project. If not provided, the body will not be changed.",
          "examples": [
            "This project tracks all tasks related to Q3 roadmap planning and execution."
          ],
          "title": "Body",
          "type": "string"
        },
        "name": {
          "description": "The new name for the project. If not provided, the name will not be changed.",
          "examples": ["Q3 Roadmap Planning"],
          "title": "Name",
          "type": "string"
        },
        "organization_permission": {
          "description": "The baseline permission for organization members on this project. If not provided, the permission will not be changed.",
          "enum": ["read", "write", "admin", "none"],
          "examples": ["read", "write", "admin", "none"],
          "title": "Organization Permission",
          "type": "string"
        },
        "private": {
          "description": "Sets the visibility of the project. `True` makes it private, `False` public. If not provided, the visibility will not be changed.",
          "examples": ["True", "False"],
          "title": "Private",
          "type": "boolean"
        },
        "project_id": {
          "description": "The unique identifier of the project to be updated.",
          "examples": ["102"],
          "title": "Project Id",
          "type": "integer"
        },
        "state": {
          "description": "The new state of the project, either 'open' or 'closed'. If not provided, the state will not be changed.",
          "examples": ["open", "closed"],
          "title": "State",
          "type": "string"
        }
      },
      "required": ["project_id"],
      "title": "UpdateAProjectRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the data of the updated project.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateAProjectResponseWrapper",
      "type": "object"
    },
    "description": "Updates an existing github project's attributes if the github projects feature is enabled and at least one modifiable field is provided.",
    "tags": ["updateHint", "openWorldHint", "Projects"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update a pull request",
    "slug": "GITHUB_UPDATE_A_PULL_REQUEST",
    "input_parameters": {
      "description": "Request schema for `UpdateAPullRequest`",
      "properties": {
        "base": {
          "default": null,
          "description": "The name of the branch to which you want your changes pulled. This must be an existing branch in the current repository. Cannot update the base branch to point to another repository. If None, the base branch remains unchanged.",
          "examples": ["main"],
          "nullable": true,
          "title": "Base",
          "type": "string"
        },
        "body": {
          "default": null,
          "description": "The new contents of the pull request. To remove the body, pass an empty string. If None, the body remains unchanged.",
          "examples": [
            "This PR updates the README.md to include details about the new /users endpoint."
          ],
          "nullable": true,
          "title": "Body",
          "type": "string"
        },
        "maintainer_can_modify": {
          "default": null,
          "description": "Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request. If None, this setting remains unchanged.",
          "examples": ["True", "False"],
          "nullable": true,
          "title": "Maintainer Can Modify",
          "type": "boolean"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "pull_number": {
          "description": "The unique number that identifies the pull request within the repository.",
          "examples": ["1347"],
          "title": "Pull Number",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "state": {
          "default": null,
          "description": "The new state of the pull request. Can be 'open' or 'closed'. If None, the state remains unchanged.",
          "enum": ["open", "closed"],
          "examples": ["open", "closed"],
          "nullable": true,
          "title": "StateEnm",
          "type": "string"
        },
        "title": {
          "default": null,
          "description": "The new title for the pull request. If None, the title remains unchanged.",
          "examples": ["Update documentation for new API endpoint"],
          "nullable": true,
          "title": "Title",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "pull_number"],
      "title": "UpdateAPullRequestRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the updated pull request with its full details.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateAPullRequestResponseWrapper",
      "type": "object"
    },
    "description": "Updates an existing pull request, allowing changes to attributes like title, body, state, base branch, and maintainer modification settings.",
    "tags": ["updateHint", "openWorldHint", "Pull Requests"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update a pull request branch",
    "slug": "GITHUB_UPDATE_A_PULL_REQUEST_BRANCH",
    "input_parameters": {
      "description": "Request schema for `UpdateAPullRequestBranch`",
      "properties": {
        "expected_head_sha": {
          "description": "SHA of the expected head commit of the pull request's branch. If this SHA does not match the actual head SHA, the request fails (422 error), ensuring the branch was not updated unexpectedly. If omitted, the API uses the current head SHA of the branch.",
          "examples": ["c4a9240090d896f576044579310296f11587f75e"],
          "title": "Expected Head Sha",
          "type": "string"
        },
        "owner": {
          "description": "Account owner of the repository (not case-sensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "pull_number": {
          "description": "Unique number identifying the pull request.",
          "examples": [1347],
          "title": "Pull Number",
          "type": "integer"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension (not case-sensitive).",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "pull_number"],
      "title": "UpdateAPullRequestBranchRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the response from the server, typically including a 'message' (e.g., 'Accepted for background processing') and a 'url' pointing to the pull request branch or the status of the update.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateAPullRequestBranchResponseWrapper",
      "type": "object"
    },
    "description": "Updates an open pull request's head branch by merging the latest changes from its base branch, if mergeable and repository merging is enabled; operates asynchronously.",
    "tags": ["updateHint", "openWorldHint", "Pull Requests", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update a reference",
    "slug": "GITHUB_UPDATE_A_REFERENCE",
    "input_parameters": {
      "description": "Request schema for `UpdateAReference`",
      "properties": {
        "force": {
          "default": false,
          "description": "If `true`, forces the update even if not a fast-forward. If `false`, only fast-forward updates are allowed, preventing data overwrites.",
          "title": "Force",
          "type": "boolean"
        },
        "owner": {
          "description": "Account owner of the repository (case-insensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "ref": {
          "description": "The fully qualified name of the Git reference to update (e.g., `refs/heads/main`, `refs/tags/v1.0.0`). It must start with `refs/` and contain at least two slashes.",
          "examples": ["refs/heads/main", "refs/tags/v1.0.0"],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "Repository name, excluding `.git` extension (case-insensitive).",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "sha": {
          "description": "SHA1 value of the commit to set this reference to; the commit must exist in the repository.",
          "examples": ["aa218f56b14c9653891f9e74264a383fa43fefbd"],
          "title": "Sha",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "ref", "sha"],
      "title": "UpdateAReferenceRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Details of the updated or created Git reference, including its `ref` name, `node_id`, API `url`, and commit object information.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateAReferenceResponseWrapper",
      "type": "object"
    },
    "description": "Updates a git reference (e.g., a branch or tag) to a specific commit sha, creating the reference if it doesn't exist; use `force` for non-fast-forward updates.",
    "tags": ["updateHint", "openWorldHint", "Repositories", "important"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update a release",
    "slug": "GITHUB_UPDATE_A_RELEASE",
    "input_parameters": {
      "description": "Request schema for `UpdateARelease`",
      "properties": {
        "body": {
          "description": "Text describing the contents of the release. Supports GitHub Flavored Markdown.",
          "examples": [
            "This release includes performance improvements and bug fixes related to user authentication."
          ],
          "title": "Body",
          "type": "string"
        },
        "discussion_category_name": {
          "description": "If specified, a discussion of this category is created and linked to the release. The category must already exist in the repository. This parameter is ignored if a discussion is already linked to the release. For more information, see \"[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).\"",
          "examples": ["Announcements", "Release Updates"],
          "title": "Discussion Category Name",
          "type": "string"
        },
        "draft": {
          "description": "Set to `true` to mark the release as a draft, or `false` to publish it. Default: `false`.",
          "examples": ["true", "false"],
          "title": "Draft",
          "type": "boolean"
        },
        "make_latest": {
          "default": "True",
          "description": "Specifies whether this release should be set as the latest release for the repository. Accepts 'true', 'false', or 'legacy'. Drafts and pre-releases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.",
          "enum": ["true", "false", "legacy"],
          "examples": ["true", "false", "legacy"],
          "title": "Make Latest",
          "type": "string"
        },
        "name": {
          "description": "The title of the release.",
          "examples": ["Version 1.0.1 Release Candidate"],
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "prerelease": {
          "description": "Set to `true` to identify the release as a pre-release, or `false` for a full release. Default: `false`.",
          "examples": ["true", "false"],
          "title": "Prerelease",
          "type": "boolean"
        },
        "release_id": {
          "description": "The unique identifier of the release to be updated.",
          "examples": ["12345678"],
          "title": "Release Id",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "tag_name": {
          "description": "The name of the tag. This can be an existing tag or a new tag name.",
          "examples": ["v1.0.1"],
          "title": "Tag Name",
          "type": "string"
        },
        "target_commitish": {
          "description": "Specifies the commitish value (e.g., branch name or commit SHA) that determines where the Git tag is created from. Can be any branch or commit SHA. This parameter is unused if the Git tag specified by `tag_name` already exists. Defaults to the repository's default branch if omitted.",
          "examples": ["main", "develop", "c0ff33a5c4790c3d09fba9c68c48617693891e71"],
          "title": "Target Commitish",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "release_id"],
      "title": "UpdateAReleaseRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateAReleaseResponseWrapper",
      "type": "object"
    },
    "description": "Updates an existing release in a github repository, allowing modification of its attributes; if linking a discussion, the `discussion category name` must refer to an existing category in the repository.",
    "tags": ["updateHint", "openWorldHint", "Repositories"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update a release asset",
    "slug": "GITHUB_UPDATE_A_RELEASE_ASSET",
    "input_parameters": {
      "description": "Parameters to identify and update a specific release asset.",
      "properties": {
        "asset_id": {
          "description": "The unique identifier of the release asset to be updated.",
          "examples": [12345],
          "title": "Asset Id",
          "type": "integer"
        },
        "label": {
          "description": "An alternate short description for the asset. This is used in place of the filename if provided, offering a more descriptive label.",
          "examples": ["Beta release for Windows (x64)"],
          "title": "Label",
          "type": "string"
        },
        "name": {
          "description": "The new file name for the asset. This updates the display name of the asset.",
          "examples": ["updated-firmware.bin"],
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "state": {
          "description": "The new state of the release asset. While the GitHub API documentation primarily shows 'state' in responses (e.g., 'uploaded'), this field allows attempting to update it. The effect and accepted values might be specific.",
          "examples": ["uploaded"],
          "title": "State",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "asset_id"],
      "title": "UpdateAReleaseAssetRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Comprehensive details of the updated release asset, reflecting applied changes.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateAReleaseAssetResponseWrapper",
      "type": "object"
    },
    "description": "Updates the name, label, or state of a release asset in a github repository, requiring at least one of these properties to be provided for modification.",
    "tags": ["updateHint", "openWorldHint", "Repositories", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update a repository",
    "slug": "GITHUB_UPDATE_A_REPOSITORY",
    "input_parameters": {
      "description": "Request to update settings of an existing GitHub repository.",
      "properties": {
        "allow_auto_merge": {
          "default": false,
          "description": "Enables auto-merge for pull requests.",
          "title": "Allow Auto Merge",
          "type": "boolean"
        },
        "allow_forking": {
          "default": false,
          "description": "Allows private forks of this repository.",
          "title": "Allow Forking",
          "type": "boolean"
        },
        "allow_merge_commit": {
          "default": true,
          "description": "Allows merging pull requests via merge commits.",
          "title": "Allow Merge Commit",
          "type": "boolean"
        },
        "allow_rebase_merge": {
          "default": true,
          "description": "Allows rebase-merging pull requests.",
          "title": "Allow Rebase Merge",
          "type": "boolean"
        },
        "allow_squash_merge": {
          "default": true,
          "description": "Allows squash-merging pull requests.",
          "title": "Allow Squash Merge",
          "type": "boolean"
        },
        "allow_update_branch": {
          "default": false,
          "description": "Allows updating a pull request's head branch from the base branch if not strictly required for merging.",
          "title": "Allow Update Branch",
          "type": "boolean"
        },
        "archived": {
          "default": false,
          "description": "Archives the repository (making it read-only) or unarchives it.",
          "title": "Archived",
          "type": "boolean"
        },
        "default_branch": {
          "description": "Name of the default branch.",
          "examples": ["main", "master", "develop"],
          "title": "Default Branch",
          "type": "string"
        },
        "delete_branch_on_merge": {
          "default": false,
          "description": "Automatically deletes head branches after merging pull requests.",
          "title": "Delete Branch On Merge",
          "type": "boolean"
        },
        "description": {
          "description": "Brief summary of the repository.",
          "examples": [
            "My updated project description.",
            "A library for advanced data processing."
          ],
          "title": "Description",
          "type": "string"
        },
        "has_issues": {
          "default": true,
          "description": "Enables GitHub Issues for this repository.",
          "title": "Has Issues",
          "type": "boolean"
        },
        "has_projects": {
          "default": true,
          "description": "Enables GitHub Projects. Note: Organization settings might override this and cause an error if projects are disabled organization-wide.",
          "title": "Has Projects",
          "type": "boolean"
        },
        "has_wiki": {
          "default": true,
          "description": "Enables the GitHub Wiki.",
          "title": "Has Wiki",
          "type": "boolean"
        },
        "homepage": {
          "description": "URL of the project's homepage.",
          "examples": ["https://example.com/my-project", "https://docs.my-library.dev"],
          "title": "Homepage",
          "type": "string"
        },
        "is_template": {
          "default": false,
          "description": "Designates this repository as a template repository.",
          "title": "Is Template",
          "type": "boolean"
        },
        "merge_commit_message": {
          "description": "Default message for merge commits: 'PR_BODY', 'PR_TITLE', or 'BLANK'.",
          "enum": ["PR_BODY", "PR_TITLE", "BLANK"],
          "examples": ["PR_BODY", "PR_TITLE", "BLANK"],
          "title": "Merge Commit Message",
          "type": "string"
        },
        "merge_commit_title": {
          "description": "Default title for merge commits: 'PR_TITLE' or 'MERGE_MESSAGE'.",
          "enum": ["PR_TITLE", "MERGE_MESSAGE"],
          "examples": ["PR_TITLE", "MERGE_MESSAGE"],
          "title": "Merge Commit Title",
          "type": "string"
        },
        "name": {
          "description": "New name for the repository (not case-sensitive).",
          "examples": ["new-repo-name", "updated-project-x"],
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "description": "Username or organization name of the repository owner (not case-sensitive).",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "private": {
          "default": false,
          "description": "Whether the repository is private. Note: Changing visibility might be restricted by organization policies, potentially causing a 422 error.",
          "title": "Private",
          "type": "boolean"
        },
        "repo": {
          "description": "Name of the repository, without the `.git` extension (not case-sensitive).",
          "examples": ["Hello-World", "my-awesome-project"],
          "title": "Repo",
          "type": "string"
        },
        "security__and__analysis__advanced__security__status": {
          "description": "Manages GitHub Advanced Security. Set to 'enabled' or 'disabled'.",
          "examples": ["enabled", "disabled"],
          "title": "Security  And  Analysis  Advanced  Security  Status",
          "type": "string"
        },
        "security__and__analysis__secret__scanning__push__protection__status": {
          "description": "Manages secret scanning push protection. Set to 'enabled' or 'disabled'.",
          "examples": ["enabled", "disabled"],
          "title": "Security  And  Analysis  Secret  Scanning  Push  Protection  Status",
          "type": "string"
        },
        "security__and__analysis__secret__scanning__status": {
          "description": "Manages secret scanning. Set to 'enabled' or 'disabled'.",
          "examples": ["enabled", "disabled"],
          "title": "Security  And  Analysis  Secret  Scanning  Status",
          "type": "string"
        },
        "squash_merge_commit_message": {
          "description": "Default message for squash merge commits: 'PR_BODY', 'COMMIT_MESSAGES', or 'BLANK'.",
          "enum": ["PR_BODY", "COMMIT_MESSAGES", "BLANK"],
          "examples": ["PR_BODY", "COMMIT_MESSAGES", "BLANK"],
          "title": "Squash Merge Commit Message",
          "type": "string"
        },
        "squash_merge_commit_title": {
          "description": "Default title for squash merge commits: 'PR_TITLE' or 'COMMIT_OR_PR_TITLE'.",
          "enum": ["PR_TITLE", "COMMIT_OR_PR_TITLE"],
          "examples": ["PR_TITLE", "COMMIT_OR_PR_TITLE"],
          "title": "Squash Merge Commit Title",
          "type": "string"
        },
        "use_squash_pr_title_as_default": {
          "default": false,
          "description": "DEPRECATED: Use `squash_merge_commit_title`. If true, squash merge commits use PR title; otherwise, commit message.",
          "title": "Use Squash Pr Title As Default",
          "type": "boolean"
        },
        "visibility": {
          "description": "Repository visibility.",
          "enum": ["public", "private"],
          "examples": ["public", "private"],
          "title": "Visibility",
          "type": "string"
        },
        "web_commit_signoff_required": {
          "default": false,
          "description": "Requires contributors to sign off on web-based commits.",
          "title": "Web Commit Signoff Required",
          "type": "boolean"
        }
      },
      "required": ["owner", "repo"],
      "title": "UpdateARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Updates settings for an existing github repository, such as name, description, visibility, merge strategies, and security configurations.",
    "tags": ["updateHint", "openWorldHint", "Repositories"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update a repository invitation",
    "slug": "GITHUB_UPDATE_A_REPOSITORY_INVITATION",
    "input_parameters": {
      "description": "Request schema for `UpdateARepositoryInvitation` action.",
      "properties": {
        "invitation_id": {
          "description": "The unique identifier of the repository invitation to be updated.",
          "examples": ["42"],
          "title": "Invitation Id",
          "type": "integer"
        },
        "owner": {
          "description": "The account owner of the repository (e.g., a username or organization name). This name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "permissions": {
          "description": "The new permissions to grant the invited user on the repository.",
          "enum": ["read", "write", "maintain", "triage", "admin"],
          "examples": ["read", "write", "admin"],
          "title": "Permissions",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case sensitive.",
          "examples": ["Spoon-Knife"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "invitation_id"],
      "title": "UpdateARepositoryInvitationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary representing the updated repository invitation object.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateARepositoryInvitationResponseWrapper",
      "type": "object"
    },
    "description": "Updates an active repository invitation to modify the invited user's permissions; the specified repository and invitation must exist.",
    "tags": ["updateHint", "openWorldHint", "Repositories", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update a repository ruleset",
    "slug": "GITHUB_UPDATE_A_REPOSITORY_RULESET",
    "input_parameters": {
      "description": "Request schema for `UpdateARepositoryRuleset`",
      "properties": {
        "bypass_actors": {
          "description": "Actors that can bypass ruleset. Each actor specifies `actor_id`, `actor_type` (`RepositoryRole`, `Team`, `Integration`, `OrganizationAdmin`), and `bypass_mode` (`always`, `pull_request`). Example: `[{'actor_id': 1, 'actor_type': 'RepositoryRole', 'bypass_mode': 'always'}]`.",
          "items": { "additionalProperties": true, "properties": {}, "type": "object" },
          "title": "Bypass Actors",
          "type": "array"
        },
        "conditions__ref__name__exclude": {
          "description": "Ref names or patterns (fnmatch-style globs) to exclude. The ruleset will not apply if any of these patterns match.",
          "examples": ["refs/heads/release/*", "refs/tags/v1.*"],
          "items": { "properties": {}, "type": "string" },
          "title": "Conditions  Ref  Name  Exclude",
          "type": "array"
        },
        "conditions__ref__name__include": {
          "description": "Ref names or patterns (fnmatch-style globs) to include for the ruleset to apply. `~DEFAULT_BRANCH` targets the default branch; `~ALL` targets all branches.",
          "examples": ["refs/heads/main", "~DEFAULT_BRANCH", "refs/heads/feature/*"],
          "items": { "properties": {}, "type": "string" },
          "title": "Conditions  Ref  Name  Include",
          "type": "array"
        },
        "enforcement": {
          "description": "Specifies the enforcement level: `disabled` (ruleset is ignored), `active` (ruleset is enforced), or `evaluate` (allows testing rules before enforcement - GitHub Enterprise only).",
          "enum": ["disabled", "active", "evaluate"],
          "examples": ["disabled", "active", "evaluate"],
          "title": "Enforcement",
          "type": "string"
        },
        "name": {
          "description": "The new name for the ruleset.",
          "examples": ["My Updated Ruleset"],
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. This name is not case sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "rules": {
          "description": "Rules to enforce. Each rule has a `type` and optional `parameters` (e.g., `{'type': 'creation'}` or `{'type': 'pull_request', 'parameters': {'required_approving_review_count': 2}}`). Refer to GitHub API documentation for available rule types and their parameters.",
          "items": { "additionalProperties": true, "properties": {}, "type": "object" },
          "title": "Rules",
          "type": "array"
        },
        "ruleset_id": {
          "description": "The unique identifier of the existing ruleset to be updated.",
          "examples": [123],
          "title": "Ruleset Id",
          "type": "integer"
        },
        "target": {
          "description": "The target of the ruleset (e.g., branch or tag).",
          "enum": ["branch", "tag"],
          "examples": ["branch", "tag"],
          "title": "Target",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "ruleset_id"],
      "title": "UpdateARepositoryRulesetRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The updated repository ruleset object.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateARepositoryRulesetResponseWrapper",
      "type": "object"
    },
    "description": "Updates an existing repository ruleset, identified by `ruleset id` for a given repository, allowing partial updates to its configuration such as name, target, enforcement, bypass actors, conditions, and rules.",
    "tags": ["updateHint", "openWorldHint", "Repositories", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update a repository variable",
    "slug": "GITHUB_UPDATE_A_REPOSITORY_VARIABLE",
    "input_parameters": {
      "description": "Request to update a GitHub Actions variable in a repository, optionally changing its name, value, or both.",
      "properties": {
        "name": {
          "description": "The new name for the Actions variable. If provided, renames the variable. Allows alphanumeric characters or underscores; case-insensitive.",
          "examples": ["NEW_VARIABLE_NAME", "UPDATED_DEPLOY_SERVER"],
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "description": "The current name of the Actions variable to update (path parameter); case-insensitive.",
          "examples": ["EXISTING_VARIABLE_NAME", "DEPLOY_SERVER_HOST"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension; case-insensitive.",
          "examples": ["hello-world", "my-project-repo"],
          "title": "Repo",
          "type": "string"
        },
        "value": {
          "description": "The new value for the Actions variable. If omitted, its current value is retained. An empty string clears the value.",
          "examples": ["new_secret_value_123", "prod.example.com", ""],
          "title": "Value",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "owner"],
      "title": "UpdateARepositoryVariableRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response data; typically empty for a successful variable update (HTTP 204 No Content).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["successful"],
      "title": "UpdateARepositoryVariableResponseWrapper",
      "type": "object"
    },
    "description": "Updates the name and/or value of an existing github actions variable in a repository.",
    "tags": ["updateHint", "openWorldHint", "Repositories", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update a repository webhook",
    "slug": "GITHUB_UPDATE_A_REPOSITORY_WEBHOOK",
    "input_parameters": {
      "description": "Request schema for `UpdateARepositoryWebhook`",
      "properties": {
        "active": {
          "default": true,
          "description": "Set `true` if active and sending notifications, `false` otherwise.",
          "title": "Active",
          "type": "boolean"
        },
        "add_events": {
          "description": "Events to add to current subscriptions.",
          "examples": [["commit_comment"], ["release"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Add Events",
          "type": "array"
        },
        "config__content__type": {
          "description": "Media type for serializing payloads ('json' or 'form').",
          "examples": ["json", "form"],
          "title": "Config  Content  Type",
          "type": "string"
        },
        "config__insecure__ssl": {
          "description": "Set to '1' to disable SSL verification (insecure), '0' to enable.",
          "examples": ["0", "1"],
          "title": "Config  Insecure  Ssl",
          "type": "string"
        },
        "config__secret": {
          "description": "Optional secret for HMAC digest of delivery signature headers (see GitHub docs).",
          "examples": ["mysecrettoken", "anotherSecureString123"],
          "title": "Config  Secret",
          "type": "string"
        },
        "config__url": {
          "description": "New URL for webhook payload delivery.",
          "examples": ["https://example.com/webhook", "https://my-service.com/github-events"],
          "format": "uri",
          "title": "Config  Url",
          "type": "string"
        },
        "events": {
          "default": ["push"],
          "description": "List of events to trigger the webhook, completely replacing existing ones (see GitHub webhook event payloads docs).",
          "examples": [["push", "pull_request"], ["issues"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Events",
          "type": "array"
        },
        "hook_id": {
          "description": "Unique identifier of the webhook (found in `X-GitHub-Hook-ID` header of a delivery).",
          "title": "Hook Id",
          "type": "integer"
        },
        "owner": {
          "description": "Username or organization name of the repository owner (not case-sensitive).",
          "examples": ["octocat", "my-organization"],
          "title": "Owner",
          "type": "string"
        },
        "remove_events": {
          "description": "Events to remove from current subscriptions.",
          "examples": [["fork"], ["watch"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Remove Events",
          "type": "array"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension (not case-sensitive).",
          "examples": ["Spoon-Knife", "my-awesome-repo"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "hook_id"],
      "title": "UpdateARepositoryWebhookRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Dictionary with the updated webhook's configuration.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateARepositoryWebhookResponseWrapper",
      "type": "object"
    },
    "description": "Updates the url, content type, secret, ssl verification, events, or active status for an existing repository webhook, specified by `owner`, `repo`, and `hook id`.",
    "tags": ["updateHint", "openWorldHint", "Webhooks"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update a review comment for a pull request",
    "slug": "GITHUB_UPDATE_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST",
    "input_parameters": {
      "description": "Request schema for updating a specific review comment on a pull request.",
      "properties": {
        "body": {
          "description": "The new text of the pull request review comment.",
          "examples": ["This is the updated review comment text."],
          "title": "Body",
          "type": "string"
        },
        "comment_id": {
          "description": "The unique identifier of the pull request review comment to be updated.",
          "examples": [101],
          "title": "Comment Id",
          "type": "integer"
        },
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "comment_id", "body"],
      "title": "UpdateAReviewCommentForAPullRequestRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the full representation of the updated pull request review comment.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateAReviewCommentForAPullRequestResponseWrapper",
      "type": "object"
    },
    "description": "Updates the body of an existing review comment on a pull request.",
    "tags": ["updateHint", "openWorldHint", "Pull Requests", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update a review for a pull request",
    "slug": "GITHUB_UPDATE_A_REVIEW_FOR_A_PULL_REQUEST",
    "input_parameters": {
      "description": "Request schema for `UpdateAReviewForAPullRequest`",
      "properties": {
        "body": {
          "description": "The new body text for the pull request review. This will replace the existing review body.",
          "examples": ["This is the updated review comment."],
          "title": "Body",
          "type": "string"
        },
        "owner": {
          "description": "The username of the account that owns the repository. This is case-insensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "pull_number": {
          "description": "The number that uniquely identifies the pull request within the repository.",
          "examples": ["42"],
          "title": "Pull Number",
          "type": "integer"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This is case-insensitive. ",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "review_id": {
          "description": "The unique identifier of the pull request review to be updated.",
          "examples": ["80"],
          "title": "Review Id",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "pull_number", "review_id", "body"],
      "title": "UpdateAReviewForAPullRequestRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the details of the updated pull request review.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateAReviewForAPullRequestResponseWrapper",
      "type": "object"
    },
    "description": "Updates the body text of an existing pull request review.",
    "tags": ["updateHint", "openWorldHint", "Pull Requests", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update a team",
    "slug": "GITHUB_UPDATE_A_TEAM",
    "input_parameters": {
      "description": "Parameters to update a team's settings in a GitHub organization.",
      "properties": {
        "description": {
          "description": "New team description; an empty string clears the existing description.",
          "examples": [
            "The Earth's Mightiest Heroes",
            "Responsible for all frontend development aspects of Project X"
          ],
          "title": "Description",
          "type": "string"
        },
        "name": {
          "description": "New display name for the team.",
          "examples": ["The Avengers", "Frontend Engineering"],
          "title": "Name",
          "type": "string"
        },
        "notification_setting": {
          "description": "The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact.\n  - `notifications_enabled`: Team members receive notifications when the team is @mentioned.\n  - `notifications_disabled`: No one receives notifications for team @mentions.",
          "enum": ["notifications_enabled", "notifications_disabled"],
          "title": "Notification Setting",
          "type": "string"
        },
        "org": {
          "description": "The organization's name (case-insensitive).",
          "examples": ["my-github-organization", "acme-corp"],
          "title": "Org",
          "type": "string"
        },
        "parent_team_id": {
          "default": null,
          "description": "The unique identifier (ID) of an existing team to set as this team's parent. This establishes a nested team structure. To remove an existing parent team relationship and make this a top-level team, explicitly pass `null` for this field (e.g., by setting this parameter to Python `None`). If this parameter is not provided in the request, the current parent team, if any, remains unchanged.",
          "examples": ["101", "202"],
          "nullable": true,
          "title": "Parent Team Id",
          "type": "integer"
        },
        "permission": {
          "default": "pull",
          "description": "**Deprecated**. Default permission (pull, push, or admin) for new repositories added to this team. This may be removed in future versions.",
          "enum": ["pull", "push", "admin"],
          "title": "Permission",
          "type": "string"
        },
        "privacy": {
          "description": "The desired privacy level for the team. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`.\n  - For a non-nested team:\n    - `secret`: Visible only to organization owners and members of this team.\n    - `closed`: Visible to all members of this organization.\n  - For a parent or child team:\n    - `closed`: Visible to all members of this organization.",
          "enum": ["secret", "closed"],
          "title": "Privacy",
          "type": "string"
        },
        "team_slug": {
          "description": "The team's unique slug identifier (typically URL-friendly version of team name).",
          "examples": ["justice-league", "backend-developers-team"],
          "title": "Team Slug",
          "type": "string"
        }
      },
      "required": ["org", "team_slug"],
      "title": "UpdateATeamRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The full, updated team object as returned by the GitHub API.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateATeamResponseWrapper",
      "type": "object"
    },
    "description": "Updates a team's settings (e.g., name, description, privacy, parent team) within a github organization, identified by its slug and organization name.",
    "tags": ["updateHint", "openWorldHint", "Teams"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update a webhook configuration for an organization",
    "slug": "GITHUB_UPDATE_A_WEBHOOK_CONFIGURATION_FOR_AN_ORGANIZATION",
    "input_parameters": {
      "description": "Request schema for `UpdateAWebhookConfigurationForAnOrganization`",
      "properties": {
        "content_type": {
          "description": "Media type for serializing payloads (`json` or `form`). Defaults to `form`.",
          "examples": ["json", "form"],
          "title": "Content Type",
          "type": "string"
        },
        "hook_id": {
          "description": "Unique identifier of the webhook (from `X-GitHub-Hook-ID` header of a delivery).",
          "examples": [123456789],
          "title": "Hook Id",
          "type": "integer"
        },
        "insecure_ssl": {
          "description": "Set to `1` to disable SSL certificate verification for the webhook URL, or `0` to enable. Defaults to `0`.",
          "examples": ["0", "1"],
          "title": "Insecure Ssl",
          "type": "string"
        },
        "org": {
          "description": "The organization name (not case-sensitive).",
          "examples": ["octo-org"],
          "title": "Org",
          "type": "string"
        },
        "secret": {
          "description": "Optional secret for HMAC hex digest in delivery signature headers.",
          "examples": ["yoursupersecrettoken"],
          "title": "Secret",
          "type": "string"
        },
        "url": {
          "description": "The URL to which the webhook payloads will be delivered.",
          "examples": ["https://example.com/webhook"],
          "format": "uri",
          "title": "Url",
          "type": "string"
        }
      },
      "required": ["org", "hook_id"],
      "title": "UpdateAWebhookConfigurationForAnOrganizationRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateAWebhookConfigurationForAnOrganizationResponseWrapper",
      "type": "object"
    },
    "description": "Updates the configuration (url, content type, secret, ssl verification) for an existing webhook within a specified organization.",
    "tags": ["updateHint", "openWorldHint", "Webhooks", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update a webhook configuration for a repository",
    "slug": "GITHUB_UPDATE_A_WEBHOOK_CONFIGURATION_FOR_A_REPOSITORY",
    "input_parameters": {
      "description": "Request to update a webhook's configuration for a repository.",
      "properties": {
        "content_type": {
          "description": "Media type for payload serialization (e.g., `json`, `form`). GitHub defaults to `form` if this field is not provided.",
          "examples": ["json", "form"],
          "title": "Content Type",
          "type": "string"
        },
        "hook_id": {
          "description": "Unique identifier of the webhook, typically found in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "examples": [123456789],
          "title": "Hook Id",
          "type": "integer"
        },
        "insecure_ssl": {
          "description": "Specifies SSL certificate verification: '0' for enabled (default behavior if omitted), '1' for disabled (not recommended).",
          "examples": ["0", "1"],
          "title": "Insecure Ssl",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository (not case-sensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension (not case-sensitive).",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "secret": {
          "description": "Optional secret for generating an HMAC hex digest of the payload, included in the `X-Hub-Signature-256` header to verify authenticity.",
          "examples": ["mysecretkey"],
          "title": "Secret",
          "type": "string"
        },
        "url": {
          "description": "The URL to which webhook payloads will be delivered.",
          "examples": ["https://example.com/webhook"],
          "format": "uri",
          "title": "Url",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "hook_id"],
      "title": "UpdateAWebhookConfigurationForARepositoryRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "The updated webhook configuration.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateAWebhookConfigurationForARepositoryResponseWrapper",
      "type": "object"
    },
    "description": "Updates the configuration (e.g., payload url, content type, secret, ssl verification) for an existing webhook in a specified repository.",
    "tags": ["updateHint", "openWorldHint", "Webhooks", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update branch protection",
    "slug": "GITHUB_UPDATE_BRANCH_PROTECTION",
    "input_parameters": {
      "description": "Defines the settings for branch protection rules.",
      "properties": {
        "allow_deletions": {
          "description": "Allows deletion of the protected branch.",
          "title": "Allow Deletions",
          "type": "boolean"
        },
        "allow_force_pushes": {
          "description": "Permits force pushes to the protected branch. Set to `True` to allow, `None`/`null` to block.",
          "title": "Allow Force Pushes",
          "type": "boolean"
        },
        "allow_fork_syncing": {
          "default": false,
          "description": "Allows users to pull upstream changes into their fork when the branch is locked.",
          "title": "Allow Fork Syncing",
          "type": "boolean"
        },
        "block_creations": {
          "description": "If `True`, push restrictions also apply to creating matching new branches, unless pusher has explicit push access.",
          "title": "Block Creations",
          "type": "boolean"
        },
        "branch": {
          "description": "Name of the branch to protect; wildcard characters are not allowed (use GraphQL API for wildcard support).",
          "examples": ["main"],
          "title": "Branch",
          "type": "string"
        },
        "enforce_admins": {
          "description": "Enforces configured restrictions for repository administrators. Set to `True` to enforce for admins, or `None`/`null` to disable.",
          "title": "Enforce Admins",
          "type": "boolean"
        },
        "lock_branch": {
          "default": false,
          "description": "If `True`, sets the branch to read-only, preventing pushes.",
          "title": "Lock Branch",
          "type": "boolean"
        },
        "owner": {
          "description": "The account owner of the repository (not case-sensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension (not case-sensitive).",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "required__pull__request__reviews__bypass__pull__request__allowances__apps": {
          "description": "App `slug`s allowed to bypass pull request requirements. Empty list removes all.",
          "examples": [["deployment-app", "trusted-ci-app"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Required  Pull  Request  Reviews  Bypass  Pull  Request  Allowances  Apps",
          "type": "array"
        },
        "required__pull__request__reviews__bypass__pull__request__allowances__teams": {
          "description": "Team `slug`s allowed to bypass pull request requirements. Empty list removes all.",
          "examples": [["super-admins", "release-engineering"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Required  Pull  Request  Reviews  Bypass  Pull  Request  Allowances  Teams",
          "type": "array"
        },
        "required__pull__request__reviews__bypass__pull__request__allowances__users": {
          "description": "User `login`s allowed to bypass pull request requirements. Empty list removes all.",
          "examples": [["admin-user", "deploy-bot"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Required  Pull  Request  Reviews  Bypass  Pull  Request  Allowances  Users",
          "type": "array"
        },
        "required__pull__request__reviews__dismiss__stale__reviews": {
          "description": "If `True`, new commits dismiss previous review approvals on a pull request branch.",
          "title": "Required  Pull  Request  Reviews  Dismiss  Stale  Reviews",
          "type": "boolean"
        },
        "required__pull__request__reviews__dismissal__restrictions__apps": {
          "description": "App `slug`s allowed to dismiss pull request reviews. Empty list removes all.",
          "examples": [["my-github-app", "code-analyzer-app"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Required  Pull  Request  Reviews  Dismissal  Restrictions  Apps",
          "type": "array"
        },
        "required__pull__request__reviews__dismissal__restrictions__teams": {
          "description": "Team `slug`s allowed to dismiss pull request reviews. Empty list removes all.",
          "examples": [["justice-league", "avengers"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Required  Pull  Request  Reviews  Dismissal  Restrictions  Teams",
          "type": "array"
        },
        "required__pull__request__reviews__dismissal__restrictions__users": {
          "description": "User `login`s allowed to dismiss pull request reviews. Empty list removes all.",
          "examples": [["octocat", "hubot"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Required  Pull  Request  Reviews  Dismissal  Restrictions  Users",
          "type": "array"
        },
        "required__pull__request__reviews__require__code__owner__reviews": {
          "description": "If `True`, pull requests affecting files with code owners must be reviewed by them.",
          "title": "Required  Pull  Request  Reviews  Require  Code  Owner  Reviews",
          "type": "boolean"
        },
        "required__pull__request__reviews__require__last__push__approval": {
          "default": false,
          "description": "If `True`, the most recent push must be approved by someone other than the pusher.",
          "title": "Required  Pull  Request  Reviews  Require  Last  Push  Approval",
          "type": "boolean"
        },
        "required__pull__request__reviews__required__approving__review__count": {
          "description": "Number of approving reviews (0-6) required to merge a pull request; 0 disables.",
          "examples": ["1", "2"],
          "title": "Required  Pull  Request  Reviews  Required  Approving  Review  Count",
          "type": "integer"
        },
        "required__status__checks__checks": {
          "description": "List of status checks required to merge. Each check object needs a `context` string and optionally an `app_id` integer.",
          "examples": [[{ "app_id": 12345, "context": "continuous-integration/jenkins" }]],
          "items": { "additionalProperties": true, "properties": {}, "type": "object" },
          "title": "Required  Status  Checks  Checks",
          "type": "array"
        },
        "required__status__checks__contexts": {
          "description": "**Deprecated**: List of status check contexts required to merge. If set by a GitHub App, future checks must come from that app. Use `checks` for finer control.",
          "examples": [["ci-test", "linter"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Required  Status  Checks  Contexts",
          "type": "array"
        },
        "required__status__checks__strict": {
          "description": "Require branches to be up to date with the base branch before merging; if `True`, merges are blocked if the head branch is behind the base branch.",
          "title": "Required  Status  Checks  Strict",
          "type": "boolean"
        },
        "required_conversation_resolution": {
          "description": "Requires all conversations on code to be resolved before merging a pull request.",
          "title": "Required Conversation Resolution",
          "type": "boolean"
        },
        "required_linear_history": {
          "description": "Enforces linear commit history by preventing merge commits. Repository must allow squash or rebase merging.",
          "title": "Required Linear History",
          "type": "boolean"
        },
        "restrictions__apps": {
          "description": "App `slug`s with push access. Cannot be used with `restrictions_users` or `restrictions_teams`. Empty list removes all.",
          "examples": [["github-actions", "codecov-app"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Restrictions  Apps",
          "type": "array"
        },
        "restrictions__teams": {
          "description": "Team `slug`s with push access. Cannot be used with `restrictions_apps` or `restrictions_users`. Empty list removes all.",
          "examples": [["core-developers", "qa-team"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Restrictions  Teams",
          "type": "array"
        },
        "restrictions__users": {
          "description": "User `login`s with push access. Cannot be used with `restrictions_apps` or `restrictions_teams`. Empty list removes all.",
          "examples": [["monalisa", "dependabot"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Restrictions  Users",
          "type": "array"
        }
      },
      "required": ["owner", "repo", "branch", "enforce_admins"],
      "title": "UpdateBranchProtectionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateBranchProtectionResponseWrapper",
      "type": "object"
    },
    "description": "Updates the protection settings for an existing branch in a repository, which must not contain wildcard characters.",
    "tags": ["updateHint", "openWorldHint", "Branch Protection", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update git lfs preference",
    "slug": "GITHUB_UPDATE_GIT_LFS_PREFERENCE",
    "input_parameters": {
      "properties": {
        "owner": {
          "description": "The username or organization name that owns the repository. This field is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This field is not case-sensitive.",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        },
        "use_lfs": {
          "description": "Specifies whether to store large files using Git LFS during the import. `opt_in` enables Git LFS, storing large files. `opt_out` disables Git LFS, removing large files during the import.",
          "enum": ["opt_in", "opt_out"],
          "examples": ["opt_in", "opt_out"],
          "title": "Use Lfs",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "use_lfs"],
      "title": "UpdateGitLfsPreferenceRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the details of the import project, reflecting the updated Git LFS preference and current import status. This includes information such as the VCS type, import URL, status, and LFS usage.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateGitLfsPreferenceResponseWrapper",
      "type": "object"
    },
    "description": "Sets the git large file storage (lfs) preference for a repository, typically before initiating a source import.",
    "tags": ["updateHint", "openWorldHint", "Git LFS", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update information about a github pages site",
    "slug": "GITHUB_UPDATE_INFORMATION_ABOUT_A_GITHUB_PAGES_SITE",
    "input_parameters": {
      "description": "Request schema for `UpdateInformationAboutAGithubPagesSite`",
      "properties": {
        "build_type": {
          "description": "The build process for the GitHub Pages site. Use 'workflow' if the site is built by a custom GitHub Actions workflow. Use 'legacy' if the site is built by GitHub when changes are pushed to a specific branch.",
          "enum": ["legacy", "workflow"],
          "examples": ["legacy", "workflow"],
          "title": "Build Type",
          "type": "string"
        },
        "cname": {
          "description": "Specify a custom domain for the GitHub Pages site. Sending a `null` or empty string will remove the custom domain. For more information, see GitHub's documentation on custom domains for Pages.",
          "examples": ["www.example.com", ""],
          "title": "Cname",
          "type": "string"
        },
        "https_enforced": {
          "description": "Specify whether HTTPS should be enforced for the GitHub Pages site. `True` enforces HTTPS, `False` does not.",
          "examples": [true],
          "title": "Https Enforced",
          "type": "boolean"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "source": {
          "description": "The publishing source for the GitHub Pages site. Specifies the branch and directory from which the site is built. 'gh-pages' uses the gh-pages branch. 'master' uses the master (or main) branch. 'master /docs' uses the /docs folder on the master (or main) branch. This parameter is ignored if `build_type` is 'workflow'.",
          "enum": ["gh-pages", "master", "master /docs"],
          "examples": ["gh-pages", "master /docs"],
          "title": "Source",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "UpdateInformationAboutAGithubPagesSiteRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateInformationAboutAGithubPagesSiteResponseWrapper",
      "type": "object"
    },
    "description": "Updates the configuration for a github pages site (e.g., custom domain, https, build type, source); requires github pages to be enabled for the repository, and if `build type` is 'workflow', a corresponding github actions workflow must be configured.",
    "tags": ["updateHint", "openWorldHint", "GitHub Pages", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update pull request review protection",
    "slug": "GITHUB_UPDATE_PULL_REQUEST_REVIEW_PROTECTION",
    "input_parameters": {
      "description": "Request schema for updating pull request review protection settings for a branch, including review requirements and bypass allowances.",
      "properties": {
        "branch": {
          "description": "Branch name for protection rules (no wildcards; use GraphQL API for wildcards).",
          "examples": ["main"],
          "title": "Branch",
          "type": "string"
        },
        "bypass__pull__request__allowances__apps": {
          "description": "App `slug`s allowed to bypass pull request requirements. Empty list removes allowances.",
          "examples": [["internal-ci-app", "deployment-bot"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Bypass  Pull  Request  Allowances  Apps",
          "type": "array"
        },
        "bypass__pull__request__allowances__teams": {
          "description": "Team `slug`s allowed to bypass pull request requirements. Empty list removes allowances.",
          "examples": [["super-admins", "bypass-team"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Bypass  Pull  Request  Allowances  Teams",
          "type": "array"
        },
        "bypass__pull__request__allowances__users": {
          "description": "User `login`s allowed to bypass pull request requirements. Empty list removes allowances.",
          "examples": [["monalisa", "admin-user"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Bypass  Pull  Request  Allowances  Users",
          "type": "array"
        },
        "dismiss_stale_reviews": {
          "description": "If `true`, new commits dismiss previous approving reviews; `false` keeps approvals valid.",
          "title": "Dismiss Stale Reviews",
          "type": "boolean"
        },
        "dismissal__restrictions__apps": {
          "description": "App `slug`s permitted to dismiss pull request reviews. Empty list removes restrictions.",
          "examples": [["dependabot-app", "codecov-app"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Dismissal  Restrictions  Apps",
          "type": "array"
        },
        "dismissal__restrictions__teams": {
          "description": "Team `slug`s permitted to dismiss pull request reviews. Empty list removes restrictions.",
          "examples": [["justice-league", "maintainers"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Dismissal  Restrictions  Teams",
          "type": "array"
        },
        "dismissal__restrictions__users": {
          "description": "User `login`s permitted to dismiss pull request reviews. Empty list removes restrictions.",
          "examples": [["octocat", "hubot"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Dismissal  Restrictions  Users",
          "type": "array"
        },
        "owner": {
          "description": "Account owner of the repository (case-insensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "Repository name, without the `.git` extension (case-insensitive).",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "require_code_owner_reviews": {
          "description": "If `true`, pull requests affecting files with code owners require their review. See [about code owners](https://docs.github.com/articles/about-code-owners/).",
          "title": "Require Code Owner Reviews",
          "type": "boolean"
        },
        "require_last_push_approval": {
          "default": false,
          "description": "If `true`, the most recent push requires approval by someone other than the pusher (GitHub Enterprise feature).",
          "title": "Require Last Push Approval",
          "type": "boolean"
        },
        "required_approving_review_count": {
          "description": "Number of approving reviews (1-6) required for merging; 0 to disable.",
          "title": "Required Approving Review Count",
          "type": "integer"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "UpdatePullRequestReviewProtectionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Dictionary representing the full updated branch protection rule, including pull request review settings.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdatePullRequestReviewProtectionResponseWrapper",
      "type": "object"
    },
    "description": "Updates pull request review protection settings (e.g., required approvals, review dismissal, bypass allowances) for a branch; branch protection features must be available for the repository.",
    "tags": ["updateHint", "openWorldHint", "Branch Protection", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update repository preferences for check suites",
    "slug": "GITHUB_UPDATE_REPOSITORY_PREFERENCES_FOR_CHECK_SUITES",
    "input_parameters": {
      "description": "Request schema for the `UpdateRepositoryPreferencesForCheckSuites` action. Specifies the repository and the check suite preferences to update.",
      "properties": {
        "auto_trigger_checks": {
          "description": "A list of preference objects for configuring automatic CheckSuite creation for specific GitHub Apps. Each object in the list must contain an `app_id` (integer: the ID of the GitHub App) and a `setting` (boolean: `true` to enable automatic triggers for that app on code push, `false` to disable). If this field is omitted in the request, the repository's existing `auto_trigger_checks` preferences are not modified by this specific update action.",
          "examples": [
            "[{\"app_id\": 12345, \"setting\": true}]",
            "[{\"app_id\": 54321, \"setting\": false}, {\"app_id\": 98765, \"setting\": true}]"
          ],
          "items": { "additionalProperties": true, "properties": {}, "type": "object" },
          "title": "Auto Trigger Checks",
          "type": "array"
        },
        "owner": {
          "description": "The account owner of the repository (e.g., username or organization). The name is not case sensitive.",
          "examples": ["octocat", "github"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. The name is not case sensitive.",
          "examples": ["Hello-World", "my-awesome-app"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo"],
      "title": "UpdateRepositoryPreferencesForCheckSuitesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the results of the update operation. This typically includes a `preferences` object with the updated `auto_trigger_checks` array, and a `repository` object detailing the repository for which preferences were set.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateRepositoryPreferencesForCheckSuitesResponseWrapper",
      "type": "object"
    },
    "description": "Updates repository preferences for automatic check suite creation on code pushes, allowing configuration for specific github apps that must be installed on the repository with `checks:write` permission.",
    "tags": ["updateHint", "openWorldHint", "Repositories", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update resource access with tokens",
    "slug": "GITHUB_UPDATE_RESOURCE_ACCESS_WITH_TOKENS",
    "input_parameters": {
      "description": "Request schema for `UpdateResourceAccessWithTokens`",
      "properties": {
        "action": {
          "description": "Operation to perform on the fine-grained personal access tokens, resulting in removal of their access.",
          "enum": ["revoke"],
          "examples": ["revoke"],
          "title": "Action",
          "type": "string"
        },
        "org": {
          "description": "Organization name (case-insensitive).",
          "examples": ["my-github-org", "AnotherOrg"],
          "title": "Org",
          "type": "string"
        },
        "pat_ids": {
          "description": "Fine-grained personal access token IDs for which access will be revoked.",
          "examples": ["123", "456", "789"],
          "items": { "properties": {}, "type": "integer" },
          "title": "Pat Ids",
          "type": "array"
        }
      },
      "required": ["org", "action", "pat_ids"],
      "title": "UpdateResourceAccessWithTokensRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "API response. May be empty on successful revocation (HTTP 204) or contain error diagnostics.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateResourceAccessWithTokensResponseWrapper",
      "type": "object"
    },
    "description": "Revokes organization access for the personal access tokens identified by `pat ids`; this action must be performed by a github app, and `pat ids` must be valid and associated with the organization.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "Tokens & Access", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update status check protection",
    "slug": "GITHUB_UPDATE_STATUS_CHECK_PROTECTION",
    "input_parameters": {
      "description": "Request schema for `UpdateStatusCheckProtection`",
      "properties": {
        "branch": {
          "description": "The name of the branch. Wildcard characters are not allowed. To use wildcard characters in branch names, please use the GraphQL API.",
          "examples": ["main"],
          "title": "Branch",
          "type": "string"
        },
        "checks": {
          "description": "A list of status checks to require in order to merge into this branch. Each check object should have a `context` (string) and an optional `app_id` (integer). Example: `[{\"context\": \"continuous-integration/jenkins\", \"app_id\": 12345}]`",
          "examples": [[{ "app_id": 12345, "context": "continuous-integration/jenkins" }]],
          "items": { "additionalProperties": true, "properties": {}, "type": "object" },
          "title": "Checks",
          "type": "array"
        },
        "contexts": {
          "description": "**Deprecated**: A list of status checks to require in order to merge into this branch. If any of these checks were recently set by a particular GitHub App, they will be required to come from that app in the future for the branch to merge. For more fine-grained control, use `checks` instead of `contexts`.",
          "examples": [["ci-test", "linter"]],
          "items": { "properties": {}, "type": "string" },
          "title": "Contexts",
          "type": "array"
        },
        "owner": {
          "description": "The account owner of the repository. This name is not case-sensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This name is not case-sensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "strict": {
          "description": "Specifies whether to require branches to be up to date before merging.",
          "examples": [true],
          "title": "Strict",
          "type": "boolean"
        }
      },
      "required": ["owner", "repo", "branch"],
      "title": "UpdateStatusCheckProtectionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateStatusCheckProtectionResponseWrapper",
      "type": "object"
    },
    "description": "Updates required status checks for a branch, optionally requiring it to be up-to-date before merging.",
    "tags": ["updateHint", "openWorldHint", "Branch Protection", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update the authenticated user",
    "slug": "GITHUB_UPDATE_THE_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for updating the authenticated user's profile information.",
      "properties": {
        "bio": {
          "description": "The new short biography for the user. Provide `null` to clear the existing bio.",
          "examples": ["Full-stack developer and open-source enthusiast."],
          "title": "Bio",
          "type": "string"
        },
        "blog": {
          "description": "The new URL for the user's blog. Provide `null` to clear the existing blog URL. For example, 'https://github.blog'.",
          "examples": ["https://github.blog"],
          "title": "Blog",
          "type": "string"
        },
        "company": {
          "description": "The new company affiliation for the user. Provide `null` to clear the existing company. For example, 'GitHub'.",
          "examples": ["GitHub"],
          "title": "Company",
          "type": "string"
        },
        "email": {
          "description": "The user's new publicly visible email address. This email must be verified on the user's GitHub account. If the provided email is not verified or not set to public, the update for this field might be ignored.",
          "examples": ["octocat@github.com"],
          "title": "Email",
          "type": "string"
        },
        "hireable": {
          "description": "Indicates whether the user is available for hire. Set to `true` if available, or `false` if not.",
          "examples": ["true", "false"],
          "title": "Hireable",
          "type": "boolean"
        },
        "location": {
          "description": "The new geographical location of the user. Provide `null` to clear the existing location. For example, 'San Francisco'.",
          "examples": ["San Francisco"],
          "title": "Location",
          "type": "string"
        },
        "name": {
          "description": "The new full name for the user. For example, 'Mona Lisa Octocat'.",
          "examples": ["Mona Lisa Octocat"],
          "title": "Name",
          "type": "string"
        },
        "twitter_username": {
          "description": "The user's new Twitter username (without the leading '@'). Provide `null` to clear the existing Twitter username. For example, 'github'.",
          "examples": ["github"],
          "title": "Twitter Username",
          "type": "string"
        }
      },
      "title": "UpdateTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Updates the authenticated user's github profile; a new public email must be verified, and existing private emails remain private even if specified.",
    "tags": ["updateHint", "openWorldHint", "Users", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update token org access",
    "slug": "GITHUB_UPDATE_TOKEN_ORG_ACCESS",
    "input_parameters": {
      "description": "Request schema for revoking a fine-grained personal access token's access to an organization.",
      "properties": {
        "action": {
          "description": "Specifies the 'revoke' action, which removes the token's access to the specified organization.",
          "enum": ["revoke"],
          "examples": ["revoke"],
          "title": "Action",
          "type": "string"
        },
        "org": {
          "description": "The name of the GitHub organization. This name is not case-sensitive.",
          "title": "Org",
          "type": "string"
        },
        "pat_id": {
          "description": "The unique identifier (ID) of the fine-grained personal access token.",
          "title": "Pat Id",
          "type": "integer"
        }
      },
      "required": ["org", "pat_id", "action"],
      "title": "UpdateTokenOrgAccessRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the response from the API. For a successful revocation (which typically returns an HTTP 204 No Content status), this dictionary is usually empty.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["successful"],
      "title": "UpdateTokenOrgAccessResponseWrapper",
      "type": "object"
    },
    "description": "Revokes a fine-grained personal access token's access to an organization, usable only by github apps when the token has existing access to that organization.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "Tokens & Access", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Upload an analysis as sarif data",
    "slug": "GITHUB_UPLOAD_AN_ANALYSIS_AS_SARIF_DATA",
    "input_parameters": {
      "description": "Request schema for `UploadAnAnalysisAsSarifData`",
      "properties": {
        "checkout_uri": {
          "description": "The base URI of the checkout directory as it appears in the SARIF file. This property is used to convert absolute file paths to relative paths, enabling alerts to be correctly mapped to their location in the repository.",
          "examples": ["file:///github/workspace/"],
          "format": "uri",
          "title": "Checkout Uri",
          "type": "string"
        },
        "commit_sha": {
          "description": "The SHA of the commit to which the analysis you are uploading relates. Must be a 40-character Git SHA.",
          "examples": ["7638417db6d59f3c431d3e1f261cc637155684cd"],
          "pattern": "^[0-9a-fA-F]+$",
          "title": "Commit Sha",
          "type": "string"
        },
        "owner": {
          "description": "The account owner of the repository. This is case-insensitive.",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "ref": {
          "description": "The full Git reference for the analysis, formatted as `refs/heads/<branch name>`, `refs/tags/<tag>`, `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.",
          "examples": ["refs/heads/main", "refs/tags/v1.0", "refs/pull/123/merge"],
          "pattern": "^refs/(heads|tags|pull)/.*$",
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repository, without the `.git` extension. This is case-insensitive.",
          "examples": ["Hello-World"],
          "title": "Repo",
          "type": "string"
        },
        "sarif": {
          "description": "A Base64 encoded string of a gzipped SARIF file. For more information, see '[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning)'.",
          "examples": ["eJzVst... (actual gzipped and Base64 encoded SARIF content)"],
          "title": "Sarif",
          "type": "string"
        },
        "started_at": {
          "description": "The timestamp indicating when the analysis run began, in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "examples": ["2023-01-15T10:30:00Z"],
          "format": "date-time",
          "title": "Started At",
          "type": "string"
        },
        "tool_name": {
          "description": "Name of the tool that generated the analysis. GitHub defaults this to \"API\" if omitted. A tool GUID in the SARIF can be used for filtering alerts.",
          "examples": ["MyCustomScanner"],
          "title": "Tool Name",
          "type": "string"
        },
        "validate": {
          "description": "Specifies whether the uploaded SARIF file should be validated against the code scanning specifications. This is useful for integrators to ensure their SARIF files are correctly processed and rendered by GitHub.",
          "title": "Validate",
          "type": "boolean"
        }
      },
      "required": ["owner", "repo", "commit_sha", "ref", "sarif"],
      "title": "UploadAnAnalysisAsSarifDataRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the response from the GitHub API. Upon successful upload, this typically includes an `id` for the SARIF analysis, which can be used to track its status or retrieve details later. It may also include an `url` to access the analysis.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UploadAnAnalysisAsSarifDataResponseWrapper",
      "type": "object"
    },
    "description": "Uploads a gzipped and base64 encoded sarif file to a github repository for a specific commit and reference; use `checkout uri` if sarif paths are absolute.",
    "tags": ["openWorldHint", "SARIF Data", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get the authenticated user",
    "slug": "GITHUB_USERS_GET_AUTHENTICATED",
    "input_parameters": {
      "description": "Request schema for `GetTheAuthenticatedUser`.",
      "properties": {},
      "title": "GetTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Authenticated user's profile information. Common fields include 'login', 'id', 'name', 'email'; contents vary by user settings.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "[deprecated] retrieves the authenticated user's information; use `get the authenticated user` instead.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "Get a user",
    "slug": "GITHUB_USERS_GET_BY_USERNAME",
    "input_parameters": {
      "description": "Request to retrieve a GitHub user's public profile information.",
      "properties": {
        "username": {
          "description": "The GitHub username (handle) of the user to retrieve. This is case-sensitive.",
          "examples": ["octocat", "torvalds", "defunkt"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["username"],
      "title": "GetAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A dictionary containing the public profile data for the specified GitHub user, as returned by the GitHub API. This includes various attributes such as login, ID, avatar URL, name, bio, location, public repository count, and more.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAUserResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: use the `getauser` action to retrieve a github user's public profile by username.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "Get contextual information for a user",
    "slug": "GITHUB_USERS_GET_CONTEXT_FOR_USER",
    "input_parameters": {
      "description": "Request to fetch contextual hovercard information for a GitHub user.",
      "properties": {
        "subject_id": {
          "description": "Entity ID for `subject_type` for more specific hovercard context; required if `subject_type` is also given.",
          "examples": ["12345", "org_id_abc"],
          "title": "Subject Id",
          "type": "string"
        },
        "subject_type": {
          "description": "Entity type for more specific hovercard context (e.g., 'repository'); required if `subject_id` is also given.",
          "enum": ["organization", "repository", "issue", "pull_request"],
          "examples": ["organization", "repository", "issue", "pull_request"],
          "title": "Subject Type",
          "type": "string"
        },
        "username": {
          "description": "GitHub username for whom to retrieve hovercard data.",
          "examples": ["octocat", "torvalds"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["username"],
      "title": "GetContextualInformationForAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetContextualInformationForAUserResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves contextual hovercard information for a github user. (deprecated: please use the `get contextual information for a user` action instead).",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "List followers of the authenticated user",
    "slug": "GITHUB_USERS_LIST_FOLLOWERS_FOR_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request model for listing followers of the authenticated user, allowing pagination.",
      "properties": {
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch.",
          "examples": ["1", "2", "10"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results per page (max 100).",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "title": "ListFollowersOfTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "A list of user objects, where each object contains follower information (e.g., `login`, `id`). Refer to GitHub API documentation for user object structure.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListFollowersOfTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: lists users following the authenticated github user; use `list followers of the authenticated user` instead.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "List public email addresses for the authenticated user",
    "slug": "GITHUB_USERS_LIST_PUBLIC_EMAILS_FOR_AUTHENTICATED_USER",
    "input_parameters": {
      "description": "Request schema for `ListPublicEmailAddressesForTheAuthenticatedUser`.",
      "properties": {
        "page": {
          "default": 1,
          "description": "Page number of the results to fetch.",
          "examples": ["1", "2", "5"],
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "Number of results to return per page. Maximum value is 100.",
          "examples": ["30", "50", "100"],
          "title": "Per Page",
          "type": "integer"
        }
      },
      "title": "ListPublicEmailAddressesForTheAuthenticatedUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": { "additionalProperties": true, "title": "Data", "type": "object" },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListPublicEmailAddressesForTheAuthenticatedUserResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: use `listpublicemailaddressesfortheauthenticateduser` instead; lists public email addresses for the authenticated user.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "List social accounts for a user",
    "slug": "GITHUB_USERS_LIST_SOCIAL_ACCOUNTS_FOR_USER",
    "input_parameters": {
      "description": "Input model for the `ListSocialAccountsForAUser` action, specifying the user and pagination parameters.",
      "properties": {
        "page": {
          "default": 1,
          "description": "The page number of the results to fetch when paginating. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "title": "Page",
          "type": "integer"
        },
        "per_page": {
          "default": 30,
          "description": "The number of social account results to return per page. Maximum is 100. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "title": "Per Page",
          "type": "integer"
        },
        "username": {
          "description": "The handle (username) of the GitHub user (e.g., 'octocat') for whom to list social media accounts.",
          "examples": ["octocat", "torvalds"],
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["username"],
      "title": "ListSocialAccountsForAUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "List of social account objects, each with 'provider' (e.g., 'linkedin', 'twitter') and 'url' (profile link).",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListSocialAccountsForAUserResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: lists social media accounts for an existing github user; use 'list social accounts for a user' instead.",
    "tags": []
  },
  {
    "available_versions": ["latest"],
    "name": "Verify dev container permissions accepted",
    "slug": "GITHUB_VERIFY_DEV_CONTAINER_PERMISSIONS_ACCEPTED",
    "input_parameters": {
      "description": "Request schema for `VerifyDevContainerPermissionsAccepted`",
      "properties": {
        "devcontainer_path": {
          "description": "Path to the `devcontainer.json` file in the repository.",
          "examples": [".devcontainer/devcontainer.json", "my_configs/devcontainer.json"],
          "title": "Devcontainer Path",
          "type": "string"
        },
        "owner": {
          "description": "Username of the repository owner (case-insensitive).",
          "examples": ["octocat"],
          "title": "Owner",
          "type": "string"
        },
        "ref": {
          "description": "Git reference (branch, tag, or commit SHA) for the devcontainer configuration.",
          "examples": ["main", "heads/feature-branch", "v2.1.0"],
          "title": "Ref",
          "type": "string"
        },
        "repo": {
          "description": "Repository name, without `.git` extension (case-insensitive).",
          "examples": ["hello-world"],
          "title": "Repo",
          "type": "string"
        }
      },
      "required": ["owner", "repo", "ref", "devcontainer_path"],
      "title": "VerifyDevContainerPermissionsAcceptedRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": true,
          "description": "Results of the permission check, including an 'accepted' status, and details about the devcontainer configuration and its required permissions.",
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "VerifyDevContainerPermissionsAcceptedResponseWrapper",
      "type": "object"
    },
    "description": "Verifies if the authenticated user has accepted permissions for a specific devcontainer configuration in a repository, typically to ensure awareness before a codespace is created or used.",
    "tags": ["codespaces", "openWorldHint", "readOnlyHint", "idempotentHint", "mcpIgnore"]
  },
  {
    "available_versions": ["latest"],
    "name": "Add file sharing preference",
    "slug": "GOOGLEDRIVE_ADD_FILE_SHARING_PREFERENCE",
    "input_parameters": {
      "properties": {
        "domain": {
          "default": null,
          "description": "Domain to grant permission to (e.g., 'example.com'). Required if 'type' is 'domain'.",
          "examples": ["example.com"],
          "nullable": true,
          "title": "Domain",
          "type": "string"
        },
        "email_address": {
          "default": null,
          "description": "Email address of the user or group. Required if 'type' is 'user' or 'group'.",
          "examples": ["user@example.com"],
          "nullable": true,
          "title": "Email Address",
          "type": "string"
        },
        "file_id": {
          "description": "Unique identifier of the file to update sharing settings for.",
          "examples": ["zcfwrt543rgrey5h5jh4wgefbf"],
          "title": "File Id",
          "type": "string"
        },
        "role": {
          "description": "Permission role to grant.",
          "examples": ["reader", "writer", "commenter"],
          "pattern": "^(owner|organizer|fileOrganizer|writer|commenter|reader)$",
          "title": "Role",
          "type": "string"
        },
        "type": {
          "description": "Type of grantee for the permission.",
          "examples": ["user", "group", "domain", "anyone"],
          "pattern": "^(user|group|domain|anyone)$",
          "title": "Type",
          "type": "string"
        }
      },
      "required": ["file_id", "role", "type"],
      "title": "AddFileSharingPreferenceRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "allowFileDiscovery": {
              "default": null,
              "description": "Whether the permission allows the file to be discovered through search.",
              "nullable": true,
              "title": "Allow File Discovery",
              "type": "boolean"
            },
            "deleted": {
              "default": null,
              "description": "Whether the account associated with this permission has been deleted.",
              "nullable": true,
              "title": "Deleted",
              "type": "boolean"
            },
            "displayName": {
              "default": null,
              "description": "The display name of the user or group to which this permission refers.",
              "nullable": true,
              "title": "Display Name",
              "type": "string"
            },
            "domain": {
              "default": null,
              "description": "The domain to which this permission refers.",
              "nullable": true,
              "title": "Domain",
              "type": "string"
            },
            "emailAddress": {
              "default": null,
              "description": "The email address of the user or group to which this permission refers.",
              "nullable": true,
              "title": "Email Address",
              "type": "string"
            },
            "expirationTime": {
              "default": null,
              "description": "The time at which this permission will expire (RFC 3339 date-time).",
              "nullable": true,
              "title": "Expiration Time",
              "type": "string"
            },
            "id": { "description": "The ID of the permission.", "title": "Id", "type": "string" },
            "kind": {
              "description": "Identifies what kind of resource this is. Value: 'drive#permission'.",
              "title": "Kind",
              "type": "string"
            },
            "permissionDetails": {
              "default": null,
              "description": "Details of the permission.",
              "items": {
                "properties": {
                  "inherited": {
                    "default": null,
                    "description": "Whether this permission is inherited.",
                    "nullable": true,
                    "title": "Inherited",
                    "type": "boolean"
                  },
                  "inheritedFrom": {
                    "default": null,
                    "description": "The ID of the item from which this permission is inherited.",
                    "nullable": true,
                    "title": "Inherited From",
                    "type": "string"
                  },
                  "permissionType": {
                    "default": null,
                    "description": "The type of the permission: 'user', 'group', 'domain', 'anyone'.",
                    "nullable": true,
                    "title": "Permission Type",
                    "type": "string"
                  },
                  "role": {
                    "default": null,
                    "description": "The role granted by this permission.",
                    "nullable": true,
                    "title": "Role",
                    "type": "string"
                  }
                },
                "title": "PermissionDetail",
                "type": "object"
              },
              "nullable": true,
              "title": "Permission Details",
              "type": "array"
            },
            "photoLink": {
              "default": null,
              "description": "A link to the user's profile photo, if available.",
              "nullable": true,
              "title": "Photo Link",
              "type": "string"
            },
            "role": {
              "description": "The role granted by this permission.",
              "title": "Role",
              "type": "string"
            },
            "teamDrivePermissionDetails": {
              "default": null,
              "description": "Details of whether the permissions on this Team Drive item are inherited or directly on this item.",
              "items": {
                "properties": {
                  "inherited": {
                    "default": null,
                    "description": "Whether this permission is inherited.",
                    "nullable": true,
                    "title": "Inherited",
                    "type": "boolean"
                  },
                  "inheritedFrom": {
                    "default": null,
                    "description": "The ID of the item from which this permission is inherited.",
                    "nullable": true,
                    "title": "Inherited From",
                    "type": "string"
                  },
                  "role": {
                    "default": null,
                    "description": "The role granted by this permission.",
                    "nullable": true,
                    "title": "Role",
                    "type": "string"
                  },
                  "teamDrivePermissionType": {
                    "default": null,
                    "description": "The type of the permission: 'file', 'member'.",
                    "nullable": true,
                    "title": "Team Drive Permission Type",
                    "type": "string"
                  }
                },
                "title": "TeamDrivePermissionDetail",
                "type": "object"
              },
              "nullable": true,
              "title": "Team Drive Permission Details",
              "type": "array"
            },
            "type": { "description": "The type of the grantee.", "title": "Type", "type": "string" }
          },
          "required": ["kind", "id", "type", "role"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "AddFileSharingPreferenceResponseWrapper",
      "type": "object"
    },
    "description": "Modifies sharing permissions for an existing google drive file, granting a specified role to a user, group, domain, or 'anyone'.",
    "tags": ["updateHint", "openWorldHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Copy file",
    "slug": "GOOGLEDRIVE_COPY_FILE",
    "input_parameters": {
      "properties": {
        "file_id": {
          "description": "The unique identifier for the file on Google Drive that you want to copy. This ID can be retrieved from the file's shareable link or via other Google Drive API calls.",
          "examples": ["1A2b3C4d5E6fG7h8I9j0KlMNOPqRstUVW", "0X1a2B3c4D5e6F7g8H9i0JkLmNoPqRsTu"],
          "title": "File Id",
          "type": "string"
        },
        "new_title": {
          "default": null,
          "description": "The title to assign to the new copy of the file. If not provided, the copied file will have the same title as the original, prefixed with 'Copy of '.",
          "examples": ["Copy of Quarterly Report", "Duplicate of Project Plan"],
          "nullable": true,
          "title": "New Title",
          "type": "string"
        }
      },
      "required": ["file_id"],
      "title": "CopyFileRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "appProperties": {
              "additionalProperties": { "type": "string" },
              "description": "A collection of arbitrary key-value pairs private to the requesting app.",
              "nullable": true,
              "title": "App Properties",
              "type": "object"
            },
            "capabilities": {
              "additionalProperties": false,
              "default": null,
              "description": "Output only. Capabilities the current user has on this file.",
              "nullable": true,
              "properties": {
                "canAcceptOwnership": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Accept Ownership",
                  "type": "boolean"
                },
                "canAddChildren": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Add Children",
                  "type": "boolean"
                },
                "canAddFolderFromAnotherDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Add Folder From Another Drive",
                  "type": "boolean"
                },
                "canAddMyDriveParent": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Add My Drive Parent",
                  "type": "boolean"
                },
                "canChangeCopyRequiresWriterPermission": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Change Copy Requires Writer Permission",
                  "type": "boolean"
                },
                "canChangeSecurityUpdateEnabled": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Change Security Update Enabled",
                  "type": "boolean"
                },
                "canChangeViewersCanCopyContent": {
                  "default": null,
                  "description": "Deprecated.",
                  "nullable": true,
                  "title": "Can Change Viewers Can Copy Content",
                  "type": "boolean"
                },
                "canComment": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Comment",
                  "type": "boolean"
                },
                "canCopy": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Copy",
                  "type": "boolean"
                },
                "canDelete": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Delete",
                  "type": "boolean"
                },
                "canDeleteChildren": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Delete Children",
                  "type": "boolean"
                },
                "canDisableInheritedPermissions": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Disable Inherited Permissions",
                  "type": "boolean"
                },
                "canDownload": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Download",
                  "type": "boolean"
                },
                "canEdit": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Edit",
                  "type": "boolean"
                },
                "canEnableInheritedPermissions": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Enable Inherited Permissions",
                  "type": "boolean"
                },
                "canListChildren": {
                  "default": null,
                  "nullable": true,
                  "title": "Can List Children",
                  "type": "boolean"
                },
                "canModifyContent": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Modify Content",
                  "type": "boolean"
                },
                "canModifyContentRestriction": {
                  "default": null,
                  "description": "Deprecated.",
                  "nullable": true,
                  "title": "Can Modify Content Restriction",
                  "type": "boolean"
                },
                "canModifyEditorContentRestriction": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Modify Editor Content Restriction",
                  "type": "boolean"
                },
                "canModifyLabels": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Modify Labels",
                  "type": "boolean"
                },
                "canModifyOwnerContentRestriction": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Modify Owner Content Restriction",
                  "type": "boolean"
                },
                "canMoveChildrenOutOfDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Move Children Out Of Drive",
                  "type": "boolean"
                },
                "canMoveChildrenOutOfTeamDrive": {
                  "default": null,
                  "description": "Deprecated.",
                  "nullable": true,
                  "title": "Can Move Children Out Of Team Drive",
                  "type": "boolean"
                },
                "canMoveChildrenWithinDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Move Children Within Drive",
                  "type": "boolean"
                },
                "canMoveChildrenWithinTeamDrive": {
                  "default": null,
                  "description": "Deprecated.",
                  "nullable": true,
                  "title": "Can Move Children Within Team Drive",
                  "type": "boolean"
                },
                "canMoveItemIntoTeamDrive": {
                  "default": null,
                  "description": "Deprecated.",
                  "nullable": true,
                  "title": "Can Move Item Into Team Drive",
                  "type": "boolean"
                },
                "canMoveItemOutOfDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Move Item Out Of Drive",
                  "type": "boolean"
                },
                "canMoveItemOutOfTeamDrive": {
                  "default": null,
                  "description": "Deprecated.",
                  "nullable": true,
                  "title": "Can Move Item Out Of Team Drive",
                  "type": "boolean"
                },
                "canMoveItemWithinDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Move Item Within Drive",
                  "type": "boolean"
                },
                "canMoveItemWithinTeamDrive": {
                  "default": null,
                  "description": "Deprecated.",
                  "nullable": true,
                  "title": "Can Move Item Within Team Drive",
                  "type": "boolean"
                },
                "canMoveTeamDriveItem": {
                  "default": null,
                  "description": "Deprecated.",
                  "nullable": true,
                  "title": "Can Move Team Drive Item",
                  "type": "boolean"
                },
                "canReadDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Read Drive",
                  "type": "boolean"
                },
                "canReadLabels": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Read Labels",
                  "type": "boolean"
                },
                "canReadRevisions": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Read Revisions",
                  "type": "boolean"
                },
                "canReadTeamDrive": {
                  "default": null,
                  "description": "Deprecated: Use canReadDrive instead.",
                  "nullable": true,
                  "title": "Can Read Team Drive",
                  "type": "boolean"
                },
                "canRemoveChildren": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Remove Children",
                  "type": "boolean"
                },
                "canRemoveContentRestriction": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Remove Content Restriction",
                  "type": "boolean"
                },
                "canRemoveMyDriveParent": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Remove My Drive Parent",
                  "type": "boolean"
                },
                "canRename": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Rename",
                  "type": "boolean"
                },
                "canShare": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Share",
                  "type": "boolean"
                },
                "canTrash": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Trash",
                  "type": "boolean"
                },
                "canTrashChildren": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Trash Children",
                  "type": "boolean"
                },
                "canUntrash": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Untrash",
                  "type": "boolean"
                }
              },
              "title": "Capabilities",
              "type": "object"
            },
            "contentHints": {
              "additionalProperties": false,
              "default": null,
              "description": "Additional information about the content of the file.",
              "nullable": true,
              "properties": {
                "indexableText": {
                  "default": null,
                  "description": "Text to be indexed for the file to improve fullText queries.",
                  "nullable": true,
                  "title": "Indexable Text",
                  "type": "string"
                },
                "thumbnail": {
                  "additionalProperties": false,
                  "default": null,
                  "description": "A thumbnail for the file.",
                  "nullable": true,
                  "properties": {
                    "image": {
                      "default": null,
                      "description": "The thumbnail data encoded with URL-safe Base64 (RFC 4648 section 5).",
                      "nullable": true,
                      "title": "Image",
                      "type": "string"
                    },
                    "mimeType": {
                      "default": null,
                      "description": "The MIME type of the thumbnail.",
                      "nullable": true,
                      "title": "Mime Type",
                      "type": "string"
                    }
                  },
                  "title": "Thumbnail",
                  "type": "object"
                }
              },
              "title": "ContentHints",
              "type": "object"
            },
            "contentRestrictions": {
              "description": "Restrictions for accessing the content of the file.",
              "items": {
                "properties": {
                  "ownerRestricted": {
                    "default": null,
                    "nullable": true,
                    "title": "Owner Restricted",
                    "type": "boolean"
                  },
                  "readOnly": {
                    "default": null,
                    "nullable": true,
                    "title": "Read Only",
                    "type": "boolean"
                  },
                  "reason": {
                    "default": null,
                    "nullable": true,
                    "title": "Reason",
                    "type": "string"
                  },
                  "restrictingUser": {
                    "additionalProperties": false,
                    "default": null,
                    "description": "Output only.",
                    "nullable": true,
                    "properties": {
                      "displayName": {
                        "default": null,
                        "description": "A plain text displayable name for this user.",
                        "nullable": true,
                        "title": "Display Name",
                        "type": "string"
                      },
                      "emailAddress": {
                        "default": null,
                        "description": "The email address of the user. This may not be present in certain contexts if the user has not made their email address visible to the requester.",
                        "nullable": true,
                        "title": "Email Address",
                        "type": "string"
                      },
                      "kind": {
                        "default": null,
                        "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#user\".",
                        "nullable": true,
                        "title": "Kind",
                        "type": "string"
                      },
                      "me": {
                        "default": null,
                        "description": "Whether this user is the requesting user.",
                        "nullable": true,
                        "title": "Me",
                        "type": "boolean"
                      },
                      "permissionId": {
                        "default": null,
                        "description": "The user's ID as visible in Permission resources.",
                        "nullable": true,
                        "title": "Permission Id",
                        "type": "string"
                      },
                      "photoLink": {
                        "default": null,
                        "description": "A link to the user's profile photo, if available.",
                        "nullable": true,
                        "title": "Photo Link",
                        "type": "string"
                      }
                    },
                    "title": "User",
                    "type": "object"
                  },
                  "restrictionTime": {
                    "default": null,
                    "description": "RFC 3339 date-time, Output only.",
                    "nullable": true,
                    "title": "Restriction Time",
                    "type": "string"
                  },
                  "systemRestricted": {
                    "default": null,
                    "description": "Output only.",
                    "nullable": true,
                    "title": "System Restricted",
                    "type": "boolean"
                  },
                  "type": {
                    "default": null,
                    "description": "Output only.",
                    "nullable": true,
                    "title": "Type",
                    "type": "string"
                  }
                },
                "title": "ContentRestriction",
                "type": "object"
              },
              "nullable": true,
              "title": "Content Restrictions",
              "type": "array"
            },
            "copyRequiresWriterPermission": {
              "default": null,
              "description": "Whether the options to copy, print, or download should be disabled for readers and commenters.",
              "nullable": true,
              "title": "Copy Requires Writer Permission",
              "type": "boolean"
            },
            "createdTime": {
              "default": null,
              "description": "The time at which the file was created (RFC 3339 date-time).",
              "nullable": true,
              "title": "Created Time",
              "type": "string"
            },
            "description": {
              "default": null,
              "description": "A short description of the file.",
              "nullable": true,
              "title": "Description",
              "type": "string"
            },
            "driveId": {
              "default": null,
              "description": "Output only. ID of the shared drive the file resides in.",
              "nullable": true,
              "title": "Drive Id",
              "type": "string"
            },
            "explicitlyTrashed": {
              "default": null,
              "description": "Output only. Whether the file has been explicitly trashed.",
              "nullable": true,
              "title": "Explicitly Trashed",
              "type": "boolean"
            },
            "fileExtension": {
              "default": null,
              "description": "Output only. The final component of fullFileExtension.",
              "nullable": true,
              "title": "File Extension",
              "type": "string"
            },
            "folderColorRgb": {
              "default": null,
              "description": "The color for a folder or a shortcut to a folder as an RGB hex string.",
              "nullable": true,
              "title": "Folder Color Rgb",
              "type": "string"
            },
            "fullFileExtension": {
              "default": null,
              "description": "Output only. The full file extension extracted from the name field.",
              "nullable": true,
              "title": "Full File Extension",
              "type": "string"
            },
            "hasAugmentedPermissions": {
              "default": null,
              "description": "Output only. Whether there are permissions directly on this file.",
              "nullable": true,
              "title": "Has Augmented Permissions",
              "type": "boolean"
            },
            "hasThumbnail": {
              "default": null,
              "description": "Output only. Whether this file has a thumbnail.",
              "nullable": true,
              "title": "Has Thumbnail",
              "type": "boolean"
            },
            "headRevisionId": {
              "default": null,
              "description": "Output only. The ID of the file's head revision.",
              "nullable": true,
              "title": "Head Revision Id",
              "type": "string"
            },
            "iconLink": {
              "default": null,
              "description": "Output only. A static, unauthenticated link to the file's icon.",
              "nullable": true,
              "title": "Icon Link",
              "type": "string"
            },
            "id": {
              "default": null,
              "description": "The ID of the file.",
              "nullable": true,
              "title": "Id",
              "type": "string"
            },
            "imageMediaMetadata": {
              "additionalProperties": false,
              "default": null,
              "description": "Output only. Additional metadata about image media.",
              "nullable": true,
              "properties": {
                "aperture": {
                  "default": null,
                  "nullable": true,
                  "title": "Aperture",
                  "type": "number"
                },
                "cameraMake": {
                  "default": null,
                  "nullable": true,
                  "title": "Camera Make",
                  "type": "string"
                },
                "cameraModel": {
                  "default": null,
                  "nullable": true,
                  "title": "Camera Model",
                  "type": "string"
                },
                "colorSpace": {
                  "default": null,
                  "nullable": true,
                  "title": "Color Space",
                  "type": "string"
                },
                "exposureBias": {
                  "default": null,
                  "nullable": true,
                  "title": "Exposure Bias",
                  "type": "number"
                },
                "exposureMode": {
                  "default": null,
                  "nullable": true,
                  "title": "Exposure Mode",
                  "type": "string"
                },
                "exposureTime": {
                  "default": null,
                  "nullable": true,
                  "title": "Exposure Time",
                  "type": "number"
                },
                "flashUsed": {
                  "default": null,
                  "nullable": true,
                  "title": "Flash Used",
                  "type": "boolean"
                },
                "focalLength": {
                  "default": null,
                  "nullable": true,
                  "title": "Focal Length",
                  "type": "number"
                },
                "height": {
                  "default": null,
                  "nullable": true,
                  "title": "Height",
                  "type": "integer"
                },
                "isoSpeed": {
                  "default": null,
                  "nullable": true,
                  "title": "Iso Speed",
                  "type": "integer"
                },
                "lens": { "default": null, "nullable": true, "title": "Lens", "type": "string" },
                "location": {
                  "additionalProperties": false,
                  "default": null,
                  "nullable": true,
                  "properties": {
                    "altitude": {
                      "default": null,
                      "nullable": true,
                      "title": "Altitude",
                      "type": "number"
                    },
                    "latitude": {
                      "default": null,
                      "nullable": true,
                      "title": "Latitude",
                      "type": "number"
                    },
                    "longitude": {
                      "default": null,
                      "nullable": true,
                      "title": "Longitude",
                      "type": "number"
                    }
                  },
                  "title": "ImageMediaMetadataLocation",
                  "type": "object"
                },
                "maxApertureValue": {
                  "default": null,
                  "nullable": true,
                  "title": "Max Aperture Value",
                  "type": "number"
                },
                "meteringMode": {
                  "default": null,
                  "nullable": true,
                  "title": "Metering Mode",
                  "type": "string"
                },
                "rotation": {
                  "default": null,
                  "nullable": true,
                  "title": "Rotation",
                  "type": "integer"
                },
                "sensor": {
                  "default": null,
                  "nullable": true,
                  "title": "Sensor",
                  "type": "string"
                },
                "subjectDistance": {
                  "default": null,
                  "nullable": true,
                  "title": "Subject Distance",
                  "type": "integer"
                },
                "time": {
                  "default": null,
                  "description": "RFC 3339 date-time",
                  "nullable": true,
                  "title": "Time",
                  "type": "string"
                },
                "whiteBalance": {
                  "default": null,
                  "nullable": true,
                  "title": "White Balance",
                  "type": "string"
                },
                "width": { "default": null, "nullable": true, "title": "Width", "type": "integer" }
              },
              "title": "ImageMediaMetadata",
              "type": "object"
            },
            "isAppAuthorized": {
              "default": null,
              "description": "Output only. Whether the file was created or opened by the requesting app.",
              "nullable": true,
              "title": "Is App Authorized",
              "type": "boolean"
            },
            "kind": {
              "default": null,
              "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#file\".",
              "nullable": true,
              "title": "Kind",
              "type": "string"
            },
            "lastModifyingUser": {
              "additionalProperties": false,
              "default": null,
              "description": "Output only. The last user to modify the file.",
              "nullable": true,
              "properties": {
                "displayName": {
                  "default": null,
                  "description": "A plain text displayable name for this user.",
                  "nullable": true,
                  "title": "Display Name",
                  "type": "string"
                },
                "emailAddress": {
                  "default": null,
                  "description": "The email address of the user. This may not be present in certain contexts if the user has not made their email address visible to the requester.",
                  "nullable": true,
                  "title": "Email Address",
                  "type": "string"
                },
                "kind": {
                  "default": null,
                  "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#user\".",
                  "nullable": true,
                  "title": "Kind",
                  "type": "string"
                },
                "me": {
                  "default": null,
                  "description": "Whether this user is the requesting user.",
                  "nullable": true,
                  "title": "Me",
                  "type": "boolean"
                },
                "permissionId": {
                  "default": null,
                  "description": "The user's ID as visible in Permission resources.",
                  "nullable": true,
                  "title": "Permission Id",
                  "type": "string"
                },
                "photoLink": {
                  "default": null,
                  "description": "A link to the user's profile photo, if available.",
                  "nullable": true,
                  "title": "Photo Link",
                  "type": "string"
                }
              },
              "title": "User",
              "type": "object"
            },
            "linkShareMetadata": {
              "additionalProperties": false,
              "default": null,
              "description": "Output only. LinkShare related details.",
              "nullable": true,
              "properties": {
                "securityUpdateEligible": {
                  "default": null,
                  "description": "Output only.",
                  "nullable": true,
                  "title": "Security Update Eligible",
                  "type": "boolean"
                },
                "securityUpdateEnabled": {
                  "default": null,
                  "description": "Output only.",
                  "nullable": true,
                  "title": "Security Update Enabled",
                  "type": "boolean"
                }
              },
              "title": "LinkShareMetadata",
              "type": "object"
            },
            "md5Checksum": {
              "default": null,
              "description": "Output only. The MD5 checksum for the content of the file.",
              "nullable": true,
              "title": "Md5 Checksum",
              "type": "string"
            },
            "mimeType": {
              "default": null,
              "description": "The MIME type of the file.",
              "nullable": true,
              "title": "Mime Type",
              "type": "string"
            },
            "modifiedByMe": {
              "default": null,
              "description": "Output only. Whether the file has been modified by this user.",
              "nullable": true,
              "title": "Modified By Me",
              "type": "boolean"
            },
            "modifiedByMeTime": {
              "default": null,
              "description": "Output only. The last time the file was modified by the user (RFC 3339 date-time).",
              "nullable": true,
              "title": "Modified By Me Time",
              "type": "string"
            },
            "modifiedTime": {
              "default": null,
              "description": "The last time the file was modified by anyone (RFC 3339 date-time).",
              "nullable": true,
              "title": "Modified Time",
              "type": "string"
            },
            "name": {
              "default": null,
              "description": "The name of the file.",
              "nullable": true,
              "title": "Name",
              "type": "string"
            },
            "originalFilename": {
              "default": null,
              "description": "The original filename of the uploaded content.",
              "nullable": true,
              "title": "Original Filename",
              "type": "string"
            },
            "ownedByMe": {
              "default": null,
              "description": "Output only. Whether the user owns the file.",
              "nullable": true,
              "title": "Owned By Me",
              "type": "boolean"
            },
            "owners": {
              "description": "Output only. The owner(s) of this file.",
              "items": {
                "properties": {
                  "displayName": {
                    "default": null,
                    "description": "A plain text displayable name for this user.",
                    "nullable": true,
                    "title": "Display Name",
                    "type": "string"
                  },
                  "emailAddress": {
                    "default": null,
                    "description": "The email address of the user. This may not be present in certain contexts if the user has not made their email address visible to the requester.",
                    "nullable": true,
                    "title": "Email Address",
                    "type": "string"
                  },
                  "kind": {
                    "default": null,
                    "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#user\".",
                    "nullable": true,
                    "title": "Kind",
                    "type": "string"
                  },
                  "me": {
                    "default": null,
                    "description": "Whether this user is the requesting user.",
                    "nullable": true,
                    "title": "Me",
                    "type": "boolean"
                  },
                  "permissionId": {
                    "default": null,
                    "description": "The user's ID as visible in Permission resources.",
                    "nullable": true,
                    "title": "Permission Id",
                    "type": "string"
                  },
                  "photoLink": {
                    "default": null,
                    "description": "A link to the user's profile photo, if available.",
                    "nullable": true,
                    "title": "Photo Link",
                    "type": "string"
                  }
                },
                "title": "User",
                "type": "object"
              },
              "nullable": true,
              "title": "Owners",
              "type": "array"
            },
            "parents": {
              "description": "The IDs of the parent folders.",
              "items": { "properties": {}, "type": "string" },
              "nullable": true,
              "title": "Parents",
              "type": "array"
            },
            "permissionIds": {
              "description": "Output only. List of permission IDs for users with access.",
              "items": { "properties": {}, "type": "string" },
              "nullable": true,
              "title": "Permission Ids",
              "type": "array"
            },
            "permissions": {
              "description": "Output only. The full list of permissions. Structure of Permission resource is complex and represented as Dict[str, t.Any].",
              "items": { "additionalProperties": true, "properties": {}, "type": "object" },
              "nullable": true,
              "title": "Permissions",
              "type": "array"
            },
            "properties": {
              "additionalProperties": { "type": "string" },
              "description": "A collection of arbitrary key-value pairs visible to all apps.",
              "nullable": true,
              "title": "Properties",
              "type": "object"
            },
            "quotaBytesUsed": {
              "default": null,
              "description": "Output only. The number of storage quota bytes used (int64 format).",
              "nullable": true,
              "title": "Quota Bytes Used",
              "type": "string"
            },
            "resourceKey": {
              "default": null,
              "description": "Output only. A key needed to access the item via a shared link.",
              "nullable": true,
              "title": "Resource Key",
              "type": "string"
            },
            "sha1Checksum": {
              "default": null,
              "description": "Output only. The SHA1 checksum for the file content.",
              "nullable": true,
              "title": "Sha1 Checksum",
              "type": "string"
            },
            "sha256Checksum": {
              "default": null,
              "description": "Output only. The SHA256 checksum for the file content.",
              "nullable": true,
              "title": "Sha256 Checksum",
              "type": "string"
            },
            "shared": {
              "default": null,
              "description": "Output only. Whether the file has been shared.",
              "nullable": true,
              "title": "Shared",
              "type": "boolean"
            },
            "sharedWithMeTime": {
              "default": null,
              "description": "Output only. The time at which the file was shared with the user (RFC 3339 date-time).",
              "nullable": true,
              "title": "Shared With Me Time",
              "type": "string"
            },
            "sharingUser": {
              "additionalProperties": false,
              "default": null,
              "description": "Output only. The user who shared the file with the requesting user.",
              "nullable": true,
              "properties": {
                "displayName": {
                  "default": null,
                  "description": "A plain text displayable name for this user.",
                  "nullable": true,
                  "title": "Display Name",
                  "type": "string"
                },
                "emailAddress": {
                  "default": null,
                  "description": "The email address of the user. This may not be present in certain contexts if the user has not made their email address visible to the requester.",
                  "nullable": true,
                  "title": "Email Address",
                  "type": "string"
                },
                "kind": {
                  "default": null,
                  "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#user\".",
                  "nullable": true,
                  "title": "Kind",
                  "type": "string"
                },
                "me": {
                  "default": null,
                  "description": "Whether this user is the requesting user.",
                  "nullable": true,
                  "title": "Me",
                  "type": "boolean"
                },
                "permissionId": {
                  "default": null,
                  "description": "The user's ID as visible in Permission resources.",
                  "nullable": true,
                  "title": "Permission Id",
                  "type": "string"
                },
                "photoLink": {
                  "default": null,
                  "description": "A link to the user's profile photo, if available.",
                  "nullable": true,
                  "title": "Photo Link",
                  "type": "string"
                }
              },
              "title": "User",
              "type": "object"
            },
            "shortcutDetails": {
              "additionalProperties": false,
              "default": null,
              "description": "Shortcut file details.",
              "nullable": true,
              "properties": {
                "targetId": {
                  "default": null,
                  "nullable": true,
                  "title": "Target Id",
                  "type": "string"
                },
                "targetMimeType": {
                  "default": null,
                  "description": "Output only.",
                  "nullable": true,
                  "title": "Target Mime Type",
                  "type": "string"
                },
                "targetResourceKey": {
                  "default": null,
                  "description": "Output only.",
                  "nullable": true,
                  "title": "Target Resource Key",
                  "type": "string"
                }
              },
              "title": "ShortcutDetails",
              "type": "object"
            },
            "size": {
              "default": null,
              "description": "Output only. Size in bytes (int64 format).",
              "nullable": true,
              "title": "Size",
              "type": "string"
            },
            "spaces": {
              "description": "Output only. The list of spaces which contain the file.",
              "items": { "properties": {}, "type": "string" },
              "nullable": true,
              "title": "Spaces",
              "type": "array"
            },
            "starred": {
              "default": null,
              "description": "Whether the user has starred the file.",
              "nullable": true,
              "title": "Starred",
              "type": "boolean"
            },
            "teamDriveId": {
              "default": null,
              "description": "Deprecated: Output only. Use driveId instead.",
              "nullable": true,
              "title": "Team Drive Id",
              "type": "string"
            },
            "thumbnailLink": {
              "default": null,
              "description": "Output only. A short-lived link to the file's thumbnail.",
              "nullable": true,
              "title": "Thumbnail Link",
              "type": "string"
            },
            "thumbnailVersion": {
              "default": null,
              "description": "Output only. The thumbnail version (int64 format).",
              "nullable": true,
              "title": "Thumbnail Version",
              "type": "string"
            },
            "trashed": {
              "default": null,
              "description": "Whether the file has been trashed.",
              "nullable": true,
              "title": "Trashed",
              "type": "boolean"
            },
            "trashedTime": {
              "default": null,
              "description": "Output only. The time that the item was trashed (RFC 3339 date-time).",
              "nullable": true,
              "title": "Trashed Time",
              "type": "string"
            },
            "trashingUser": {
              "additionalProperties": false,
              "default": null,
              "description": "Output only. If the file has been explicitly trashed, the user who trashed it.",
              "nullable": true,
              "properties": {
                "displayName": {
                  "default": null,
                  "description": "A plain text displayable name for this user.",
                  "nullable": true,
                  "title": "Display Name",
                  "type": "string"
                },
                "emailAddress": {
                  "default": null,
                  "description": "The email address of the user. This may not be present in certain contexts if the user has not made their email address visible to the requester.",
                  "nullable": true,
                  "title": "Email Address",
                  "type": "string"
                },
                "kind": {
                  "default": null,
                  "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#user\".",
                  "nullable": true,
                  "title": "Kind",
                  "type": "string"
                },
                "me": {
                  "default": null,
                  "description": "Whether this user is the requesting user.",
                  "nullable": true,
                  "title": "Me",
                  "type": "boolean"
                },
                "permissionId": {
                  "default": null,
                  "description": "The user's ID as visible in Permission resources.",
                  "nullable": true,
                  "title": "Permission Id",
                  "type": "string"
                },
                "photoLink": {
                  "default": null,
                  "description": "A link to the user's profile photo, if available.",
                  "nullable": true,
                  "title": "Photo Link",
                  "type": "string"
                }
              },
              "title": "User",
              "type": "object"
            },
            "version": {
              "default": null,
              "description": "Output only. A monotonically increasing version number for the file (int64 format).",
              "nullable": true,
              "title": "Version",
              "type": "string"
            },
            "videoMediaMetadata": {
              "additionalProperties": false,
              "default": null,
              "description": "Output only. Additional metadata about video media.",
              "nullable": true,
              "properties": {
                "durationMillis": {
                  "default": null,
                  "description": "int64 format",
                  "nullable": true,
                  "title": "Duration Millis",
                  "type": "string"
                },
                "height": {
                  "default": null,
                  "nullable": true,
                  "title": "Height",
                  "type": "integer"
                },
                "width": { "default": null, "nullable": true, "title": "Width", "type": "integer" }
              },
              "title": "VideoMediaMetadata",
              "type": "object"
            },
            "viewedByMe": {
              "default": null,
              "description": "Output only. Whether the file has been viewed by this user.",
              "nullable": true,
              "title": "Viewed By Me",
              "type": "boolean"
            },
            "viewedByMeTime": {
              "default": null,
              "description": "The last time the file was viewed by the user (RFC 3339 date-time).",
              "nullable": true,
              "title": "Viewed By Me Time",
              "type": "string"
            },
            "viewersCanCopyContent": {
              "default": null,
              "description": "Deprecated: Use copyRequiresWriterPermission instead.",
              "nullable": true,
              "title": "Viewers Can Copy Content",
              "type": "boolean"
            },
            "webContentLink": {
              "default": null,
              "description": "Output only. A link for downloading the content of the file in a browser.",
              "nullable": true,
              "title": "Web Content Link",
              "type": "string"
            },
            "webViewLink": {
              "default": null,
              "description": "Output only. A link for opening the file in a relevant Google editor or viewer.",
              "nullable": true,
              "title": "Web View Link",
              "type": "string"
            },
            "writersCanShare": {
              "default": null,
              "description": "Whether users with writer permission can modify permissions.",
              "nullable": true,
              "title": "Writers Can Share",
              "type": "boolean"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GoogleDriveCopyFileResponseWrapper",
      "type": "object"
    },
    "description": "Duplicates an existing file in google drive, identified by its `file id`.",
    "tags": ["openWorldHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create Comment",
    "slug": "GOOGLEDRIVE_CREATE_COMMENT",
    "input_parameters": {
      "properties": {
        "anchor": {
          "default": null,
          "description": "A JSON string representing the region of the document to which the comment is anchored (e.g., {'type': 'line', 'line': 12}).",
          "examples": ["{\"type\": \"line\", \"line\": 12}"],
          "nullable": true,
          "title": "Anchor",
          "type": "string"
        },
        "content": {
          "description": "The plain text content of the comment.",
          "examples": ["This is a great document!"],
          "title": "Content",
          "type": "string"
        },
        "file_id": {
          "description": "The ID of the file.",
          "examples": ["1a2b3c4d5e6f7g8h9i0j"],
          "title": "File Id",
          "type": "string"
        },
        "quoted_file_content_mime_type": {
          "default": null,
          "description": "The MIME type of the quoted content.",
          "examples": ["text/plain"],
          "nullable": true,
          "title": "Quoted File Content Mime Type",
          "type": "string"
        },
        "quoted_file_content_value": {
          "default": null,
          "description": "The quoted content itself.",
          "examples": ["This is the text to quote."],
          "nullable": true,
          "title": "Quoted File Content Value",
          "type": "string"
        }
      },
      "required": ["file_id", "content"],
      "title": "CreateCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "anchor": {
              "default": null,
              "description": "The region of the document to which the comment is anchored, if any.",
              "nullable": true,
              "title": "Anchor",
              "type": "string"
            },
            "author": {
              "additionalProperties": true,
              "description": "The user who created the comment.",
              "title": "Author",
              "type": "object"
            },
            "content": {
              "description": "The plain text content of the comment.",
              "title": "Content",
              "type": "string"
            },
            "createdTime": {
              "description": "The time the comment was created.",
              "title": "Created Time",
              "type": "string"
            },
            "deleted": {
              "description": "Whether the comment has been deleted.",
              "title": "Deleted",
              "type": "boolean"
            },
            "id": { "description": "The ID of the comment.", "title": "Id", "type": "string" },
            "kind": {
              "description": "Identifies the resource type, always 'drive#comment'.",
              "title": "Kind",
              "type": "string"
            },
            "modifiedTime": {
              "description": "The time the comment was last modified.",
              "title": "Modified Time",
              "type": "string"
            }
          },
          "required": ["id", "kind", "createdTime", "modifiedTime", "author", "content", "deleted"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateCommentResponseWrapper",
      "type": "object"
    },
    "description": "Tool to create a comment on a file. use when you need to add a new comment to a specific file in google drive.",
    "tags": ["important", "comment"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create Shared Drive",
    "slug": "GOOGLEDRIVE_CREATE_DRIVE",
    "input_parameters": {
      "properties": {
        "backgroundImageFile": {
          "additionalProperties": false,
          "default": null,
          "description": "An image file and cropping parameters from which a background image for this shared drive is set. This is a write only field; it can only be set on drive.drives.update requests that don't set themeId. When specified, all fields of the backgroundImageFile must be set.",
          "nullable": true,
          "properties": {
            "id": {
              "description": "The ID of an image file in Google Drive to use for the background.",
              "title": "Id",
              "type": "string"
            },
            "width": {
              "description": "The width of the cropped image in the range: 0.0 <= width <= 1.0.",
              "maximum": 1,
              "minimum": 0,
              "title": "Width",
              "type": "number"
            },
            "xCoordinate": {
              "description": "The X coordinate of the cropped image in the range: 0.0 <= xCoordinate <= 1.0.",
              "maximum": 1,
              "minimum": 0,
              "title": "X Coordinate",
              "type": "number"
            },
            "yCoordinate": {
              "description": "The Y coordinate of the cropped image in the range: 0.0 <= yCoordinate <= 1.0.",
              "maximum": 1,
              "minimum": 0,
              "title": "Y Coordinate",
              "type": "number"
            }
          },
          "required": ["id", "width", "xCoordinate", "yCoordinate"],
          "title": "BackgroundImageFile",
          "type": "object"
        },
        "colorRgb": {
          "default": null,
          "description": "The color of this shared drive as an RGB hex string. It can only be set on a drive.drives.update request that does not set themeId.",
          "examples": ["#FF0000"],
          "nullable": true,
          "title": "Color Rgb",
          "type": "string"
        },
        "hidden": {
          "default": false,
          "description": "Whether the shared drive is hidden from default view.",
          "nullable": true,
          "title": "Hidden",
          "type": "boolean"
        },
        "name": {
          "description": "The name of this shared drive.",
          "examples": ["My New Shared Drive"],
          "title": "Name",
          "type": "string"
        },
        "requestId": {
          "description": "An ID, such as a random UUID, which uniquely identifies this user's request for idempotent creation of a shared drive. A repeated request by the same user and with the same request ID will avoid creating duplicates by attempting to create the same shared drive. If the shared drive already exists a 409 error will be returned.",
          "examples": ["your-unique-request-id-123"],
          "title": "Request Id",
          "type": "string"
        },
        "themeId": {
          "default": null,
          "description": "The ID of the theme from which the background image and color will be set. The set of possible driveThemes can be retrieved from a drive.about.get response. When not specified on a drive.drives.create request, a random theme is chosen from which the background image and color are set. This is a write-only field; it can only be set on requests that don't set colorRgb or backgroundImageFile.",
          "examples": ["default"],
          "nullable": true,
          "title": "Theme Id",
          "type": "string"
        }
      },
      "required": ["requestId", "name"],
      "title": "CreateDriveRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "backgroundImageLink": {
              "default": null,
              "description": "A short-lived link to this shared drive's background image.",
              "nullable": true,
              "title": "Background Image Link",
              "type": "string"
            },
            "capabilities": {
              "additionalProperties": false,
              "default": null,
              "description": "Capabilities the current user has on this shared drive.",
              "nullable": true,
              "properties": {
                "canAddChildren": {
                  "default": null,
                  "description": "Whether users with writer permissions can add children to folders in this shared drive.",
                  "nullable": true,
                  "title": "Can Add Children",
                  "type": "boolean"
                },
                "canChangeCopyRequiresWriterPermissionRestriction": {
                  "default": null,
                  "description": "Whether the current user can change the copyRequiresWriterPermission restriction of this shared drive.",
                  "nullable": true,
                  "title": "Can Change Copy Requires Writer Permission Restriction",
                  "type": "boolean"
                },
                "canChangeDomainUsersOnlyRestriction": {
                  "default": null,
                  "description": "Whether the current user can change the domainUsersOnly restriction of this shared drive.",
                  "nullable": true,
                  "title": "Can Change Domain Users Only Restriction",
                  "type": "boolean"
                },
                "canChangeDriveBackground": {
                  "default": null,
                  "description": "Whether the current user can change the background of this shared drive.",
                  "nullable": true,
                  "title": "Can Change Drive Background",
                  "type": "boolean"
                },
                "canChangeDriveMembersOnlyRestriction": {
                  "default": null,
                  "description": "Whether the current user can change the driveMembersOnly restriction of this shared drive.",
                  "nullable": true,
                  "title": "Can Change Drive Members Only Restriction",
                  "type": "boolean"
                },
                "canChangeSharingFoldersRequiresOrganizerPermissionRestriction": {
                  "default": null,
                  "description": "Whether the current user can change the sharingFoldersRequiresOrganizerPermission restriction of this shared drive.",
                  "nullable": true,
                  "title": "Can Change Sharing Folders Requires Organizer Permission Restriction",
                  "type": "boolean"
                },
                "canComment": {
                  "default": null,
                  "description": "Whether users with commenter permissions can comment on files in this shared drive.",
                  "nullable": true,
                  "title": "Can Comment",
                  "type": "boolean"
                },
                "canCopy": {
                  "default": null,
                  "description": "Whether users with reader or commenter permissions can copy files in this shared drive.",
                  "nullable": true,
                  "title": "Can Copy",
                  "type": "boolean"
                },
                "canDeleteChildren": {
                  "default": null,
                  "description": "Whether users with writer permissions can delete children from folders in this shared drive. This is deprecated and now identical to canDeleteDrive.",
                  "nullable": true,
                  "title": "Can Delete Children",
                  "type": "boolean"
                },
                "canDeleteDrive": {
                  "default": null,
                  "description": "Whether the current user can delete this shared drive. Attempting to delete the shared drive may still fail if there are untrashed items inside the shared drive.",
                  "nullable": true,
                  "title": "Can Delete Drive",
                  "type": "boolean"
                },
                "canDownload": {
                  "default": null,
                  "description": "Whether users with reader or commenter permissions can download files in this shared drive.",
                  "nullable": true,
                  "title": "Can Download",
                  "type": "boolean"
                },
                "canEdit": {
                  "default": null,
                  "description": "Whether users with writer permissions can edit files in this shared drive.",
                  "nullable": true,
                  "title": "Can Edit",
                  "type": "boolean"
                },
                "canListChildren": {
                  "default": null,
                  "description": "Whether users with reader or commenter permissions can list the children of folders in this shared drive.",
                  "nullable": true,
                  "title": "Can List Children",
                  "type": "boolean"
                },
                "canManageMembers": {
                  "default": null,
                  "description": "Whether the current user can add members to this shared drive or remove them or change their role.",
                  "nullable": true,
                  "title": "Can Manage Members",
                  "type": "boolean"
                },
                "canReadRevisions": {
                  "default": null,
                  "description": "Whether the current user can read the revisions resource of files in this shared drive.",
                  "nullable": true,
                  "title": "Can Read Revisions",
                  "type": "boolean"
                },
                "canRename": {
                  "default": null,
                  "description": "Whether users with writer permissions can rename files or folders in this shared drive.",
                  "nullable": true,
                  "title": "Can Rename",
                  "type": "boolean"
                },
                "canRenameDrive": {
                  "default": null,
                  "description": "Whether the current user can rename this shared drive.",
                  "nullable": true,
                  "title": "Can Rename Drive",
                  "type": "boolean"
                },
                "canShare": {
                  "default": null,
                  "description": "Whether the current user can share files or folders in this shared drive.",
                  "nullable": true,
                  "title": "Can Share",
                  "type": "boolean"
                },
                "canTrashChildren": {
                  "default": null,
                  "description": "Whether users with writer permissions can trash children from folders in this shared drive. This is deprecated and now identical to canDeleteDrive.",
                  "nullable": true,
                  "title": "Can Trash Children",
                  "type": "boolean"
                }
              },
              "title": "DriveCapabilities",
              "type": "object"
            },
            "colorRgb": {
              "default": null,
              "description": "The color of this shared drive as an RGB hex string.",
              "nullable": true,
              "title": "Color Rgb",
              "type": "string"
            },
            "createdTime": {
              "default": null,
              "description": "The time at which the shared drive was created (RFC 3339 date-time).",
              "nullable": true,
              "title": "Created Time",
              "type": "string"
            },
            "hidden": {
              "default": null,
              "description": "Whether the shared drive is hidden from default view.",
              "nullable": true,
              "title": "Hidden",
              "type": "boolean"
            },
            "id": {
              "description": "The ID of this shared drive.",
              "title": "Id",
              "type": "string"
            },
            "kind": {
              "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#drive\".",
              "title": "Kind",
              "type": "string"
            },
            "name": {
              "description": "The name of this shared drive.",
              "title": "Name",
              "type": "string"
            },
            "orgUnitId": {
              "default": null,
              "description": "The organizational unit of this shared drive. This field is only populated on drives.list responses when the useDomainAdminAccess parameter is set to true.",
              "nullable": true,
              "title": "Org Unit Id",
              "type": "string"
            },
            "restrictions": {
              "additionalProperties": false,
              "default": null,
              "description": "A set of restrictions that apply to this shared drive or items inside this shared drive.",
              "nullable": true,
              "properties": {
                "adminManagedRestrictions": {
                  "default": null,
                  "description": "Whether administrative privileges on this shared drive are required to modify restrictions.",
                  "nullable": true,
                  "title": "Admin Managed Restrictions",
                  "type": "boolean"
                },
                "copyRequiresWriterPermission": {
                  "default": null,
                  "description": "Whether the options to copy, print, or download files inside this shared drive, should be disabled for readers and commenters. When true, only permissions with write access will be able to copy, print, or download files.",
                  "nullable": true,
                  "title": "Copy Requires Writer Permission",
                  "type": "boolean"
                },
                "domainUsersOnly": {
                  "default": null,
                  "description": "Whether access to this shared drive and items inside this shared drive is restricted to users of the domain to which this shared drive belongs. This restriction may be overridden by other sharing policies controlled outside of Drive.",
                  "nullable": true,
                  "title": "Domain Users Only",
                  "type": "boolean"
                },
                "driveMembersOnly": {
                  "default": null,
                  "description": "Whether access to items inside this shared drive is restricted to its members.",
                  "nullable": true,
                  "title": "Drive Members Only",
                  "type": "boolean"
                },
                "sharingFoldersRequiresOrganizerPermission": {
                  "default": null,
                  "description": "Whether the ability to share folders in this shared drive is restricted to users with organizer_role for this shared drive.",
                  "nullable": true,
                  "title": "Sharing Folders Requires Organizer Permission",
                  "type": "boolean"
                }
              },
              "title": "DriveRestrictions",
              "type": "object"
            },
            "themeId": {
              "default": null,
              "description": "The ID of the theme from which the background image and color will be set.",
              "nullable": true,
              "title": "Theme Id",
              "type": "string"
            }
          },
          "required": ["id", "name", "kind"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateDriveResponseWrapper",
      "type": "object"
    },
    "description": "Tool to create a new shared drive. use when you need to programmatically create a new shared drive for collaboration or storage.",
    "tags": ["openWorldHint", "important", "drive"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create File or Folder",
    "slug": "GOOGLEDRIVE_CREATE_FILE",
    "input_parameters": {
      "properties": {
        "description": {
          "default": null,
          "description": "A short description of the file.",
          "nullable": true,
          "title": "Description",
          "type": "string"
        },
        "fields": {
          "default": null,
          "description": "A comma-separated list of fields to include in the response.",
          "nullable": true,
          "title": "Fields",
          "type": "string"
        },
        "mimeType": {
          "default": null,
          "description": "The MIME type of the file.",
          "nullable": true,
          "title": "Mime Type",
          "type": "string"
        },
        "name": {
          "default": null,
          "description": "The name of the file.",
          "nullable": true,
          "title": "Name",
          "type": "string"
        },
        "parents": {
          "default": null,
          "description": "The IDs of parent folders.",
          "items": { "properties": {}, "type": "string" },
          "nullable": true,
          "title": "Parents",
          "type": "array"
        },
        "starred": {
          "default": null,
          "description": "Whether the user has starred the file.",
          "nullable": true,
          "title": "Starred",
          "type": "boolean"
        }
      },
      "title": "CreateFileRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "driveId": {
              "default": null,
              "description": "The ID of the shared drive the file resides in.",
              "nullable": true,
              "title": "Drive Id",
              "type": "string"
            },
            "id": {
              "default": null,
              "description": "The ID of the file.",
              "nullable": true,
              "title": "Id",
              "type": "string"
            },
            "kind": {
              "default": null,
              "description": "Identifies what kind of resource this is. Value: the fixed string 'drive#file'.",
              "nullable": true,
              "title": "Kind",
              "type": "string"
            },
            "mimeType": {
              "default": null,
              "description": "The MIME type of the file.",
              "nullable": true,
              "title": "Mime Type",
              "type": "string"
            },
            "name": {
              "default": null,
              "description": "The name of the file.",
              "nullable": true,
              "title": "Name",
              "type": "string"
            },
            "parents": {
              "default": null,
              "description": "The list of parent IDs for the file.",
              "items": { "properties": {}, "type": "string" },
              "nullable": true,
              "title": "Parents",
              "type": "array"
            },
            "version": {
              "default": null,
              "description": "A monotonically increasing version number for the file. This reflects every change made to the file on the server, even those not visible to the user.",
              "nullable": true,
              "title": "Version",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateFileResponseWrapper",
      "type": "object"
    },
    "description": "Creates a new file or folder with metadata. use to create empty files or folders, or files with content by providing it in the request body (though this action primarily focuses on metadata creation).",
    "tags": ["openWorldHint", "important", "file management"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a File from Text",
    "slug": "GOOGLEDRIVE_CREATE_FILE_FROM_TEXT",
    "input_parameters": {
      "properties": {
        "file_name": {
          "description": "Desired name for the new file on Google Drive.",
          "examples": ["meeting_notes.txt", "My New Document"],
          "title": "File Name",
          "type": "string"
        },
        "mime_type": {
          "default": "text/plain",
          "description": "MIME type for the new file, determining how Google Drive interprets its content.",
          "examples": [
            "text/plain",
            "application/vnd.google-apps.document",
            "application/vnd.google-apps.spreadsheet",
            "application/vnd.google-apps.presentation"
          ],
          "title": "Mime Type",
          "type": "string"
        },
        "parent_id": {
          "default": null,
          "description": "ID of the parent folder in Google Drive; if omitted, the file is created in the root of 'My Drive'.",
          "examples": ["1KMXpS5g9N04W44_1T7_IDN18V8x00AKE"],
          "nullable": true,
          "title": "Parent Id",
          "type": "string"
        },
        "text_content": {
          "description": "Plain text content to be written into the new file.",
          "title": "Text Content",
          "type": "string"
        }
      },
      "required": ["file_name", "text_content"],
      "title": "CreateFileFromTextRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "description": {
              "default": null,
              "description": "A short description of the file.",
              "nullable": true,
              "title": "Description",
              "type": "string"
            },
            "id": { "description": "The ID of the file.", "title": "Id", "type": "string" },
            "kind": {
              "description": "Identifies the resource type. For example, for a file, this is 'drive#file'.",
              "title": "Kind",
              "type": "string"
            },
            "mimeType": {
              "description": "The MIME type of the file. Google Drive will attempt to automatically detect an appropriate value from uploaded content if no value is provided. The value cannot be changed unless a new revision is uploaded.",
              "title": "Mime Type",
              "type": "string"
            },
            "name": { "description": "The name of the file.", "title": "Name", "type": "string" },
            "parents": {
              "default": null,
              "description": "The IDs of the parent folders which contain the file.",
              "items": { "properties": {}, "type": "string" },
              "nullable": true,
              "title": "Parents",
              "type": "array"
            },
            "starred": {
              "default": null,
              "description": "Whether the user has starred the file.",
              "nullable": true,
              "title": "Starred",
              "type": "boolean"
            },
            "trashed": {
              "default": null,
              "description": "Whether the file has been trashed, either explicitly or from a trashed parent folder.",
              "nullable": true,
              "title": "Trashed",
              "type": "boolean"
            },
            "webContentLink": {
              "default": null,
              "description": "A link for downloading the content of the file in a browser. This is only available for files with binary content in Google Drive.",
              "format": "uri",
              "maxLength": 2083,
              "minLength": 1,
              "nullable": true,
              "title": "Web Content Link",
              "type": "string"
            },
            "webViewLink": {
              "default": null,
              "description": "A link for opening the file in a relevant Google editor or viewer in a browser.",
              "format": "uri",
              "maxLength": 2083,
              "minLength": 1,
              "nullable": true,
              "title": "Web View Link",
              "type": "string"
            }
          },
          "required": ["kind", "id", "name", "mimeType"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateFileFromTextResponseWrapper",
      "type": "object"
    },
    "description": "Creates a new file in google drive from provided text content (up to 10mb), supporting various formats including automatic conversion to google workspace types.",
    "tags": ["openWorldHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create a folder",
    "slug": "GOOGLEDRIVE_CREATE_FOLDER",
    "input_parameters": {
      "properties": {
        "folder_name": {
          "description": "Name for the new folder.",
          "examples": ["Project Files", "Documents", "Reports"],
          "title": "Folder Name",
          "type": "string"
        },
        "parent_id": {
          "default": null,
          "description": "ID or name of the parent folder. If a name is provided, the action attempts to find it. If an ID is provided, it must be a valid Google Drive folder ID. If omitted, the folder is created in the Drive root.",
          "examples": [
            "0AGr3s6kL3rIuUk9PVA",
            "Existing Parent Folder Name",
            "1A2b3C4d5E6fG7h8I9j0KlMNOPqRstUVW"
          ],
          "nullable": true,
          "title": "Parent Id",
          "type": "string"
        }
      },
      "required": ["folder_name"],
      "title": "CreateFolderRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "id": {
              "description": "The unique identifier of the created folder.",
              "title": "Id",
              "type": "string"
            },
            "kind": {
              "default": null,
              "description": "Identifies what kind of resource this is. Value: the fixed string 'drive#file'.",
              "nullable": true,
              "title": "Kind",
              "type": "string"
            },
            "mimeType": {
              "description": "The MIME type of the created folder, which will be 'application/vnd.google-apps.folder'.",
              "title": "Mime Type",
              "type": "string"
            },
            "name": {
              "description": "The name of the created folder.",
              "title": "Name",
              "type": "string"
            },
            "parents": {
              "default": null,
              "description": "The ID(s) of the parent folder(s).",
              "items": { "properties": {}, "type": "string" },
              "nullable": true,
              "title": "Parents",
              "type": "array"
            }
          },
          "required": ["id", "name", "mimeType"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateFolderResponseWrapper",
      "type": "object"
    },
    "description": "Creates a new folder in google drive, optionally within a parent folder specified by its id or name; if a parent name is provided but not found, the action will fail.",
    "tags": ["openWorldHint", "important"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create Reply",
    "slug": "GOOGLEDRIVE_CREATE_REPLY",
    "input_parameters": {
      "properties": {
        "action": {
          "default": null,
          "description": "The action the reply performed to the parent comment. Valid values are: resolve, reopen.",
          "examples": ["resolve"],
          "nullable": true,
          "title": "Action",
          "type": "string"
        },
        "comment_id": {
          "description": "The ID of the comment.",
          "examples": ["0987654321zyxwutsrqponmlkjihgfedcba"],
          "title": "Comment Id",
          "type": "string"
        },
        "content": {
          "description": "The plain text content of the reply. HTML content is not supported.",
          "examples": ["Thanks for the feedback!"],
          "title": "Content",
          "type": "string"
        },
        "fields": {
          "default": null,
          "description": "Selector specifying which fields to include in a partial response.",
          "examples": ["id,content"],
          "nullable": true,
          "title": "Fields",
          "type": "string"
        },
        "file_id": {
          "description": "The ID of the file.",
          "examples": ["1234567890abcdefghijklmnopqrstuvwxyz"],
          "title": "File Id",
          "type": "string"
        }
      },
      "required": ["file_id", "comment_id", "content"],
      "title": "CreateReplyRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "action": {
              "default": null,
              "description": "The action the reply performed to the parent comment. Valid values are: resolve, reopen.",
              "nullable": true,
              "title": "Action",
              "type": "string"
            },
            "author": {
              "additionalProperties": false,
              "default": null,
              "description": "The user who created the reply.",
              "nullable": true,
              "properties": {
                "display_name": {
                  "default": null,
                  "description": "A short-lived display name for the user.",
                  "nullable": true,
                  "title": "Display Name",
                  "type": "string"
                },
                "email_address": {
                  "default": null,
                  "description": "The email address of the user. This is only populated if the drive.readonly.metadata scope is used.",
                  "nullable": true,
                  "title": "Email Address",
                  "type": "string"
                },
                "kind": {
                  "default": null,
                  "description": "Identifies what kind of resource this is. Value: the fixed string 'drive#user'.",
                  "nullable": true,
                  "title": "Kind",
                  "type": "string"
                },
                "me": {
                  "default": null,
                  "description": "Whether this user is the requesting user.",
                  "nullable": true,
                  "title": "Me",
                  "type": "boolean"
                },
                "permission_id": {
                  "default": null,
                  "description": "The user's ID as visible in Permission resources.",
                  "nullable": true,
                  "title": "Permission Id",
                  "type": "string"
                },
                "photo_link": {
                  "default": null,
                  "description": "A short-lived link to the user's profile photo, if available.",
                  "nullable": true,
                  "title": "Photo Link",
                  "type": "string"
                }
              },
              "title": "Author",
              "type": "object"
            },
            "content": {
              "default": null,
              "description": "The plain text content of the reply.",
              "nullable": true,
              "title": "Content",
              "type": "string"
            },
            "created_time": {
              "default": null,
              "description": "The time the reply was created (RFC 3339 date-time).",
              "nullable": true,
              "title": "Created Time",
              "type": "string"
            },
            "deleted": {
              "default": null,
              "description": "Whether the reply has been deleted. A deleted reply has no content.",
              "nullable": true,
              "title": "Deleted",
              "type": "boolean"
            },
            "html_content": {
              "default": null,
              "description": "The HTML content of the reply.",
              "nullable": true,
              "title": "Html Content",
              "type": "string"
            },
            "id": {
              "default": null,
              "description": "The ID of the reply.",
              "nullable": true,
              "title": "Id",
              "type": "string"
            },
            "kind": {
              "default": null,
              "description": "Identifies what kind of resource this is. Value: the fixed string 'drive#reply'.",
              "nullable": true,
              "title": "Kind",
              "type": "string"
            },
            "modified_time": {
              "default": null,
              "description": "The last time the reply was modified (RFC 3339 date-time).",
              "nullable": true,
              "title": "Modified Time",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateReplyResponseWrapper",
      "type": "object"
    },
    "description": "Tool to create a reply to a comment in google drive. use when you need to respond to an existing comment on a file.",
    "tags": ["important", "comment", "reply"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create Shortcut to File/Folder",
    "slug": "GOOGLEDRIVE_CREATE_SHORTCUT_TO_FILE",
    "input_parameters": {
      "properties": {
        "ignoreDefaultVisibility": {
          "default": null,
          "description": "Whether to ignore the domain's default visibility settings for the created file.",
          "examples": [false],
          "nullable": true,
          "title": "Ignore Default Visibility",
          "type": "boolean"
        },
        "includeLabels": {
          "default": null,
          "description": "A comma-separated list of IDs of labels to include in the labelInfo part of the response.",
          "examples": ["labelId1,labelId2"],
          "nullable": true,
          "title": "Include Labels",
          "type": "string"
        },
        "includePermissionsForView": {
          "default": null,
          "description": "Specifies which additional view's permissions to include in the response. Only 'published' is supported.",
          "examples": ["published"],
          "nullable": true,
          "title": "Include Permissions For View",
          "type": "string"
        },
        "keepRevisionForever": {
          "default": null,
          "description": "Whether to set the 'keepForever' field in the new head revision.",
          "examples": [false],
          "nullable": true,
          "title": "Keep Revision Forever",
          "type": "boolean"
        },
        "name": {
          "description": "The name of the shortcut.",
          "examples": ["My Shortcut to Important Document"],
          "title": "Name",
          "type": "string"
        },
        "supportsAllDrives": {
          "default": null,
          "description": "Whether the requesting application supports both My Drives and shared drives. Recommended to set to true if interacting with shared drives.",
          "examples": [true],
          "nullable": true,
          "title": "Supports All Drives",
          "type": "boolean"
        },
        "target_id": {
          "description": "The ID of the file or folder that this shortcut points to.",
          "examples": ["1_DRbC10_AYSg3tNA2c2P9H2a26n9_2VA"],
          "title": "Target Id",
          "type": "string"
        },
        "target_mime_type": {
          "default": null,
          "description": "The MIME type of the target file or folder. While optional, providing it can be helpful.",
          "examples": ["application/vnd.google-apps.document"],
          "nullable": true,
          "title": "Target Mime Type",
          "type": "string"
        }
      },
      "required": ["name", "target_id"],
      "title": "CreateShortcutToFileRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "driveId": {
              "default": null,
              "description": "The ID of the drive the file resides in. Only populated for items in shared drives.",
              "nullable": true,
              "title": "Drive Id",
              "type": "string"
            },
            "id": { "description": "The ID of the file.", "title": "Id", "type": "string" },
            "kind": {
              "description": "Identifies what kind of resource this is. Value: the fixed string 'drive#file'.",
              "title": "Kind",
              "type": "string"
            },
            "mimeType": {
              "description": "The MIME type of the file.",
              "title": "Mime Type",
              "type": "string"
            },
            "name": { "description": "The name of the file.", "title": "Name", "type": "string" },
            "shortcutDetails": {
              "additionalProperties": false,
              "default": null,
              "description": "Shortcut file details. Only populated for shortcut files.",
              "nullable": true,
              "properties": {
                "targetId": {
                  "description": "The ID of the file or folder that this shortcut points to.",
                  "examples": ["1_DRbC10_AYSg3tNA2c2P9H2a26n9_2VA"],
                  "title": "Target Id",
                  "type": "string"
                },
                "targetMimeType": {
                  "default": null,
                  "description": "The MIME type of the target.",
                  "examples": ["application/vnd.google-apps.folder"],
                  "nullable": true,
                  "title": "Target Mime Type",
                  "type": "string"
                }
              },
              "required": ["targetId"],
              "title": "ShortcutDetails",
              "type": "object"
            },
            "teamDriveId": {
              "default": null,
              "description": "The ID of the shared drive the file resides in. Only populated for items in shared drives.",
              "nullable": true,
              "title": "Team Drive Id",
              "type": "string"
            }
          },
          "required": ["kind", "id", "name", "mimeType"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateShortcutToFileResponseWrapper",
      "type": "object"
    },
    "description": "Tool to create a shortcut to a file or folder in google drive. use when you need to link to an existing drive item from another location without duplicating it.",
    "tags": ["openWorldHint", "important", "file management", "shortcuts"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete Comment",
    "slug": "GOOGLEDRIVE_DELETE_COMMENT",
    "input_parameters": {
      "properties": {
        "comment_id": {
          "description": "The ID of the comment.",
          "examples": ["1234567890"],
          "title": "Comment Id",
          "type": "string"
        },
        "file_id": {
          "description": "The ID of the file.",
          "examples": ["1a2b3c4d5e6f7g8h9i0j"],
          "title": "File Id",
          "type": "string"
        }
      },
      "required": ["file_id", "comment_id"],
      "title": "DeleteCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "message": {
              "default": "Comment deleted successfully.",
              "description": "A message indicating the success of the operation.",
              "title": "Message",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteCommentResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a comment from a file. use when you need to remove a specific comment from a google drive file.",
    "tags": ["important", "comment"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete Shared Drive",
    "slug": "GOOGLEDRIVE_DELETE_DRIVE",
    "input_parameters": {
      "properties": {
        "allowItemDeletion": {
          "default": null,
          "description": "Whether any items inside the shared drive should also be deleted. This option is only supported when `useDomainAdminAccess` is also set to `true`.",
          "examples": [true],
          "nullable": true,
          "title": "Allow Item Deletion",
          "type": "boolean"
        },
        "driveId": {
          "description": "The ID of the shared drive.",
          "examples": ["0AEMyflX29xHjUk9PVA"],
          "title": "Drive Id",
          "type": "string"
        },
        "useDomainAdminAccess": {
          "default": null,
          "description": "Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the shared drive belongs.",
          "examples": [true],
          "nullable": true,
          "title": "Use Domain Admin Access",
          "type": "boolean"
        }
      },
      "required": ["driveId"],
      "title": "DeleteDriveRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {},
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteDriveResponseWrapper",
      "type": "object"
    },
    "description": "Tool to permanently delete a shared drive. use when you need to remove a shared drive and its contents (if specified).",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "important", "drive", "delete"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete Permission",
    "slug": "GOOGLEDRIVE_DELETE_PERMISSION",
    "input_parameters": {
      "properties": {
        "file_id": {
          "description": "The ID of the file or shared drive.",
          "examples": ["1a2b3c4d5e6f7g8h9i0j"],
          "title": "File Id",
          "type": "string"
        },
        "permission_id": {
          "description": "The ID of the permission.",
          "examples": ["1234567890"],
          "title": "Permission Id",
          "type": "string"
        },
        "supportsAllDrives": {
          "default": null,
          "description": "Whether the requesting application supports both My Drives and shared drives.",
          "nullable": true,
          "title": "Supports All Drives",
          "type": "boolean"
        },
        "useDomainAdminAccess": {
          "default": null,
          "description": "Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.",
          "nullable": true,
          "title": "Use Domain Admin Access",
          "type": "boolean"
        }
      },
      "required": ["file_id", "permission_id"],
      "title": "DeletePermissionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "success": {
              "default": true,
              "description": "Indicates whether the permission was deleted successfully.",
              "title": "Success",
              "type": "boolean"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeletePermissionResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a permission from a file by permission id. use when you need to revoke access for a specific user or group from a file.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "important", "permission"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete Reply",
    "slug": "GOOGLEDRIVE_DELETE_REPLY",
    "input_parameters": {
      "properties": {
        "comment_id": {
          "description": "The ID of the comment.",
          "examples": ["AAAA_example_comment_id"],
          "title": "Comment Id",
          "type": "string"
        },
        "file_id": {
          "description": "The ID of the file.",
          "examples": ["1ZdR3L3Kek7szY1j11SQZ9A_00up1j2xG"],
          "title": "File Id",
          "type": "string"
        },
        "reply_id": {
          "description": "The ID of the reply.",
          "examples": ["AAAA_example_reply_id"],
          "title": "Reply Id",
          "type": "string"
        }
      },
      "required": ["file_id", "comment_id", "reply_id"],
      "title": "DeleteReplyRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {},
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteReplyResponseWrapper",
      "type": "object"
    },
    "description": "Tool to delete a specific reply by reply id. use when you need to remove a reply from a comment on a file.",
    "tags": ["important", "comment", "reply"]
  },
  {
    "available_versions": ["latest"],
    "name": "Download a file from Google Drive",
    "slug": "GOOGLEDRIVE_DOWNLOAD_FILE",
    "input_parameters": {
      "properties": {
        "file_id": {
          "description": "The unique identifier of the file to be downloaded from Google Drive. This ID can typically be found in the file's URL in Google Drive or obtained from API calls that list files.",
          "examples": ["1aBcDeFgHiJkLmNoPqRsTuVwXyZ0123456789"],
          "title": "File Id",
          "type": "string"
        },
        "mime_type": {
          "default": null,
          "description": "Target MIME type for exporting Google Workspace documents (e.g., Google Doc, Sheet, Slide). Supported export formats vary by file type; e.g., text/plain is only supported for Google Docs, not Sheets or Slides. This parameter is automatically ignored for non-Google Workspace files, which are downloaded in their native format. Only specify this when you want to export a Google Workspace document to a different format (e.g., export Google Doc to PDF).",
          "enum": [
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            "application/vnd.oasis.opendocument.text",
            "application/rtf",
            "application/pdf",
            "text/plain",
            "application/zip",
            "application/epub+zip",
            "text/markdown",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            "application/x-vnd.oasis.opendocument.spreadsheet",
            "text/csv",
            "text/tab-separated-values",
            "application/vnd.openxmlformats-officedocument.presentationml.presentation",
            "application/vnd.oasis.opendocument.presentation",
            "image/jpeg",
            "image/png",
            "image/svg+xml",
            "application/vnd.google-apps.script+json",
            "application/vnd.google-apps.vid"
          ],
          "examples": [
            "application/pdf",
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            "text/csv",
            "text/plain"
          ],
          "nullable": true,
          "title": "MimeType",
          "type": "string"
        }
      },
      "required": ["file_id"],
      "title": "DownloadFileRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "downloaded_file_content": {
              "additionalProperties": false,
              "description": "A reference to the downloaded file content. If the original file was a Google Workspace document and a mime_type was specified for export, this content will be in the exported format. Otherwise, it will be the original file content.",
              "file_downloadable": true,
              "properties": {
                "mimetype": {
                  "description": "Mime type of the file.",
                  "title": "Mimetype",
                  "type": "string"
                },
                "name": { "description": "Name of the file", "title": "Name", "type": "string" },
                "s3url": { "description": "URL of the file.", "title": "S3Url", "type": "string" }
              },
              "required": ["name", "mimetype", "s3url"],
              "title": "Downloaded File Content",
              "type": "object"
            },
            "id": {
              "default": null,
              "description": "The ID of the file.",
              "nullable": true,
              "title": "Id",
              "type": "string"
            },
            "kind": {
              "default": "drive#file",
              "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#file\".",
              "nullable": true,
              "title": "Kind",
              "type": "string"
            },
            "mimeType": {
              "default": null,
              "description": "The MIME type of the file.",
              "nullable": true,
              "title": "Mime Type",
              "type": "string"
            },
            "name": {
              "default": null,
              "description": "The name of the file.",
              "nullable": true,
              "title": "Name",
              "type": "string"
            }
          },
          "required": ["downloaded_file_content"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DownloadFileResponseWrapper",
      "type": "object"
    },
    "description": "Downloads a file from google drive by its id. for google workspace documents (docs, sheets, slides), optionally exports to a specified `mime type`. for other file types, downloads in their native format regardless of mime type.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "important"]
  },
  {
    "available_versions": ["latest"],
    "name": "Edit File",
    "slug": "GOOGLEDRIVE_EDIT_FILE",
    "input_parameters": {
      "properties": {
        "content": {
          "description": "New textual content to overwrite the existing file; will be UTF-8 encoded for upload.",
          "title": "Content",
          "type": "string"
        },
        "file_id": {
          "description": "Identifier of the Google Drive file to update.",
          "title": "File Id",
          "type": "string"
        },
        "mime_type": {
          "default": "text/plain",
          "description": "MIME type of the 'content' being uploaded; must accurately represent its format.",
          "examples": [
            "text/plain",
            "text/html",
            "text/csv",
            "application/json",
            "application/xml",
            "application/javascript"
          ],
          "title": "Mime Type",
          "type": "string"
        }
      },
      "required": ["file_id", "content"],
      "title": "EditFileRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "appProperties": {
              "additionalProperties": { "type": "string" },
              "default": null,
              "description": "A collection of arbitrary key-value pairs which are visible to all apps.",
              "nullable": true,
              "title": "App Properties",
              "type": "object"
            },
            "capabilities": {
              "additionalProperties": false,
              "default": null,
              "description": "Capabilities the current user has on this file.",
              "nullable": true,
              "properties": {
                "canAcceptOwnership": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Accept Ownership",
                  "type": "boolean"
                },
                "canAddChildren": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Add Children",
                  "type": "boolean"
                },
                "canAddFolderFromAnotherDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Add Folder From Another Drive",
                  "type": "boolean"
                },
                "canAddMyDriveParent": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Add My Drive Parent",
                  "type": "boolean"
                },
                "canChangeCopyRequiresWriterPermission": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Change Copy Requires Writer Permission",
                  "type": "boolean"
                },
                "canChangeSecurityUpdateEnabled": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Change Security Update Enabled",
                  "type": "boolean"
                },
                "canChangeViewersCanCopyContent": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Change Viewers Can Copy Content",
                  "type": "boolean"
                },
                "canComment": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Comment",
                  "type": "boolean"
                },
                "canCopy": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Copy",
                  "type": "boolean"
                },
                "canDelete": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Delete",
                  "type": "boolean"
                },
                "canDeleteChildren": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Delete Children",
                  "type": "boolean"
                },
                "canDisableInheritedPermissions": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Disable Inherited Permissions",
                  "type": "boolean"
                },
                "canDownload": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Download",
                  "type": "boolean"
                },
                "canEdit": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Edit",
                  "type": "boolean"
                },
                "canEnableInheritedPermissions": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Enable Inherited Permissions",
                  "type": "boolean"
                },
                "canListChildren": {
                  "default": null,
                  "nullable": true,
                  "title": "Can List Children",
                  "type": "boolean"
                },
                "canModifyContent": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Modify Content",
                  "type": "boolean"
                },
                "canModifyContentRestriction": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Modify Content Restriction",
                  "type": "boolean"
                },
                "canModifyEditorContentRestriction": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Modify Editor Content Restriction",
                  "type": "boolean"
                },
                "canModifyLabels": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Modify Labels",
                  "type": "boolean"
                },
                "canModifyOwnerContentRestriction": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Modify Owner Content Restriction",
                  "type": "boolean"
                },
                "canMoveChildrenOutOfDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Move Children Out Of Drive",
                  "type": "boolean"
                },
                "canMoveChildrenOutOfTeamDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Move Children Out Of Team Drive",
                  "type": "boolean"
                },
                "canMoveChildrenWithinDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Move Children Within Drive",
                  "type": "boolean"
                },
                "canMoveChildrenWithinTeamDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Move Children Within Team Drive",
                  "type": "boolean"
                },
                "canMoveItemIntoTeamDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Move Item Into Team Drive",
                  "type": "boolean"
                },
                "canMoveItemOutOfDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Move Item Out Of Drive",
                  "type": "boolean"
                },
                "canMoveItemOutOfTeamDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Move Item Out Of Team Drive",
                  "type": "boolean"
                },
                "canMoveItemWithinDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Move Item Within Drive",
                  "type": "boolean"
                },
                "canMoveItemWithinTeamDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Move Item Within Team Drive",
                  "type": "boolean"
                },
                "canMoveTeamDriveItem": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Move Team Drive Item",
                  "type": "boolean"
                },
                "canReadDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Read Drive",
                  "type": "boolean"
                },
                "canReadLabels": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Read Labels",
                  "type": "boolean"
                },
                "canReadRevisions": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Read Revisions",
                  "type": "boolean"
                },
                "canReadTeamDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Read Team Drive",
                  "type": "boolean"
                },
                "canRemoveChildren": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Remove Children",
                  "type": "boolean"
                },
                "canRemoveContentRestriction": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Remove Content Restriction",
                  "type": "boolean"
                },
                "canRemoveMyDriveParent": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Remove My Drive Parent",
                  "type": "boolean"
                },
                "canRename": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Rename",
                  "type": "boolean"
                },
                "canShare": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Share",
                  "type": "boolean"
                },
                "canTrash": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Trash",
                  "type": "boolean"
                },
                "canTrashChildren": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Trash Children",
                  "type": "boolean"
                },
                "canUntrash": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Untrash",
                  "type": "boolean"
                }
              },
              "title": "FileCapabilities",
              "type": "object"
            },
            "contentHints": {
              "additionalProperties": false,
              "default": null,
              "description": "Additional information about the content of the file.",
              "nullable": true,
              "properties": {
                "indexableText": {
                  "default": null,
                  "description": "Text to be indexed for the file to improve searchability.",
                  "nullable": true,
                  "title": "Indexable Text",
                  "type": "string"
                },
                "thumbnail": {
                  "additionalProperties": false,
                  "default": null,
                  "description": "A thumbnail for the file.",
                  "nullable": true,
                  "properties": {
                    "image": {
                      "default": null,
                      "description": "A Base64 encoded image.",
                      "nullable": true,
                      "title": "Image",
                      "type": "string"
                    },
                    "mimeType": {
                      "default": null,
                      "description": "The MIME type of the thumbnail.",
                      "nullable": true,
                      "title": "Mime Type",
                      "type": "string"
                    }
                  },
                  "title": "ContentHintsThumbnail",
                  "type": "object"
                }
              },
              "title": "ContentHints",
              "type": "object"
            },
            "contentRestrictions": {
              "default": null,
              "description": "Content restrictions for this file.",
              "items": {
                "properties": {
                  "ownerRestricted": {
                    "default": null,
                    "nullable": true,
                    "title": "Owner Restricted",
                    "type": "boolean"
                  },
                  "readOnly": {
                    "default": null,
                    "nullable": true,
                    "title": "Read Only",
                    "type": "boolean"
                  },
                  "reason": {
                    "default": null,
                    "nullable": true,
                    "title": "Reason",
                    "type": "string"
                  },
                  "restrictingUser": {
                    "additionalProperties": false,
                    "default": null,
                    "nullable": true,
                    "properties": {
                      "displayName": {
                        "default": null,
                        "description": "A plain text displayable name for this user.",
                        "nullable": true,
                        "title": "Display Name",
                        "type": "string"
                      },
                      "emailAddress": {
                        "default": null,
                        "description": "The email address of the user.",
                        "nullable": true,
                        "title": "Email Address",
                        "type": "string"
                      },
                      "kind": {
                        "default": null,
                        "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#user\".",
                        "nullable": true,
                        "title": "Kind",
                        "type": "string"
                      },
                      "me": {
                        "default": null,
                        "description": "Whether this user is the requesting user.",
                        "nullable": true,
                        "title": "Me",
                        "type": "boolean"
                      },
                      "permissionId": {
                        "default": null,
                        "description": "The user's ID as visible in Permission resources.",
                        "nullable": true,
                        "title": "Permission Id",
                        "type": "string"
                      },
                      "photoLink": {
                        "default": null,
                        "description": "A link to the user's profile photo, if available.",
                        "nullable": true,
                        "title": "Photo Link",
                        "type": "string"
                      }
                    },
                    "title": "User",
                    "type": "object"
                  },
                  "restrictionTime": {
                    "default": null,
                    "nullable": true,
                    "title": "Restriction Time",
                    "type": "string"
                  },
                  "type": { "default": null, "nullable": true, "title": "Type", "type": "string" }
                },
                "title": "ContentRestriction",
                "type": "object"
              },
              "nullable": true,
              "title": "Content Restrictions",
              "type": "array"
            },
            "copyRequiresWriterPermission": {
              "default": null,
              "description": "Whether copying this file requires writer permission.",
              "nullable": true,
              "title": "Copy Requires Writer Permission",
              "type": "boolean"
            },
            "createdTime": {
              "default": null,
              "description": "The time at which the file was created (RFC 3339 date-time).",
              "nullable": true,
              "title": "Created Time",
              "type": "string"
            },
            "description": {
              "default": null,
              "description": "A short description of the file.",
              "nullable": true,
              "title": "Description",
              "type": "string"
            },
            "driveId": {
              "default": null,
              "description": "The ID of the shared drive the file resides in. Only populated for items in shared drives.",
              "nullable": true,
              "title": "Drive Id",
              "type": "string"
            },
            "explicitlyTrashed": {
              "default": null,
              "description": "Whether the file has been explicitly trashed, as opposed to recursively trashed from a parent folder.",
              "nullable": true,
              "title": "Explicitly Trashed",
              "type": "boolean"
            },
            "exportLinks": {
              "additionalProperties": { "type": "string" },
              "default": null,
              "description": "Links for exporting Google Docs Editors files to specific formats.",
              "nullable": true,
              "title": "Export Links",
              "type": "object"
            },
            "fileExtension": {
              "default": null,
              "description": "The file extension extracted from the name field.",
              "nullable": true,
              "title": "File Extension",
              "type": "string"
            },
            "folderColorRgb": {
              "default": null,
              "description": "The color for a folder as an RGB hex string.",
              "nullable": true,
              "title": "Folder Color Rgb",
              "type": "string"
            },
            "fullFileExtension": {
              "default": null,
              "description": "The full file extension extracted from the name field.",
              "nullable": true,
              "title": "Full File Extension",
              "type": "string"
            },
            "hasAugmentedPermissions": {
              "default": null,
              "description": "Whether there are permissions directly on this file. This field is only populated for items in shared drives.",
              "nullable": true,
              "title": "Has Augmented Permissions",
              "type": "boolean"
            },
            "hasThumbnail": {
              "default": null,
              "description": "Whether this file has a thumbnail.",
              "nullable": true,
              "title": "Has Thumbnail",
              "type": "boolean"
            },
            "headRevisionId": {
              "default": null,
              "description": "The ID of the head revision of the file.",
              "nullable": true,
              "title": "Head Revision Id",
              "type": "string"
            },
            "iconLink": {
              "default": null,
              "description": "A static, publicly accessible link to the file's icon.",
              "nullable": true,
              "title": "Icon Link",
              "type": "string"
            },
            "id": {
              "description": "Unique identifier of the edited file.",
              "title": "Id",
              "type": "string"
            },
            "imageMediaMetadata": {
              "additionalProperties": false,
              "default": null,
              "description": "Metadata for image media.",
              "nullable": true,
              "properties": {
                "aperture": {
                  "default": null,
                  "nullable": true,
                  "title": "Aperture",
                  "type": "number"
                },
                "cameraMake": {
                  "default": null,
                  "nullable": true,
                  "title": "Camera Make",
                  "type": "string"
                },
                "cameraModel": {
                  "default": null,
                  "nullable": true,
                  "title": "Camera Model",
                  "type": "string"
                },
                "colorSpace": {
                  "default": null,
                  "nullable": true,
                  "title": "Color Space",
                  "type": "string"
                },
                "exposureBias": {
                  "default": null,
                  "nullable": true,
                  "title": "Exposure Bias",
                  "type": "number"
                },
                "exposureMode": {
                  "default": null,
                  "nullable": true,
                  "title": "Exposure Mode",
                  "type": "string"
                },
                "exposureTime": {
                  "default": null,
                  "nullable": true,
                  "title": "Exposure Time",
                  "type": "number"
                },
                "flashUsed": {
                  "default": null,
                  "nullable": true,
                  "title": "Flash Used",
                  "type": "boolean"
                },
                "focalLength": {
                  "default": null,
                  "nullable": true,
                  "title": "Focal Length",
                  "type": "number"
                },
                "height": {
                  "default": null,
                  "nullable": true,
                  "title": "Height",
                  "type": "integer"
                },
                "isoSpeed": {
                  "default": null,
                  "nullable": true,
                  "title": "Iso Speed",
                  "type": "integer"
                },
                "location": {
                  "additionalProperties": false,
                  "default": null,
                  "nullable": true,
                  "properties": {
                    "altitude": {
                      "default": null,
                      "nullable": true,
                      "title": "Altitude",
                      "type": "number"
                    },
                    "latitude": {
                      "default": null,
                      "nullable": true,
                      "title": "Latitude",
                      "type": "number"
                    },
                    "longitude": {
                      "default": null,
                      "nullable": true,
                      "title": "Longitude",
                      "type": "number"
                    }
                  },
                  "title": "ImageMediaMetadataLocation",
                  "type": "object"
                },
                "maxApertureValue": {
                  "default": null,
                  "nullable": true,
                  "title": "Max Aperture Value",
                  "type": "number"
                },
                "meteringMode": {
                  "default": null,
                  "nullable": true,
                  "title": "Metering Mode",
                  "type": "string"
                },
                "rotation": {
                  "default": null,
                  "nullable": true,
                  "title": "Rotation",
                  "type": "integer"
                },
                "sensor": {
                  "default": null,
                  "nullable": true,
                  "title": "Sensor",
                  "type": "string"
                },
                "subjectDistance": {
                  "default": null,
                  "nullable": true,
                  "title": "Subject Distance",
                  "type": "integer"
                },
                "time": { "default": null, "nullable": true, "title": "Time", "type": "string" },
                "whiteBalance": {
                  "default": null,
                  "nullable": true,
                  "title": "White Balance",
                  "type": "string"
                },
                "width": { "default": null, "nullable": true, "title": "Width", "type": "integer" }
              },
              "title": "ImageMediaMetadata",
              "type": "object"
            },
            "isAppAuthorized": {
              "default": null,
              "description": "Whether the file was created or opened by the requesting app.",
              "nullable": true,
              "title": "Is App Authorized",
              "type": "boolean"
            },
            "kind": {
              "description": "Resource kind, typically 'drive#file'.",
              "title": "Kind",
              "type": "string"
            },
            "labelInfo": {
              "additionalProperties": false,
              "default": null,
              "description": "Information about custom labels applied to this file.",
              "nullable": true,
              "properties": {
                "labels": {
                  "default": null,
                  "items": {
                    "properties": {
                      "fields": {
                        "additionalProperties": true,
                        "default": null,
                        "nullable": true,
                        "title": "Fields",
                        "type": "object"
                      },
                      "id": { "default": null, "nullable": true, "title": "Id", "type": "string" },
                      "kind": {
                        "default": null,
                        "nullable": true,
                        "title": "Kind",
                        "type": "string"
                      },
                      "revisionId": {
                        "default": null,
                        "nullable": true,
                        "title": "Revision Id",
                        "type": "string"
                      }
                    },
                    "title": "Label",
                    "type": "object"
                  },
                  "nullable": true,
                  "title": "Labels",
                  "type": "array"
                }
              },
              "title": "LabelInfo",
              "type": "object"
            },
            "lastModifyingUser": {
              "additionalProperties": false,
              "default": null,
              "description": "The last user to modify the file.",
              "nullable": true,
              "properties": {
                "displayName": {
                  "default": null,
                  "description": "A plain text displayable name for this user.",
                  "nullable": true,
                  "title": "Display Name",
                  "type": "string"
                },
                "emailAddress": {
                  "default": null,
                  "description": "The email address of the user.",
                  "nullable": true,
                  "title": "Email Address",
                  "type": "string"
                },
                "kind": {
                  "default": null,
                  "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#user\".",
                  "nullable": true,
                  "title": "Kind",
                  "type": "string"
                },
                "me": {
                  "default": null,
                  "description": "Whether this user is the requesting user.",
                  "nullable": true,
                  "title": "Me",
                  "type": "boolean"
                },
                "permissionId": {
                  "default": null,
                  "description": "The user's ID as visible in Permission resources.",
                  "nullable": true,
                  "title": "Permission Id",
                  "type": "string"
                },
                "photoLink": {
                  "default": null,
                  "description": "A link to the user's profile photo, if available.",
                  "nullable": true,
                  "title": "Photo Link",
                  "type": "string"
                }
              },
              "title": "User",
              "type": "object"
            },
            "linkShareMetadata": {
              "additionalProperties": false,
              "default": null,
              "description": "Metadata about the shared link for this file.",
              "nullable": true,
              "properties": {
                "securityUpdateEligible": {
                  "default": null,
                  "nullable": true,
                  "title": "Security Update Eligible",
                  "type": "boolean"
                },
                "securityUpdateEnabled": {
                  "default": null,
                  "nullable": true,
                  "title": "Security Update Enabled",
                  "type": "boolean"
                }
              },
              "title": "LinkShareMetadata",
              "type": "object"
            },
            "md5Checksum": {
              "default": null,
              "description": "The MD5 checksum for the content of this file.",
              "nullable": true,
              "title": "Md5 Checksum",
              "type": "string"
            },
            "mimeType": {
              "default": null,
              "description": "MIME type of the edited file.",
              "nullable": true,
              "title": "Mime Type",
              "type": "string"
            },
            "modifiedByMe": {
              "default": null,
              "description": "Whether the file has been modified by this user.",
              "nullable": true,
              "title": "Modified By Me",
              "type": "boolean"
            },
            "modifiedByMeTime": {
              "default": null,
              "description": "The last time the file was modified by the user (RFC 3339 date-time).",
              "nullable": true,
              "title": "Modified By Me Time",
              "type": "string"
            },
            "modifiedTime": {
              "default": null,
              "description": "The last time the file was modified by anyone (RFC 3339 date-time).",
              "nullable": true,
              "title": "Modified Time",
              "type": "string"
            },
            "name": {
              "default": null,
              "description": "Name of the edited file.",
              "nullable": true,
              "title": "Name",
              "type": "string"
            },
            "originalFilename": {
              "default": null,
              "description": "The original filename of the uploaded content if the file was uploaded from a file.",
              "nullable": true,
              "title": "Original Filename",
              "type": "string"
            },
            "ownedByMe": {
              "default": null,
              "description": "Whether the user owns the file.",
              "nullable": true,
              "title": "Owned By Me",
              "type": "boolean"
            },
            "owners": {
              "default": null,
              "description": "A list of users who own the file.",
              "items": {
                "properties": {
                  "displayName": {
                    "default": null,
                    "description": "A plain text displayable name for this user.",
                    "nullable": true,
                    "title": "Display Name",
                    "type": "string"
                  },
                  "emailAddress": {
                    "default": null,
                    "description": "The email address of the user.",
                    "nullable": true,
                    "title": "Email Address",
                    "type": "string"
                  },
                  "kind": {
                    "default": null,
                    "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#user\".",
                    "nullable": true,
                    "title": "Kind",
                    "type": "string"
                  },
                  "me": {
                    "default": null,
                    "description": "Whether this user is the requesting user.",
                    "nullable": true,
                    "title": "Me",
                    "type": "boolean"
                  },
                  "permissionId": {
                    "default": null,
                    "description": "The user's ID as visible in Permission resources.",
                    "nullable": true,
                    "title": "Permission Id",
                    "type": "string"
                  },
                  "photoLink": {
                    "default": null,
                    "description": "A link to the user's profile photo, if available.",
                    "nullable": true,
                    "title": "Photo Link",
                    "type": "string"
                  }
                },
                "title": "User",
                "type": "object"
              },
              "nullable": true,
              "title": "Owners",
              "type": "array"
            },
            "parents": {
              "default": null,
              "description": "The IDs of the parent folders which contain the file.",
              "items": { "properties": {}, "type": "string" },
              "nullable": true,
              "title": "Parents",
              "type": "array"
            },
            "permissionIds": {
              "default": null,
              "description": "A list of permission IDs for the file.",
              "items": { "properties": {}, "type": "string" },
              "nullable": true,
              "title": "Permission Ids",
              "type": "array"
            },
            "permissions": {
              "default": null,
              "description": "The permissions for the file. Only populated if explicitly requested.",
              "items": {
                "properties": {
                  "allowFileDiscovery": {
                    "default": null,
                    "nullable": true,
                    "title": "Allow File Discovery",
                    "type": "boolean"
                  },
                  "deleted": {
                    "default": null,
                    "nullable": true,
                    "title": "Deleted",
                    "type": "boolean"
                  },
                  "displayName": {
                    "default": null,
                    "nullable": true,
                    "title": "Display Name",
                    "type": "string"
                  },
                  "domain": {
                    "default": null,
                    "nullable": true,
                    "title": "Domain",
                    "type": "string"
                  },
                  "emailAddress": {
                    "default": null,
                    "nullable": true,
                    "title": "Email Address",
                    "type": "string"
                  },
                  "expirationTime": {
                    "default": null,
                    "nullable": true,
                    "title": "Expiration Time",
                    "type": "string"
                  },
                  "id": { "default": null, "nullable": true, "title": "Id", "type": "string" },
                  "inherited": {
                    "default": null,
                    "nullable": true,
                    "title": "Inherited",
                    "type": "boolean"
                  },
                  "inheritedFrom": {
                    "default": null,
                    "nullable": true,
                    "title": "Inherited From",
                    "type": "string"
                  },
                  "kind": { "default": null, "nullable": true, "title": "Kind", "type": "string" },
                  "permissionDetails": {
                    "default": null,
                    "items": {
                      "properties": {
                        "inherited": {
                          "default": null,
                          "nullable": true,
                          "title": "Inherited",
                          "type": "boolean"
                        },
                        "inheritedFrom": {
                          "default": null,
                          "nullable": true,
                          "title": "Inherited From",
                          "type": "string"
                        },
                        "permissionType": {
                          "default": null,
                          "nullable": true,
                          "title": "Permission Type",
                          "type": "string"
                        },
                        "role": {
                          "default": null,
                          "nullable": true,
                          "title": "Role",
                          "type": "string"
                        }
                      },
                      "title": "PermissionPermissionDetails",
                      "type": "object"
                    },
                    "nullable": true,
                    "title": "Permission Details",
                    "type": "array"
                  },
                  "photoLink": {
                    "default": null,
                    "nullable": true,
                    "title": "Photo Link",
                    "type": "string"
                  },
                  "role": { "default": null, "nullable": true, "title": "Role", "type": "string" },
                  "teamDrivePermissionDetails": {
                    "default": null,
                    "items": {
                      "properties": {
                        "inherited": {
                          "default": null,
                          "nullable": true,
                          "title": "Inherited",
                          "type": "boolean"
                        },
                        "inheritedFrom": {
                          "default": null,
                          "nullable": true,
                          "title": "Inherited From",
                          "type": "string"
                        },
                        "permissionType": {
                          "default": null,
                          "nullable": true,
                          "title": "Permission Type",
                          "type": "string"
                        },
                        "role": {
                          "default": null,
                          "nullable": true,
                          "title": "Role",
                          "type": "string"
                        }
                      },
                      "title": "PermissionPermissionDetails",
                      "type": "object"
                    },
                    "nullable": true,
                    "title": "Team Drive Permission Details",
                    "type": "array"
                  },
                  "type": { "default": null, "nullable": true, "title": "Type", "type": "string" }
                },
                "title": "Permission",
                "type": "object"
              },
              "nullable": true,
              "title": "Permissions",
              "type": "array"
            },
            "properties": {
              "additionalProperties": { "type": "string" },
              "default": null,
              "description": "A collection of arbitrary key-value pairs which are private to the requesting app.",
              "nullable": true,
              "title": "Properties",
              "type": "object"
            },
            "quotaBytesUsed": {
              "default": null,
              "description": "The number of quota bytes used by this file.",
              "nullable": true,
              "title": "Quota Bytes Used",
              "type": "string"
            },
            "resourceKey": {
              "default": null,
              "description": "A resource key for the file.",
              "nullable": true,
              "title": "Resource Key",
              "type": "string"
            },
            "sha1Checksum": {
              "default": null,
              "description": "The SHA1 checksum for the content of this file.",
              "nullable": true,
              "title": "Sha1 Checksum",
              "type": "string"
            },
            "sha256Checksum": {
              "default": null,
              "description": "The SHA256 checksum for the content of this file.",
              "nullable": true,
              "title": "Sha256 Checksum",
              "type": "string"
            },
            "shared": {
              "default": null,
              "description": "Whether the file has been shared.",
              "nullable": true,
              "title": "Shared",
              "type": "boolean"
            },
            "sharedWithMeTime": {
              "default": null,
              "description": "The time at which the file was shared with the user (RFC 3339 date-time).",
              "nullable": true,
              "title": "Shared With Me Time",
              "type": "string"
            },
            "sharingUser": {
              "additionalProperties": false,
              "default": null,
              "description": "The user who shared the file with the requesting user, if applicable.",
              "nullable": true,
              "properties": {
                "displayName": {
                  "default": null,
                  "description": "A plain text displayable name for this user.",
                  "nullable": true,
                  "title": "Display Name",
                  "type": "string"
                },
                "emailAddress": {
                  "default": null,
                  "description": "The email address of the user.",
                  "nullable": true,
                  "title": "Email Address",
                  "type": "string"
                },
                "kind": {
                  "default": null,
                  "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#user\".",
                  "nullable": true,
                  "title": "Kind",
                  "type": "string"
                },
                "me": {
                  "default": null,
                  "description": "Whether this user is the requesting user.",
                  "nullable": true,
                  "title": "Me",
                  "type": "boolean"
                },
                "permissionId": {
                  "default": null,
                  "description": "The user's ID as visible in Permission resources.",
                  "nullable": true,
                  "title": "Permission Id",
                  "type": "string"
                },
                "photoLink": {
                  "default": null,
                  "description": "A link to the user's profile photo, if available.",
                  "nullable": true,
                  "title": "Photo Link",
                  "type": "string"
                }
              },
              "title": "User",
              "type": "object"
            },
            "shortcutDetails": {
              "additionalProperties": false,
              "default": null,
              "description": "Shortcut file details. Only populated for shortcut files.",
              "nullable": true,
              "properties": {
                "targetId": {
                  "default": null,
                  "description": "The ID of the file that this shortcut points to.",
                  "nullable": true,
                  "title": "Target Id",
                  "type": "string"
                },
                "targetMimeType": {
                  "default": null,
                  "description": "The MIME type of the file that this shortcut points to.",
                  "nullable": true,
                  "title": "Target Mime Type",
                  "type": "string"
                },
                "targetResourceKey": {
                  "default": null,
                  "description": "The resource key of the target file.",
                  "nullable": true,
                  "title": "Target Resource Key",
                  "type": "string"
                }
              },
              "title": "ShortcutDetails",
              "type": "object"
            },
            "size": {
              "default": null,
              "description": "The size of the file's content in bytes. This is only applicable to files with binary content.",
              "nullable": true,
              "title": "Size",
              "type": "string"
            },
            "spaces": {
              "default": null,
              "description": "The spaces which contain the file. The currently supported values are 'drive', 'appDataFolder' and 'photos'.",
              "items": { "properties": {}, "type": "string" },
              "nullable": true,
              "title": "Spaces",
              "type": "array"
            },
            "starred": {
              "default": null,
              "description": "Whether the user has starred the file.",
              "nullable": true,
              "title": "Starred",
              "type": "boolean"
            },
            "thumbnailLink": {
              "default": null,
              "description": "A short-lived link to the file's thumbnail. Typically lasts on the order of hours.",
              "nullable": true,
              "title": "Thumbnail Link",
              "type": "string"
            },
            "thumbnailVersion": {
              "default": null,
              "description": "The thumbnail version for use in thumbnail cache invalidation.",
              "nullable": true,
              "title": "Thumbnail Version",
              "type": "string"
            },
            "trashed": {
              "default": null,
              "description": "Whether the file has been trashed.",
              "nullable": true,
              "title": "Trashed",
              "type": "boolean"
            },
            "trashedTime": {
              "default": null,
              "description": "The time that the item was trashed. Only populated for items in shared drives.",
              "nullable": true,
              "title": "Trashed Time",
              "type": "string"
            },
            "trashingUser": {
              "additionalProperties": false,
              "default": null,
              "description": "The user who trashed the file. Only populated for items in shared drives.",
              "nullable": true,
              "properties": {
                "displayName": {
                  "default": null,
                  "description": "A plain text displayable name for this user.",
                  "nullable": true,
                  "title": "Display Name",
                  "type": "string"
                },
                "emailAddress": {
                  "default": null,
                  "description": "The email address of the user.",
                  "nullable": true,
                  "title": "Email Address",
                  "type": "string"
                },
                "kind": {
                  "default": null,
                  "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#user\".",
                  "nullable": true,
                  "title": "Kind",
                  "type": "string"
                },
                "me": {
                  "default": null,
                  "description": "Whether this user is the requesting user.",
                  "nullable": true,
                  "title": "Me",
                  "type": "boolean"
                },
                "permissionId": {
                  "default": null,
                  "description": "The user's ID as visible in Permission resources.",
                  "nullable": true,
                  "title": "Permission Id",
                  "type": "string"
                },
                "photoLink": {
                  "default": null,
                  "description": "A link to the user's profile photo, if available.",
                  "nullable": true,
                  "title": "Photo Link",
                  "type": "string"
                }
              },
              "title": "User",
              "type": "object"
            },
            "version": {
              "default": null,
              "description": "A monotonically increasing version number for the file. This reflects every change made to the file on the server, even those not visible to the user.",
              "nullable": true,
              "title": "Version",
              "type": "string"
            },
            "videoMediaMetadata": {
              "additionalProperties": false,
              "default": null,
              "description": "Metadata for video media.",
              "nullable": true,
              "properties": {
                "durationMillis": {
                  "default": null,
                  "nullable": true,
                  "title": "Duration Millis",
                  "type": "string"
                },
                "height": {
                  "default": null,
                  "nullable": true,
                  "title": "Height",
                  "type": "integer"
                },
                "width": { "default": null, "nullable": true, "title": "Width", "type": "integer" }
              },
              "title": "VideoMediaMetadata",
              "type": "object"
            },
            "viewedByMe": {
              "default": null,
              "description": "Whether the file has been viewed by this user.",
              "nullable": true,
              "title": "Viewed By Me",
              "type": "boolean"
            },
            "viewedByMeTime": {
              "default": null,
              "description": "The last time the file was viewed by the user (RFC 3339 date-time).",
              "nullable": true,
              "title": "Viewed By Me Time",
              "type": "string"
            },
            "viewersCanCopyContent": {
              "default": null,
              "description": "Whether users with viewer permissions are permitted to copy the content of this file.",
              "nullable": true,
              "title": "Viewers Can Copy Content",
              "type": "boolean"
            },
            "webContentLink": {
              "default": null,
              "description": "A link for downloading the content of the file in a browser.",
              "nullable": true,
              "title": "Web Content Link",
              "type": "string"
            },
            "webViewLink": {
              "default": null,
              "description": "A link for opening the file in a relevant Google editor or viewer in a browser.",
              "nullable": true,
              "title": "Web View Link",
              "type": "string"
            },
            "writersCanShare": {
              "default": null,
              "description": "Whether writers can share the document with other users.",
              "nullable": true,
              "title": "Writers Can Share",
              "type": "boolean"
            }
          },
          "required": ["kind", "id"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "EditFileResponseWrapper",
      "type": "object"
    },
    "description": "Updates an existing google drive file by overwriting its entire content with new text (max 10mb).",
    "tags": ["updateHint", "openWorldHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Empty Trash",
    "slug": "GOOGLEDRIVE_EMPTY_TRASH",
    "input_parameters": {
      "properties": {
        "driveId": {
          "default": null,
          "description": "If set, empties the trash of the provided shared drive. This parameter is ignored if the item is not in a shared drive.",
          "examples": ["0ABmN4q4aF7dPUk9PVA"],
          "nullable": true,
          "title": "Drive Id",
          "type": "string"
        },
        "enforceSingleParent": {
          "default": null,
          "description": "Deprecated: If an item is not in a shared drive and its last parent is deleted but the item itself is not, the item will be placed under its owner's root. This parameter is ignored if the item is not in a shared drive.",
          "nullable": true,
          "title": "Enforce Single Parent",
          "type": "boolean"
        }
      },
      "title": "EmptyTrashRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "message": {
              "default": "Trash emptied successfully.",
              "description": "A message indicating the success of the operation.",
              "title": "Message",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "EmptyTrashResponseWrapper",
      "type": "object"
    },
    "description": "Tool to permanently delete all of the user's trashed files. use when you want to empty the trash in google drive.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint", "important", "drive", "files"]
  },
  {
    "available_versions": ["latest"],
    "name": "Modify File Labels",
    "slug": "GOOGLEDRIVE_FILES_MODIFY_LABELS",
    "input_parameters": {
      "properties": {
        "file_id": { "description": "The ID of the file.", "title": "File Id", "type": "string" },
        "kind": {
          "default": "drive#modifyLabelsRequest",
          "description": "This is always drive#modifyLabelsRequest.",
          "nullable": true,
          "title": "Kind",
          "type": "string"
        },
        "label_modifications": {
          "description": "The list of modifications to apply to the labels on the file.",
          "items": {
            "properties": {
              "field_modifications": {
                "default": null,
                "description": "The list of modifications to this label's fields.",
                "items": {
                  "properties": {
                    "field_id": {
                      "description": "The ID of the field to be modified.",
                      "title": "Field Id",
                      "type": "string"
                    },
                    "kind": {
                      "default": "drive#labelFieldModification",
                      "description": "This is always drive#labelFieldModification.",
                      "nullable": true,
                      "title": "Kind",
                      "type": "string"
                    },
                    "set_date_values": {
                      "default": null,
                      "description": "Replaces the value of a `date` field with these new values. The string must be in the RFC 3339 full-date format: YYYY-MM-DD.",
                      "examples": ["2023-10-26"],
                      "items": { "properties": {}, "type": "string" },
                      "nullable": true,
                      "title": "Set Date Values",
                      "type": "array"
                    },
                    "set_integer_values": {
                      "default": null,
                      "description": "Replaces the value of an `integer` field with these new values.",
                      "items": { "properties": {}, "type": "string" },
                      "nullable": true,
                      "title": "Set Integer Values",
                      "type": "array"
                    },
                    "set_selection_values": {
                      "default": null,
                      "description": "Replaces a `selection` field with these new values.",
                      "items": { "properties": {}, "type": "string" },
                      "nullable": true,
                      "title": "Set Selection Values",
                      "type": "array"
                    },
                    "set_text_values": {
                      "default": null,
                      "description": "Sets the value of a `text` field.",
                      "items": { "properties": {}, "type": "string" },
                      "nullable": true,
                      "title": "Set Text Values",
                      "type": "array"
                    },
                    "set_user_values": {
                      "default": null,
                      "description": "Replaces a `user` field with these new values. The values must be valid email addresses.",
                      "items": { "properties": {}, "type": "string" },
                      "nullable": true,
                      "title": "Set User Values",
                      "type": "array"
                    },
                    "unset_values": {
                      "default": null,
                      "description": "Unsets the values for this field.",
                      "nullable": true,
                      "title": "Unset Values",
                      "type": "boolean"
                    }
                  },
                  "required": ["field_id"],
                  "title": "FieldModification",
                  "type": "object"
                },
                "nullable": true,
                "title": "Field Modifications",
                "type": "array"
              },
              "kind": {
                "default": "drive#labelModification",
                "description": "This is always drive#labelModification.",
                "nullable": true,
                "title": "Kind",
                "type": "string"
              },
              "label_id": {
                "description": "The ID of the label to modify.",
                "title": "Label Id",
                "type": "string"
              },
              "remove_label": {
                "default": null,
                "description": "If true, the label will be removed from the file.",
                "nullable": true,
                "title": "Remove Label",
                "type": "boolean"
              }
            },
            "required": ["label_id"],
            "title": "LabelModification",
            "type": "object"
          },
          "title": "Label Modifications",
          "type": "array"
        }
      },
      "required": ["file_id", "label_modifications"],
      "title": "FilesModifyLabelsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "kind": {
              "description": "This is always drive#modifyLabelsResponse.",
              "title": "Kind",
              "type": "string"
            },
            "modified_labels": {
              "description": "The list of labels which were added or updated by the request.",
              "items": {
                "properties": {
                  "fields": {
                    "additionalProperties": true,
                    "default": null,
                    "description": "A map of field IDs to field values. ",
                    "nullable": true,
                    "title": "Fields",
                    "type": "object"
                  },
                  "id": {
                    "default": null,
                    "description": "The ID of the label.",
                    "nullable": true,
                    "title": "Id",
                    "type": "string"
                  },
                  "kind": {
                    "default": null,
                    "description": "Identifies the resource type, this is always drive#label",
                    "nullable": true,
                    "title": "Kind",
                    "type": "string"
                  },
                  "revision_id": {
                    "default": null,
                    "description": "The revision ID of the label.",
                    "nullable": true,
                    "title": "Revision Id",
                    "type": "string"
                  }
                },
                "title": "ModifiedLabel",
                "type": "object"
              },
              "title": "Modified Labels",
              "type": "array"
            }
          },
          "required": ["kind", "modified_labels"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "FilesModifyLabelsResponseWrapper",
      "type": "object"
    },
    "description": "Modifies the set of labels applied to a file. returns a list of the labels that were added or modified. use when you need to programmatically change labels on a google drive file, such as adding, updating, or removing them.",
    "tags": ["updateHint", "openWorldHint", "files", "labels", "important"]
  },
  {
    "available_versions": ["latest"],
    "name": "Find file",
    "slug": "GOOGLEDRIVE_FIND_FILE",
    "input_parameters": {
      "properties": {
        "corpora": {
          "default": null,
          "description": "Corpora to query. 'user' for user's personal files, 'drive' for files in a specific shared drive (requires 'driveId'), 'domain' for files shared with the domain, 'allDrives' for all drives the user has access to.",
          "enum": ["user", "drive", "domain", "allDrives"],
          "nullable": true,
          "title": "Corpora",
          "type": "string"
        },
        "driveId": {
          "default": null,
          "description": "ID of the shared drive to search. Required if 'corpora' is 'drive'.",
          "nullable": true,
          "title": "Drive Id",
          "type": "string"
        },
        "fields": {
          "default": "*",
          "description": "Selector specifying which fields to include in a partial response. Use '*' for all fields or a comma-separated list, e.g., 'nextPageToken,files(id,name,mimeType)'.",
          "nullable": true,
          "title": "Fields",
          "type": "string"
        },
        "includeItemsFromAllDrives": {
          "default": false,
          "description": "Whether both My Drive and shared drive items should be included in results. If true, 'supportsAllDrives' should also be true.",
          "nullable": true,
          "title": "Include Items From All Drives",
          "type": "boolean"
        },
        "orderBy": {
          "default": null,
          "description": "A comma-separated list of sort keys. Valid keys are 'createdTime', 'folder', 'modifiedByMeTime', 'modifiedTime', 'name', 'name_natural', 'quotaBytesUsed', 'recency', 'sharedWithMeTime', 'starred', and 'viewedByMeTime'. Each key sorts ascending by default, but may be reversed with the 'desc' modifier. Example: 'modifiedTime desc,name'.",
          "nullable": true,
          "title": "Order By",
          "type": "string"
        },
        "pageSize": {
          "default": 100,
          "description": "The maximum number of files to return per page.",
          "maximum": 1000,
          "minimum": 1,
          "nullable": true,
          "title": "Page Size",
          "type": "integer"
        },
        "pageToken": {
          "default": null,
          "description": "The token for continuing a previous list request on the next page.",
          "nullable": true,
          "title": "Page Token",
          "type": "string"
        },
        "q": {
          "default": null,
          "description": "A query for filtering the file results. See Google Drive API documentation for query syntax. Example: \\\"name contains 'report' and mimeType = 'application/pdf'\\\"",
          "nullable": true,
          "title": "Q",
          "type": "string"
        },
        "spaces": {
          "default": "drive",
          "description": "A comma-separated list of spaces to query. Supported values are 'drive', 'appDataFolder' and 'photos'.",
          "nullable": true,
          "title": "Spaces",
          "type": "string"
        },
        "supportsAllDrives": {
          "default": true,
          "description": "Whether the requesting application supports both My Drives and shared drives. If 'includeItemsFromAllDrives' is true, this must also be true.",
          "nullable": true,
          "title": "Supports All Drives",
          "type": "boolean"
        }
      },
      "title": "FindFileRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "files": {
              "description": "The list of files. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.",
              "items": {
                "properties": {
                  "appProperties": {
                    "additionalProperties": { "type": "string" },
                    "default": null,
                    "description": "A collection of arbitrary key-value pairs which are visible to all apps.",
                    "nullable": true,
                    "title": "App Properties",
                    "type": "object"
                  },
                  "capabilities": {
                    "additionalProperties": false,
                    "default": null,
                    "description": "Capabilities the current user has on this file.",
                    "nullable": true,
                    "properties": {
                      "canAddChildren": {
                        "default": null,
                        "description": "Whether the user can add children to this folder.",
                        "nullable": true,
                        "title": "Can Add Children",
                        "type": "boolean"
                      },
                      "canChangeCopyRequiresWriterPermission": {
                        "default": null,
                        "description": "Whether the user can change the copyRequiresWriterPermission restriction.",
                        "nullable": true,
                        "title": "Can Change Copy Requires Writer Permission",
                        "type": "boolean"
                      },
                      "canChangeViewersCanCopyContent": {
                        "default": null,
                        "description": "Whether the user can change the viewersCanCopyContent restriction for this file.",
                        "nullable": true,
                        "title": "Can Change Viewers Can Copy Content",
                        "type": "boolean"
                      },
                      "canComment": {
                        "default": null,
                        "description": "Whether the user can comment on this file.",
                        "nullable": true,
                        "title": "Can Comment",
                        "type": "boolean"
                      },
                      "canCopy": {
                        "default": null,
                        "description": "Whether the user can copy this file.",
                        "nullable": true,
                        "title": "Can Copy",
                        "type": "boolean"
                      },
                      "canDelete": {
                        "default": null,
                        "description": "Whether the user can delete this file.",
                        "nullable": true,
                        "title": "Can Delete",
                        "type": "boolean"
                      },
                      "canDownload": {
                        "default": null,
                        "description": "Whether the user can download this file.",
                        "nullable": true,
                        "title": "Can Download",
                        "type": "boolean"
                      },
                      "canEdit": {
                        "default": null,
                        "description": "Whether the user can edit this file.",
                        "nullable": true,
                        "title": "Can Edit",
                        "type": "boolean"
                      },
                      "canListChildren": {
                        "default": null,
                        "description": "Whether the user can list the children of this folder.",
                        "nullable": true,
                        "title": "Can List Children",
                        "type": "boolean"
                      },
                      "canModifyContent": {
                        "default": null,
                        "description": "Whether the user can modify the content of this file.",
                        "nullable": true,
                        "title": "Can Modify Content",
                        "type": "boolean"
                      },
                      "canMoveItemIntoTeamDrive": {
                        "default": null,
                        "description": "Whether the user can move this item into a Team Drive. (Deprecated: Use canMoveItemOutOfDrive instead)",
                        "nullable": true,
                        "title": "Can Move Item Into Team Drive",
                        "type": "boolean"
                      },
                      "canMoveItemOutOfDrive": {
                        "default": null,
                        "description": "Whether the user can move this item out of the current drive.",
                        "nullable": true,
                        "title": "Can Move Item Out Of Drive",
                        "type": "boolean"
                      },
                      "canMoveItemWithinDrive": {
                        "default": null,
                        "description": "Whether the user can move this item within the current drive.",
                        "nullable": true,
                        "title": "Can Move Item Within Drive",
                        "type": "boolean"
                      },
                      "canReadRevisions": {
                        "default": null,
                        "description": "Whether the user can read the revisions of this file.",
                        "nullable": true,
                        "title": "Can Read Revisions",
                        "type": "boolean"
                      },
                      "canRemoveChildren": {
                        "default": null,
                        "description": "Whether the user can remove children from this folder.",
                        "nullable": true,
                        "title": "Can Remove Children",
                        "type": "boolean"
                      },
                      "canRename": {
                        "default": null,
                        "description": "Whether the user can rename this file.",
                        "nullable": true,
                        "title": "Can Rename",
                        "type": "boolean"
                      },
                      "canShare": {
                        "default": null,
                        "description": "Whether the user can share this file.",
                        "nullable": true,
                        "title": "Can Share",
                        "type": "boolean"
                      },
                      "canTrash": {
                        "default": null,
                        "description": "Whether the user can trash this file.",
                        "nullable": true,
                        "title": "Can Trash",
                        "type": "boolean"
                      },
                      "canUntrash": {
                        "default": null,
                        "description": "Whether the user can untrash this file.",
                        "nullable": true,
                        "title": "Can Untrash",
                        "type": "boolean"
                      }
                    },
                    "title": "GoogleDriveFileCapabilities",
                    "type": "object"
                  },
                  "contentHints": {
                    "additionalProperties": false,
                    "default": null,
                    "description": "Additional information about the content of the file. These fields are never populated in responses.",
                    "nullable": true,
                    "properties": {
                      "indexableText": {
                        "default": null,
                        "description": "Text to be indexed for the file to improve searchability.",
                        "nullable": true,
                        "title": "Indexable Text",
                        "type": "string"
                      },
                      "thumbnail": {
                        "additionalProperties": false,
                        "default": null,
                        "description": "Thumbnail for the file.",
                        "nullable": true,
                        "properties": {
                          "image": {
                            "default": null,
                            "description": "A Base64 encoded image.",
                            "nullable": true,
                            "title": "Image",
                            "type": "string"
                          },
                          "mimeType": {
                            "default": null,
                            "description": "The MIME type of the thumbnail.",
                            "nullable": true,
                            "title": "Mime Type",
                            "type": "string"
                          }
                        },
                        "title": "GoogleDriveFileContentHintsThumbnail",
                        "type": "object"
                      }
                    },
                    "title": "GoogleDriveFileContentHints",
                    "type": "object"
                  },
                  "contentRestrictions": {
                    "default": null,
                    "description": "Content restrictions for this file.",
                    "items": {
                      "properties": {
                        "readOnly": {
                          "default": null,
                          "description": "Whether the content of this file is read-only.",
                          "nullable": true,
                          "title": "Read Only",
                          "type": "boolean"
                        },
                        "reason": {
                          "default": null,
                          "description": "Reason for the restriction. Only set if readOnly is true.",
                          "nullable": true,
                          "title": "Reason",
                          "type": "string"
                        }
                      },
                      "title": "GoogleDriveContentRestriction",
                      "type": "object"
                    },
                    "nullable": true,
                    "title": "Content Restrictions",
                    "type": "array"
                  },
                  "copyRequiresWriterPermission": {
                    "default": null,
                    "description": "Whether copying this file requires writer permission.",
                    "nullable": true,
                    "title": "Copy Requires Writer Permission",
                    "type": "boolean"
                  },
                  "createdTime": {
                    "default": null,
                    "description": "The time at which the file was created.",
                    "format": "date-time",
                    "nullable": true,
                    "title": "Created Time",
                    "type": "string"
                  },
                  "description": {
                    "default": null,
                    "description": "A short description of the file.",
                    "nullable": true,
                    "title": "Description",
                    "type": "string"
                  },
                  "driveId": {
                    "default": null,
                    "description": "The ID of the shared drive the file resides in.",
                    "nullable": true,
                    "title": "Drive Id",
                    "type": "string"
                  },
                  "exportLinks": {
                    "additionalProperties": {
                      "format": "uri",
                      "maxLength": 2083,
                      "minLength": 1,
                      "type": "string"
                    },
                    "default": null,
                    "description": "Links for exporting Google Docs to specific formats.",
                    "nullable": true,
                    "title": "Export Links",
                    "type": "object"
                  },
                  "fileExtension": {
                    "default": null,
                    "description": "The final component of fullFileExtension. This is only available for files with binary content in Google Drive.",
                    "nullable": true,
                    "title": "File Extension",
                    "type": "string"
                  },
                  "fullFileExtension": {
                    "default": null,
                    "description": "The full file extension extracted from the name field. May contain multiple concatenated extensions, such as \\\"tar.gz\\\".",
                    "nullable": true,
                    "title": "Full File Extension",
                    "type": "string"
                  },
                  "hasThumbnail": {
                    "default": null,
                    "description": "Whether this file has a thumbnail.",
                    "nullable": true,
                    "title": "Has Thumbnail",
                    "type": "boolean"
                  },
                  "headRevisionId": {
                    "default": null,
                    "description": "The ID of the head revision of the file.",
                    "nullable": true,
                    "title": "Head Revision Id",
                    "type": "string"
                  },
                  "iconLink": {
                    "default": null,
                    "description": "A static, unauthenticated link to the file's icon.",
                    "format": "uri",
                    "maxLength": 2083,
                    "minLength": 1,
                    "nullable": true,
                    "title": "Icon Link",
                    "type": "string"
                  },
                  "id": {
                    "default": null,
                    "description": "The ID of the file.",
                    "nullable": true,
                    "title": "Id",
                    "type": "string"
                  },
                  "imageMediaMetadata": {
                    "additionalProperties": false,
                    "default": null,
                    "description": "Metadata about image media. This will only be present for image types, and its contents will depend on the image type.",
                    "nullable": true,
                    "properties": {
                      "height": {
                        "default": null,
                        "description": "The height of the image in pixels.",
                        "nullable": true,
                        "title": "Height",
                        "type": "integer"
                      },
                      "rotation": {
                        "default": null,
                        "description": "The rotation of the image in degrees.",
                        "nullable": true,
                        "title": "Rotation",
                        "type": "integer"
                      },
                      "width": {
                        "default": null,
                        "description": "The width of the image in pixels.",
                        "nullable": true,
                        "title": "Width",
                        "type": "integer"
                      }
                    },
                    "title": "GoogleDriveFileImageMediaMetadata",
                    "type": "object"
                  },
                  "isAppAuthorized": {
                    "default": null,
                    "description": "Whether the file was created or opened by the requesting app.",
                    "nullable": true,
                    "title": "Is App Authorized",
                    "type": "boolean"
                  },
                  "kind": {
                    "default": "drive#file",
                    "description": "Identifies what kind of resource this is. Value: the fixed string \\\"drive#file\\\".",
                    "nullable": true,
                    "title": "Kind",
                    "type": "string"
                  },
                  "lastModifyingUser": {
                    "additionalProperties": false,
                    "default": null,
                    "description": "The last user to modify the file.",
                    "nullable": true,
                    "properties": {
                      "displayName": {
                        "default": null,
                        "description": "The display name of the user.",
                        "nullable": true,
                        "title": "Display Name",
                        "type": "string"
                      },
                      "emailAddress": {
                        "default": null,
                        "description": "The email address of the user.",
                        "format": "email",
                        "nullable": true,
                        "title": "Email Address",
                        "type": "string"
                      },
                      "kind": {
                        "default": "drive#user",
                        "description": "Identifies what kind of resource this is.",
                        "nullable": true,
                        "title": "Kind",
                        "type": "string"
                      },
                      "me": {
                        "default": null,
                        "description": "Whether this user is the requesting user.",
                        "nullable": true,
                        "title": "Me",
                        "type": "boolean"
                      },
                      "permissionId": {
                        "default": null,
                        "description": "The user's permission ID.",
                        "nullable": true,
                        "title": "Permission Id",
                        "type": "string"
                      },
                      "photoLink": {
                        "default": null,
                        "description": "A link to the user's profile photo, if available.",
                        "format": "uri",
                        "maxLength": 2083,
                        "minLength": 1,
                        "nullable": true,
                        "title": "Photo Link",
                        "type": "string"
                      }
                    },
                    "title": "GoogleDriveUser",
                    "type": "object"
                  },
                  "linkShareMetadata": {
                    "additionalProperties": false,
                    "default": null,
                    "description": "Metadata about the shared link for this file.",
                    "nullable": true,
                    "properties": {
                      "securityUpdateEligible": {
                        "default": null,
                        "description": "Whether the file is eligible for a security update.",
                        "nullable": true,
                        "title": "Security Update Eligible",
                        "type": "boolean"
                      },
                      "securityUpdateEnabled": {
                        "default": null,
                        "description": "Whether the security update is enabled for this file.",
                        "nullable": true,
                        "title": "Security Update Enabled",
                        "type": "boolean"
                      }
                    },
                    "title": "GoogleDriveLinkShareMetadata",
                    "type": "object"
                  },
                  "md5Checksum": {
                    "default": null,
                    "description": "The MD5 checksum for the content of this file. This is only applicable to files with binary content in Google Drive.",
                    "nullable": true,
                    "title": "Md5 Checksum",
                    "type": "string"
                  },
                  "mimeType": {
                    "default": null,
                    "description": "The MIME type of the file.",
                    "nullable": true,
                    "title": "Mime Type",
                    "type": "string"
                  },
                  "modifiedByMe": {
                    "default": null,
                    "description": "Whether the file has been modified by this user.",
                    "nullable": true,
                    "title": "Modified By Me",
                    "type": "boolean"
                  },
                  "modifiedByMeTime": {
                    "default": null,
                    "description": "The last time the file was modified by the user.",
                    "format": "date-time",
                    "nullable": true,
                    "title": "Modified By Me Time",
                    "type": "string"
                  },
                  "modifiedTime": {
                    "default": null,
                    "description": "The last time the file was modified by anyone.",
                    "format": "date-time",
                    "nullable": true,
                    "title": "Modified Time",
                    "type": "string"
                  },
                  "name": {
                    "default": null,
                    "description": "The name of the file.",
                    "nullable": true,
                    "title": "Name",
                    "type": "string"
                  },
                  "originalFilename": {
                    "default": null,
                    "description": "The original filename of the uploaded content if available, or else the original value of the name field. Once set, it doesn't change.",
                    "nullable": true,
                    "title": "Original Filename",
                    "type": "string"
                  },
                  "ownedByMe": {
                    "default": null,
                    "description": "Whether the user owns the file.",
                    "nullable": true,
                    "title": "Owned By Me",
                    "type": "boolean"
                  },
                  "owners": {
                    "default": null,
                    "description": "The owners of the file. Currently, only certain legacy files may have more than one owner.",
                    "items": {
                      "properties": {
                        "displayName": {
                          "default": null,
                          "description": "The display name of the user.",
                          "nullable": true,
                          "title": "Display Name",
                          "type": "string"
                        },
                        "emailAddress": {
                          "default": null,
                          "description": "The email address of the user.",
                          "format": "email",
                          "nullable": true,
                          "title": "Email Address",
                          "type": "string"
                        },
                        "kind": {
                          "default": "drive#user",
                          "description": "Identifies what kind of resource this is.",
                          "nullable": true,
                          "title": "Kind",
                          "type": "string"
                        },
                        "me": {
                          "default": null,
                          "description": "Whether this user is the requesting user.",
                          "nullable": true,
                          "title": "Me",
                          "type": "boolean"
                        },
                        "permissionId": {
                          "default": null,
                          "description": "The user's permission ID.",
                          "nullable": true,
                          "title": "Permission Id",
                          "type": "string"
                        },
                        "photoLink": {
                          "default": null,
                          "description": "A link to the user's profile photo, if available.",
                          "format": "uri",
                          "maxLength": 2083,
                          "minLength": 1,
                          "nullable": true,
                          "title": "Photo Link",
                          "type": "string"
                        }
                      },
                      "title": "GoogleDriveUser",
                      "type": "object"
                    },
                    "nullable": true,
                    "title": "Owners",
                    "type": "array"
                  },
                  "parents": {
                    "default": null,
                    "description": "The IDs of the parent folders which contain the file.",
                    "items": { "properties": {}, "type": "string" },
                    "nullable": true,
                    "title": "Parents",
                    "type": "array"
                  },
                  "permissionIds": {
                    "default": null,
                    "description": "A list of permission IDs for users with access to this file.",
                    "items": { "properties": {}, "type": "string" },
                    "nullable": true,
                    "title": "Permission Ids",
                    "type": "array"
                  },
                  "permissions": {
                    "default": null,
                    "description": "The full list of permissions for the file.",
                    "items": {
                      "properties": {
                        "displayName": {
                          "default": null,
                          "description": "The display name of the user or group to which this permission refers.",
                          "nullable": true,
                          "title": "Display Name",
                          "type": "string"
                        },
                        "emailAddress": {
                          "default": null,
                          "description": "The email address of the user or group to which this permission refers.",
                          "format": "email",
                          "nullable": true,
                          "title": "Email Address",
                          "type": "string"
                        },
                        "id": {
                          "default": null,
                          "description": "The ID of the permission.",
                          "nullable": true,
                          "title": "Id",
                          "type": "string"
                        },
                        "role": {
                          "default": null,
                          "description": "The role granted by this permission.",
                          "enum": [
                            "owner",
                            "organizer",
                            "fileOrganizer",
                            "writer",
                            "commenter",
                            "reader"
                          ],
                          "nullable": true,
                          "title": "Role",
                          "type": "string"
                        },
                        "type": {
                          "default": null,
                          "description": "The type of the grantee.",
                          "enum": ["user", "group", "domain", "anyone"],
                          "nullable": true,
                          "title": "Type",
                          "type": "string"
                        }
                      },
                      "title": "GoogleDrivePermissionDetails",
                      "type": "object"
                    },
                    "nullable": true,
                    "title": "Permissions",
                    "type": "array"
                  },
                  "properties": {
                    "additionalProperties": { "type": "string" },
                    "default": null,
                    "description": "A collection of arbitrary key-value pairs which are private to the requesting app.",
                    "nullable": true,
                    "title": "Properties",
                    "type": "object"
                  },
                  "quotaBytesUsed": {
                    "default": null,
                    "description": "The number of storage quota bytes used by the file. This includes the head revision as well as previous revisions.",
                    "nullable": true,
                    "title": "Quota Bytes Used",
                    "type": "string"
                  },
                  "resourceKey": {
                    "default": null,
                    "description": "A resource key for the file. If omitted, the requestor must have access to the file.",
                    "nullable": true,
                    "title": "Resource Key",
                    "type": "string"
                  },
                  "shared": {
                    "default": null,
                    "description": "Whether the file has been shared.",
                    "nullable": true,
                    "title": "Shared",
                    "type": "boolean"
                  },
                  "sharedWithMeTime": {
                    "default": null,
                    "description": "The time at which the file was shared with the user.",
                    "format": "date-time",
                    "nullable": true,
                    "title": "Shared With Me Time",
                    "type": "string"
                  },
                  "sharingUser": {
                    "additionalProperties": false,
                    "default": null,
                    "description": "The user who shared the file with the requesting user, if applicable.",
                    "nullable": true,
                    "properties": {
                      "displayName": {
                        "default": null,
                        "description": "The display name of the user.",
                        "nullable": true,
                        "title": "Display Name",
                        "type": "string"
                      },
                      "emailAddress": {
                        "default": null,
                        "description": "The email address of the user.",
                        "format": "email",
                        "nullable": true,
                        "title": "Email Address",
                        "type": "string"
                      },
                      "kind": {
                        "default": "drive#user",
                        "description": "Identifies what kind of resource this is.",
                        "nullable": true,
                        "title": "Kind",
                        "type": "string"
                      },
                      "me": {
                        "default": null,
                        "description": "Whether this user is the requesting user.",
                        "nullable": true,
                        "title": "Me",
                        "type": "boolean"
                      },
                      "permissionId": {
                        "default": null,
                        "description": "The user's permission ID.",
                        "nullable": true,
                        "title": "Permission Id",
                        "type": "string"
                      },
                      "photoLink": {
                        "default": null,
                        "description": "A link to the user's profile photo, if available.",
                        "format": "uri",
                        "maxLength": 2083,
                        "minLength": 1,
                        "nullable": true,
                        "title": "Photo Link",
                        "type": "string"
                      }
                    },
                    "title": "GoogleDriveUser",
                    "type": "object"
                  },
                  "shortcutDetails": {
                    "additionalProperties": false,
                    "default": null,
                    "description": "Shortcut file details. Only populated for shortcut files, which have the mimeType field set to application/vnd.google-apps.shortcut.",
                    "nullable": true,
                    "properties": {
                      "targetId": {
                        "default": null,
                        "description": "The ID of the file that this shortcut points to.",
                        "nullable": true,
                        "title": "Target Id",
                        "type": "string"
                      },
                      "targetMimeType": {
                        "default": null,
                        "description": "The MIME type of the file that this shortcut points to.",
                        "nullable": true,
                        "title": "Target Mime Type",
                        "type": "string"
                      },
                      "targetResourceKey": {
                        "default": null,
                        "description": "The resource key of the target file.",
                        "nullable": true,
                        "title": "Target Resource Key",
                        "type": "string"
                      }
                    },
                    "title": "GoogleDriveShortcutDetails",
                    "type": "object"
                  },
                  "size": {
                    "default": null,
                    "description": "The size of the file's content in bytes. This is applicable to files with binary content in Google Drive and Google Docs files.",
                    "nullable": true,
                    "title": "Size",
                    "type": "string"
                  },
                  "spaces": {
                    "default": null,
                    "description": "The list of spaces which contain the file. The currently supported values are 'drive', 'appDataFolder' and 'photos'.",
                    "items": { "properties": {}, "type": "string" },
                    "nullable": true,
                    "title": "Spaces",
                    "type": "array"
                  },
                  "starred": {
                    "default": null,
                    "description": "Whether the user has starred the file.",
                    "nullable": true,
                    "title": "Starred",
                    "type": "boolean"
                  },
                  "teamDriveId": {
                    "default": null,
                    "description": "The ID of the Team Drive the file resides in. (Deprecated: Use driveId instead)",
                    "nullable": true,
                    "title": "Team Drive Id",
                    "type": "string"
                  },
                  "thumbnailLink": {
                    "default": null,
                    "description": "A short-lived link to the file's thumbnail. Typically lasts on the order of hours.",
                    "format": "uri",
                    "maxLength": 2083,
                    "minLength": 1,
                    "nullable": true,
                    "title": "Thumbnail Link",
                    "type": "string"
                  },
                  "thumbnailVersion": {
                    "default": null,
                    "description": "The version of the file's thumbnail. Available only when specifically requested.",
                    "nullable": true,
                    "title": "Thumbnail Version",
                    "type": "integer"
                  },
                  "trashed": {
                    "default": null,
                    "description": "Whether the file has been trashed, either explicitly or from a trashed parent folder.",
                    "nullable": true,
                    "title": "Trashed",
                    "type": "boolean"
                  },
                  "version": {
                    "default": null,
                    "description": "A monotonically increasing version number for the file. This reflects every change made to the file on the server, even those not visible to the user.",
                    "nullable": true,
                    "title": "Version",
                    "type": "integer"
                  },
                  "videoMediaMetadata": {
                    "additionalProperties": false,
                    "default": null,
                    "description": "Metadata about video media. This will only be present for video types.",
                    "nullable": true,
                    "properties": {
                      "durationMillis": {
                        "default": null,
                        "description": "The duration of the video in milliseconds (as a string).",
                        "nullable": true,
                        "title": "Duration Millis",
                        "type": "string"
                      },
                      "height": {
                        "default": null,
                        "description": "The height of the video in pixels.",
                        "nullable": true,
                        "title": "Height",
                        "type": "integer"
                      },
                      "width": {
                        "default": null,
                        "description": "The width of the video in pixels.",
                        "nullable": true,
                        "title": "Width",
                        "type": "integer"
                      }
                    },
                    "title": "GoogleDriveFileVideoMediaMetadata",
                    "type": "object"
                  },
                  "viewedByMe": {
                    "default": null,
                    "description": "Whether the file has been viewed by this user.",
                    "nullable": true,
                    "title": "Viewed By Me",
                    "type": "boolean"
                  },
                  "viewedByMeTime": {
                    "default": null,
                    "description": "The last time the file was viewed by the user.",
                    "format": "date-time",
                    "nullable": true,
                    "title": "Viewed By Me Time",
                    "type": "string"
                  },
                  "viewersCanCopyContent": {
                    "default": null,
                    "description": "Whether users with viewer permissions can copy the content of this file.",
                    "nullable": true,
                    "title": "Viewers Can Copy Content",
                    "type": "boolean"
                  },
                  "webContentLink": {
                    "default": null,
                    "description": "A link for downloading the content of the file in a browser. This is only available for files with binary content in Google Drive.",
                    "format": "uri",
                    "maxLength": 2083,
                    "minLength": 1,
                    "nullable": true,
                    "title": "Web Content Link",
                    "type": "string"
                  },
                  "webViewLink": {
                    "default": null,
                    "description": "A link for opening the file in a relevant Google editor or viewer in a browser.",
                    "format": "uri",
                    "maxLength": 2083,
                    "minLength": 1,
                    "nullable": true,
                    "title": "Web View Link",
                    "type": "string"
                  },
                  "writersCanShare": {
                    "default": null,
                    "description": "Whether writers can share the document with other users.",
                    "nullable": true,
                    "title": "Writers Can Share",
                    "type": "boolean"
                  }
                },
                "title": "GoogleDriveFile",
                "type": "object"
              },
              "title": "Files",
              "type": "array"
            },
            "incompleteSearch": {
              "default": null,
              "description": "Whether the search process was incomplete. If true, then some search results might be missing.",
              "nullable": true,
              "title": "Incomplete Search",
              "type": "boolean"
            },
            "kind": {
              "default": "drive#fileList",
              "description": "Identifies what kind of resource this is. Value: the fixed string \\\"drive#fileList\\\".",
              "title": "Kind",
              "type": "string"
            },
            "nextPageToken": {
              "default": null,
              "description": "The page token for the next page of files. This will be absent if the end of the files list has been reached.",
              "nullable": true,
              "title": "Next Page Token",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "FindFileResponseWrapper",
      "type": "object"
    },
    "description": "Tool to list or search for files and folders in google drive. use when you need to find specific files based on query criteria or list contents of a drive/folder.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Find folder",
    "slug": "GOOGLEDRIVE_FIND_FOLDER",
    "input_parameters": {
      "properties": {
        "full_text_contains": {
          "default": null,
          "description": "A string to search for within the full text content of files within folders (if applicable and supported by Drive for the folder type or its contents). This search is case-insensitive.",
          "examples": ["confidential project details", "keyword"],
          "nullable": true,
          "title": "Full Text Contains",
          "type": "string"
        },
        "full_text_not_contains": {
          "default": null,
          "description": "A string to exclude from the full text content of files within folders. This search is case-insensitive.",
          "examples": ["draft", "internal use only"],
          "nullable": true,
          "title": "Full Text Not Contains",
          "type": "string"
        },
        "modified_after": {
          "default": null,
          "description": "Search for folders modified after a specific date and time. The timestamp must be in RFC 3339 format (e.g., '2023-01-15T10:00:00Z' or '2023-01-15T10:00:00.000Z').",
          "examples": ["2023-08-01T00:00:00Z"],
          "nullable": true,
          "title": "Modified After",
          "type": "string"
        },
        "name_contains": {
          "default": null,
          "description": "A substring to search for within folder names. This search is case-insensitive.",
          "examples": ["report", "meeting notes"],
          "nullable": true,
          "title": "Name Contains",
          "type": "string"
        },
        "name_exact": {
          "default": null,
          "description": "The exact name of the folder to search for. This search is case-sensitive.",
          "examples": ["Project Alpha", "Q1 Financials"],
          "nullable": true,
          "title": "Name Exact",
          "type": "string"
        },
        "name_not_contains": {
          "default": null,
          "description": "A substring to exclude from folder names. Folders with names containing this substring will not be returned. This search is case-insensitive.",
          "examples": ["archive", "old"],
          "nullable": true,
          "title": "Name Not Contains",
          "type": "string"
        },
        "starred": {
          "default": null,
          "description": "Set to true to search for folders that are starred, or false for those that are not.",
          "nullable": true,
          "title": "Starred",
          "type": "boolean"
        }
      },
      "title": "FindFolderRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "files": {
              "description": "A list of folders found.",
              "items": {
                "properties": {
                  "capabilities": {
                    "additionalProperties": true,
                    "default": null,
                    "description": "Capabilities the current user has on this folder.",
                    "nullable": true,
                    "title": "Capabilities",
                    "type": "object"
                  },
                  "createdTime": {
                    "default": null,
                    "description": "The time at which the folder was created (RFC 3339 date-time).",
                    "format": "date-time",
                    "nullable": true,
                    "title": "Created Time",
                    "type": "string"
                  },
                  "driveId": {
                    "default": null,
                    "description": "The ID of the drive the file resides in. Only populated for items in shared drives.",
                    "nullable": true,
                    "title": "Drive Id",
                    "type": "string"
                  },
                  "iconLink": {
                    "default": null,
                    "description": "A static, unauthenticated link to the folder's icon.",
                    "format": "uri",
                    "maxLength": 2083,
                    "minLength": 1,
                    "nullable": true,
                    "title": "Icon Link",
                    "type": "string"
                  },
                  "id": { "description": "The ID of the folder.", "title": "Id", "type": "string" },
                  "kind": {
                    "default": "drive#file",
                    "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#file\".",
                    "nullable": true,
                    "title": "Kind",
                    "type": "string"
                  },
                  "mimeType": {
                    "description": "The MIME type of the item. For a folder, this is 'application/vnd.google-apps.folder'.",
                    "title": "Mime Type",
                    "type": "string"
                  },
                  "modifiedTime": {
                    "default": null,
                    "description": "The last time the folder was modified by anyone (RFC 3339 date-time).",
                    "format": "date-time",
                    "nullable": true,
                    "title": "Modified Time",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the folder.",
                    "title": "Name",
                    "type": "string"
                  },
                  "parents": {
                    "default": null,
                    "description": "The IDs of the parent folders which contain the file.",
                    "items": { "properties": {}, "type": "string" },
                    "nullable": true,
                    "title": "Parents",
                    "type": "array"
                  },
                  "shared": {
                    "default": false,
                    "description": "Whether the file has been shared.",
                    "nullable": true,
                    "title": "Shared",
                    "type": "boolean"
                  },
                  "teamDriveId": {
                    "default": null,
                    "description": "The ID of the shared drive the file resides in. Only populated for items in shared drives.",
                    "nullable": true,
                    "title": "Team Drive Id",
                    "type": "string"
                  },
                  "trashed": {
                    "default": false,
                    "description": "Whether the file has been trashed.",
                    "nullable": true,
                    "title": "Trashed",
                    "type": "boolean"
                  },
                  "webViewLink": {
                    "default": null,
                    "description": "A link for opening the folder in a browser.",
                    "format": "uri",
                    "maxLength": 2083,
                    "minLength": 1,
                    "nullable": true,
                    "title": "Web View Link",
                    "type": "string"
                  }
                },
                "required": ["id", "name", "mimeType"],
                "title": "GoogleDriveFolderItem",
                "type": "object"
              },
              "title": "Files",
              "type": "array"
            },
            "incompleteSearch": {
              "default": null,
              "description": "Whether the search process was incomplete.",
              "nullable": true,
              "title": "Incomplete Search",
              "type": "boolean"
            },
            "kind": {
              "default": "drive#fileList",
              "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#fileList\".",
              "title": "Kind",
              "type": "string"
            },
            "nextPageToken": {
              "default": null,
              "description": "The page token for the next page of folders.",
              "nullable": true,
              "title": "Next Page Token",
              "type": "string"
            }
          },
          "required": ["files"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "FindFolderResponseWrapper",
      "type": "object"
    },
    "description": "Tool to find a folder in google drive by its name and optionally a parent folder. use when you need to locate a specific folder to perform further actions like creating files in it or listing its contents.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Generate File IDs",
    "slug": "GOOGLEDRIVE_GENERATE_IDS",
    "input_parameters": {
      "properties": {
        "count": {
          "default": null,
          "description": "The number of IDs to return. Value must be between 1 and 1000, inclusive.",
          "examples": [10],
          "maximum": 1000,
          "minimum": 1,
          "nullable": true,
          "title": "Count",
          "type": "integer"
        },
        "space": {
          "default": null,
          "description": "The space in which the IDs can be used. Supported values are 'drive' and 'appDataFolder'.",
          "examples": ["drive"],
          "nullable": true,
          "title": "Space",
          "type": "string"
        },
        "type": {
          "default": null,
          "description": "The type of items for which the IDs can be used. For example, 'files' or 'shortcuts'.",
          "examples": ["files"],
          "nullable": true,
          "title": "Type",
          "type": "string"
        }
      },
      "title": "GenerateIdsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "ids": {
              "description": "The IDs generated by the server.",
              "items": { "properties": {}, "type": "string" },
              "title": "Ids",
              "type": "array"
            },
            "kind": {
              "description": "Identifies what kind of resource this is. Value: \"drive#idList\".",
              "title": "Kind",
              "type": "string"
            },
            "space": {
              "description": "The space which is supported for these IDs.",
              "title": "Space",
              "type": "string"
            }
          },
          "required": ["kind", "space", "ids"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GenerateIdsResponseWrapper",
      "type": "object"
    },
    "description": "Generates a set of file ids which can be provided in create or copy requests. use when you need to pre-allocate ids for new files or copies.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "important", "files"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get About Information",
    "slug": "GOOGLEDRIVE_GET_ABOUT",
    "input_parameters": {
      "properties": {
        "fields": {
          "default": "*",
          "description": "A comma-separated list of fields to include in the response. Use `*` to include all fields.",
          "examples": ["*", "user,storageQuota"],
          "title": "Fields",
          "type": "string"
        }
      },
      "title": "GetAboutRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "appInstalled": {
              "default": null,
              "description": "Whether the requesting app is installed.",
              "nullable": true,
              "title": "App Installed",
              "type": "boolean"
            },
            "canCreateDrives": {
              "default": null,
              "description": "Whether the user can create shared drives.",
              "nullable": true,
              "title": "Can Create Drives",
              "type": "boolean"
            },
            "canCreateTeamDrives": {
              "default": null,
              "description": "Deprecated: Use canCreateDrives instead.",
              "nullable": true,
              "title": "Can Create Team Drives",
              "type": "boolean"
            },
            "driveThemes": {
              "default": null,
              "description": "A list of themes that are supported for shared drives.",
              "items": {
                "properties": {
                  "backgroundImageLink": {
                    "default": null,
                    "description": "A link to the background image of the theme.",
                    "nullable": true,
                    "title": "Background Image Link",
                    "type": "string"
                  },
                  "colorRgb": {
                    "default": null,
                    "description": "The color of the theme in RGB hexadecimal string format.",
                    "nullable": true,
                    "title": "Color Rgb",
                    "type": "string"
                  },
                  "id": {
                    "default": null,
                    "description": "The ID of the theme.",
                    "nullable": true,
                    "title": "Id",
                    "type": "string"
                  }
                },
                "title": "DriveTheme",
                "type": "object"
              },
              "nullable": true,
              "title": "Drive Themes",
              "type": "array"
            },
            "exportFormats": {
              "additionalProperties": { "items": { "type": "string" }, "type": "array" },
              "default": null,
              "description": "A map of Google Workspace document types and their supported export formats.",
              "nullable": true,
              "title": "Export Formats",
              "type": "object"
            },
            "folderColorPalette": {
              "default": null,
              "description": "The palette of folder colors supported by Google Drive.",
              "items": { "properties": {}, "type": "string" },
              "nullable": true,
              "title": "Folder Color Palette",
              "type": "array"
            },
            "importFormats": {
              "additionalProperties": { "items": { "type": "string" }, "type": "array" },
              "default": null,
              "description": "A map of supported import formats and the corresponding Google Workspace document types.",
              "nullable": true,
              "title": "Import Formats",
              "type": "object"
            },
            "kind": {
              "default": null,
              "description": "Identifies what kind of resource this is. Value: drive#about.",
              "nullable": true,
              "title": "Kind",
              "type": "string"
            },
            "maxImportSizes": {
              "additionalProperties": { "type": "string" },
              "default": null,
              "description": "A map of import formats and their maximum supported file size in bytes.",
              "nullable": true,
              "title": "Max Import Sizes",
              "type": "object"
            },
            "maxUploadSize": {
              "default": null,
              "description": "The maximum individual file size that the user can upload, in bytes.",
              "nullable": true,
              "title": "Max Upload Size",
              "type": "string"
            },
            "storageQuota": {
              "additionalProperties": false,
              "default": null,
              "description": "The user's storage quota status.",
              "nullable": true,
              "properties": {
                "limit": {
                  "default": null,
                  "description": "The total storage limit in bytes.",
                  "nullable": true,
                  "title": "Limit",
                  "type": "string"
                },
                "usage": {
                  "default": null,
                  "description": "The total usage in bytes.",
                  "nullable": true,
                  "title": "Usage",
                  "type": "string"
                },
                "usageInDrive": {
                  "default": null,
                  "description": "The usage in Google Drive in bytes.",
                  "nullable": true,
                  "title": "Usage In Drive",
                  "type": "string"
                },
                "usageInDriveTrash": {
                  "default": null,
                  "description": "The usage in Google Drive trash in bytes.",
                  "nullable": true,
                  "title": "Usage In Drive Trash",
                  "type": "string"
                }
              },
              "title": "StorageQuota",
              "type": "object"
            },
            "teamDriveThemes": {
              "default": null,
              "description": "Deprecated: Use driveThemes instead.",
              "items": {
                "properties": {
                  "backgroundImageLink": {
                    "default": null,
                    "description": "A link to the background image of the theme.",
                    "nullable": true,
                    "title": "Background Image Link",
                    "type": "string"
                  },
                  "colorRgb": {
                    "default": null,
                    "description": "The color of the theme in RGB hexadecimal string format.",
                    "nullable": true,
                    "title": "Color Rgb",
                    "type": "string"
                  },
                  "id": {
                    "default": null,
                    "description": "The ID of the theme.",
                    "nullable": true,
                    "title": "Id",
                    "type": "string"
                  }
                },
                "title": "DriveTheme",
                "type": "object"
              },
              "nullable": true,
              "title": "Team Drive Themes",
              "type": "array"
            },
            "user": {
              "additionalProperties": false,
              "default": null,
              "description": "Information about the current user.",
              "nullable": true,
              "properties": {
                "displayName": {
                  "default": null,
                  "description": "The display name of the user.",
                  "nullable": true,
                  "title": "Display Name",
                  "type": "string"
                },
                "emailAddress": {
                  "default": null,
                  "description": "The email address of the user.",
                  "nullable": true,
                  "title": "Email Address",
                  "type": "string"
                },
                "kind": {
                  "default": null,
                  "description": "Identifies what kind of resource this is. Value: drive#user.",
                  "nullable": true,
                  "title": "Kind",
                  "type": "string"
                },
                "me": {
                  "default": null,
                  "description": "Whether this is the current user.",
                  "nullable": true,
                  "title": "Me",
                  "type": "boolean"
                },
                "permissionId": {
                  "default": null,
                  "description": "The user's ID as viewable in Permission resources.",
                  "nullable": true,
                  "title": "Permission Id",
                  "type": "string"
                },
                "photoLink": {
                  "default": null,
                  "description": "A link to the user's profile photo, if available.",
                  "nullable": true,
                  "title": "Photo Link",
                  "type": "string"
                }
              },
              "title": "User",
              "type": "object"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAboutResponseWrapper",
      "type": "object"
    },
    "description": "Tool to retrieve information about the user, the user's drive, and system capabilities. use when you need to check storage quotas, user details, or supported import/export formats.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "important", "drive"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get Changes Start Page Token",
    "slug": "GOOGLEDRIVE_GET_CHANGES_START_PAGE_TOKEN",
    "input_parameters": {
      "properties": {
        "driveId": {
          "default": null,
          "description": "The ID of the shared drive for which the starting pageToken for listing future changes from that shared drive will be returned.",
          "examples": ["0AB_CD1234EFG5HIJ6KLM7N8PQRST9UVWX"],
          "nullable": true,
          "title": "Drive Id",
          "type": "string"
        },
        "supportsAllDrives": {
          "default": false,
          "description": "Whether the requesting application supports both My Drives and shared drives. Defaults to false.",
          "examples": [true],
          "nullable": true,
          "title": "Supports All Drives",
          "type": "boolean"
        },
        "supportsTeamDrives": {
          "default": null,
          "description": "Deprecated: Use supportsAllDrives instead.",
          "examples": [true],
          "nullable": true,
          "title": "Supports Team Drives",
          "type": "boolean"
        },
        "teamDriveId": {
          "default": null,
          "description": "Deprecated: Use driveId instead.",
          "examples": ["0AB_CD1234EFG5HIJ6KLM7N8PQRST9UVWX"],
          "nullable": true,
          "title": "Team Drive Id",
          "type": "string"
        }
      },
      "title": "GetChangesStartPageTokenRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "kind": {
              "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#startPageToken\".",
              "examples": ["drive#startPageToken"],
              "title": "Kind",
              "type": "string"
            },
            "startPageToken": {
              "description": "The starting page token for listing future changes. This is deprecated and provided for backward compatibility only.",
              "examples": ["1234567"],
              "title": "Start Page Token",
              "type": "string"
            }
          },
          "required": ["kind", "startPageToken"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetChangesStartPageTokenResponseWrapper",
      "type": "object"
    },
    "description": "Tool to get the starting pagetoken for listing future changes in google drive. use this when you need to track changes to files and folders.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "important", "changes"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get Comment",
    "slug": "GOOGLEDRIVE_GET_COMMENT",
    "input_parameters": {
      "properties": {
        "commentId": {
          "description": "The ID of the comment.",
          "examples": ["11a22b33c44d55e66f77g88h99i00j"],
          "title": "Comment Id",
          "type": "string"
        },
        "fileId": {
          "description": "The ID of the file.",
          "examples": ["1a2b3c4d5e6f7g8h9i0j"],
          "title": "File Id",
          "type": "string"
        },
        "includeDeleted": {
          "default": null,
          "description": "Whether to return deleted comments. Deleted comments will not include their original content.",
          "nullable": true,
          "title": "Include Deleted",
          "type": "boolean"
        }
      },
      "required": ["fileId", "commentId"],
      "title": "GetCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "anchor": {
              "default": null,
              "description": "A region of the document represented as a JSON string. See anchor documentation for details on how to define and interpret anchor properties.",
              "nullable": true,
              "title": "Anchor",
              "type": "string"
            },
            "author": {
              "additionalProperties": false,
              "default": null,
              "description": "The user who created the comment.",
              "nullable": true,
              "properties": {
                "displayName": {
                  "default": null,
                  "description": "A plain text displayable name for this user.",
                  "nullable": true,
                  "title": "Display Name",
                  "type": "string"
                },
                "emailAddress": {
                  "default": null,
                  "description": "The email address of the user.",
                  "nullable": true,
                  "title": "Email Address",
                  "type": "string"
                },
                "kind": {
                  "default": null,
                  "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#user\".",
                  "nullable": true,
                  "title": "Kind",
                  "type": "string"
                },
                "me": {
                  "default": null,
                  "description": "Whether this user is the requesting user.",
                  "nullable": true,
                  "title": "Me",
                  "type": "boolean"
                },
                "permissionId": {
                  "default": null,
                  "description": "The user's ID as visible in Permission resources.",
                  "nullable": true,
                  "title": "Permission Id",
                  "type": "string"
                },
                "photoLink": {
                  "default": null,
                  "description": "A link to the user's profile photo, if available.",
                  "nullable": true,
                  "title": "Photo Link",
                  "type": "string"
                }
              },
              "title": "User",
              "type": "object"
            },
            "content": {
              "default": null,
              "description": "The plain text content of the comment.",
              "nullable": true,
              "title": "Content",
              "type": "string"
            },
            "createdTime": {
              "default": null,
              "description": "The time that the comment was created (RFC 3339 date-time).",
              "nullable": true,
              "title": "Created Time",
              "type": "string"
            },
            "deleted": {
              "default": null,
              "description": "Whether the comment has been deleted. A deleted comment has no content.",
              "nullable": true,
              "title": "Deleted",
              "type": "boolean"
            },
            "htmlContent": {
              "default": null,
              "description": "The content of the comment with HTML formatting.",
              "nullable": true,
              "title": "Html Content",
              "type": "string"
            },
            "id": {
              "default": null,
              "description": "The ID of the comment.",
              "nullable": true,
              "title": "Id",
              "type": "string"
            },
            "kind": {
              "default": null,
              "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#comment\".",
              "nullable": true,
              "title": "Kind",
              "type": "string"
            },
            "modifiedTime": {
              "default": null,
              "description": "The last time the comment or any of its replies was modified (RFC 3339 date-time).",
              "nullable": true,
              "title": "Modified Time",
              "type": "string"
            },
            "quotedFileContent": {
              "additionalProperties": { "type": "string" },
              "default": null,
              "description": "The file content to which the comment is referring.",
              "nullable": true,
              "title": "Quoted File Content",
              "type": "object"
            },
            "replies": {
              "default": null,
              "description": "A list of replies to this comment. Populated if requesting with includeReplies=true.",
              "items": {
                "properties": {
                  "action": {
                    "default": null,
                    "description": "The action the reply performed to the parent comment. Valid values are: resolve, reopen",
                    "nullable": true,
                    "title": "Action",
                    "type": "string"
                  },
                  "author": {
                    "additionalProperties": false,
                    "default": null,
                    "description": "The user who created the reply.",
                    "nullable": true,
                    "properties": {
                      "displayName": {
                        "default": null,
                        "description": "A plain text displayable name for this user.",
                        "nullable": true,
                        "title": "Display Name",
                        "type": "string"
                      },
                      "emailAddress": {
                        "default": null,
                        "description": "The email address of the user.",
                        "nullable": true,
                        "title": "Email Address",
                        "type": "string"
                      },
                      "kind": {
                        "default": null,
                        "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#user\".",
                        "nullable": true,
                        "title": "Kind",
                        "type": "string"
                      },
                      "me": {
                        "default": null,
                        "description": "Whether this user is the requesting user.",
                        "nullable": true,
                        "title": "Me",
                        "type": "boolean"
                      },
                      "permissionId": {
                        "default": null,
                        "description": "The user's ID as visible in Permission resources.",
                        "nullable": true,
                        "title": "Permission Id",
                        "type": "string"
                      },
                      "photoLink": {
                        "default": null,
                        "description": "A link to the user's profile photo, if available.",
                        "nullable": true,
                        "title": "Photo Link",
                        "type": "string"
                      }
                    },
                    "title": "User",
                    "type": "object"
                  },
                  "content": {
                    "default": null,
                    "description": "The plain text content of the reply.",
                    "nullable": true,
                    "title": "Content",
                    "type": "string"
                  },
                  "createdTime": {
                    "default": null,
                    "description": "The time the reply was created (RFC 3339 date-time).",
                    "nullable": true,
                    "title": "Created Time",
                    "type": "string"
                  },
                  "deleted": {
                    "default": null,
                    "description": "Whether the reply has been deleted. A deleted reply has no content.",
                    "nullable": true,
                    "title": "Deleted",
                    "type": "boolean"
                  },
                  "htmlContent": {
                    "default": null,
                    "description": "The content of the reply with HTML formatting.",
                    "nullable": true,
                    "title": "Html Content",
                    "type": "string"
                  },
                  "id": {
                    "default": null,
                    "description": "The ID of the reply.",
                    "nullable": true,
                    "title": "Id",
                    "type": "string"
                  },
                  "kind": {
                    "default": null,
                    "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#reply\".",
                    "nullable": true,
                    "title": "Kind",
                    "type": "string"
                  },
                  "modifiedTime": {
                    "default": null,
                    "description": "The last time the reply was modified (RFC 3339 date-time).",
                    "nullable": true,
                    "title": "Modified Time",
                    "type": "string"
                  }
                },
                "title": "Reply",
                "type": "object"
              },
              "nullable": true,
              "title": "Replies",
              "type": "array"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetCommentResponseWrapper",
      "type": "object"
    },
    "description": "Tool to get a comment by id. use when you need to retrieve a specific comment from a google drive file and have both the file id and comment id.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "important", "comments"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get Shared Drive",
    "slug": "GOOGLEDRIVE_GET_DRIVE",
    "input_parameters": {
      "properties": {
        "drive_id": {
          "description": "The ID of the shared drive.",
          "examples": ["0ABCA123456789"],
          "title": "Drive Id",
          "type": "string"
        },
        "use_domain_admin_access": {
          "default": null,
          "description": "Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the shared drive belongs.",
          "examples": [true],
          "nullable": true,
          "title": "Use Domain Admin Access",
          "type": "boolean"
        }
      },
      "required": ["drive_id"],
      "title": "GetDriveRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "id": {
              "default": null,
              "description": "The ID of this shared drive. This is a read-only field.",
              "nullable": true,
              "title": "Id",
              "type": "string"
            },
            "kind": {
              "default": null,
              "description": "Identifies what kind of resource this is. Value: the fixed string 'drive#drive'.",
              "nullable": true,
              "title": "Kind",
              "type": "string"
            },
            "name": {
              "default": null,
              "description": "The name of this shared drive. This is a read-only field.",
              "nullable": true,
              "title": "Name",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetDriveResponseWrapper",
      "type": "object"
    },
    "description": "Tool to get a shared drive by id. use when you need to retrieve information about a specific shared drive.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "important", "drive"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get File Metadata",
    "slug": "GOOGLEDRIVE_GET_FILE_METADATA",
    "input_parameters": {
      "properties": {
        "acknowledgeAbuse": {
          "default": null,
          "description": "Whether the user is acknowledging the risk of downloading known malware or other abusive files. This is only applicable when the alt parameter is set to media and the user is the owner of the file or an organizer of the shared drive in which the file resides.",
          "nullable": true,
          "title": "Acknowledge Abuse",
          "type": "boolean"
        },
        "fileId": {
          "description": "The ID of the file.",
          "examples": ["1a2b3c4d5e6f7g8h9i0j"],
          "title": "File Id",
          "type": "string"
        },
        "includeLabels": {
          "default": null,
          "description": "A comma-separated list of IDs of labels to include in the labelInfo part of the response.",
          "nullable": true,
          "title": "Include Labels",
          "type": "string"
        },
        "includePermissionsForView": {
          "default": null,
          "description": "Specifies which additional view's permissions to include in the response. Only 'published' is supported.",
          "nullable": true,
          "title": "Include Permissions For View",
          "type": "string"
        },
        "supportsAllDrives": {
          "default": null,
          "description": "Whether the requesting application supports both My Drives and shared drives. This parameter will default to false.",
          "nullable": true,
          "title": "Supports All Drives",
          "type": "boolean"
        }
      },
      "required": ["fileId"],
      "title": "GetFileMetadataRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "id": {
              "default": null,
              "description": "The ID of the file.",
              "nullable": true,
              "title": "Id",
              "type": "string"
            },
            "kind": {
              "default": null,
              "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#file\".",
              "nullable": true,
              "title": "Kind",
              "type": "string"
            },
            "mimeType": {
              "default": null,
              "description": "The MIME type of the file.",
              "nullable": true,
              "title": "Mime Type",
              "type": "string"
            },
            "name": {
              "default": null,
              "description": "The name of the file.",
              "nullable": true,
              "title": "Name",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetFileMetadataResponseWrapper",
      "type": "object"
    },
    "description": "Tool to get a file's metadata by id. use when you need to retrieve the metadata for a specific file in google drive.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "important", "file"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get Permission",
    "slug": "GOOGLEDRIVE_GET_PERMISSION",
    "input_parameters": {
      "properties": {
        "file_id": {
          "description": "The ID of the file.",
          "examples": ["1a2b3c4d5e6f7g8h9i0j"],
          "title": "File Id",
          "type": "string"
        },
        "permission_id": {
          "description": "The ID of the permission.",
          "examples": ["1234567890"],
          "title": "Permission Id",
          "type": "string"
        },
        "supports_all_drives": {
          "default": null,
          "description": "Whether the requesting application supports both My Drives and shared drives.",
          "nullable": true,
          "title": "Supports All Drives",
          "type": "boolean"
        },
        "use_domain_admin_access": {
          "default": null,
          "description": "Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.",
          "nullable": true,
          "title": "Use Domain Admin Access",
          "type": "boolean"
        }
      },
      "required": ["file_id", "permission_id"],
      "title": "GetPermissionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "allowFileDiscovery": {
              "default": null,
              "description": "Whether the permission allows the file to be discovered through search. This is only applicable for permissions of type domain or anyone.",
              "nullable": true,
              "title": "Allow File Discovery",
              "type": "boolean"
            },
            "deleted": {
              "default": null,
              "description": "Whether the account associated with this permission has been deleted. This field only pertains to user and group permissions.",
              "nullable": true,
              "title": "Deleted",
              "type": "boolean"
            },
            "displayName": {
              "default": null,
              "description": "A displayable name for users, groups or domains.",
              "nullable": true,
              "title": "Display Name",
              "type": "string"
            },
            "domain": {
              "default": null,
              "description": "The domain to which this permission refers.",
              "nullable": true,
              "title": "Domain",
              "type": "string"
            },
            "emailAddress": {
              "default": null,
              "description": "The email address of the user or group to which this permission refers.",
              "nullable": true,
              "title": "Email Address",
              "type": "string"
            },
            "expirationTime": {
              "default": null,
              "description": "The time at which this permission will expire (RFC 3339 date-time). Expiration times have the following restrictions: - They can only be set on user and group permissions - The time must be in the future - The time cannot be more than a year in the future",
              "nullable": true,
              "title": "Expiration Time",
              "type": "string"
            },
            "id": {
              "default": null,
              "description": "The ID of the permission. This is a unique identifier for the grantee, and is published in User resources as permissionId.",
              "nullable": true,
              "title": "Id",
              "type": "string"
            },
            "kind": {
              "default": null,
              "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#permission\".",
              "nullable": true,
              "title": "Kind",
              "type": "string"
            },
            "permissionDetails": {
              "default": null,
              "description": "Details of whether the permissions on this Team Drive item are inherited or directly on this item. This is an output-only field which is present only for Team Drive items.",
              "items": {
                "properties": {
                  "inherited": {
                    "default": null,
                    "nullable": true,
                    "title": "Inherited",
                    "type": "boolean"
                  },
                  "inheritedFrom": {
                    "default": null,
                    "nullable": true,
                    "title": "Inherited From",
                    "type": "string"
                  },
                  "permissionType": {
                    "default": null,
                    "nullable": true,
                    "title": "Permission Type",
                    "type": "string"
                  },
                  "role": { "default": null, "nullable": true, "title": "Role", "type": "string" },
                  "withLink": {
                    "default": null,
                    "nullable": true,
                    "title": "With Link",
                    "type": "boolean"
                  }
                },
                "title": "PermissionPermissionDetails",
                "type": "object"
              },
              "nullable": true,
              "title": "Permission Details",
              "type": "array"
            },
            "photoLink": {
              "default": null,
              "description": "A link to the user's profile photo, if available.",
              "nullable": true,
              "title": "Photo Link",
              "type": "string"
            },
            "role": {
              "default": null,
              "description": "The role granted by this permission. While new values may be supported in the future, the following are currently possible: \"owner\", \"organizer\", \"fileOrganizer\", \"writer\", \"commenter\", \"reader\"",
              "nullable": true,
              "title": "Role",
              "type": "string"
            },
            "teamDrivePermissionDetails": {
              "default": null,
              "description": "Details of whether the permissions on this shared drive item are inherited or directly on this item. This is an output-only field which is present only for shared drive items.",
              "items": {
                "properties": {
                  "inherited": {
                    "default": null,
                    "nullable": true,
                    "title": "Inherited",
                    "type": "boolean"
                  },
                  "inheritedFrom": {
                    "default": null,
                    "nullable": true,
                    "title": "Inherited From",
                    "type": "string"
                  },
                  "role": { "default": null, "nullable": true, "title": "Role", "type": "string" },
                  "teamDrivePermissionType": {
                    "default": null,
                    "nullable": true,
                    "title": "Team Drive Permission Type",
                    "type": "string"
                  }
                },
                "title": "PermissionTeamDrivePermissionDetails",
                "type": "object"
              },
              "nullable": true,
              "title": "Team Drive Permission Details",
              "type": "array"
            },
            "type": {
              "default": null,
              "description": "The type of the grantee. Valid values are: \"user\", \"group\", \"domain\", \"anyone\"",
              "nullable": true,
              "title": "Type",
              "type": "string"
            },
            "view": {
              "default": null,
              "description": "Indicates the view for this permission. Only populated for permissions that belong to a view. published is the only supported value.",
              "nullable": true,
              "title": "View",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetPermissionResponseWrapper",
      "type": "object"
    },
    "description": "Gets a permission by id. use this tool to retrieve a specific permission for a file or shared drive.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "important", "permission"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get Reply",
    "slug": "GOOGLEDRIVE_GET_REPLY",
    "input_parameters": {
      "properties": {
        "commentId": {
          "description": "The ID of the comment.",
          "examples": ["AAAAAABBBBBB"],
          "title": "Comment Id",
          "type": "string"
        },
        "fileId": {
          "description": "The ID of the file.",
          "examples": ["1aBcDeFgHiJkLmNoPqRsTuVwXyZ0123456789"],
          "title": "File Id",
          "type": "string"
        },
        "includeDeleted": {
          "default": null,
          "description": "Whether to return deleted replies. Deleted replies will not include their original content.",
          "nullable": true,
          "title": "Include Deleted",
          "type": "boolean"
        },
        "replyId": {
          "description": "The ID of the reply.",
          "examples": ["CCCCCCDDDDDD"],
          "title": "Reply Id",
          "type": "string"
        }
      },
      "required": ["fileId", "commentId", "replyId"],
      "title": "GetReplyRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "action": {
              "default": null,
              "description": "The action the reply performed to the parent comment. Valid values are: resolve, reopen.",
              "nullable": true,
              "title": "Action",
              "type": "string"
            },
            "author": {
              "additionalProperties": false,
              "default": null,
              "description": "The user who created the reply.",
              "nullable": true,
              "properties": {
                "displayName": {
                  "default": null,
                  "description": "The display name of the user.",
                  "nullable": true,
                  "title": "Display Name",
                  "type": "string"
                },
                "emailAddress": {
                  "default": null,
                  "description": "The email address of the user.",
                  "nullable": true,
                  "title": "Email Address",
                  "type": "string"
                },
                "kind": {
                  "default": null,
                  "description": "Identifies this resource as a user.",
                  "nullable": true,
                  "title": "Kind",
                  "type": "string"
                },
                "me": {
                  "default": null,
                  "description": "Whether this user is the requesting user.",
                  "nullable": true,
                  "title": "Me",
                  "type": "boolean"
                },
                "permissionId": {
                  "default": null,
                  "description": "The user's ID as visible in Permission resources.",
                  "nullable": true,
                  "title": "Permission Id",
                  "type": "string"
                },
                "photoLink": {
                  "default": null,
                  "description": "A link to the user's profile photo, if available.",
                  "nullable": true,
                  "title": "Photo Link",
                  "type": "string"
                }
              },
              "title": "Author",
              "type": "object"
            },
            "content": {
              "default": null,
              "description": "The plain text content of the reply.",
              "nullable": true,
              "title": "Content",
              "type": "string"
            },
            "createdTime": {
              "default": null,
              "description": "The time the reply was created (RFC 3339 date-time).",
              "format": "date-time",
              "nullable": true,
              "title": "Created Time",
              "type": "string"
            },
            "deleted": {
              "default": null,
              "description": "Whether the reply has been deleted. A deleted reply has no content.",
              "nullable": true,
              "title": "Deleted",
              "type": "boolean"
            },
            "htmlContent": {
              "default": null,
              "description": "The HTML content of the reply.",
              "nullable": true,
              "title": "Html Content",
              "type": "string"
            },
            "id": {
              "default": null,
              "description": "The ID of the reply.",
              "nullable": true,
              "title": "Id",
              "type": "string"
            },
            "kind": {
              "default": null,
              "description": "Identifies this resource as a reply.",
              "nullable": true,
              "title": "Kind",
              "type": "string"
            },
            "modifiedTime": {
              "default": null,
              "description": "The last time the reply was modified (RFC 3339 date-time).",
              "format": "date-time",
              "nullable": true,
              "title": "Modified Time",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetReplyResponseWrapper",
      "type": "object"
    },
    "description": "Tool to get a specific reply to a comment on a file. use when you need to retrieve the details of a particular reply.",
    "tags": ["important", "files", "comments"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get Revision",
    "slug": "GOOGLEDRIVE_GET_REVISION",
    "input_parameters": {
      "properties": {
        "acknowledge_abuse": {
          "default": null,
          "description": "Whether the user is acknowledging the risk of downloading known malware or other abusive files. This is only applicable when the alt parameter is set to media and the user is the owner of the file or an organizer of the shared drive in which the file resides.",
          "nullable": true,
          "title": "Acknowledge Abuse",
          "type": "boolean"
        },
        "file_id": {
          "description": "The ID of the file.",
          "examples": ["1ZdR3L3Kek7szY1G1-2VUX8cW6CnU0c4a"],
          "title": "File Id",
          "type": "string"
        },
        "revision_id": {
          "description": "The ID of the revision.",
          "examples": ["0B9B5CLMDv-N4Z2FhY0E5RUQzNVE"],
          "title": "Revision Id",
          "type": "string"
        }
      },
      "required": ["file_id", "revision_id"],
      "title": "GetRevisionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "export_links": {
              "additionalProperties": true,
              "default": null,
              "description": "Links for exporting Docs Editors files to specific formats.",
              "nullable": true,
              "title": "Export Links",
              "type": "object"
            },
            "id": {
              "default": null,
              "description": "The ID of the revision.",
              "nullable": true,
              "title": "Id",
              "type": "string"
            },
            "keep_forever": {
              "default": null,
              "description": "Whether to keep this revision forever, even if it is no longer the head revision. If not set or false, the revision will be automatically purged 30 days after newer revisions are created.",
              "nullable": true,
              "title": "Keep Forever",
              "type": "boolean"
            },
            "kind": {
              "default": null,
              "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#revision\".",
              "nullable": true,
              "title": "Kind",
              "type": "string"
            },
            "last_modifying_user": {
              "additionalProperties": true,
              "default": null,
              "description": "The user who last modified the revision.",
              "nullable": true,
              "title": "Last Modifying User",
              "type": "object"
            },
            "md5_checksum": {
              "default": null,
              "description": "The MD5 checksum of the revision. This is only populated for revisions of files with binary content in Drive.",
              "nullable": true,
              "title": "Md5 Checksum",
              "type": "string"
            },
            "mime_type": {
              "default": null,
              "description": "The MIME type of the revision.",
              "nullable": true,
              "title": "Mime Type",
              "type": "string"
            },
            "modified_time": {
              "default": null,
              "description": "The last time the revision was modified (RFC 3339 date-time).",
              "nullable": true,
              "title": "Modified Time",
              "type": "string"
            },
            "original_filename": {
              "default": null,
              "description": "The original filename of the revision. This is only populated for revisions of files with binary content in Drive.",
              "nullable": true,
              "title": "Original Filename",
              "type": "string"
            },
            "publish_link": {
              "default": null,
              "description": "A link to the published revision.",
              "nullable": true,
              "title": "Publish Link",
              "type": "string"
            },
            "published": {
              "default": null,
              "description": "Whether this revision is published. This is only populated for files with Google Docs Editors content types.",
              "nullable": true,
              "title": "Published",
              "type": "boolean"
            },
            "size": {
              "default": null,
              "description": "The size of the revision content in bytes. This is only populated for revisions of files with binary content in Drive.",
              "nullable": true,
              "title": "Size",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetRevisionResponseWrapper",
      "type": "object"
    },
    "description": "Tool to get a specific revision's metadata by revision id. use when you need to retrieve information about a particular version of a file.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "important", "file", "revision"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete folder or file",
    "slug": "GOOGLEDRIVE_GOOGLE_DRIVE_DELETE_FOLDER_OR_FILE_ACTION",
    "input_parameters": {
      "properties": {
        "fileId": {
          "description": "The ID of the file or folder to delete. This is a required field.",
          "examples": ["1XyZAbcDefGhiJklMnoPqRsTuVwXyZAbcDef"],
          "title": "File Id",
          "type": "string"
        },
        "supportsAllDrives": {
          "default": null,
          "description": "Whether the application supports both My Drives and shared drives. If false or unspecified, the file is attempted to be deleted from the user's My Drive. If true, the item will be deleted from shared drives as well if necessary.",
          "nullable": true,
          "title": "Supports All Drives",
          "type": "boolean"
        }
      },
      "required": ["fileId"],
      "title": "GoogleDriveDeleteFolderOrFileRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {},
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GoogleDriveDeleteFolderOrFileResponseWrapper",
      "type": "object"
    },
    "description": "Tool to delete a file or folder in google drive. use when you need to permanently remove a specific file or folder using its id. note: this action is irreversible.",
    "tags": ["destructiveHint", "idempotentHint", "openWorldHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Hide Shared Drive",
    "slug": "GOOGLEDRIVE_HIDE_DRIVE",
    "input_parameters": {
      "properties": {
        "drive_id": {
          "description": "The ID of the shared drive.",
          "examples": ["0AEMgNk_8MPnAUk9PVA"],
          "title": "Drive Id",
          "type": "string"
        }
      },
      "required": ["drive_id"],
      "title": "HideDriveRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "hidden": {
              "default": null,
              "description": "Whether the shared drive is hidden from default view.",
              "nullable": true,
              "title": "Hidden",
              "type": "boolean"
            },
            "id": {
              "description": "The ID of this shared drive. This is a monotonically increasing ID that is unique across all shared drives created by a given organization.",
              "title": "Id",
              "type": "string"
            },
            "kind": {
              "default": "drive#drive",
              "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#drive\".",
              "title": "Kind",
              "type": "string"
            },
            "name": {
              "description": "The name of this shared drive.",
              "title": "Name",
              "type": "string"
            }
          },
          "required": ["id", "name"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "HideDriveResponseWrapper",
      "type": "object"
    },
    "description": "Tool to hide a shared drive from the default view. use when you want to remove a shared drive from the user's main google drive interface without deleting it.",
    "tags": ["updateHint", "openWorldHint", "important", "drive", "sharing"]
  },
  {
    "available_versions": ["latest"],
    "name": "List Changes",
    "slug": "GOOGLEDRIVE_LIST_CHANGES",
    "input_parameters": {
      "properties": {
        "driveId": {
          "default": null,
          "description": "The shared drive from which changes will be returned. If specified the change IDs will be reflective of the shared drive; use the combined drive ID and change ID as an identifier.",
          "examples": ["0AB1CDEfghijklmNOP"],
          "nullable": true,
          "title": "Drive Id",
          "type": "string"
        },
        "includeCorpusRemovals": {
          "default": null,
          "description": "Whether changes should include the file resource if the file is still accessible by the user at the time of the request, even when a file was removed from the list of changes and there will be no further change entries for this file.",
          "nullable": true,
          "title": "Include Corpus Removals",
          "type": "boolean"
        },
        "includeItemsFromAllDrives": {
          "default": null,
          "description": "Whether both My Drive and shared drive items should be included in results.",
          "nullable": true,
          "title": "Include Items From All Drives",
          "type": "boolean"
        },
        "includeLabels": {
          "default": null,
          "description": "A comma-separated list of IDs of labels to include in the `labelInfo` part of the response.",
          "examples": ["labelId1,labelId2"],
          "nullable": true,
          "title": "Include Labels",
          "type": "string"
        },
        "includePermissionsForView": {
          "default": null,
          "description": "Specifies which additional view's permissions to include in the response. Only 'published' is supported.",
          "examples": ["published"],
          "nullable": true,
          "title": "Include Permissions For View",
          "type": "string"
        },
        "includeRemoved": {
          "default": true,
          "description": "Whether to include changes indicating that items have been removed from the list of changes, for example by deletion or loss of access.",
          "nullable": true,
          "title": "Include Removed",
          "type": "boolean"
        },
        "pageSize": {
          "default": 100,
          "description": "The maximum number of changes to return per page.",
          "examples": [100],
          "maximum": 1000,
          "minimum": 1,
          "nullable": true,
          "title": "Page Size",
          "type": "integer"
        },
        "pageToken": {
          "description": "The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response or to the response from the getStartPageToken method.",
          "examples": ["12345"],
          "title": "Page Token",
          "type": "string"
        },
        "restrictToMyDrive": {
          "default": null,
          "description": "Whether to restrict the results to changes inside the My Drive hierarchy. This omits changes to files such as those in the Application Data folder or shared files which have not been added to My Drive.",
          "nullable": true,
          "title": "Restrict To My Drive",
          "type": "boolean"
        },
        "spaces": {
          "default": "drive",
          "description": "A comma-separated list of spaces to query within the corpora. Supported values are 'drive' and 'appDataFolder'.",
          "examples": ["drive,appDataFolder"],
          "nullable": true,
          "title": "Spaces",
          "type": "string"
        },
        "supportsAllDrives": {
          "default": null,
          "description": "Whether the requesting application supports both My Drives and shared drives.",
          "nullable": true,
          "title": "Supports All Drives",
          "type": "boolean"
        }
      },
      "required": ["pageToken"],
      "title": "ListChangesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "changes": {
              "description": "The list of changes. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.",
              "items": {
                "properties": {
                  "drive": {
                    "additionalProperties": true,
                    "default": null,
                    "description": "The updated state of the shared drive. Present if the type is drive and the shared drive has not been removed from this list of changes.",
                    "nullable": true,
                    "title": "Drive",
                    "type": "object"
                  },
                  "driveId": {
                    "default": null,
                    "description": "The ID of the shared drive associated with this change.",
                    "nullable": true,
                    "title": "Drive Id",
                    "type": "string"
                  },
                  "file": {
                    "additionalProperties": true,
                    "default": null,
                    "description": "The updated state of the file. Present if the type is file and the file has not been removed from this list of changes.",
                    "nullable": true,
                    "title": "File",
                    "type": "object"
                  },
                  "fileId": {
                    "default": null,
                    "description": "The ID of the file which has changed.",
                    "nullable": true,
                    "title": "File Id",
                    "type": "string"
                  },
                  "kind": {
                    "default": null,
                    "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#change\".",
                    "nullable": true,
                    "title": "Kind",
                    "type": "string"
                  },
                  "removed": {
                    "default": null,
                    "description": "Whether the file or shared drive has been removed from this list of changes, for example by deletion or loss of access.",
                    "nullable": true,
                    "title": "Removed",
                    "type": "boolean"
                  },
                  "teamDrive": {
                    "additionalProperties": true,
                    "default": null,
                    "description": "Deprecated: Use drive instead.",
                    "nullable": true,
                    "title": "Team Drive",
                    "type": "object"
                  },
                  "teamDriveId": {
                    "default": null,
                    "description": "Deprecated: Use driveId instead.",
                    "nullable": true,
                    "title": "Team Drive Id",
                    "type": "string"
                  },
                  "time": {
                    "default": null,
                    "description": "The time of this change (RFC 3339 date-time).",
                    "nullable": true,
                    "title": "Time",
                    "type": "string"
                  },
                  "type": {
                    "default": null,
                    "description": "The type of the change. Possible values are \"file\" and \"drive\".",
                    "nullable": true,
                    "title": "Type",
                    "type": "string"
                  }
                },
                "title": "Change",
                "type": "object"
              },
              "title": "Changes",
              "type": "array"
            },
            "kind": {
              "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#changeList\".",
              "title": "Kind",
              "type": "string"
            },
            "newStartPageToken": {
              "default": null,
              "description": "The starting page token for future changes. This will be present only if the end of the current changes list has been reached. The page token doesn't expire.",
              "nullable": true,
              "title": "New Start Page Token",
              "type": "string"
            },
            "nextPageToken": {
              "default": null,
              "description": "The page token for the next page of changes. This will be absent if the end of the changes list has been reached. The page token doesn't expire.",
              "nullable": true,
              "title": "Next Page Token",
              "type": "string"
            }
          },
          "required": ["kind"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListChangesResponseWrapper",
      "type": "object"
    },
    "description": "Tool to list the changes for a user or shared drive. use when you need to track modifications to files and folders, such as creations, deletions, or permission changes. this action requires a `pagetoken` which can be initially obtained using the `get changes start page token` action or from a previous `list changes` response.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "important", "changes"]
  },
  {
    "available_versions": ["latest"],
    "name": "List Comments",
    "slug": "GOOGLEDRIVE_LIST_COMMENTS",
    "input_parameters": {
      "properties": {
        "fields": {
          "default": "*",
          "description": "A comma-separated list of fields to include in the response. Use `*` to include all fields.",
          "examples": ["*", "comments(id,content,author)"],
          "nullable": true,
          "title": "Fields",
          "type": "string"
        },
        "fileId": {
          "description": "The ID of the file.",
          "examples": ["1234567890abcdefghijklmnopqrstuvwxyz"],
          "title": "File Id",
          "type": "string"
        },
        "includeDeleted": {
          "default": false,
          "description": "Whether to include deleted comments. Deleted comments will not include their original content.",
          "nullable": true,
          "title": "Include Deleted",
          "type": "boolean"
        },
        "pageSize": {
          "default": 20,
          "description": "The maximum number of comments to return per page.",
          "maximum": 100,
          "minimum": 1,
          "nullable": true,
          "title": "Page Size",
          "type": "integer"
        },
        "pageToken": {
          "default": null,
          "description": "The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response.",
          "nullable": true,
          "title": "Page Token",
          "type": "string"
        },
        "startModifiedTime": {
          "default": null,
          "description": "The minimum value of 'modifiedTime' for the result comments (RFC 3339 date-time).",
          "nullable": true,
          "title": "Start Modified Time",
          "type": "string"
        }
      },
      "required": ["fileId"],
      "title": "ListCommentsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "comments": {
              "description": "The list of comments. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.",
              "items": {
                "properties": {
                  "anchor": {
                    "default": null,
                    "description": "A region of the document represented as a JSON string. See anchor documentation for details on how to define and interpret anchor properties.",
                    "nullable": true,
                    "title": "Anchor",
                    "type": "string"
                  },
                  "author": {
                    "additionalProperties": false,
                    "default": null,
                    "description": "The author of the comment. The author's email address and permission ID will not be populated.",
                    "nullable": true,
                    "properties": {
                      "displayName": {
                        "default": null,
                        "description": "The display name of the user.",
                        "nullable": true,
                        "title": "Display Name",
                        "type": "string"
                      },
                      "kind": {
                        "default": null,
                        "description": "Identifies this user as a Google Drive user.",
                        "nullable": true,
                        "title": "Kind",
                        "type": "string"
                      },
                      "me": {
                        "default": null,
                        "description": "Whether this user is the requesting user.",
                        "nullable": true,
                        "title": "Me",
                        "type": "boolean"
                      },
                      "permissionId": {
                        "default": null,
                        "description": "The user's ID as visible in Permission resources.",
                        "nullable": true,
                        "title": "Permission Id",
                        "type": "string"
                      },
                      "photoLink": {
                        "default": null,
                        "description": "A link to the user's profile photo, if available.",
                        "nullable": true,
                        "title": "Photo Link",
                        "type": "string"
                      }
                    },
                    "title": "CommentAuthor",
                    "type": "object"
                  },
                  "content": {
                    "default": null,
                    "description": "The plain text content of the comment.",
                    "nullable": true,
                    "title": "Content",
                    "type": "string"
                  },
                  "createdTime": {
                    "default": null,
                    "description": "The time at which the comment was created (RFC 3339 date-time).",
                    "format": "date-time",
                    "nullable": true,
                    "title": "Created Time",
                    "type": "string"
                  },
                  "deleted": {
                    "default": null,
                    "description": "Whether the comment has been deleted. A deleted comment has no content.",
                    "nullable": true,
                    "title": "Deleted",
                    "type": "boolean"
                  },
                  "htmlContent": {
                    "default": null,
                    "description": "The content of the comment with HTML formatting.",
                    "nullable": true,
                    "title": "Html Content",
                    "type": "string"
                  },
                  "id": {
                    "default": null,
                    "description": "The ID of the comment.",
                    "nullable": true,
                    "title": "Id",
                    "type": "string"
                  },
                  "kind": {
                    "default": null,
                    "description": "Identifies this resource as a Drive comment.",
                    "nullable": true,
                    "title": "Kind",
                    "type": "string"
                  },
                  "modifiedTime": {
                    "default": null,
                    "description": "The last time the comment or any of its replies was modified (RFC 3339 date-time).",
                    "format": "date-time",
                    "nullable": true,
                    "title": "Modified Time",
                    "type": "string"
                  },
                  "quotedFileContent": {
                    "additionalProperties": { "type": "string" },
                    "default": null,
                    "description": "The file content to which the comment is referring, typically within the anchor region. For a text file, for example, this would be the text at the location of the comment.",
                    "nullable": true,
                    "title": "Quoted File Content",
                    "type": "object"
                  },
                  "replies": {
                    "default": null,
                    "description": "A list of replies to this comment. Formatted as comment objects, but with a defined action field.",
                    "items": {
                      "properties": {
                        "action": {
                          "default": null,
                          "description": "The action the reply performed to the parent comment. Valid values are: resolve, reopen",
                          "nullable": true,
                          "title": "Action",
                          "type": "string"
                        },
                        "author": {
                          "additionalProperties": false,
                          "default": null,
                          "description": "The author of the reply. The author's email address and permission ID will not be populated.",
                          "nullable": true,
                          "properties": {
                            "displayName": {
                              "default": null,
                              "description": "The display name of the user.",
                              "nullable": true,
                              "title": "Display Name",
                              "type": "string"
                            },
                            "kind": {
                              "default": null,
                              "description": "Identifies this user as a Google Drive user.",
                              "nullable": true,
                              "title": "Kind",
                              "type": "string"
                            },
                            "me": {
                              "default": null,
                              "description": "Whether this user is the requesting user.",
                              "nullable": true,
                              "title": "Me",
                              "type": "boolean"
                            },
                            "permissionId": {
                              "default": null,
                              "description": "The user's ID as visible in Permission resources.",
                              "nullable": true,
                              "title": "Permission Id",
                              "type": "string"
                            },
                            "photoLink": {
                              "default": null,
                              "description": "A link to the user's profile photo, if available.",
                              "nullable": true,
                              "title": "Photo Link",
                              "type": "string"
                            }
                          },
                          "title": "CommentAuthor",
                          "type": "object"
                        },
                        "content": {
                          "default": null,
                          "description": "The plain text content of the reply.",
                          "nullable": true,
                          "title": "Content",
                          "type": "string"
                        },
                        "createdTime": {
                          "default": null,
                          "description": "The time the reply was created (RFC 3339 date-time).",
                          "format": "date-time",
                          "nullable": true,
                          "title": "Created Time",
                          "type": "string"
                        },
                        "deleted": {
                          "default": null,
                          "description": "Whether the reply has been deleted. A deleted reply has no content.",
                          "nullable": true,
                          "title": "Deleted",
                          "type": "boolean"
                        },
                        "htmlContent": {
                          "default": null,
                          "description": "The content of the reply with HTML formatting.",
                          "nullable": true,
                          "title": "Html Content",
                          "type": "string"
                        },
                        "id": {
                          "default": null,
                          "description": "The ID of the reply.",
                          "nullable": true,
                          "title": "Id",
                          "type": "string"
                        },
                        "kind": {
                          "default": null,
                          "description": "Identifies this resource as a Drive reply.",
                          "nullable": true,
                          "title": "Kind",
                          "type": "string"
                        },
                        "modifiedTime": {
                          "default": null,
                          "description": "The last time the reply was modified (RFC 3339 date-time).",
                          "format": "date-time",
                          "nullable": true,
                          "title": "Modified Time",
                          "type": "string"
                        }
                      },
                      "title": "CommentReply",
                      "type": "object"
                    },
                    "nullable": true,
                    "title": "Replies",
                    "type": "array"
                  },
                  "resolved": {
                    "default": null,
                    "description": "Whether the comment has been resolved by one of its replies.",
                    "nullable": true,
                    "title": "Resolved",
                    "type": "boolean"
                  }
                },
                "title": "Comment",
                "type": "object"
              },
              "title": "Comments",
              "type": "array"
            },
            "kind": {
              "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#commentList\".",
              "title": "Kind",
              "type": "string"
            },
            "nextPageToken": {
              "default": null,
              "description": "The page token for the next page of comments. This will be absent if the end of the comments list has been reached.",
              "nullable": true,
              "title": "Next Page Token",
              "type": "string"
            }
          },
          "required": ["kind", "comments"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListCommentsResponseWrapper",
      "type": "object"
    },
    "description": "Tool to list all comments for a file in google drive. use when you need to retrieve comments associated with a specific file.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "important", "comments"]
  },
  {
    "available_versions": ["latest"],
    "name": "List Files and Folders",
    "slug": "GOOGLEDRIVE_LIST_FILES",
    "input_parameters": {
      "properties": {
        "corpora": {
          "default": null,
          "description": "Specifies the bodies of items (files/documents) to which the query applies. Supported values are 'user', 'domain', 'drive', and 'allDrives'. It's generally more efficient to use 'user' or 'drive' instead of 'allDrives'. Defaults to 'user'.",
          "examples": ["user", "drive"],
          "nullable": true,
          "title": "Corpora",
          "type": "string"
        },
        "driveId": {
          "default": null,
          "description": "The ID of the shared drive to search. This is used when `corpora` is set to 'drive'.",
          "examples": ["0ABCA123456789"],
          "nullable": true,
          "title": "Drive Id",
          "type": "string"
        },
        "fields": {
          "default": null,
          "description": "Selector specifying which fields to include in a partial response. This can be used to retrieve only specific file metadata, improving performance. Example: 'nextPageToken, files(id, name, mimeType, modifiedTime)'",
          "examples": ["files(id,name,mimeType)"],
          "nullable": true,
          "title": "Fields",
          "type": "string"
        },
        "folderId": {
          "default": null,
          "description": "ID of a specific folder to list files from. This is a convenience parameter that automatically adds \"'folder_id' in parents\" to the query. Cannot be used together with a custom 'q' parameter.",
          "examples": ["1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms"],
          "nullable": true,
          "title": "Folder Id",
          "type": "string"
        },
        "includeItemsFromAllDrives": {
          "default": null,
          "description": "Whether to include items from both My Drive and shared drives. This is relevant when `corpora` is 'user' or 'domain'. Defaults to false.",
          "examples": [true],
          "nullable": true,
          "title": "Include Items From All Drives",
          "type": "boolean"
        },
        "includeLabels": {
          "default": null,
          "description": "A comma-separated list of label IDs to include in the `labelInfo` part of the response for each file.",
          "examples": ["labelId1,labelId2"],
          "nullable": true,
          "title": "Include Labels",
          "type": "string"
        },
        "includePermissionsForView": {
          "default": null,
          "description": "Specifies which additional view's permissions to include in the response. Currently, only 'published' is supported, which includes permissions for files with published content.",
          "examples": ["published"],
          "nullable": true,
          "title": "Include Permissions For View",
          "type": "string"
        },
        "orderBy": {
          "default": null,
          "description": "A comma-separated list of sort keys. Valid keys include 'createdTime', 'folder', 'modifiedByMeTime', 'modifiedTime', 'name', 'name_natural', 'quotaBytesUsed', 'recency', 'sharedWithMeTime', 'starred', 'viewedByMeTime'. Each key sorts in ascending order by default, but can be reversed with the 'desc' modifier (e.g., 'modifiedTime desc').",
          "examples": ["modifiedTime desc,name"],
          "nullable": true,
          "title": "Order By",
          "type": "string"
        },
        "pageSize": {
          "default": 100,
          "description": "The maximum number of files to return per page. The value must be between 1 and 1000, inclusive. Defaults to 100.",
          "examples": [50],
          "maximum": 1000,
          "minimum": 1,
          "nullable": true,
          "title": "Page Size",
          "type": "integer"
        },
        "pageToken": {
          "default": null,
          "description": "The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response.",
          "examples": [" nextPageTokenValue"],
          "nullable": true,
          "title": "Page Token",
          "type": "string"
        },
        "q": {
          "default": null,
          "description": "A query string for filtering the file results. Supports operators like 'and', 'or', 'not', and can filter on fields like 'name', 'mimeType', 'modifiedTime', 'starred', 'trashed'. Example: \"name contains 'important' and mimeType = 'application/vnd.google-apps.folder'\".",
          "examples": ["name contains 'report' and starred = true"],
          "nullable": true,
          "title": "Q",
          "type": "string"
        },
        "spaces": {
          "default": null,
          "description": "A comma-separated list of spaces to query within the corpora. Supported values are 'drive' and 'appDataFolder'. 'drive' represents files in My Drive and shared drives, while 'appDataFolder' represents the application's private data folder.",
          "examples": ["drive,appDataFolder"],
          "nullable": true,
          "title": "Spaces",
          "type": "string"
        },
        "supportsAllDrives": {
          "default": null,
          "description": "Whether the requesting application supports both My Drives and shared drives. Defaults to false. If true, then `includeItemsFromAllDrives` can be used to extend the search to all drives.",
          "examples": [true],
          "nullable": true,
          "title": "Supports All Drives",
          "type": "boolean"
        }
      },
      "title": "ListFilesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "files": {
              "description": "A list of file resources. Each file resource contains details like 'id', 'name', 'mimeType', 'createdTime', 'modifiedTime', etc.",
              "items": { "additionalProperties": true, "properties": {}, "type": "object" },
              "title": "Files",
              "type": "array"
            },
            "incompleteSearch": {
              "default": null,
              "description": "Whether the search process was incomplete. True if the entire result set could not be retrieved before the timeout.",
              "nullable": true,
              "title": "Incomplete Search",
              "type": "boolean"
            },
            "kind": {
              "description": "Identifies the resource as a file list, typically 'drive#fileList'.",
              "title": "Kind",
              "type": "string"
            },
            "nextPageToken": {
              "default": null,
              "description": "The page token for the next page of results. This will be absent if the end of the results is reached.",
              "nullable": true,
              "title": "Next Page Token",
              "type": "string"
            }
          },
          "required": ["kind", "files"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListFilesResponseWrapper",
      "type": "object"
    },
    "description": "Tool to list a user's files and folders in google drive. use this to search or browse for files and folders based on various criteria.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "important", "file"]
  },
  {
    "available_versions": ["latest"],
    "name": "List File Labels",
    "slug": "GOOGLEDRIVE_LIST_FILE_LABELS",
    "input_parameters": {
      "properties": {
        "file_id": {
          "description": "The ID of the file.",
          "examples": ["1aBcDeFgHiJkLmNoPqRsTuVwXyZ0123456789"],
          "title": "File Id",
          "type": "string"
        },
        "max_results": {
          "default": null,
          "description": "The maximum number of labels to return per page. Default is 100.",
          "maximum": 100,
          "minimum": 1,
          "nullable": true,
          "title": "Max Results",
          "type": "integer"
        },
        "page_token": {
          "default": null,
          "description": "Token to retrieve a specific page of results.",
          "nullable": true,
          "title": "Page Token",
          "type": "string"
        }
      },
      "required": ["file_id"],
      "title": "ListFileLabelsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "kind": {
              "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#labelList\".",
              "title": "Kind",
              "type": "string"
            },
            "labels": {
              "description": "The list of labels.",
              "items": {
                "properties": {
                  "fields": {
                    "additionalProperties": {
                      "properties": {
                        "dateString": {
                          "anyOf": [
                            { "items": { "type": "string" }, "type": "array" },
                            { "type": "null" }
                          ],
                          "default": null,
                          "description": "The date values of the field.",
                          "title": "Datestring"
                        },
                        "id": {
                          "anyOf": [{ "type": "string" }, { "type": "null" }],
                          "default": null,
                          "description": "The ID of the field.",
                          "title": "Id"
                        },
                        "integer": {
                          "anyOf": [
                            { "items": { "type": "string" }, "type": "array" },
                            { "type": "null" }
                          ],
                          "default": null,
                          "description": "The integer values of the field.",
                          "title": "Integer"
                        },
                        "kind": {
                          "anyOf": [{ "type": "string" }, { "type": "null" }],
                          "default": null,
                          "description": "This is always drive#labelField.",
                          "title": "Kind"
                        },
                        "selection": {
                          "anyOf": [
                            { "items": { "type": "string" }, "type": "array" },
                            { "type": "null" }
                          ],
                          "default": null,
                          "description": "The selection values of the field.",
                          "title": "Selection"
                        },
                        "text": {
                          "anyOf": [
                            { "items": { "type": "string" }, "type": "array" },
                            { "type": "null" }
                          ],
                          "default": null,
                          "description": "The text values of the field.",
                          "title": "Text"
                        },
                        "user": {
                          "anyOf": [
                            { "items": { "type": "string" }, "type": "array" },
                            { "type": "null" }
                          ],
                          "default": null,
                          "description": "The user values of the field.",
                          "title": "User"
                        },
                        "value_type": {
                          "anyOf": [{ "type": "string" }, { "type": "null" }],
                          "default": null,
                          "description": "The type of the value.",
                          "title": "Value Type"
                        }
                      },
                      "title": "LabelField",
                      "type": "object"
                    },
                    "default": null,
                    "description": "A map of field IDs to field values. ",
                    "nullable": true,
                    "title": "Fields",
                    "type": "object"
                  },
                  "id": {
                    "default": null,
                    "description": "The ID of the label.",
                    "nullable": true,
                    "title": "Id",
                    "type": "string"
                  },
                  "kind": {
                    "default": null,
                    "description": "This is always drive#label",
                    "nullable": true,
                    "title": "Kind",
                    "type": "string"
                  },
                  "revisionId": {
                    "default": null,
                    "description": "The revision ID of the label.",
                    "nullable": true,
                    "title": "Revision Id",
                    "type": "string"
                  }
                },
                "title": "Label",
                "type": "object"
              },
              "title": "Labels",
              "type": "array"
            },
            "nextPageToken": {
              "default": null,
              "description": "The page token for the next page of labels. This field will be absent if the end of the list has been reached.",
              "nullable": true,
              "title": "Next Page Token",
              "type": "string"
            }
          },
          "required": ["kind"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListFileLabelsResponseWrapper",
      "type": "object"
    },
    "description": "Tool to list the labels on a file. use when you need to retrieve all labels associated with a specific file in google drive.",
    "tags": [
      "readOnlyHint",
      "idempotentHint",
      "openWorldHint",
      "drive",
      "labels",
      "files",
      "important"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "List Permissions",
    "slug": "GOOGLEDRIVE_LIST_PERMISSIONS",
    "input_parameters": {
      "properties": {
        "fileId": {
          "description": "The ID of the file or shared drive.",
          "examples": ["1234567890abcdefghijklmnopqrstuvwxyz"],
          "title": "File Id",
          "type": "string"
        },
        "includePermissionsForView": {
          "default": null,
          "description": "Specifies which additional view's permissions to include in the response. Only 'published' is supported.",
          "nullable": true,
          "pattern": "^published$",
          "title": "Include Permissions For View",
          "type": "string"
        },
        "pageSize": {
          "default": null,
          "description": "The maximum number of permissions to return per page. When not set for files in a shared drive, at most 100 results will be returned. When not set for files that are not in a shared drive, the entire list will be returned.",
          "maximum": 100,
          "minimum": 1,
          "nullable": true,
          "title": "Page Size",
          "type": "integer"
        },
        "pageToken": {
          "default": null,
          "description": "The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response.",
          "nullable": true,
          "title": "Page Token",
          "type": "string"
        },
        "supportsAllDrives": {
          "default": null,
          "description": "Whether the requesting application supports both My Drives and shared drives. Default: false",
          "nullable": true,
          "title": "Supports All Drives",
          "type": "boolean"
        },
        "useDomainAdminAccess": {
          "default": null,
          "description": "Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.",
          "nullable": true,
          "title": "Use Domain Admin Access",
          "type": "boolean"
        }
      },
      "required": ["fileId"],
      "title": "ListPermissionsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "kind": {
              "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#permissionList\".",
              "title": "Kind",
              "type": "string"
            },
            "nextPageToken": {
              "default": null,
              "description": "The page token for the next page of permissions. This will be absent if the end of the list has been reached.",
              "nullable": true,
              "title": "Next Page Token",
              "type": "string"
            },
            "permissions": {
              "description": "The list of permissions. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.",
              "items": {
                "properties": {
                  "deleted": {
                    "default": null,
                    "nullable": true,
                    "title": "Deleted",
                    "type": "boolean"
                  },
                  "displayName": {
                    "default": null,
                    "nullable": true,
                    "title": "Display Name",
                    "type": "string"
                  },
                  "domain": {
                    "default": null,
                    "nullable": true,
                    "title": "Domain",
                    "type": "string"
                  },
                  "emailAddress": {
                    "default": null,
                    "nullable": true,
                    "title": "Email Address",
                    "type": "string"
                  },
                  "id": { "title": "Id", "type": "string" },
                  "kind": { "default": null, "nullable": true, "title": "Kind", "type": "string" },
                  "permissionDetails": {
                    "default": null,
                    "items": { "properties": {} },
                    "nullable": true,
                    "title": "Permission Details",
                    "type": "array"
                  },
                  "photoLink": {
                    "default": null,
                    "nullable": true,
                    "title": "Photo Link",
                    "type": "string"
                  },
                  "role": { "title": "Role", "type": "string" },
                  "teamDrivePermissionDetails": {
                    "default": null,
                    "items": { "properties": {} },
                    "nullable": true,
                    "title": "Team Drive Permission Details",
                    "type": "array"
                  },
                  "type": { "title": "Type", "type": "string" }
                },
                "required": ["id", "type", "role"],
                "title": "Permission",
                "type": "object"
              },
              "title": "Permissions",
              "type": "array"
            }
          },
          "required": ["kind", "permissions"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListPermissionsResponseWrapper",
      "type": "object"
    },
    "description": "Tool to list a file's permissions. use when you need to retrieve all permissions associated with a specific file or shared drive.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "important", "file", "permission"]
  },
  {
    "available_versions": ["latest"],
    "name": "List Replies to Comment",
    "slug": "GOOGLEDRIVE_LIST_REPLIES_TO_COMMENT",
    "input_parameters": {
      "properties": {
        "comment_id": {
          "description": "The ID of the comment.",
          "examples": ["67890ghijkl"],
          "title": "Comment Id",
          "type": "string"
        },
        "fields": {
          "default": "*",
          "description": "Selector specifying which fields to include in a partial response. Use '*' for all fields or e.g. 'replies(id,content),nextPageToken'",
          "nullable": true,
          "title": "Fields",
          "type": "string"
        },
        "file_id": {
          "description": "The ID of the file.",
          "examples": ["12345abcdef"],
          "title": "File Id",
          "type": "string"
        },
        "include_deleted": {
          "default": false,
          "description": "Whether to include deleted replies. Deleted replies will not include their original content.",
          "nullable": true,
          "title": "Include Deleted",
          "type": "boolean"
        },
        "page_size": {
          "default": null,
          "description": "The maximum number of replies to return per page.",
          "maximum": 100,
          "minimum": 1,
          "nullable": true,
          "title": "Page Size",
          "type": "integer"
        },
        "page_token": {
          "default": null,
          "description": "The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response.",
          "nullable": true,
          "title": "Page Token",
          "type": "string"
        }
      },
      "required": ["file_id", "comment_id"],
      "title": "ListRepliesToCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "kind": {
              "default": null,
              "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#replyList\".",
              "nullable": true,
              "title": "Kind",
              "type": "string"
            },
            "nextPageToken": {
              "default": null,
              "description": "The page token for the next page of replies. This will be absent if the end of the replies list has been reached.",
              "nullable": true,
              "title": "Next Page Token",
              "type": "string"
            },
            "replies": {
              "default": null,
              "description": "The list of replies. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.",
              "items": {
                "properties": {
                  "action": {
                    "default": null,
                    "description": "The action the reply performed to the parent comment (resolve/reopen).",
                    "nullable": true,
                    "title": "Action",
                    "type": "string"
                  },
                  "author": {
                    "additionalProperties": true,
                    "default": null,
                    "description": "The author of the reply (user object).",
                    "nullable": true,
                    "title": "Author",
                    "type": "object"
                  },
                  "content": {
                    "default": null,
                    "description": "The plain text content of the reply.",
                    "nullable": true,
                    "title": "Content",
                    "type": "string"
                  },
                  "createdTime": {
                    "default": null,
                    "description": "The time at which the reply was created (RFC 3339 timestamp).",
                    "nullable": true,
                    "title": "Created Time",
                    "type": "string"
                  },
                  "deleted": {
                    "default": null,
                    "description": "Whether the reply has been deleted.",
                    "nullable": true,
                    "title": "Deleted",
                    "type": "boolean"
                  },
                  "htmlContent": {
                    "default": null,
                    "description": "The content of the reply with HTML formatting.",
                    "nullable": true,
                    "title": "Html Content",
                    "type": "string"
                  },
                  "id": {
                    "default": null,
                    "description": "The ID of the reply.",
                    "nullable": true,
                    "title": "Id",
                    "type": "string"
                  },
                  "kind": {
                    "default": null,
                    "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#reply\".",
                    "nullable": true,
                    "title": "Kind",
                    "type": "string"
                  },
                  "modifiedTime": {
                    "default": null,
                    "description": "The time at which the reply was last modified (RFC 3339 timestamp).",
                    "nullable": true,
                    "title": "Modified Time",
                    "type": "string"
                  }
                },
                "title": "Reply",
                "type": "object"
              },
              "nullable": true,
              "title": "Replies",
              "type": "array"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRepliesToCommentResponseWrapper",
      "type": "object"
    },
    "description": "Tool to list replies to a comment in google drive. use this when you need to retrieve all replies associated with a specific comment on a file.",
    "tags": ["important", "comment", "reply"]
  },
  {
    "available_versions": ["latest"],
    "name": "List File Revisions",
    "slug": "GOOGLEDRIVE_LIST_REVISIONS",
    "input_parameters": {
      "properties": {
        "fileId": {
          "description": "The ID of the file.",
          "examples": ["1234567890abcdefghijklmnopqrstuvwxyz"],
          "title": "File Id",
          "type": "string"
        },
        "pageSize": {
          "default": null,
          "description": "The maximum number of revisions to return per page.",
          "examples": [100],
          "maximum": 1000,
          "minimum": 1,
          "nullable": true,
          "title": "Page Size",
          "type": "integer"
        },
        "pageToken": {
          "default": null,
          "description": "The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response.",
          "examples": ["abcdef123456"],
          "nullable": true,
          "title": "Page Token",
          "type": "string"
        },
        "supportsAllDrives": {
          "default": null,
          "description": "Whether the requesting application supports both My Drives and shared drives. Defaults to false.",
          "nullable": true,
          "title": "Supports All Drives",
          "type": "boolean"
        }
      },
      "required": ["fileId"],
      "title": "ListRevisionsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "kind": {
              "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#revisionList\".",
              "title": "Kind",
              "type": "string"
            },
            "nextPageToken": {
              "default": null,
              "description": "The page token for the next page of revisions. This will be absent if the end of the revisions list has been reached.",
              "nullable": true,
              "title": "Next Page Token",
              "type": "string"
            },
            "revisions": {
              "description": "The list of revisions. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.",
              "items": {
                "properties": {
                  "exportLinks": {
                    "additionalProperties": { "type": "string" },
                    "default": null,
                    "description": "Links for exporting Google Docs Editors content types to specific formats.",
                    "nullable": true,
                    "title": "Export Links",
                    "type": "object"
                  },
                  "id": {
                    "description": "The ID of the revision.",
                    "title": "Id",
                    "type": "string"
                  },
                  "keepForever": {
                    "default": null,
                    "description": "Whether to keep this revision forever, even if it is no longer the head revision. If not set, the revision will be automatically purged 30 days after newer revisions are created.",
                    "nullable": true,
                    "title": "Keep Forever",
                    "type": "boolean"
                  },
                  "kind": {
                    "default": null,
                    "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#revision\".",
                    "nullable": true,
                    "title": "Kind",
                    "type": "string"
                  },
                  "lastModifyingUser": {
                    "additionalProperties": false,
                    "default": null,
                    "description": "The last user to modify this revision.",
                    "nullable": true,
                    "properties": {
                      "displayName": {
                        "default": null,
                        "description": "The display name of the user.",
                        "nullable": true,
                        "title": "Display Name",
                        "type": "string"
                      },
                      "emailAddress": {
                        "default": null,
                        "description": "The email address of the user.",
                        "nullable": true,
                        "title": "Email Address",
                        "type": "string"
                      },
                      "kind": {
                        "default": null,
                        "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#user\".",
                        "nullable": true,
                        "title": "Kind",
                        "type": "string"
                      },
                      "me": {
                        "default": null,
                        "description": "Whether this user is the requesting user.",
                        "nullable": true,
                        "title": "Me",
                        "type": "boolean"
                      },
                      "permissionId": {
                        "default": null,
                        "description": "The ETag of the permission.",
                        "nullable": true,
                        "title": "Permission Id",
                        "type": "string"
                      },
                      "photoLink": {
                        "default": null,
                        "description": "A link to the user's profile photo, if available.",
                        "nullable": true,
                        "title": "Photo Link",
                        "type": "string"
                      }
                    },
                    "title": "User",
                    "type": "object"
                  },
                  "mimeType": {
                    "default": null,
                    "description": "The MIME type of the revision.",
                    "nullable": true,
                    "title": "Mime Type",
                    "type": "string"
                  },
                  "modifiedTime": {
                    "default": null,
                    "description": "The last time the revision was modified (RFC 3339 date-time).",
                    "format": "date-time",
                    "nullable": true,
                    "title": "Modified Time",
                    "type": "string"
                  },
                  "publishAuto": {
                    "default": null,
                    "description": "Whether this revision is published outside the domain. This is only populated for files with Google Docs Editors content types.",
                    "nullable": true,
                    "title": "Publish Auto",
                    "type": "boolean"
                  },
                  "published": {
                    "default": null,
                    "description": "Whether this revision is published. This is only populated for files with Google Docs Editors content types.",
                    "nullable": true,
                    "title": "Published",
                    "type": "boolean"
                  },
                  "publishedLink": {
                    "default": null,
                    "description": "A link to the published revision. This is only populated for files with Google Docs Editors content types.",
                    "nullable": true,
                    "title": "Published Link",
                    "type": "string"
                  },
                  "size": {
                    "default": null,
                    "description": "The size of the revision content in bytes. This is only populated for files with binary content in Google Drive.",
                    "nullable": true,
                    "title": "Size",
                    "type": "string"
                  }
                },
                "required": ["id"],
                "title": "Revision",
                "type": "object"
              },
              "title": "Revisions",
              "type": "array"
            }
          },
          "required": ["kind", "revisions"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListRevisionsResponseWrapper",
      "type": "object"
    },
    "description": "Tool to list a file's revisions. use when you need to retrieve the revision history of a specific file in google drive.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "important", "file", "revision"]
  },
  {
    "available_versions": ["latest"],
    "name": "List Shared Drives",
    "slug": "GOOGLEDRIVE_LIST_SHARED_DRIVES",
    "input_parameters": {
      "properties": {
        "pageSize": {
          "default": null,
          "description": "Maximum number of shared drives to return per page.",
          "maximum": 100,
          "minimum": 1,
          "nullable": true,
          "title": "Page Size",
          "type": "integer"
        },
        "pageToken": {
          "default": null,
          "description": "Page token for shared drives.",
          "nullable": true,
          "title": "Page Token",
          "type": "string"
        },
        "q": {
          "default": null,
          "description": "Query string for searching shared drives.",
          "nullable": true,
          "title": "Q",
          "type": "string"
        },
        "useDomainAdminAccess": {
          "default": null,
          "description": "Issue the request as a domain administrator. If set to true, then all shared drives of the domain in which the requester is an administrator are returned.",
          "nullable": true,
          "title": "Use Domain Admin Access",
          "type": "boolean"
        }
      },
      "title": "ListSharedDrivesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "drives": {
              "description": "The list of shared drives.",
              "items": {
                "properties": {
                  "id": {
                    "default": null,
                    "description": "The ID of this shared drive. This is a unique identifier.",
                    "nullable": true,
                    "title": "Id",
                    "type": "string"
                  },
                  "kind": {
                    "default": null,
                    "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#drive\".",
                    "nullable": true,
                    "title": "Kind",
                    "type": "string"
                  },
                  "name": {
                    "default": null,
                    "description": "The name of this shared drive.",
                    "nullable": true,
                    "title": "Name",
                    "type": "string"
                  }
                },
                "title": "Drive",
                "type": "object"
              },
              "title": "Drives",
              "type": "array"
            },
            "kind": {
              "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#driveList\".",
              "title": "Kind",
              "type": "string"
            },
            "nextPageToken": {
              "default": null,
              "description": "The page token for the next page of shared drives. This will be absent if the end of the list has been reached.",
              "nullable": true,
              "title": "Next Page Token",
              "type": "string"
            }
          },
          "required": ["kind"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListSharedDrivesResponseWrapper",
      "type": "object"
    },
    "description": "Tool to list the user's shared drives. use when you need to get a list of all shared drives accessible to the authenticated user.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "important", "drive"]
  },
  {
    "available_versions": ["latest"],
    "name": "Move File",
    "slug": "GOOGLEDRIVE_MOVE_FILE",
    "input_parameters": {
      "properties": {
        "add_parents": {
          "default": null,
          "description": "A comma-separated list of parent folder IDs to add the file to. Use this to specify the destination folder.",
          "examples": ["folder_id_1,folder_id_2"],
          "nullable": true,
          "title": "Add Parents",
          "type": "string"
        },
        "file_id": {
          "description": "The ID of the file to move.",
          "examples": ["1XyZ..."],
          "title": "File Id",
          "type": "string"
        },
        "include_labels": {
          "default": null,
          "description": "A comma-separated list of IDs of labels to include in the `labelInfo` part of the response.",
          "nullable": true,
          "title": "Include Labels",
          "type": "string"
        },
        "include_permissions_for_view": {
          "default": null,
          "description": "Specifies which additional view's permissions to include in the response. Only 'published' is supported.",
          "nullable": true,
          "title": "Include Permissions For View",
          "type": "string"
        },
        "keep_revision_forever": {
          "default": null,
          "description": "Whether to set the 'keepForever' field in the new head revision. This is only applicable to files with binary content in Google Drive.",
          "nullable": true,
          "title": "Keep Revision Forever",
          "type": "boolean"
        },
        "ocr_language": {
          "default": null,
          "description": "A language hint for OCR processing during image import (ISO 639-1 code).",
          "nullable": true,
          "title": "Ocr Language",
          "type": "string"
        },
        "remove_parents": {
          "default": null,
          "description": "A comma-separated list of parent folder IDs to remove the file from. Use this to specify the source folder.",
          "examples": ["folder_id_3,folder_id_4"],
          "nullable": true,
          "title": "Remove Parents",
          "type": "string"
        },
        "supports_all_drives": {
          "default": null,
          "description": "Whether the requesting application supports both My Drives and shared drives. Set to true if moving files to or from a shared drive.",
          "nullable": true,
          "title": "Supports All Drives",
          "type": "boolean"
        },
        "use_content_as_indexable_text": {
          "default": null,
          "description": "Whether to use the uploaded content as indexable text.",
          "nullable": true,
          "title": "Use Content As Indexable Text",
          "type": "boolean"
        }
      },
      "required": ["file_id"],
      "title": "MoveFileRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "id": { "description": "The ID of the file.", "title": "Id", "type": "string" },
            "kind": {
              "description": "Identifies what kind of resource this is. Value: the fixed string 'drive#file'.",
              "title": "Kind",
              "type": "string"
            },
            "mimeType": {
              "description": "The MIME type of the file.",
              "title": "Mime Type",
              "type": "string"
            },
            "name": { "description": "The name of the file.", "title": "Name", "type": "string" },
            "parents": {
              "default": null,
              "description": "The IDs of the parent folders which contain the file.",
              "items": { "properties": {}, "type": "string" },
              "nullable": true,
              "title": "Parents",
              "type": "array"
            }
          },
          "required": ["mimeType", "kind", "id", "name"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "MoveFileResponseWrapper",
      "type": "object"
    },
    "description": "Tool to move a file from one folder to another in google drive. use when you need to reorganize files by changing their parent folder(s).",
    "tags": ["updateHint", "openWorldHint", "important", "file management"]
  },
  {
    "available_versions": ["latest"],
    "name": "Export or download a file",
    "slug": "GOOGLEDRIVE_PARSE_FILE",
    "input_parameters": {
      "properties": {
        "file_id": {
          "description": "The unique ID of the file stored in Google Drive that you want to export or download.",
          "title": "File Id",
          "type": "string"
        },
        "mime_type": {
          "default": null,
          "description": "Target MIME type for exporting Google Workspace documents (e.g., Docs, Sheets) to a different format (e.g., PDF, DOCX). Omit for direct download of non-Workspace files or if no conversion is needed for Workspace files.",
          "enum": [
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            "application/vnd.oasis.opendocument.text",
            "application/rtf",
            "application/pdf",
            "text/plain",
            "application/zip",
            "application/epub+zip",
            "text/markdown",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            "application/x-vnd.oasis.opendocument.spreadsheet",
            "text/csv",
            "text/tab-separated-values",
            "application/vnd.openxmlformats-officedocument.presentationml.presentation",
            "application/vnd.oasis.opendocument.presentation",
            "image/jpeg",
            "image/png",
            "image/svg+xml",
            "application/vnd.google-apps.script+json",
            "application/vnd.google-apps.vid"
          ],
          "examples": [
            "application/pdf",
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            "text/csv"
          ],
          "nullable": true,
          "title": "MimeType",
          "type": "string"
        }
      },
      "required": ["file_id"],
      "title": "ParseFileRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "file": {
              "additionalProperties": false,
              "description": "The content of the exported or downloaded file, returned as a downloadable object.",
              "file_downloadable": true,
              "properties": {
                "mimetype": {
                  "description": "Mime type of the file.",
                  "title": "Mimetype",
                  "type": "string"
                },
                "name": { "description": "Name of the file", "title": "Name", "type": "string" },
                "s3url": { "description": "URL of the file.", "title": "S3Url", "type": "string" }
              },
              "required": ["name", "mimetype", "s3url"],
              "title": "File",
              "type": "object"
            },
            "warning": {
              "default": "Warning. This action has been deprecated. Please use GOOGLEDRIVE_DOWNLOAD_FILE instead.",
              "title": "Warning",
              "type": "string"
            }
          },
          "required": ["file"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ParseFileResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: exports google workspace files (max 10mb) to a specified format using `mime type`, or downloads other file types; use `googledrive download file` instead.",
    "tags": ["readOnlyHint", "idempotentHint", "openWorldHint", "important"]
  },
  {
    "available_versions": ["latest"],
    "name": "Stop Watch Channel",
    "slug": "GOOGLEDRIVE_STOP_WATCH_CHANNEL",
    "input_parameters": {
      "properties": {
        "address": {
          "default": null,
          "description": "The address where notifications are delivered for this channel.",
          "examples": ["https://example.com/notifications"],
          "nullable": true,
          "title": "Address",
          "type": "string"
        },
        "channelType": {
          "default": null,
          "description": "The type of delivery mechanism used for this channel. Valid values are \"web_hook\" or \"webhook\".",
          "examples": ["web_hook"],
          "nullable": true,
          "title": "Channel Type",
          "type": "string"
        },
        "expiration": {
          "default": null,
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds.",
          "examples": ["1426325213000"],
          "nullable": true,
          "title": "Expiration",
          "type": "string"
        },
        "id": {
          "description": "The ID of the channel to stop.",
          "examples": ["01234567-89ab-cdef-0123-456789abcdef"],
          "title": "Id",
          "type": "string"
        },
        "kind": {
          "default": "api#channel",
          "description": "Identifies this as a notification channel used to watch for changes to a resource.",
          "examples": ["api#channel"],
          "nullable": true,
          "title": "Kind",
          "type": "string"
        },
        "params": {
          "additionalProperties": { "type": "string" },
          "default": null,
          "description": "Additional parameters controlling delivery channel behavior.",
          "examples": [{ "ttl": "24" }],
          "nullable": true,
          "title": "Params",
          "type": "object"
        },
        "payload": {
          "default": null,
          "description": "A Boolean value to indicate whether payload is wanted.",
          "examples": [true],
          "nullable": true,
          "title": "Payload",
          "type": "boolean"
        },
        "resourceId": {
          "description": "The ID of the resource being watched.",
          "examples": ["0BwDAzcyS3R3CUlRMW0xVExQNk0"],
          "title": "Resource Id",
          "type": "string"
        },
        "resourceUri": {
          "default": null,
          "description": "A version-specific identifier for the watched resource.",
          "examples": ["https://www.googleapis.com/drive/v3/files/0BwDAzcyS3R3CUlRMW0xVExQNk0"],
          "nullable": true,
          "title": "Resource Uri",
          "type": "string"
        },
        "token": {
          "default": null,
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel.",
          "examples": ["clientToken#0123456789"],
          "nullable": true,
          "title": "Token",
          "type": "string"
        }
      },
      "required": ["id", "resourceId"],
      "title": "StopWatchChannelRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "message": {
              "default": "Successfully stopped watching the channel.",
              "description": "A confirmation message indicating the success of the operation.",
              "title": "Message",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "StopWatchChannelResponseWrapper",
      "type": "object"
    },
    "description": "Tool to stop watching resources through a specified channel. use this when you want to stop receiving notifications for a previously established watch.",
    "tags": ["updateHint", "openWorldHint", "important", "channel"]
  },
  {
    "available_versions": ["latest"],
    "name": "Unhide Shared Drive",
    "slug": "GOOGLEDRIVE_UNHIDE_DRIVE",
    "input_parameters": {
      "properties": {
        "driveId": {
          "description": "The ID of the shared drive.",
          "examples": ["0AEMV2k3MjA19Uk9PVA"],
          "title": "Drive Id",
          "type": "string"
        }
      },
      "required": ["driveId"],
      "title": "UnhideDriveRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "backgroundImageFile": {
              "additionalProperties": true,
              "default": null,
              "description": "An image file to be used as the background for this shared drive.",
              "nullable": true,
              "title": "Background Image File",
              "type": "object"
            },
            "backgroundImageLink": {
              "default": null,
              "description": "A short-lived link to this shared drive's background image.",
              "nullable": true,
              "title": "Background Image Link",
              "type": "string"
            },
            "capabilities": {
              "additionalProperties": true,
              "default": null,
              "description": "A set of capabilities the current user has on this shared drive.",
              "nullable": true,
              "title": "Capabilities",
              "type": "object"
            },
            "colorRgb": {
              "default": null,
              "description": "The color of this shared drive as an RGB hex string.",
              "nullable": true,
              "title": "Color Rgb",
              "type": "string"
            },
            "createdTime": {
              "default": null,
              "description": "The time at which the shared drive was created (RFC 3339 date-time).",
              "nullable": true,
              "title": "Created Time",
              "type": "string"
            },
            "hidden": {
              "default": null,
              "description": "Whether the shared drive is hidden from default view.",
              "nullable": true,
              "title": "Hidden",
              "type": "boolean"
            },
            "id": {
              "default": null,
              "description": "The ID of this shared drive. This is a scalar that is locally unique within a domain.",
              "nullable": true,
              "title": "Id",
              "type": "string"
            },
            "kind": {
              "default": null,
              "description": "Identifies what kind of resource this is. Value: the fixed string 'drive#drive'.",
              "nullable": true,
              "title": "Kind",
              "type": "string"
            },
            "name": {
              "default": null,
              "description": "The name of this shared drive.",
              "nullable": true,
              "title": "Name",
              "type": "string"
            },
            "orgUnitId": {
              "default": null,
              "description": "The organizational unit of this shared drive. This field is only populated on drives.list responses when the useDomainAdminAccess parameter is true.",
              "nullable": true,
              "title": "Org Unit Id",
              "type": "string"
            },
            "restrictions": {
              "additionalProperties": true,
              "default": null,
              "description": "A set of restrictions that apply to this shared drive or items inside this shared drive.",
              "nullable": true,
              "title": "Restrictions",
              "type": "object"
            },
            "themeId": {
              "default": null,
              "description": "The theme ID of this shared drive.",
              "nullable": true,
              "title": "Theme Id",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UnhideDriveResponseWrapper",
      "type": "object"
    },
    "description": "Tool to unhide a shared drive. use when you need to restore a shared drive to the default view.",
    "tags": ["updateHint", "openWorldHint", "important", "drive"]
  },
  {
    "available_versions": ["latest"],
    "name": "Untrash File",
    "slug": "GOOGLEDRIVE_UNTRASH_FILE",
    "input_parameters": {
      "properties": {
        "file_id": {
          "description": "The ID of the file to untrash.",
          "examples": ["1aBcDeFgHiJkLmNoPqRsTuVwXyZ0123456789"],
          "title": "File Id",
          "type": "string"
        },
        "supportsAllDrives": {
          "default": null,
          "description": "Whether the requesting application supports both My Drives and shared drives.",
          "examples": [true],
          "nullable": true,
          "title": "Supports All Drives",
          "type": "boolean"
        }
      },
      "required": ["file_id"],
      "title": "UntrashFileRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "id": {
              "default": null,
              "description": "The ID of the file.",
              "nullable": true,
              "title": "Id",
              "type": "string"
            },
            "kind": {
              "default": null,
              "description": "Identifies what kind of resource this is. Value: the fixed string 'drive#file'.",
              "nullable": true,
              "title": "Kind",
              "type": "string"
            },
            "mimeType": {
              "default": null,
              "description": "The MIME type of the file.",
              "nullable": true,
              "title": "Mime Type",
              "type": "string"
            },
            "name": {
              "default": null,
              "description": "The name of the file.",
              "nullable": true,
              "title": "Name",
              "type": "string"
            },
            "parents": {
              "default": null,
              "description": "The IDs of the parent folders which contain the file.",
              "items": { "properties": {}, "type": "string" },
              "nullable": true,
              "title": "Parents",
              "type": "array"
            },
            "trashed": {
              "default": null,
              "description": "Whether the file has been trashed, either explicitly or from a trashed parent folder. Only the owner may trash a file, and other users cannot see files in the owner's trash.",
              "nullable": true,
              "title": "Trashed",
              "type": "boolean"
            },
            "webContentLink": {
              "default": null,
              "description": "A link for downloading the content of the file in a browser. This is only available for files with binary content.",
              "nullable": true,
              "title": "Web Content Link",
              "type": "string"
            },
            "webViewLink": {
              "default": null,
              "description": "A link for opening the file in a relevant Google editor or viewer in a browser.",
              "nullable": true,
              "title": "Web View Link",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UntrashFileResponseWrapper",
      "type": "object"
    },
    "description": "Tool to restore a file from the trash. use when you need to recover a deleted file. this action updates the file's metadata to set the 'trashed' property to false.",
    "tags": ["updateHint", "openWorldHint", "important", "file management"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update Comment",
    "slug": "GOOGLEDRIVE_UPDATE_COMMENT",
    "input_parameters": {
      "properties": {
        "comment_id": {
          "description": "The ID of the comment to update.",
          "examples": ["11a22b33c44d55e66f77g88h99i00j"],
          "title": "Comment Id",
          "type": "string"
        },
        "content": {
          "default": null,
          "description": "The plain text content of the comment. This field is used to update the comment's text. If not provided, the existing content will be retained unless 'resolved' is being updated.",
          "examples": ["This is the updated comment content."],
          "nullable": true,
          "title": "Content",
          "type": "string"
        },
        "fields": {
          "default": null,
          "description": "Selector specifying which fields to include in a partial response. The API documentation states this is required. If not specified by the user, this action defaults to '*' to retrieve all fields, ensuring the API requirement is met. Example: 'id,content,resolved'.",
          "examples": ["id,content,resolved"],
          "nullable": true,
          "title": "Fields",
          "type": "string"
        },
        "file_id": {
          "description": "The ID of the file.",
          "examples": ["1a2b3c4d5e6f7g8h9i0j"],
          "title": "File Id",
          "type": "string"
        },
        "resolved": {
          "default": null,
          "description": "Whether the comment has been resolved. This can be used to mark a comment as resolved or reopen it.",
          "examples": [true],
          "nullable": true,
          "title": "Resolved",
          "type": "boolean"
        }
      },
      "required": ["file_id", "comment_id"],
      "title": "UpdateCommentRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "author": {
              "additionalProperties": false,
              "default": null,
              "description": "The user who created the comment.",
              "nullable": true,
              "properties": {
                "displayName": {
                  "default": null,
                  "description": "The display name of the user.",
                  "nullable": true,
                  "title": "Display Name",
                  "type": "string"
                },
                "kind": {
                  "default": null,
                  "description": "Identifies this as a user.",
                  "nullable": true,
                  "title": "Kind",
                  "type": "string"
                },
                "me": {
                  "default": null,
                  "description": "Whether this user is the requesting user.",
                  "nullable": true,
                  "title": "Me",
                  "type": "boolean"
                },
                "photoLink": {
                  "default": null,
                  "description": "A link to the user's profile photo, if available.",
                  "nullable": true,
                  "title": "Photo Link",
                  "type": "string"
                }
              },
              "title": "CommentAuthor",
              "type": "object"
            },
            "content": {
              "default": null,
              "description": "The plain text content of the comment.",
              "nullable": true,
              "title": "Content",
              "type": "string"
            },
            "createdTime": {
              "default": null,
              "description": "The time at which the comment was created (RFC 3339 date-time).",
              "nullable": true,
              "title": "Created Time",
              "type": "string"
            },
            "deleted": {
              "default": null,
              "description": "Whether the comment has been deleted. A deleted comment has no content.",
              "nullable": true,
              "title": "Deleted",
              "type": "boolean"
            },
            "id": {
              "default": null,
              "description": "The ID of the comment.",
              "nullable": true,
              "title": "Id",
              "type": "string"
            },
            "kind": {
              "default": null,
              "description": "Identifies this as a comment. Value: \"drive#comment\".",
              "nullable": true,
              "title": "Kind",
              "type": "string"
            },
            "modifiedTime": {
              "default": null,
              "description": "The last time the comment or any of its replies was modified (RFC 3339 date-time).",
              "nullable": true,
              "title": "Modified Time",
              "type": "string"
            },
            "resolved": {
              "default": null,
              "description": "Whether the comment has been resolved. A resolved comment is hidden from view.",
              "nullable": true,
              "title": "Resolved",
              "type": "boolean"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateCommentResponseWrapper",
      "type": "object"
    },
    "description": "Tool to update an existing comment on a google drive file. use when you need to change the content or status (e.g., resolve) of a comment.",
    "tags": ["important"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update Shared Drive",
    "slug": "GOOGLEDRIVE_UPDATE_DRIVE",
    "input_parameters": {
      "properties": {
        "backgroundImageFile": {
          "additionalProperties": false,
          "default": null,
          "description": "An image file and cropping parameters for the shared drive's background. Cannot be set if themeId is set.",
          "nullable": true,
          "properties": {
            "id": {
              "description": "The ID of an image file in Google Drive to use for the background image.",
              "title": "Id",
              "type": "string"
            },
            "width": {
              "description": "The width of the cropped image (0.0 to 1.0). The height is computed (aspect ratio 80:9).",
              "maximum": 1,
              "minimum": 0,
              "title": "Width",
              "type": "number"
            },
            "xCoordinate": {
              "description": "The X coordinate of the upper left corner of the cropping area in the background image (0.0 to 1.0).",
              "maximum": 1,
              "minimum": 0,
              "title": "X Coordinate",
              "type": "number"
            },
            "yCoordinate": {
              "description": "The Y coordinate of the upper left corner of the cropping area in the background image (0.0 to 1.0).",
              "maximum": 1,
              "minimum": 0,
              "title": "Y Coordinate",
              "type": "number"
            }
          },
          "required": ["id", "xCoordinate", "yCoordinate", "width"],
          "title": "BackgroundImageFile",
          "type": "object"
        },
        "colorRgb": {
          "default": null,
          "description": "The color of this shared drive as an RGB hex string (e.g., \"#FF0000\"). Cannot be set if themeId is set.",
          "nullable": true,
          "pattern": "^#[0-9a-fA-F]{6}$",
          "title": "Color Rgb",
          "type": "string"
        },
        "driveId": {
          "description": "The ID of the shared drive to update.",
          "title": "Drive Id",
          "type": "string"
        },
        "hidden": {
          "default": null,
          "description": "Whether the shared drive is hidden from the default view.",
          "nullable": true,
          "title": "Hidden",
          "type": "boolean"
        },
        "name": {
          "default": null,
          "description": "The new name for the shared drive.",
          "nullable": true,
          "title": "Name",
          "type": "string"
        },
        "restrictions": {
          "additionalProperties": false,
          "default": null,
          "description": "A set of restrictions to apply to the shared drive.",
          "nullable": true,
          "properties": {
            "adminManagedRestrictions": {
              "default": null,
              "description": "If true, requires administrative privileges to modify restrictions.",
              "nullable": true,
              "title": "Admin Managed Restrictions",
              "type": "boolean"
            },
            "copyRequiresWriterPermission": {
              "default": null,
              "description": "If true, disables copy, print, or download options for readers and commenters.",
              "nullable": true,
              "title": "Copy Requires Writer Permission",
              "type": "boolean"
            },
            "domainUsersOnly": {
              "default": null,
              "description": "If true, restricts access to users of the domain to which the shared drive belongs.",
              "nullable": true,
              "title": "Domain Users Only",
              "type": "boolean"
            },
            "driveMembersOnly": {
              "default": null,
              "description": "If true, restricts access to items inside the shared drive to its members.",
              "nullable": true,
              "title": "Drive Members Only",
              "type": "boolean"
            },
            "sharingFoldersRequiresOrganizerPermission": {
              "default": null,
              "description": "If true, only users with the organizer role can share folders. If false, users with either the organizer or file organizer role can share folders.",
              "nullable": true,
              "title": "Sharing Folders Requires Organizer Permission",
              "type": "boolean"
            }
          },
          "title": "DriveRestrictions",
          "type": "object"
        },
        "themeId": {
          "default": null,
          "description": "The ID of a theme to apply to the shared drive. Cannot be set if colorRgb or backgroundImageFile are set.",
          "nullable": true,
          "title": "Theme Id",
          "type": "string"
        },
        "useDomainAdminAccess": {
          "default": null,
          "description": "If set to true, the request is issued as a domain administrator.",
          "nullable": true,
          "title": "Use Domain Admin Access",
          "type": "boolean"
        }
      },
      "required": ["driveId"],
      "title": "UpdateDriveRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "backgroundImageFile": {
              "additionalProperties": false,
              "default": null,
              "description": "The background image file of this shared drive.",
              "nullable": true,
              "properties": {
                "id": { "default": null, "nullable": true, "title": "Id", "type": "string" },
                "width": { "default": null, "nullable": true, "title": "Width", "type": "number" },
                "xCoordinate": {
                  "default": null,
                  "nullable": true,
                  "title": "X Coordinate",
                  "type": "number"
                },
                "yCoordinate": {
                  "default": null,
                  "nullable": true,
                  "title": "Y Coordinate",
                  "type": "number"
                }
              },
              "title": "BackgroundImageFileResponse",
              "type": "object"
            },
            "backgroundImageLink": {
              "default": null,
              "description": "A short-lived link to this shared drive's background image.",
              "nullable": true,
              "title": "Background Image Link",
              "type": "string"
            },
            "capabilities": {
              "additionalProperties": false,
              "default": null,
              "description": "Capabilities the current user has on this shared drive.",
              "nullable": true,
              "properties": {
                "canAddChildren": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Add Children",
                  "type": "boolean"
                },
                "canChangeCopyRequiresWriterPermissionRestriction": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Change Copy Requires Writer Permission Restriction",
                  "type": "boolean"
                },
                "canChangeDomainUsersOnlyRestriction": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Change Domain Users Only Restriction",
                  "type": "boolean"
                },
                "canChangeDriveBackground": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Change Drive Background",
                  "type": "boolean"
                },
                "canChangeDriveMembersOnlyRestriction": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Change Drive Members Only Restriction",
                  "type": "boolean"
                },
                "canChangeSharingFoldersRequiresOrganizerPermissionRestriction": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Change Sharing Folders Requires Organizer Permission Restriction",
                  "type": "boolean"
                },
                "canComment": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Comment",
                  "type": "boolean"
                },
                "canCopy": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Copy",
                  "type": "boolean"
                },
                "canDeleteChildren": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Delete Children",
                  "type": "boolean"
                },
                "canDeleteDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Delete Drive",
                  "type": "boolean"
                },
                "canDownload": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Download",
                  "type": "boolean"
                },
                "canEdit": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Edit",
                  "type": "boolean"
                },
                "canListChildren": {
                  "default": null,
                  "nullable": true,
                  "title": "Can List Children",
                  "type": "boolean"
                },
                "canManageMembers": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Manage Members",
                  "type": "boolean"
                },
                "canReadRevisions": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Read Revisions",
                  "type": "boolean"
                },
                "canRename": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Rename",
                  "type": "boolean"
                },
                "canRenameDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Rename Drive",
                  "type": "boolean"
                },
                "canResetDriveRestrictions": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Reset Drive Restrictions",
                  "type": "boolean"
                },
                "canShare": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Share",
                  "type": "boolean"
                },
                "canTrashChildren": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Trash Children",
                  "type": "boolean"
                }
              },
              "title": "DriveCapabilities",
              "type": "object"
            },
            "colorRgb": {
              "default": null,
              "description": "The color of this shared drive as an RGB hex string.",
              "nullable": true,
              "title": "Color Rgb",
              "type": "string"
            },
            "createdTime": {
              "default": null,
              "description": "The time at which the shared drive was created (RFC 3339 date-time).",
              "nullable": true,
              "title": "Created Time",
              "type": "string"
            },
            "hidden": {
              "default": null,
              "description": "Whether the shared drive is hidden from default view.",
              "nullable": true,
              "title": "Hidden",
              "type": "boolean"
            },
            "id": {
              "default": null,
              "description": "The ID of this shared drive.",
              "nullable": true,
              "title": "Id",
              "type": "string"
            },
            "kind": {
              "default": null,
              "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#drive\".",
              "nullable": true,
              "title": "Kind",
              "type": "string"
            },
            "name": {
              "default": null,
              "description": "The name of this shared drive.",
              "nullable": true,
              "title": "Name",
              "type": "string"
            },
            "orgUnitId": {
              "default": null,
              "description": "The organizational unit of this shared drive.",
              "nullable": true,
              "title": "Org Unit Id",
              "type": "string"
            },
            "restrictions": {
              "additionalProperties": false,
              "default": null,
              "description": "A set of restrictions that apply to this shared drive.",
              "nullable": true,
              "properties": {
                "adminManagedRestrictions": {
                  "default": null,
                  "description": "If true, requires administrative privileges to modify restrictions.",
                  "nullable": true,
                  "title": "Admin Managed Restrictions",
                  "type": "boolean"
                },
                "copyRequiresWriterPermission": {
                  "default": null,
                  "description": "If true, disables copy, print, or download options for readers and commenters.",
                  "nullable": true,
                  "title": "Copy Requires Writer Permission",
                  "type": "boolean"
                },
                "domainUsersOnly": {
                  "default": null,
                  "description": "If true, restricts access to users of the domain to which the shared drive belongs.",
                  "nullable": true,
                  "title": "Domain Users Only",
                  "type": "boolean"
                },
                "driveMembersOnly": {
                  "default": null,
                  "description": "If true, restricts access to items inside the shared drive to its members.",
                  "nullable": true,
                  "title": "Drive Members Only",
                  "type": "boolean"
                },
                "sharingFoldersRequiresOrganizerPermission": {
                  "default": null,
                  "description": "If true, only users with the organizer role can share folders. If false, users with either the organizer or file organizer role can share folders.",
                  "nullable": true,
                  "title": "Sharing Folders Requires Organizer Permission",
                  "type": "boolean"
                }
              },
              "title": "DriveRestrictions",
              "type": "object"
            },
            "themeId": {
              "default": null,
              "description": "The ID of the theme from which the background image and color will be set.",
              "nullable": true,
              "title": "Theme Id",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateDriveResponseWrapper",
      "type": "object"
    },
    "description": "Tool to update the metadata for a shared drive. use when you need to modify properties like the name, theme, background image, or restrictions of a shared drive.",
    "tags": ["updateHint", "openWorldHint", "important", "drive"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update File (Metadata)",
    "slug": "GOOGLEDRIVE_UPDATE_FILE_PUT",
    "input_parameters": {
      "properties": {
        "add_parents": {
          "default": null,
          "description": "A comma-separated list of parent IDs to add.",
          "examples": ["1A2B3C_parent_folder_id,4D5E6F_another_parent_id"],
          "nullable": true,
          "title": "Add Parents",
          "type": "string"
        },
        "description": {
          "default": null,
          "description": "A short description of the file.",
          "examples": ["Updated version of the project proposal."],
          "nullable": true,
          "title": "Description",
          "type": "string"
        },
        "file_id": {
          "description": "The ID of the file to update.",
          "examples": ["1XyZ_6AbCdEfGhIjKlMnOpQrStUvWxYz0"],
          "title": "File Id",
          "type": "string"
        },
        "keep_revision_forever": {
          "default": null,
          "description": "Whether to set this revision of the file to be kept forever. This is only applicable to files with binary content in Google Drive. Only 200 revisions for the file can be kept forever. If the limit is reached, try deleting pinned revisions.",
          "nullable": true,
          "title": "Keep Revision Forever",
          "type": "boolean"
        },
        "mime_type": {
          "default": null,
          "description": "The MIME type of the file. Google Drive will attempt to automatically detect an appropriate value from uploaded content if no value is provided. The value cannot be changed unless a new revision is uploaded.",
          "examples": ["application/vnd.google-apps.document"],
          "nullable": true,
          "title": "Mime Type",
          "type": "string"
        },
        "name": {
          "default": null,
          "description": "The name of the file.",
          "examples": ["My Updated Document"],
          "nullable": true,
          "title": "Name",
          "type": "string"
        },
        "ocr_language": {
          "default": null,
          "description": "A language hint for OCR processing during image import (ISO 639-1 code).",
          "examples": ["en"],
          "nullable": true,
          "title": "Ocr Language",
          "type": "string"
        },
        "remove_parents": {
          "default": null,
          "description": "A comma-separated list of parent IDs to remove.",
          "examples": ["7G8H9I_old_parent_id"],
          "nullable": true,
          "title": "Remove Parents",
          "type": "string"
        },
        "starred": {
          "default": null,
          "description": "Whether the user has starred the file.",
          "nullable": true,
          "title": "Starred",
          "type": "boolean"
        },
        "supports_all_drives": {
          "default": null,
          "description": "Whether the requesting application supports both My Drives and shared drives. This parameter will always be true by default if the application is configured to support shared drives.",
          "nullable": true,
          "title": "Supports All Drives",
          "type": "boolean"
        },
        "use_domain_admin_access": {
          "default": null,
          "description": "Whether the requesting application is using domain-wide delegation to access content belonging to a user in a different domain. This is only applicable to files with binary content in Google Drive.",
          "nullable": true,
          "title": "Use Domain Admin Access",
          "type": "boolean"
        },
        "viewers_can_copy_content": {
          "default": null,
          "description": "Whether viewers are prevented from copying content of the file.",
          "nullable": true,
          "title": "Viewers Can Copy Content",
          "type": "boolean"
        },
        "writers_can_share": {
          "default": null,
          "description": "Whether writers can share the document with other users.",
          "nullable": true,
          "title": "Writers Can Share",
          "type": "boolean"
        }
      },
      "required": ["file_id"],
      "title": "UpdateFilePutRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "app_properties": {
              "additionalProperties": { "type": "string" },
              "default": null,
              "description": "A collection of arbitrary key-value pairs which are private to the requesting app.",
              "nullable": true,
              "title": "App Properties",
              "type": "object"
            },
            "capabilities": {
              "additionalProperties": true,
              "default": null,
              "description": "Capabilities the current user has on this file. Each capability corresponds to a fine-grained permission that a user may have.",
              "nullable": true,
              "title": "Capabilities",
              "type": "object"
            },
            "content_hints": {
              "additionalProperties": true,
              "default": null,
              "description": "Additional information about the content of the file. These fields are never populated in responses.",
              "nullable": true,
              "title": "Content Hints",
              "type": "object"
            },
            "content_restrictions": {
              "default": null,
              "description": "Content restrictions for this file. ",
              "items": { "additionalProperties": true, "properties": {}, "type": "object" },
              "nullable": true,
              "title": "Content Restrictions",
              "type": "array"
            },
            "copy_requires_writer_permission": {
              "default": null,
              "description": "Whether users with only writer permission can modify the file's permissions. This field is now deprecated: use writersCanShare instead.",
              "nullable": true,
              "title": "Copy Requires Writer Permission",
              "type": "boolean"
            },
            "created_time": {
              "default": null,
              "description": "The time at which the file was created (RFC 3339 date-time).",
              "nullable": true,
              "title": "Created Time",
              "type": "string"
            },
            "description": {
              "default": null,
              "description": "A short description of the file.",
              "nullable": true,
              "title": "Description",
              "type": "string"
            },
            "drive_id": {
              "default": null,
              "description": "The ID of the shared drive the file resides in. This is an alias for teamDriveId.",
              "nullable": true,
              "title": "Drive Id",
              "type": "string"
            },
            "export_links": {
              "additionalProperties": { "type": "string" },
              "default": null,
              "description": "Links for exporting Google Docs to specific formats.",
              "nullable": true,
              "title": "Export Links",
              "type": "object"
            },
            "file_extension": {
              "default": null,
              "description": "The final component of fullFileExtension. This is only available for files with binary content in Google Drive.",
              "nullable": true,
              "title": "File Extension",
              "type": "string"
            },
            "full_file_extension": {
              "default": null,
              "description": "The full file extension extracted from the name field. May contain multiple concatenated extensions, suchas \"tar.gz\". This is only available for files with binary content in Google Drive.",
              "nullable": true,
              "title": "Full File Extension",
              "type": "string"
            },
            "has_thumbnail": {
              "default": null,
              "description": "Whether this file has a thumbnail.",
              "nullable": true,
              "title": "Has Thumbnail",
              "type": "boolean"
            },
            "head_revision_id": {
              "default": null,
              "description": "The ID of the head revision of the file.",
              "nullable": true,
              "title": "Head Revision Id",
              "type": "string"
            },
            "icon_link": {
              "default": null,
              "description": "A static, unauthenticated link to the file's icon.",
              "nullable": true,
              "title": "Icon Link",
              "type": "string"
            },
            "id": { "description": "The ID of the file.", "title": "Id", "type": "string" },
            "image_media_metadata": {
              "additionalProperties": true,
              "default": null,
              "description": "Metadata about image media. This will only be present for image types, and its contents will depend on the image type.",
              "nullable": true,
              "title": "Image Media Metadata",
              "type": "object"
            },
            "is_app_authorized": {
              "default": null,
              "description": "Whether the file was created or opened by the requesting app.",
              "nullable": true,
              "title": "Is App Authorized",
              "type": "boolean"
            },
            "kind": {
              "description": "Identifies what kind of resource this is. Value: the fixed string 'drive#file'.",
              "title": "Kind",
              "type": "string"
            },
            "label_info": {
              "additionalProperties": true,
              "default": null,
              "description": "Label information for the file. ",
              "nullable": true,
              "title": "Label Info",
              "type": "object"
            },
            "last_modifying_user": {
              "additionalProperties": true,
              "default": null,
              "description": "The last user to modify the file.",
              "nullable": true,
              "title": "Last Modifying User",
              "type": "object"
            },
            "link_share_metadata": {
              "additionalProperties": true,
              "default": null,
              "description": "Metadata about the shared link. This will only be present for files with link-sharing enabled.",
              "nullable": true,
              "title": "Link Share Metadata",
              "type": "object"
            },
            "md5_checksum": {
              "default": null,
              "description": "The MD5 checksum for the content of the file. This is only applicable to files with binary content in Google Drive.",
              "nullable": true,
              "title": "Md5 Checksum",
              "type": "string"
            },
            "mime_type": {
              "default": null,
              "description": "The MIME type of the file.",
              "nullable": true,
              "title": "Mime Type",
              "type": "string"
            },
            "modified_by_me_time": {
              "default": null,
              "description": "The last time the file was modified by the user (RFC 3339 date-time).",
              "nullable": true,
              "title": "Modified By Me Time",
              "type": "string"
            },
            "modified_time": {
              "default": null,
              "description": "The last time the file was modified by anyone (RFC 3339 date-time).",
              "nullable": true,
              "title": "Modified Time",
              "type": "string"
            },
            "name": {
              "default": null,
              "description": "The name of the file.",
              "nullable": true,
              "title": "Name",
              "type": "string"
            },
            "original_filename": {
              "default": null,
              "description": "The original filename of the uploaded content if available, or else the original value of the name field. This is only available for files with binary content in Google Drive.",
              "nullable": true,
              "title": "Original Filename",
              "type": "string"
            },
            "owned_by_me": {
              "default": null,
              "description": "Whether the user owns the file.",
              "nullable": true,
              "title": "Owned By Me",
              "type": "boolean"
            },
            "owners": {
              "default": null,
              "description": "The owners of the file. Currently, only certain legacy files may have more than one owner.",
              "items": { "additionalProperties": true, "properties": {}, "type": "object" },
              "nullable": true,
              "title": "Owners",
              "type": "array"
            },
            "parents": {
              "default": null,
              "description": "The IDs of the parent folders which contain the file.",
              "items": { "properties": {}, "type": "string" },
              "nullable": true,
              "title": "Parents",
              "type": "array"
            },
            "permission_ids": {
              "default": null,
              "description": "A list of permission IDs for users with access to this file.",
              "items": { "properties": {}, "type": "string" },
              "nullable": true,
              "title": "Permission Ids",
              "type": "array"
            },
            "permissions": {
              "default": null,
              "description": "The full list of permissions for the file. This is only available if the requesting user has sufficient permission to see the full list of permissions.",
              "items": { "additionalProperties": true, "properties": {}, "type": "object" },
              "nullable": true,
              "title": "Permissions",
              "type": "array"
            },
            "properties": {
              "additionalProperties": { "type": "string" },
              "default": null,
              "description": "A collection of arbitrary key-value pairs which are private to the requesting app.",
              "nullable": true,
              "title": "Properties",
              "type": "object"
            },
            "quota_bytes_used": {
              "default": null,
              "description": "The number of storage quota bytes used by the file. This includes the head revision as well as previous revisions with keepForever enabled.",
              "nullable": true,
              "title": "Quota Bytes Used",
              "type": "string"
            },
            "resource_key": {
              "default": null,
              "description": "A key needed to access the item via a shared link.",
              "nullable": true,
              "title": "Resource Key",
              "type": "string"
            },
            "shared": {
              "default": null,
              "description": "Whether the file has been shared.",
              "nullable": true,
              "title": "Shared",
              "type": "boolean"
            },
            "shared_with_me_time": {
              "default": null,
              "description": "The time at which the file was shared with the user, if applicable (RFC 3339 date-time).",
              "nullable": true,
              "title": "Shared With Me Time",
              "type": "string"
            },
            "sharing_user": {
              "additionalProperties": true,
              "default": null,
              "description": "The user who shared the file with the requesting user, if applicable.",
              "nullable": true,
              "title": "Sharing User",
              "type": "object"
            },
            "shortcut_details": {
              "additionalProperties": true,
              "default": null,
              "description": "Shortcut file details. Only populated for shortcut files, which have the mimeType field set to application/vnd.google-apps.shortcut.",
              "nullable": true,
              "title": "Shortcut Details",
              "type": "object"
            },
            "size": {
              "default": null,
              "description": "The size of the file's content in bytes. This is applicable to files with binary content in Google Drive and Google Docs files.",
              "nullable": true,
              "title": "Size",
              "type": "string"
            },
            "spaces": {
              "default": null,
              "description": "The list of spaces which contain the file. The currently supported values are 'drive', 'appDataFolder' and 'photos'.",
              "items": { "properties": {}, "type": "string" },
              "nullable": true,
              "title": "Spaces",
              "type": "array"
            },
            "starred": {
              "default": null,
              "description": "Whether the user has starred the file.",
              "nullable": true,
              "title": "Starred",
              "type": "boolean"
            },
            "team_drive_id": {
              "default": null,
              "description": "The ID of the shared drive the file resides in. Only populated for items in shared drives.",
              "nullable": true,
              "title": "Team Drive Id",
              "type": "string"
            },
            "thumbnail_link": {
              "default": null,
              "description": "A short-lived link to the file's thumbnail. Typically lasts on the order of hours. Only populated when the requesting app can access the file's content.",
              "nullable": true,
              "title": "Thumbnail Link",
              "type": "string"
            },
            "trashed": {
              "default": null,
              "description": "Whether the file has been trashed, either explicitly or from a trashed parent folder.",
              "nullable": true,
              "title": "Trashed",
              "type": "boolean"
            },
            "version": {
              "default": null,
              "description": "A monotonically increasing version number for the file. This reflects every change made to the file on the server, even those not visible to the user.",
              "nullable": true,
              "title": "Version",
              "type": "integer"
            },
            "video_media_metadata": {
              "additionalProperties": true,
              "default": null,
              "description": "Metadata about video media. This will only be present for video types.",
              "nullable": true,
              "title": "Video Media Metadata",
              "type": "object"
            },
            "viewed_by_me": {
              "default": null,
              "description": "Whether the file has been viewed by this user.",
              "nullable": true,
              "title": "Viewed By Me",
              "type": "boolean"
            },
            "viewed_by_me_time": {
              "default": null,
              "description": "The last time the file was viewed by the user (RFC 3339 date-time).",
              "nullable": true,
              "title": "Viewed By Me Time",
              "type": "string"
            },
            "viewers_can_copy_content": {
              "default": null,
              "description": "Whether viewers are prevented from copying content of the file made available for offline access. ",
              "nullable": true,
              "title": "Viewers Can Copy Content",
              "type": "boolean"
            },
            "web_content_link": {
              "default": null,
              "description": "A link for downloading the content of the file in a browser. This is only available for files with binary content in Google Drive.",
              "nullable": true,
              "title": "Web Content Link",
              "type": "string"
            },
            "web_view_link": {
              "default": null,
              "description": "A link for opening the file in a relevant Google editor or viewer in a browser.",
              "nullable": true,
              "title": "Web View Link",
              "type": "string"
            },
            "writers_can_share": {
              "default": null,
              "description": "Whether writers can share the document with other users. This field is now deprecated: users should use the capabilities field on a file. The capabilities field can tell you if a user can share a file.",
              "nullable": true,
              "title": "Writers Can Share",
              "type": "boolean"
            }
          },
          "required": ["id", "kind"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateFilePutResponseWrapper",
      "type": "object"
    },
    "description": "Updates file metadata. uses patch semantics (partial update) as per google drive api v3. use this tool to modify attributes of an existing file like its name, description, or parent folders. note: this action currently supports metadata updates only. file content updates require multipart/related upload and are not yet implemented.",
    "tags": ["updateHint", "openWorldHint", "file", "update", "important"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update File Revision Metadata",
    "slug": "GOOGLEDRIVE_UPDATE_FILE_REVISION_METADATA",
    "input_parameters": {
      "properties": {
        "file_id": {
          "description": "The ID of the file.",
          "examples": ["1aBcDeFgHiJkLmNoPqRsTuVwXyZ0123456789"],
          "title": "File Id",
          "type": "string"
        },
        "keep_forever": {
          "default": null,
          "description": "Whether to keep this revision forever, even if it is no longer the head revision. If not set, the revision will be automatically purged 30 days after newer content is uploaded. This can be set on a maximum of 200 revisions for a file. This field is only applicable to files with binary content in Drive.",
          "nullable": true,
          "title": "Keep Forever",
          "type": "boolean"
        },
        "publishAuto": {
          "default": null,
          "description": "Whether subsequent revisions will be automatically republished. This is only applicable to Docs Editors files.",
          "nullable": true,
          "title": "Publish Auto",
          "type": "boolean"
        },
        "published": {
          "default": null,
          "description": "Whether this revision is published. This is only applicable to Docs Editors files.",
          "nullable": true,
          "title": "Published",
          "type": "boolean"
        },
        "publishedOutsideDomain": {
          "default": null,
          "description": "Whether this revision is published outside the domain. This is only applicable to Docs Editors files.",
          "nullable": true,
          "title": "Published Outside Domain",
          "type": "boolean"
        },
        "revision_id": {
          "description": "The ID of the revision.",
          "examples": ["1"],
          "title": "Revision Id",
          "type": "string"
        }
      },
      "required": ["file_id", "revision_id"],
      "title": "UpdateFileRevisionMetadataRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "exportLinks": {
              "additionalProperties": { "type": "string" },
              "default": null,
              "description": "Links for exporting Docs Editors files to specific formats.",
              "nullable": true,
              "title": "Export Links",
              "type": "object"
            },
            "id": {
              "default": null,
              "description": "The ID of the revision.",
              "nullable": true,
              "title": "Id",
              "type": "string"
            },
            "keepForever": {
              "default": null,
              "description": "Whether to keep this revision forever.",
              "nullable": true,
              "title": "Keep Forever",
              "type": "boolean"
            },
            "kind": {
              "default": null,
              "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#revision\".",
              "nullable": true,
              "title": "Kind",
              "type": "string"
            },
            "lastModifyingUser": {
              "additionalProperties": false,
              "default": null,
              "description": "The last user to modify this revision.",
              "nullable": true,
              "properties": {
                "displayName": {
                  "default": null,
                  "description": "A plain text displayable name for this user.",
                  "nullable": true,
                  "title": "Display Name",
                  "type": "string"
                },
                "emailAddress": {
                  "default": null,
                  "description": "The email address of the user. This may not be present in certain contexts if the user has not made their email address visible to the requester.",
                  "nullable": true,
                  "title": "Email Address",
                  "type": "string"
                },
                "kind": {
                  "default": null,
                  "description": "Identifies what kind of resource this is. Value: the fixed string \"drive#user\".",
                  "nullable": true,
                  "title": "Kind",
                  "type": "string"
                },
                "me": {
                  "default": null,
                  "description": "Whether this user is the requesting user.",
                  "nullable": true,
                  "title": "Me",
                  "type": "boolean"
                },
                "permissionId": {
                  "default": null,
                  "description": "The user's ID as visible in Permission resources.",
                  "nullable": true,
                  "title": "Permission Id",
                  "type": "string"
                },
                "photoLink": {
                  "default": null,
                  "description": "A link to the user's profile photo, if available.",
                  "nullable": true,
                  "title": "Photo Link",
                  "type": "string"
                }
              },
              "title": "User",
              "type": "object"
            },
            "md5Checksum": {
              "default": null,
              "description": "The MD5 checksum of the revision's content.",
              "nullable": true,
              "title": "Md5 Checksum",
              "type": "string"
            },
            "mimeType": {
              "default": null,
              "description": "The MIME type of the revision.",
              "nullable": true,
              "title": "Mime Type",
              "type": "string"
            },
            "modifiedTime": {
              "default": null,
              "description": "The last time the revision was modified (RFC 3339 date-time).",
              "nullable": true,
              "title": "Modified Time",
              "type": "string"
            },
            "originalFilename": {
              "default": null,
              "description": "The original filename used to create this revision.",
              "nullable": true,
              "title": "Original Filename",
              "type": "string"
            },
            "publishAuto": {
              "default": null,
              "description": "Whether subsequent revisions will be automatically republished.",
              "nullable": true,
              "title": "Publish Auto",
              "type": "boolean"
            },
            "published": {
              "default": null,
              "description": "Whether this revision is published. This is only applicable to Docs Editors files.",
              "nullable": true,
              "title": "Published",
              "type": "boolean"
            },
            "publishedLink": {
              "default": null,
              "description": "A link to the published revision.",
              "nullable": true,
              "title": "Published Link",
              "type": "string"
            },
            "publishedOutsideDomain": {
              "default": null,
              "description": "Whether this revision is published outside the domain.",
              "nullable": true,
              "title": "Published Outside Domain",
              "type": "boolean"
            },
            "size": {
              "default": null,
              "description": "The size of the revision's content in bytes.",
              "nullable": true,
              "title": "Size",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateFileRevisionMetadataResponseWrapper",
      "type": "object"
    },
    "description": "Updates metadata of a file revision (e.g., keepforever, publish). use this tool to modify the metadata of a specific revision of a file in google drive.",
    "tags": ["updateHint", "openWorldHint", "important", "revisions"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update Permission",
    "slug": "GOOGLEDRIVE_UPDATE_PERMISSION",
    "input_parameters": {
      "properties": {
        "enforceExpansiveAccess": {
          "default": false,
          "description": "Whether the request should enforce expansive access rules. This field is deprecated, it is recommended to use `permissionDetails` instead.",
          "nullable": true,
          "title": "Enforce Expansive Access",
          "type": "boolean"
        },
        "fileId": {
          "description": "The ID of the file or shared drive.",
          "examples": ["1234567890abcdefghijklmnopqrstuvwxyz"],
          "title": "File Id",
          "type": "string"
        },
        "permission": {
          "additionalProperties": false,
          "description": "The permission resource to update. Only 'role' and 'expirationTime' can be updated.",
          "properties": {
            "expirationTime": {
              "default": null,
              "description": "The time at which this permission will expire (RFC 3339 date-time).",
              "format": "date-time",
              "nullable": true,
              "title": "Expiration Time",
              "type": "string"
            },
            "role": {
              "default": null,
              "description": "The role granted by this permission.",
              "examples": ["owner", "organizer", "fileOrganizer", "writer", "commenter", "reader"],
              "nullable": true,
              "title": "Role",
              "type": "string"
            }
          },
          "title": "Permission",
          "type": "object"
        },
        "permissionId": {
          "description": "The ID of the permission.",
          "examples": ["01234567890123456789"],
          "title": "Permission Id",
          "type": "string"
        },
        "removeExpiration": {
          "default": false,
          "description": "Whether to remove the expiration date.",
          "nullable": true,
          "title": "Remove Expiration",
          "type": "boolean"
        },
        "supportsAllDrives": {
          "default": false,
          "description": "Whether the requesting application supports both My Drives and shared drives.",
          "nullable": true,
          "title": "Supports All Drives",
          "type": "boolean"
        },
        "transferOwnership": {
          "default": false,
          "description": "Whether to transfer ownership to the specified user and downgrade the current owner to a writer. This parameter is required as an acknowledgement of the side effect when set to true.",
          "nullable": true,
          "title": "Transfer Ownership",
          "type": "boolean"
        },
        "useDomainAdminAccess": {
          "default": false,
          "description": "Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.",
          "nullable": true,
          "title": "Use Domain Admin Access",
          "type": "boolean"
        }
      },
      "required": ["fileId", "permissionId", "permission"],
      "title": "UpdatePermissionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "deleted": {
              "default": null,
              "description": "Whether the permission has been deleted. This is always false for permissions that haven't been deleted.",
              "nullable": true,
              "title": "Deleted",
              "type": "boolean"
            },
            "displayName": {
              "default": null,
              "description": "The display name of the user or group to which this permission refers.",
              "nullable": true,
              "title": "Display Name",
              "type": "string"
            },
            "domain": {
              "default": null,
              "description": "The domain to which this permission refers.",
              "nullable": true,
              "title": "Domain",
              "type": "string"
            },
            "emailAddress": {
              "default": null,
              "description": "The email address of the user or group to which this permission refers.",
              "nullable": true,
              "title": "Email Address",
              "type": "string"
            },
            "expirationTime": {
              "default": null,
              "description": "The time at which this permission will expire (RFC 3339 date-time).",
              "format": "date-time",
              "nullable": true,
              "title": "Expiration Time",
              "type": "string"
            },
            "id": { "description": "The ID of the permission.", "title": "Id", "type": "string" },
            "kind": {
              "default": "drive#permission",
              "description": "Identifies what kind of resource this is. Value: the fixed string 'drive#permission'.",
              "title": "Kind",
              "type": "string"
            },
            "pendingOwner": {
              "default": null,
              "description": "Whether the account is pending owner. Output only.",
              "nullable": true,
              "title": "Pending Owner",
              "type": "boolean"
            },
            "permissionDetails": {
              "default": null,
              "description": "Details of whether the permissions on this shared drive item are inherited or directly on this item. This is an output-only field which is present only for shared drive items.",
              "items": { "additionalProperties": true, "properties": {}, "type": "object" },
              "nullable": true,
              "title": "Permission Details",
              "type": "array"
            },
            "photoLink": {
              "default": null,
              "description": "A link to the user's profile photo, if available.",
              "nullable": true,
              "title": "Photo Link",
              "type": "string"
            },
            "role": {
              "description": "The role granted by this permission.",
              "examples": ["owner", "organizer", "fileOrganizer", "writer", "commenter", "reader"],
              "title": "Role",
              "type": "string"
            },
            "type": {
              "description": "The type of the grantee.",
              "examples": ["user", "group", "domain", "anyone"],
              "title": "Type",
              "type": "string"
            }
          },
          "required": ["id", "type", "role"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdatePermissionResponseWrapper",
      "type": "object"
    },
    "description": "Tool to update a permission with patch semantics. use when you need to modify an existing permission for a file or shared drive.",
    "tags": ["updateHint", "openWorldHint", "important", "permission"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update Reply",
    "slug": "GOOGLEDRIVE_UPDATE_REPLY",
    "input_parameters": {
      "properties": {
        "comment_id": {
          "description": "The ID of the comment.",
          "examples": ["AAAAAAMAAAAA"],
          "title": "Comment Id",
          "type": "string"
        },
        "content": {
          "description": "The new plain text content of the reply.",
          "examples": ["This is an updated reply."],
          "title": "Content",
          "type": "string"
        },
        "fields": {
          "default": null,
          "description": "Selector specifying which fields to include in a partial response.",
          "examples": ["id,content"],
          "nullable": true,
          "title": "Fields",
          "type": "string"
        },
        "file_id": {
          "description": "The ID of the file.",
          "examples": ["1ZdR3L3Kek7szY1j11SQZ9A_00up1j3aA"],
          "title": "File Id",
          "type": "string"
        },
        "reply_id": {
          "description": "The ID of the reply.",
          "examples": ["ANmBhkFXXXXX"],
          "title": "Reply Id",
          "type": "string"
        }
      },
      "required": ["file_id", "comment_id", "reply_id", "content"],
      "title": "UpdateReplyRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "action": {
              "default": null,
              "description": "The action the reply performed to the parent comment. Valid values are: `resolve`, `reopen`.",
              "examples": ["resolve"],
              "nullable": true,
              "title": "Action",
              "type": "string"
            },
            "author": {
              "additionalProperties": true,
              "default": null,
              "description": "The user who created the reply.",
              "nullable": true,
              "title": "Author",
              "type": "object"
            },
            "content": {
              "default": null,
              "description": "The plain text content of the reply.",
              "examples": ["This is an updated reply."],
              "nullable": true,
              "title": "Content",
              "type": "string"
            },
            "createdTime": {
              "default": null,
              "description": "The time the reply was created (RFC 3339 date-time).",
              "examples": ["2023-08-15T10:00:00Z"],
              "nullable": true,
              "title": "Created Time",
              "type": "string"
            },
            "deleted": {
              "default": null,
              "description": "Whether the reply has been deleted. A deleted reply has no content.",
              "nullable": true,
              "title": "Deleted",
              "type": "boolean"
            },
            "htmlContent": {
              "default": null,
              "description": "The HTML content of the reply.",
              "examples": ["<p>This is an updated reply.</p>"],
              "nullable": true,
              "title": "Html Content",
              "type": "string"
            },
            "id": {
              "default": null,
              "description": "The ID of the reply.",
              "examples": ["ANmBhkFXXXXX"],
              "nullable": true,
              "title": "Id",
              "type": "string"
            },
            "modifiedTime": {
              "default": null,
              "description": "The last time the reply was modified (RFC 3339 date-time).",
              "examples": ["2023-08-15T10:30:00Z"],
              "nullable": true,
              "title": "Modified Time",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateReplyResponseWrapper",
      "type": "object"
    },
    "description": "Tool to update a reply to a comment on a google drive file. use when you need to modify the content of an existing reply.",
    "tags": ["important", "comment", "reply"]
  },
  {
    "available_versions": ["latest"],
    "name": "Upload File",
    "slug": "GOOGLEDRIVE_UPLOAD_FILE",
    "input_parameters": {
      "properties": {
        "file_to_upload": {
          "additionalProperties": false,
          "description": "File to upload to Google Drive (max 5MB), identified by its name or path.",
          "examples": ["picture.jpg", "sample.csv", "test.pdf"],
          "file_uploadable": true,
          "properties": {
            "mimetype": { "title": "Mimetype", "type": "string" },
            "name": { "title": "Name", "type": "string" },
            "s3key": { "title": "S3Key", "type": "string" }
          },
          "required": ["name", "mimetype", "s3key"],
          "title": "FileUploadable",
          "type": "object"
        },
        "folder_to_upload_to": {
          "default": null,
          "description": "Optional ID of the target Google Drive folder; can be obtained using 'Find Folder' or similar actions.",
          "examples": ["1duXYCvYC5tIp5B_B1HWLq8LyDYXfMhPU"],
          "nullable": true,
          "title": "Folder To Upload To",
          "type": "string"
        }
      },
      "required": ["file_to_upload"],
      "title": "UploadFileRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "appProperties": {
              "additionalProperties": { "type": "string" },
              "default": null,
              "description": "A collection of arbitrary key-value pairs which are private to the requesting app.",
              "nullable": true,
              "title": "App Properties",
              "type": "object"
            },
            "capabilities": {
              "additionalProperties": false,
              "default": null,
              "description": "Capabilities the current user has on this file.",
              "nullable": true,
              "properties": {
                "canAcceptOwnership": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Accept Ownership",
                  "type": "boolean"
                },
                "canAddChildren": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Add Children",
                  "type": "boolean"
                },
                "canAddFolderFromAnotherDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Add Folder From Another Drive",
                  "type": "boolean"
                },
                "canAddMyDriveParent": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Add My Drive Parent",
                  "type": "boolean"
                },
                "canChangeCopyRequiresWriterPermission": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Change Copy Requires Writer Permission",
                  "type": "boolean"
                },
                "canChangeSecurityUpdateEnabled": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Change Security Update Enabled",
                  "type": "boolean"
                },
                "canChangeViewersCanCopyContent": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Change Viewers Can Copy Content",
                  "type": "boolean"
                },
                "canComment": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Comment",
                  "type": "boolean"
                },
                "canCopy": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Copy",
                  "type": "boolean"
                },
                "canDelete": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Delete",
                  "type": "boolean"
                },
                "canDeleteChildren": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Delete Children",
                  "type": "boolean"
                },
                "canDisableInheritedPermissions": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Disable Inherited Permissions",
                  "type": "boolean"
                },
                "canDownload": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Download",
                  "type": "boolean"
                },
                "canEdit": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Edit",
                  "type": "boolean"
                },
                "canEnableInheritedPermissions": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Enable Inherited Permissions",
                  "type": "boolean"
                },
                "canListChildren": {
                  "default": null,
                  "nullable": true,
                  "title": "Can List Children",
                  "type": "boolean"
                },
                "canModifyContent": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Modify Content",
                  "type": "boolean"
                },
                "canModifyContentRestriction": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Modify Content Restriction",
                  "type": "boolean"
                },
                "canModifyEditorContentRestriction": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Modify Editor Content Restriction",
                  "type": "boolean"
                },
                "canModifyLabels": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Modify Labels",
                  "type": "boolean"
                },
                "canModifyOwnerContentRestriction": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Modify Owner Content Restriction",
                  "type": "boolean"
                },
                "canMoveChildrenOutOfDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Move Children Out Of Drive",
                  "type": "boolean"
                },
                "canMoveChildrenOutOfTeamDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Move Children Out Of Team Drive",
                  "type": "boolean"
                },
                "canMoveChildrenWithinDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Move Children Within Drive",
                  "type": "boolean"
                },
                "canMoveChildrenWithinTeamDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Move Children Within Team Drive",
                  "type": "boolean"
                },
                "canMoveItemIntoTeamDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Move Item Into Team Drive",
                  "type": "boolean"
                },
                "canMoveItemOutOfDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Move Item Out Of Drive",
                  "type": "boolean"
                },
                "canMoveItemOutOfTeamDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Move Item Out Of Team Drive",
                  "type": "boolean"
                },
                "canMoveItemWithinDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Move Item Within Drive",
                  "type": "boolean"
                },
                "canMoveItemWithinTeamDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Move Item Within Team Drive",
                  "type": "boolean"
                },
                "canMoveTeamDriveItem": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Move Team Drive Item",
                  "type": "boolean"
                },
                "canReadDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Read Drive",
                  "type": "boolean"
                },
                "canReadLabels": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Read Labels",
                  "type": "boolean"
                },
                "canReadRevisions": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Read Revisions",
                  "type": "boolean"
                },
                "canReadTeamDrive": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Read Team Drive",
                  "type": "boolean"
                },
                "canRemoveChildren": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Remove Children",
                  "type": "boolean"
                },
                "canRemoveContentRestriction": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Remove Content Restriction",
                  "type": "boolean"
                },
                "canRemoveMyDriveParent": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Remove My Drive Parent",
                  "type": "boolean"
                },
                "canRename": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Rename",
                  "type": "boolean"
                },
                "canShare": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Share",
                  "type": "boolean"
                },
                "canTrash": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Trash",
                  "type": "boolean"
                },
                "canTrashChildren": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Trash Children",
                  "type": "boolean"
                },
                "canUntrash": {
                  "default": null,
                  "nullable": true,
                  "title": "Can Untrash",
                  "type": "boolean"
                }
              },
              "title": "Capabilities",
              "type": "object"
            },
            "contentHints": {
              "additionalProperties": false,
              "default": null,
              "description": "Additional information about the content of the file. This is only available for files with binary content in Google Drive.",
              "nullable": true,
              "properties": {
                "indexableText": {
                  "default": null,
                  "description": "Text to be indexed for the file to improve searchability.",
                  "nullable": true,
                  "title": "Indexable Text",
                  "type": "string"
                },
                "thumbnail": {
                  "additionalProperties": false,
                  "default": null,
                  "description": "A thumbnail for the file.",
                  "nullable": true,
                  "properties": {
                    "image": {
                      "default": null,
                      "description": "The URL-safe Base64 encoded image data.",
                      "nullable": true,
                      "title": "Image",
                      "type": "string"
                    },
                    "mimeType": {
                      "default": null,
                      "description": "The MIME type of the thumbnail.",
                      "nullable": true,
                      "title": "Mime Type",
                      "type": "string"
                    }
                  },
                  "title": "Thumbnail",
                  "type": "object"
                }
              },
              "title": "ContentHints",
              "type": "object"
            },
            "contentRestrictions": {
              "default": null,
              "description": "Content restrictions for this file.",
              "items": {
                "properties": {
                  "readOnly": {
                    "default": null,
                    "nullable": true,
                    "title": "Read Only",
                    "type": "boolean"
                  },
                  "reason": {
                    "default": null,
                    "nullable": true,
                    "title": "Reason",
                    "type": "string"
                  }
                },
                "title": "ContentRestriction",
                "type": "object"
              },
              "nullable": true,
              "title": "Content Restrictions",
              "type": "array"
            },
            "copyRequiresWriterPermission": {
              "default": null,
              "description": "Whether to require the user to be a writer on the item in order to copy content.",
              "nullable": true,
              "title": "Copy Requires Writer Permission",
              "type": "boolean"
            },
            "createdTime": {
              "default": null,
              "description": "The time at which the file was created (RFC 3339 date-time).",
              "nullable": true,
              "title": "Created Time",
              "type": "string"
            },
            "description": {
              "default": null,
              "description": "A short description of the file.",
              "nullable": true,
              "title": "Description",
              "type": "string"
            },
            "driveId": {
              "default": null,
              "description": "The ID of the shared drive the file resides in. Only populated for items in shared drives.",
              "nullable": true,
              "title": "Drive Id",
              "type": "string"
            },
            "explicitlyTrashed": {
              "default": null,
              "description": "Whether the file has been explicitly trashed, as opposed to recursively trashed from a parent folder.",
              "nullable": true,
              "title": "Explicitly Trashed",
              "type": "boolean"
            },
            "exportLinks": {
              "additionalProperties": { "type": "string" },
              "default": null,
              "description": "Links for exporting Google Docs to specific formats.",
              "nullable": true,
              "title": "Export Links",
              "type": "object"
            },
            "fileExtension": {
              "default": null,
              "description": "The final component of fullFileExtension. This is only available for files with binary content in Google Drive.",
              "nullable": true,
              "title": "File Extension",
              "type": "string"
            },
            "folderColorRgb": {
              "default": null,
              "description": "The color for a folder as an RGB hex string. E.g. #4f8df3",
              "nullable": true,
              "title": "Folder Color Rgb",
              "type": "string"
            },
            "fullFileExtension": {
              "default": null,
              "description": "The full file extension extracted from the name field. May contain multiple concatenated extensions, such as 'tar.gz'.",
              "nullable": true,
              "title": "Full File Extension",
              "type": "string"
            },
            "hasAugmentedPermissions": {
              "default": null,
              "nullable": true,
              "title": "Has Augmented Permissions",
              "type": "boolean"
            },
            "hasThumbnail": {
              "default": null,
              "description": "Whether this file has a thumbnail.",
              "nullable": true,
              "title": "Has Thumbnail",
              "type": "boolean"
            },
            "headRevisionId": {
              "default": null,
              "description": "The ID of the head revision of the file.",
              "nullable": true,
              "title": "Head Revision Id",
              "type": "string"
            },
            "iconLink": {
              "default": null,
              "description": "A static, unauthenticated link to the file's icon.",
              "nullable": true,
              "title": "Icon Link",
              "type": "string"
            },
            "id": { "description": "The ID of the file.", "title": "Id", "type": "string" },
            "imageMediaMetadata": {
              "additionalProperties": false,
              "default": null,
              "description": "Additional metadata about image media, if available.",
              "nullable": true,
              "properties": {
                "aperture": {
                  "default": null,
                  "description": "The aperture used to create the image.",
                  "nullable": true,
                  "title": "Aperture",
                  "type": "number"
                },
                "cameraMake": {
                  "default": null,
                  "description": "The make of the camera used to create the image.",
                  "nullable": true,
                  "title": "Camera Make",
                  "type": "string"
                },
                "cameraModel": {
                  "default": null,
                  "description": "The model of the camera used to create the image.",
                  "nullable": true,
                  "title": "Camera Model",
                  "type": "string"
                },
                "colorSpace": {
                  "default": null,
                  "description": "The color space of the image.",
                  "nullable": true,
                  "title": "Color Space",
                  "type": "string"
                },
                "exposureBias": {
                  "default": null,
                  "description": "The exposure bias of the image.",
                  "nullable": true,
                  "title": "Exposure Bias",
                  "type": "number"
                },
                "exposureMode": {
                  "default": null,
                  "description": "The exposure mode used to create the image.",
                  "nullable": true,
                  "title": "Exposure Mode",
                  "type": "string"
                },
                "exposureTime": {
                  "default": null,
                  "description": "The exposure time used to create the image.",
                  "nullable": true,
                  "title": "Exposure Time",
                  "type": "number"
                },
                "flashUsed": {
                  "default": null,
                  "description": "Whether a flash was used to create the image.",
                  "nullable": true,
                  "title": "Flash Used",
                  "type": "boolean"
                },
                "focalLength": {
                  "default": null,
                  "description": "The focal length used to create the image.",
                  "nullable": true,
                  "title": "Focal Length",
                  "type": "number"
                },
                "height": {
                  "default": null,
                  "description": "The height of the image in pixels.",
                  "nullable": true,
                  "title": "Height",
                  "type": "integer"
                },
                "isoSpeed": {
                  "default": null,
                  "description": "The ISO speed used to create the image.",
                  "nullable": true,
                  "title": "Iso Speed",
                  "type": "integer"
                },
                "lens": {
                  "default": null,
                  "description": "The lens used to create the image.",
                  "nullable": true,
                  "title": "Lens",
                  "type": "string"
                },
                "location": {
                  "additionalProperties": false,
                  "default": null,
                  "description": "Geographic location information for the image.",
                  "nullable": true,
                  "properties": {
                    "altitude": {
                      "default": null,
                      "description": "The altitude of the location.",
                      "nullable": true,
                      "title": "Altitude",
                      "type": "number"
                    },
                    "latitude": {
                      "default": null,
                      "description": "The latitude of the location.",
                      "nullable": true,
                      "title": "Latitude",
                      "type": "number"
                    },
                    "longitude": {
                      "default": null,
                      "description": "The longitude of the location.",
                      "nullable": true,
                      "title": "Longitude",
                      "type": "number"
                    }
                  },
                  "title": "Location",
                  "type": "object"
                },
                "maxApertureValue": {
                  "default": null,
                  "description": "The maximum aperture value of the image.",
                  "nullable": true,
                  "title": "Max Aperture Value",
                  "type": "number"
                },
                "meteringMode": {
                  "default": null,
                  "description": "The metering mode used to create the image.",
                  "nullable": true,
                  "title": "Metering Mode",
                  "type": "string"
                },
                "rotation": {
                  "default": null,
                  "description": "The rotation of the image in degrees.",
                  "nullable": true,
                  "title": "Rotation",
                  "type": "integer"
                },
                "sensor": {
                  "default": null,
                  "description": "The sensor used to create the image.",
                  "nullable": true,
                  "title": "Sensor",
                  "type": "string"
                },
                "subjectDistance": {
                  "default": null,
                  "description": "The subject distance of the image.",
                  "nullable": true,
                  "title": "Subject Distance",
                  "type": "integer"
                },
                "time": {
                  "default": null,
                  "description": "The time the photo was taken (Exif DateTime).",
                  "nullable": true,
                  "title": "Time",
                  "type": "string"
                },
                "whiteBalance": {
                  "default": null,
                  "description": "The white balance mode used to create the image.",
                  "nullable": true,
                  "title": "White Balance",
                  "type": "string"
                },
                "width": {
                  "default": null,
                  "description": "The width of the image in pixels.",
                  "nullable": true,
                  "title": "Width",
                  "type": "integer"
                }
              },
              "title": "ImageMediaMetadata",
              "type": "object"
            },
            "isAppAuthorized": {
              "default": null,
              "description": "Whether the file was created or opened by the requesting app.",
              "nullable": true,
              "title": "Is App Authorized",
              "type": "boolean"
            },
            "kind": {
              "description": "Identifies the resource type. This is always 'drive#file'.",
              "title": "Kind",
              "type": "string"
            },
            "labelInfo": {
              "additionalProperties": false,
              "default": null,
              "description": "Information about labels applied to the file.",
              "nullable": true,
              "properties": {
                "labels": {
                  "default": null,
                  "items": {
                    "properties": {
                      "fields": {
                        "additionalProperties": {
                          "properties": {
                            "dateString": {
                              "anyOf": [
                                { "items": { "type": "string" }, "type": "array" },
                                { "type": "null" }
                              ],
                              "default": null,
                              "title": "Datestring"
                            },
                            "id": {
                              "anyOf": [{ "type": "string" }, { "type": "null" }],
                              "default": null,
                              "title": "Id"
                            },
                            "integer": {
                              "anyOf": [
                                { "items": { "type": "string" }, "type": "array" },
                                { "type": "null" }
                              ],
                              "default": null,
                              "title": "Integer"
                            },
                            "kind": {
                              "anyOf": [{ "type": "string" }, { "type": "null" }],
                              "default": null,
                              "title": "Kind"
                            },
                            "selection": {
                              "anyOf": [
                                { "items": { "type": "string" }, "type": "array" },
                                { "type": "null" }
                              ],
                              "default": null,
                              "title": "Selection"
                            },
                            "text": {
                              "anyOf": [
                                { "items": { "type": "string" }, "type": "array" },
                                { "type": "null" }
                              ],
                              "default": null,
                              "title": "Text"
                            },
                            "user": {
                              "anyOf": [
                                { "items": { "type": "string" }, "type": "array" },
                                { "type": "null" }
                              ],
                              "default": null,
                              "title": "User"
                            },
                            "valueType": {
                              "anyOf": [{ "type": "string" }, { "type": "null" }],
                              "default": null,
                              "title": "Valuetype"
                            }
                          },
                          "title": "LabelField",
                          "type": "object"
                        },
                        "default": null,
                        "nullable": true,
                        "title": "Fields",
                        "type": "object"
                      },
                      "id": { "default": null, "nullable": true, "title": "Id", "type": "string" },
                      "kind": {
                        "default": null,
                        "nullable": true,
                        "title": "Kind",
                        "type": "string"
                      },
                      "revisionId": {
                        "default": null,
                        "nullable": true,
                        "title": "Revision Id",
                        "type": "string"
                      }
                    },
                    "title": "Label",
                    "type": "object"
                  },
                  "nullable": true,
                  "title": "Labels",
                  "type": "array"
                }
              },
              "title": "LabelInfo",
              "type": "object"
            },
            "lastModifyingUser": {
              "additionalProperties": false,
              "default": null,
              "description": "The last user to modify the file.",
              "nullable": true,
              "properties": {
                "displayName": {
                  "default": null,
                  "description": "The display name of the user.",
                  "nullable": true,
                  "title": "Display Name",
                  "type": "string"
                },
                "emailAddress": {
                  "default": null,
                  "description": "The email address of the user.",
                  "nullable": true,
                  "title": "Email Address",
                  "type": "string"
                },
                "kind": {
                  "default": null,
                  "description": "Identifies the resource type (e.g., drive#user).",
                  "nullable": true,
                  "title": "Kind",
                  "type": "string"
                },
                "me": {
                  "default": null,
                  "description": "Whether this user is the requesting user.",
                  "nullable": true,
                  "title": "Me",
                  "type": "boolean"
                },
                "permissionId": {
                  "default": null,
                  "description": "The ETag of the permission.",
                  "nullable": true,
                  "title": "Permission Id",
                  "type": "string"
                },
                "photoLink": {
                  "default": null,
                  "description": "A link to the user's profile photo, if available.",
                  "nullable": true,
                  "title": "Photo Link",
                  "type": "string"
                }
              },
              "title": "User",
              "type": "object"
            },
            "linkShareMetadata": {
              "additionalProperties": false,
              "default": null,
              "description": "Metadata about the shared link for this file.",
              "nullable": true,
              "properties": {
                "securityUpdateEligible": {
                  "default": null,
                  "nullable": true,
                  "title": "Security Update Eligible",
                  "type": "boolean"
                },
                "securityUpdateEnabled": {
                  "default": null,
                  "nullable": true,
                  "title": "Security Update Enabled",
                  "type": "boolean"
                }
              },
              "title": "LinkShareMetadata",
              "type": "object"
            },
            "md5Checksum": {
              "default": null,
              "description": "The MD5 checksum for the content of the file. This is only applicable to files with binary content in Google Drive.",
              "nullable": true,
              "title": "Md5 Checksum",
              "type": "string"
            },
            "mimeType": {
              "default": null,
              "description": "The MIME type of the file.",
              "nullable": true,
              "title": "Mime Type",
              "type": "string"
            },
            "modifiedByMe": {
              "default": null,
              "description": "Whether the file has been modified by this user.",
              "nullable": true,
              "title": "Modified By Me",
              "type": "boolean"
            },
            "modifiedByMeTime": {
              "default": null,
              "description": "The last time the file was modified by the user (RFC 3339 date-time).",
              "nullable": true,
              "title": "Modified By Me Time",
              "type": "string"
            },
            "modifiedTime": {
              "default": null,
              "description": "The last time the file was modified by anyone (RFC 3339 date-time).",
              "nullable": true,
              "title": "Modified Time",
              "type": "string"
            },
            "name": {
              "default": null,
              "description": "The name of the file.",
              "nullable": true,
              "title": "Name",
              "type": "string"
            },
            "originalFilename": {
              "default": null,
              "description": "The original filename of the uploaded content if available, or else the original value of the name field. Once set, it will only change if a new revision is uploaded.",
              "nullable": true,
              "title": "Original Filename",
              "type": "string"
            },
            "ownedByMe": {
              "default": null,
              "description": "Whether the user owns the file.",
              "nullable": true,
              "title": "Owned By Me",
              "type": "boolean"
            },
            "owners": {
              "default": null,
              "description": "The owners of the file. Currently, only certain legacy files may have more than one owner.",
              "items": {
                "properties": {
                  "displayName": {
                    "default": null,
                    "description": "The display name of the user.",
                    "nullable": true,
                    "title": "Display Name",
                    "type": "string"
                  },
                  "emailAddress": {
                    "default": null,
                    "description": "The email address of the user.",
                    "nullable": true,
                    "title": "Email Address",
                    "type": "string"
                  },
                  "kind": {
                    "default": null,
                    "description": "Identifies the resource type (e.g., drive#user).",
                    "nullable": true,
                    "title": "Kind",
                    "type": "string"
                  },
                  "me": {
                    "default": null,
                    "description": "Whether this user is the requesting user.",
                    "nullable": true,
                    "title": "Me",
                    "type": "boolean"
                  },
                  "permissionId": {
                    "default": null,
                    "description": "The ETag of the permission.",
                    "nullable": true,
                    "title": "Permission Id",
                    "type": "string"
                  },
                  "photoLink": {
                    "default": null,
                    "description": "A link to the user's profile photo, if available.",
                    "nullable": true,
                    "title": "Photo Link",
                    "type": "string"
                  }
                },
                "title": "User",
                "type": "object"
              },
              "nullable": true,
              "title": "Owners",
              "type": "array"
            },
            "parents": {
              "default": null,
              "description": "The IDs of the parent folders which contain the file.",
              "items": { "properties": {}, "type": "string" },
              "nullable": true,
              "title": "Parents",
              "type": "array"
            },
            "permissionIds": {
              "default": null,
              "description": "A list of permission IDs for users with access to this file.",
              "items": { "properties": {}, "type": "string" },
              "nullable": true,
              "title": "Permission Ids",
              "type": "array"
            },
            "permissions": {
              "default": null,
              "description": "The permissions for the file. This field is only populated for items in shared drives.",
              "items": {
                "properties": {
                  "displayName": {
                    "default": null,
                    "nullable": true,
                    "title": "Display Name",
                    "type": "string"
                  },
                  "emailAddress": {
                    "default": null,
                    "nullable": true,
                    "title": "Email Address",
                    "type": "string"
                  },
                  "id": { "default": null, "nullable": true, "title": "Id", "type": "string" },
                  "kind": {
                    "default": "drive#permission",
                    "nullable": true,
                    "title": "Kind",
                    "type": "string"
                  },
                  "role": { "default": null, "nullable": true, "title": "Role", "type": "string" },
                  "type": { "default": null, "nullable": true, "title": "Type", "type": "string" }
                },
                "title": "Permission",
                "type": "object"
              },
              "nullable": true,
              "title": "Permissions",
              "type": "array"
            },
            "properties": {
              "additionalProperties": { "type": "string" },
              "default": null,
              "description": "A collection of arbitrary key-value pairs which are visible to all apps.",
              "nullable": true,
              "title": "Properties",
              "type": "object"
            },
            "quotaBytesUsed": {
              "default": null,
              "description": "The number of bytes the file occupies in storage. This is only applicable to files with binary content in Google Drive.",
              "nullable": true,
              "title": "Quota Bytes Used",
              "type": "string"
            },
            "resourceKey": {
              "default": null,
              "description": "A key needed to access the item via a shared link.",
              "nullable": true,
              "title": "Resource Key",
              "type": "string"
            },
            "sha1Checksum": {
              "default": null,
              "description": "The SHA1 checksum for the content of the file. This is only applicable to files with binary content in Google Drive.",
              "nullable": true,
              "title": "Sha1 Checksum",
              "type": "string"
            },
            "sha256Checksum": {
              "default": null,
              "description": "The SHA256 checksum for the content of the file. This is only applicable to files with binary content in Google Drive.",
              "nullable": true,
              "title": "Sha256 Checksum",
              "type": "string"
            },
            "shared": {
              "default": null,
              "description": "Whether the file has been shared.",
              "nullable": true,
              "title": "Shared",
              "type": "boolean"
            },
            "sharedWithMeTime": {
              "default": null,
              "description": "The time at which the file was shared with the user (RFC 3339 date-time).",
              "nullable": true,
              "title": "Shared With Me Time",
              "type": "string"
            },
            "sharingUser": {
              "additionalProperties": false,
              "default": null,
              "description": "The user who shared the file with the current user, if applicable.",
              "nullable": true,
              "properties": {
                "displayName": {
                  "default": null,
                  "description": "The display name of the user.",
                  "nullable": true,
                  "title": "Display Name",
                  "type": "string"
                },
                "emailAddress": {
                  "default": null,
                  "description": "The email address of the user.",
                  "nullable": true,
                  "title": "Email Address",
                  "type": "string"
                },
                "kind": {
                  "default": null,
                  "description": "Identifies the resource type (e.g., drive#user).",
                  "nullable": true,
                  "title": "Kind",
                  "type": "string"
                },
                "me": {
                  "default": null,
                  "description": "Whether this user is the requesting user.",
                  "nullable": true,
                  "title": "Me",
                  "type": "boolean"
                },
                "permissionId": {
                  "default": null,
                  "description": "The ETag of the permission.",
                  "nullable": true,
                  "title": "Permission Id",
                  "type": "string"
                },
                "photoLink": {
                  "default": null,
                  "description": "A link to the user's profile photo, if available.",
                  "nullable": true,
                  "title": "Photo Link",
                  "type": "string"
                }
              },
              "title": "User",
              "type": "object"
            },
            "shortcutDetails": {
              "additionalProperties": false,
              "default": null,
              "description": "Shortcut file details. Only populated for shortcut files, which have the mimeType field set to application/vnd.google-apps.shortcut.",
              "nullable": true,
              "properties": {
                "targetId": {
                  "default": null,
                  "description": "The ID of the file that this shortcut points to.",
                  "nullable": true,
                  "title": "Target Id",
                  "type": "string"
                },
                "targetMimeType": {
                  "default": null,
                  "description": "The MIME type of the file that this shortcut points to.",
                  "nullable": true,
                  "title": "Target Mime Type",
                  "type": "string"
                },
                "targetResourceKey": {
                  "default": null,
                  "description": "The resource key of the target file.",
                  "nullable": true,
                  "title": "Target Resource Key",
                  "type": "string"
                }
              },
              "title": "ShortcutDetails",
              "type": "object"
            },
            "size": {
              "default": null,
              "description": "The size of the file's content in bytes. This is applicable to files with binary content in Google Drive and Google Docs files.",
              "nullable": true,
              "title": "Size",
              "type": "string"
            },
            "spaces": {
              "default": null,
              "description": "The list of spaces which contain the file. The currently supported values are 'drive', 'appDataFolder' and 'photos'.",
              "items": { "properties": {}, "type": "string" },
              "nullable": true,
              "title": "Spaces",
              "type": "array"
            },
            "starred": {
              "default": null,
              "description": "Whether the user has starred the file.",
              "nullable": true,
              "title": "Starred",
              "type": "boolean"
            },
            "teamDriveId": {
              "default": null,
              "description": "Deprecated: Use driveId instead.",
              "nullable": true,
              "title": "Team Drive Id",
              "type": "string"
            },
            "thumbnailLink": {
              "default": null,
              "description": "A short-lived link to the file's thumbnail. Typically lasts on the order of hours. Only populated when the requesting app can access the file's content.",
              "nullable": true,
              "title": "Thumbnail Link",
              "type": "string"
            },
            "thumbnailVersion": {
              "default": null,
              "description": "The version of the file's thumbnail. Available when the media is hosted on Google Drive.",
              "nullable": true,
              "title": "Thumbnail Version",
              "type": "string"
            },
            "trashed": {
              "default": null,
              "description": "Whether the file has been trashed, either explicitly or from a trashed parent folder.",
              "nullable": true,
              "title": "Trashed",
              "type": "boolean"
            },
            "trashedTime": {
              "default": null,
              "nullable": true,
              "title": "Trashed Time",
              "type": "string"
            },
            "trashingUser": {
              "additionalProperties": false,
              "default": null,
              "nullable": true,
              "properties": {
                "displayName": {
                  "default": null,
                  "description": "The display name of the user.",
                  "nullable": true,
                  "title": "Display Name",
                  "type": "string"
                },
                "emailAddress": {
                  "default": null,
                  "description": "The email address of the user.",
                  "nullable": true,
                  "title": "Email Address",
                  "type": "string"
                },
                "kind": {
                  "default": null,
                  "description": "Identifies the resource type (e.g., drive#user).",
                  "nullable": true,
                  "title": "Kind",
                  "type": "string"
                },
                "me": {
                  "default": null,
                  "description": "Whether this user is the requesting user.",
                  "nullable": true,
                  "title": "Me",
                  "type": "boolean"
                },
                "permissionId": {
                  "default": null,
                  "description": "The ETag of the permission.",
                  "nullable": true,
                  "title": "Permission Id",
                  "type": "string"
                },
                "photoLink": {
                  "default": null,
                  "description": "A link to the user's profile photo, if available.",
                  "nullable": true,
                  "title": "Photo Link",
                  "type": "string"
                }
              },
              "title": "User",
              "type": "object"
            },
            "version": {
              "default": null,
              "description": "A monotonically increasing version number for the file. This reflects every change made to the file on the server, even those not visible to the user.",
              "nullable": true,
              "title": "Version",
              "type": "string"
            },
            "videoMediaMetadata": {
              "additionalProperties": false,
              "default": null,
              "description": "Additional metadata about video media, if available.",
              "nullable": true,
              "properties": {
                "durationMillis": {
                  "default": null,
                  "description": "The duration of the video in milliseconds.",
                  "nullable": true,
                  "title": "Duration Millis",
                  "type": "string"
                },
                "height": {
                  "default": null,
                  "description": "The height of the video in pixels.",
                  "nullable": true,
                  "title": "Height",
                  "type": "integer"
                },
                "width": {
                  "default": null,
                  "description": "The width of the video in pixels.",
                  "nullable": true,
                  "title": "Width",
                  "type": "integer"
                }
              },
              "title": "VideoMediaMetadata",
              "type": "object"
            },
            "viewedByMe": {
              "default": null,
              "description": "Whether the file has been viewed by this user.",
              "nullable": true,
              "title": "Viewed By Me",
              "type": "boolean"
            },
            "viewedByMeTime": {
              "default": null,
              "description": "The last time the file was viewed by the user (RFC 3339 date-time).",
              "nullable": true,
              "title": "Viewed By Me Time",
              "type": "string"
            },
            "viewersCanCopyContent": {
              "default": null,
              "description": "Whether users with only reader or commenter permission can copy the content of the file. This does not apply to Google Docs, Sheets, and Slides.",
              "nullable": true,
              "title": "Viewers Can Copy Content",
              "type": "boolean"
            },
            "webContentLink": {
              "default": null,
              "description": "A link for downloading the content of the file in a browser. This is only available for files with binary content in Google Drive.",
              "nullable": true,
              "title": "Web Content Link",
              "type": "string"
            },
            "webViewLink": {
              "default": null,
              "description": "A link for opening the file in a relevant Google editor or viewer in a browser.",
              "nullable": true,
              "title": "Web View Link",
              "type": "string"
            },
            "writersCanShare": {
              "default": null,
              "description": "Whether writers can share the document with other users.",
              "nullable": true,
              "title": "Writers Can Share",
              "type": "boolean"
            }
          },
          "required": ["kind", "id"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UploadFileResponseWrapper",
      "type": "object"
    },
    "description": "Uploads a file (max 5mb) to google drive, moving it to a specified folder if a valid folder id is provided, otherwise uploads to root.",
    "tags": ["important", "openWorldHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Watch Drive Changes",
    "slug": "GOOGLEDRIVE_WATCH_CHANGES",
    "input_parameters": {
      "properties": {
        "address": {
          "description": "The URL where notifications are to be delivered.",
          "examples": ["https://example.com/notifications"],
          "format": "uri",
          "maxLength": 2083,
          "minLength": 1,
          "title": "Address",
          "type": "string"
        },
        "drive_id": {
          "default": null,
          "description": "The shared drive from which changes will be returned. If specified, change IDs will be specific to the shared drive.",
          "examples": ["0ABqLz1XZc1Z9Uk9PVA"],
          "nullable": true,
          "title": "Drive Id",
          "type": "string"
        },
        "expiration": {
          "default": null,
          "description": "Timestamp in milliseconds since the epoch for when the channel should expire. If not set, channel may not expire or have a default expiration.",
          "examples": [1678886400000],
          "nullable": true,
          "title": "Expiration",
          "type": "integer"
        },
        "id": {
          "description": "A unique string that identifies this channel. UUIDs are recommended.",
          "examples": ["your-unique-channel-id-123"],
          "title": "Id",
          "type": "string"
        },
        "include_corpus_removals": {
          "default": null,
          "description": "Whether changes should include the file resource if the file is still accessible by the user at the time of the request, even when a file was removed from the list of changes.",
          "nullable": true,
          "title": "Include Corpus Removals",
          "type": "boolean"
        },
        "include_items_from_all_drives": {
          "default": null,
          "description": "Whether both My Drive and shared drive items should be included in results.",
          "nullable": true,
          "title": "Include Items From All Drives",
          "type": "boolean"
        },
        "include_labels": {
          "default": null,
          "description": "A comma-separated list of IDs of labels to include in the labelInfo part of the response.",
          "examples": ["labelId1,labelId2"],
          "nullable": true,
          "title": "Include Labels",
          "type": "string"
        },
        "include_permissions_for_view": {
          "default": null,
          "description": "Specifies which additional view's permissions to include in the response. Only 'published' is supported.",
          "examples": ["published"],
          "nullable": true,
          "title": "Include Permissions For View",
          "type": "string"
        },
        "include_removed": {
          "default": true,
          "description": "Whether to include changes indicating that items have been removed from the list of changes (e.g., by deletion or loss of access).",
          "nullable": true,
          "title": "Include Removed",
          "type": "boolean"
        },
        "page_size": {
          "default": 100,
          "description": "The maximum number of changes to return per page.",
          "maximum": 1000,
          "minimum": 1,
          "nullable": true,
          "title": "Page Size",
          "type": "integer"
        },
        "page_token": {
          "default": null,
          "description": "The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response or to the response from the getStartPageToken method.",
          "nullable": true,
          "title": "Page Token",
          "type": "string"
        },
        "params": {
          "additionalProperties": false,
          "default": null,
          "description": "Optional parameters for the notification channel.\nExample: {\"ttl\": \"3600\"} for a 1-hour time-to-live (actual support depends on Google API).",
          "nullable": true,
          "properties": {
            "additional_properties": {
              "additionalProperties": { "type": "string" },
              "default": null,
              "description": "Key-value pairs for additional parameters.",
              "nullable": true,
              "title": "Additional Properties",
              "type": "object"
            }
          },
          "title": "ChannelParams",
          "type": "object"
        },
        "restrict_to_my_drive": {
          "default": false,
          "description": "Whether to restrict the results to changes inside the My Drive hierarchy. This omits changes to files like those in the Application Data folder or shared files not added to My Drive.",
          "nullable": true,
          "title": "Restrict To My Drive",
          "type": "boolean"
        },
        "spaces": {
          "default": "drive",
          "description": "A comma-separated list of spaces to query within the corpora. Supported values are 'drive' and 'appDataFolder'.",
          "examples": ["drive", "appDataFolder", "drive,appDataFolder"],
          "nullable": true,
          "title": "Spaces",
          "type": "string"
        },
        "supports_all_drives": {
          "default": false,
          "description": "Whether the requesting application supports both My Drives and shared drives. Recommended to set to true if driveId is used or if interactions with shared drives are expected.",
          "nullable": true,
          "title": "Supports All Drives",
          "type": "boolean"
        },
        "token": {
          "default": null,
          "description": "An arbitrary string that will be delivered with each notification. Can be used for verification.",
          "examples": ["optional-arbitrary-string-for-verification"],
          "nullable": true,
          "title": "Token",
          "type": "string"
        },
        "type": {
          "description": "The type of delivery mechanism for notifications (e.g., 'web_hook').",
          "examples": ["web_hook"],
          "title": "Type",
          "type": "string"
        }
      },
      "required": ["id", "type", "address"],
      "title": "WatchChangesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "expiration": {
              "default": null,
              "description": "Timestamp in milliseconds since the epoch when the channel will expire.",
              "examples": [1678886400000],
              "nullable": true,
              "title": "Expiration",
              "type": "integer"
            },
            "id": {
              "description": "The ID of the established channel.",
              "examples": ["your-unique-channel-id-123"],
              "title": "Id",
              "type": "string"
            },
            "kind": {
              "default": null,
              "description": "Identifies this as a notification channel.",
              "examples": ["api#channel"],
              "nullable": true,
              "title": "Kind",
              "type": "string"
            },
            "resource_id": {
              "default": null,
              "description": "An opaque ID for the resource being watched.",
              "examples": ["RESOURCE_ID_STRING"],
              "nullable": true,
              "title": "Resource Id",
              "type": "string"
            },
            "resource_uri": {
              "default": null,
              "description": "A version-specific URI for the watched resource.",
              "examples": ["https://www.googleapis.com/drive/v3/changes?pageToken=xxxx&alt=json"],
              "nullable": true,
              "title": "Resource Uri",
              "type": "string"
            },
            "token": {
              "default": null,
              "description": "The token that will be sent with notifications, if one was provided in the request.",
              "examples": ["optional-arbitrary-string-for-verification"],
              "nullable": true,
              "title": "Token",
              "type": "string"
            }
          },
          "required": ["id"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "WatchChangesResponseWrapper",
      "type": "object"
    },
    "description": "Tool to subscribe to changes for a user or shared drive in google drive. use when you need to monitor a google drive for modifications and receive notifications at a specified webhook url.",
    "tags": [
      "updateHint",
      "openWorldHint",
      "googledrive",
      "changes",
      "watch",
      "notifications",
      "important"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Add Alias to Google Workspace User",
    "slug": "GOOGLE_ADMIN_ADD_USER_ALIAS",
    "input_parameters": {
      "description": "Request to add an alias to a Google Workspace user.",
      "properties": {
        "alias": {
          "description": "Alias email address to add to the user",
          "examples": ["j.doe@company.com", "john@company.com"],
          "title": "Alias",
          "type": "string"
        },
        "user_key": {
          "description": "User's primary email address or unique user ID",
          "examples": ["john.doe@company.com", "116847684616166222307"],
          "title": "User Key",
          "type": "string"
        }
      },
      "required": ["user_key", "alias"],
      "title": "AddUserAliasRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "response_data": {
              "additionalProperties": true,
              "description": "Full API response from Google Admin for the added alias",
              "title": "Response Data",
              "type": "object"
            }
          },
          "required": ["response_data"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "AddUserAliasResponseWrapper",
      "type": "object"
    },
    "description": "Adds an email alias to a google workspace user.",
    "tags": ["Users", "Aliases"]
  },
  {
    "available_versions": ["latest"],
    "name": "Add User to Google Workspace Group",
    "slug": "GOOGLE_ADMIN_ADD_USER_TO_GROUP",
    "input_parameters": {
      "description": "Request to add a user to a Google Workspace group.",
      "properties": {
        "group_key": {
          "description": "Group's email address or unique group ID",
          "examples": ["engineering@company.com", "03qv3s7k2hq0abc"],
          "title": "Group Key",
          "type": "string"
        },
        "role": {
          "default": "MEMBER",
          "description": "Role of the user in the group (MEMBER, MANAGER, OWNER)",
          "examples": ["MEMBER", "MANAGER", "OWNER"],
          "title": "Role",
          "type": "string"
        },
        "user_key": {
          "description": "User's primary email address or unique user ID to add to the group",
          "examples": ["john.doe@company.com", "116847684616166222307"],
          "title": "User Key",
          "type": "string"
        }
      },
      "required": ["group_key", "user_key"],
      "title": "AddUserToGroupRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "response_data": {
              "additionalProperties": true,
              "description": "Full API response from Google Admin for the added group member",
              "title": "Response Data",
              "type": "object"
            }
          },
          "required": ["response_data"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "AddUserToGroupResponseWrapper",
      "type": "object"
    },
    "description": "Adds a user to a google workspace group with the specified role.",
    "tags": ["Groups", "User Management"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create Google Workspace Group",
    "slug": "GOOGLE_ADMIN_CREATE_GROUP",
    "input_parameters": {
      "description": "Request to create a new Google Workspace group.",
      "properties": {
        "description": {
          "default": "",
          "description": "Description of the group's purpose",
          "examples": ["Engineering team members"],
          "title": "Description",
          "type": "string"
        },
        "email": {
          "description": "Group's email address (will be the group ID)",
          "examples": ["engineering@company.com"],
          "title": "Email",
          "type": "string"
        },
        "name": {
          "description": "Display name for the group",
          "examples": ["Engineering Team"],
          "title": "Name",
          "type": "string"
        }
      },
      "required": ["email", "name"],
      "title": "CreateGroupRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "response_data": {
              "additionalProperties": true,
              "description": "Full API response from Google Admin for the created group",
              "title": "Response Data",
              "type": "object"
            }
          },
          "required": ["response_data"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateGroupResponseWrapper",
      "type": "object"
    },
    "description": "Creates a new google workspace group with the specified details.",
    "tags": ["Groups", "Group Management"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create Google Workspace User",
    "slug": "GOOGLE_ADMIN_CREATE_USER",
    "input_parameters": {
      "description": "Request to create a new Google Workspace user.",
      "properties": {
        "change_password_at_next_login": {
          "default": true,
          "description": "Whether user must change password at next login",
          "title": "Change Password At Next Login",
          "type": "boolean"
        },
        "family_name": {
          "description": "User's last name",
          "examples": ["Doe"],
          "title": "Family Name",
          "type": "string"
        },
        "given_name": {
          "description": "User's first name",
          "examples": ["John"],
          "title": "Given Name",
          "type": "string"
        },
        "org_unit_path": {
          "default": "/",
          "description": "Organizational unit path for the user",
          "examples": ["/", "/Engineering"],
          "title": "Org Unit Path",
          "type": "string"
        },
        "password": {
          "description": "User's password (must meet domain password requirements)",
          "examples": ["SecurePassword123!"],
          "title": "Password",
          "type": "string"
        },
        "primary_email": {
          "description": "User's primary email address",
          "examples": ["john.doe@company.com"],
          "title": "Primary Email",
          "type": "string"
        },
        "recovery_email": {
          "default": null,
          "description": "Recovery email address",
          "examples": ["john.recovery@gmail.com"],
          "nullable": true,
          "title": "Recovery Email",
          "type": "string"
        },
        "recovery_phone": {
          "default": null,
          "description": "Recovery phone number",
          "examples": ["+1-555-123-4567"],
          "nullable": true,
          "title": "Recovery Phone",
          "type": "string"
        },
        "suspended": {
          "default": false,
          "description": "Whether the user account is suspended",
          "title": "Suspended",
          "type": "boolean"
        }
      },
      "required": ["primary_email", "given_name", "family_name", "password"],
      "title": "CreateUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "response_data": {
              "additionalProperties": true,
              "description": "Full API response from Google Admin for the created user",
              "title": "Response Data",
              "type": "object"
            }
          },
          "required": ["response_data"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateUserResponseWrapper",
      "type": "object"
    },
    "description": "Creates a new google workspace user with the specified details.",
    "tags": ["Users", "User Management"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete Google Workspace User",
    "slug": "GOOGLE_ADMIN_DELETE_USER",
    "input_parameters": {
      "description": "Request to delete a Google Workspace user.",
      "properties": {
        "user_key": {
          "description": "User's primary email address or unique user ID",
          "examples": ["john.doe@company.com", "116847684616166222307"],
          "title": "User Key",
          "type": "string"
        }
      },
      "required": ["user_key"],
      "title": "DeleteUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "message": {
              "default": "User deleted successfully",
              "description": "Confirmation message",
              "title": "Message",
              "type": "string"
            },
            "success": {
              "default": true,
              "description": "Whether the user was successfully deleted",
              "title": "Success",
              "type": "boolean"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DeleteUserResponseWrapper",
      "type": "object"
    },
    "description": "Deletes a google workspace user permanently. this action cannot be undone.",
    "tags": ["Users", "User Management"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get Google Workspace Group Details",
    "slug": "GOOGLE_ADMIN_GET_GROUP",
    "input_parameters": {
      "description": "Request to get details of a Google Workspace group.",
      "properties": {
        "group_key": {
          "description": "Group's email address or unique group ID",
          "examples": ["engineering@company.com", "03qv3s7k2hq0abc"],
          "title": "Group Key",
          "type": "string"
        }
      },
      "required": ["group_key"],
      "title": "GetGroupRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "response_data": {
              "additionalProperties": true,
              "description": "Full API response from Google Admin for the group details",
              "title": "Response Data",
              "type": "object"
            }
          },
          "required": ["response_data"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetGroupResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves detailed information about a google workspace group.",
    "tags": ["Groups", "Group Management"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get Google Workspace User Details",
    "slug": "GOOGLE_ADMIN_GET_USER",
    "input_parameters": {
      "description": "Request to get details of a Google Workspace user.",
      "properties": {
        "user_key": {
          "description": "User's primary email address or unique user ID",
          "examples": ["john.doe@company.com", "116847684616166222307"],
          "title": "User Key",
          "type": "string"
        }
      },
      "required": ["user_key"],
      "title": "GetUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "response_data": {
              "additionalProperties": true,
              "description": "Full API response from Google Admin for the user details",
              "title": "Response Data",
              "type": "object"
            }
          },
          "required": ["response_data"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetUserResponseWrapper",
      "type": "object"
    },
    "description": "Retrieves detailed information about a google workspace user.",
    "tags": ["Users", "User Management"]
  },
  {
    "available_versions": ["latest"],
    "name": "List Google Workspace Groups",
    "slug": "GOOGLE_ADMIN_LIST_GROUPS",
    "input_parameters": {
      "description": "Request to list Google Workspace groups.",
      "properties": {
        "customer": {
          "default": "my_customer",
          "description": "Customer ID or 'my_customer' for the authenticated user's customer",
          "examples": ["my_customer", "C01abc123"],
          "title": "Customer",
          "type": "string"
        },
        "domain": {
          "default": null,
          "description": "Domain name to list groups from",
          "examples": ["company.com"],
          "nullable": true,
          "title": "Domain",
          "type": "string"
        },
        "max_results": {
          "default": 200,
          "description": "Maximum number of results to return (1-200)",
          "examples": [50, 100, 200],
          "title": "Max Results",
          "type": "integer"
        },
        "order_by": {
          "default": "email",
          "description": "Property to order results by (email)",
          "examples": ["email"],
          "title": "Order By",
          "type": "string"
        },
        "page_token": {
          "default": null,
          "description": "Token for retrieving next page of results",
          "nullable": true,
          "title": "Page Token",
          "type": "string"
        },
        "query": {
          "default": null,
          "description": "Query string for filtering groups (e.g., 'name=Engineering*')",
          "examples": ["name=Engineering*", "email=*@company.com"],
          "nullable": true,
          "title": "Query",
          "type": "string"
        },
        "sort_order": {
          "default": "ASCENDING",
          "description": "Sort order (ASCENDING or DESCENDING)",
          "examples": ["ASCENDING", "DESCENDING"],
          "title": "Sort Order",
          "type": "string"
        }
      },
      "title": "ListGroupsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "response_data": {
              "additionalProperties": true,
              "description": "Full API response from Google Admin for the groups list",
              "title": "Response Data",
              "type": "object"
            }
          },
          "required": ["response_data"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListGroupsResponseWrapper",
      "type": "object"
    },
    "description": "Lists google workspace groups with optional filtering and pagination.",
    "tags": ["Groups", "Group Management"]
  },
  {
    "available_versions": ["latest"],
    "name": "List Google Workspace Group Members",
    "slug": "GOOGLE_ADMIN_LIST_GROUP_MEMBERS",
    "input_parameters": {
      "description": "Request to list members of a Google Workspace group.",
      "properties": {
        "group_key": {
          "description": "Group's email address or unique group ID",
          "examples": ["engineering@company.com", "03qv3s7k2hq0abc"],
          "title": "Group Key",
          "type": "string"
        },
        "include_derived_membership": {
          "default": false,
          "description": "Whether to include indirect memberships from nested groups",
          "title": "Include Derived Membership",
          "type": "boolean"
        },
        "max_results": {
          "default": 200,
          "description": "Maximum number of results to return (1-200)",
          "examples": [50, 100, 200],
          "title": "Max Results",
          "type": "integer"
        },
        "page_token": {
          "default": null,
          "description": "Token for retrieving next page of results",
          "nullable": true,
          "title": "Page Token",
          "type": "string"
        },
        "roles": {
          "default": null,
          "description": "Comma-separated list of roles to filter by (OWNER, MANAGER, MEMBER)",
          "examples": ["OWNER,MANAGER", "MEMBER"],
          "nullable": true,
          "title": "Roles",
          "type": "string"
        }
      },
      "required": ["group_key"],
      "title": "ListGroupMembersRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "response_data": {
              "additionalProperties": true,
              "description": "Full API response from Google Admin for the group members list",
              "title": "Response Data",
              "type": "object"
            }
          },
          "required": ["response_data"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListGroupMembersResponseWrapper",
      "type": "object"
    },
    "description": "Lists all members of a google workspace group with optional filtering and pagination.",
    "tags": ["Groups", "Group Management"]
  },
  {
    "available_versions": ["latest"],
    "name": "List Google Workspace Users",
    "slug": "GOOGLE_ADMIN_LIST_USERS",
    "input_parameters": {
      "description": "Request to list Google Workspace users.",
      "properties": {
        "customer": {
          "default": "my_customer",
          "description": "Customer ID or 'my_customer' for the authenticated user's customer",
          "examples": ["my_customer", "C01abc123"],
          "title": "Customer",
          "type": "string"
        },
        "domain": {
          "default": null,
          "description": "Domain name to list users from (if not specified, uses the authenticated user's domain)",
          "examples": ["company.com"],
          "nullable": true,
          "title": "Domain",
          "type": "string"
        },
        "max_results": {
          "default": 100,
          "description": "Maximum number of results to return (1-500)",
          "examples": [100, 250],
          "title": "Max Results",
          "type": "integer"
        },
        "order_by": {
          "default": "email",
          "description": "Property to order results by (email, givenName, familyName)",
          "examples": ["email", "givenName", "familyName"],
          "title": "Order By",
          "type": "string"
        },
        "page_token": {
          "default": null,
          "description": "Token for retrieving next page of results",
          "nullable": true,
          "title": "Page Token",
          "type": "string"
        },
        "query": {
          "default": null,
          "description": "Query string for filtering users (e.g., 'orgName=Engineering')",
          "examples": ["orgName=Engineering", "isSuspended=false"],
          "nullable": true,
          "title": "Query",
          "type": "string"
        },
        "sort_order": {
          "default": "ASCENDING",
          "description": "Sort order (ASCENDING or DESCENDING)",
          "examples": ["ASCENDING", "DESCENDING"],
          "title": "Sort Order",
          "type": "string"
        }
      },
      "title": "ListUsersRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "response_data": {
              "additionalProperties": true,
              "description": "Full API response from Google Admin for the users list",
              "title": "Response Data",
              "type": "object"
            }
          },
          "required": ["response_data"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListUsersResponseWrapper",
      "type": "object"
    },
    "description": "Lists google workspace users with optional filtering and pagination.",
    "tags": ["Users", "User Management"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove Alias from Google Workspace User",
    "slug": "GOOGLE_ADMIN_REMOVE_USER_ALIAS",
    "input_parameters": {
      "description": "Request to remove an alias from a Google Workspace user.",
      "properties": {
        "alias": {
          "description": "Alias email address to remove from the user",
          "examples": ["j.doe@company.com", "john@company.com"],
          "title": "Alias",
          "type": "string"
        },
        "user_key": {
          "description": "User's primary email address or unique user ID",
          "examples": ["john.doe@company.com", "116847684616166222307"],
          "title": "User Key",
          "type": "string"
        }
      },
      "required": ["user_key", "alias"],
      "title": "RemoveUserAliasRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "message": {
              "default": "User alias removed successfully",
              "description": "Confirmation message",
              "title": "Message",
              "type": "string"
            },
            "success": {
              "default": true,
              "description": "Whether the alias was successfully removed",
              "title": "Success",
              "type": "boolean"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveUserAliasResponseWrapper",
      "type": "object"
    },
    "description": "Removes an email alias from a google workspace user.",
    "tags": ["Users", "Aliases"]
  },
  {
    "available_versions": ["latest"],
    "name": "Remove User from Google Workspace Group",
    "slug": "GOOGLE_ADMIN_REMOVE_USER_FROM_GROUP",
    "input_parameters": {
      "description": "Request to remove a user from a Google Workspace group.",
      "properties": {
        "group_key": {
          "description": "Group's email address or unique group ID",
          "examples": ["engineering@company.com", "03qv3s7k2hq0abc"],
          "title": "Group Key",
          "type": "string"
        },
        "user_key": {
          "description": "User's primary email address or unique user ID to remove from the group",
          "examples": ["john.doe@company.com", "116847684616166222307"],
          "title": "User Key",
          "type": "string"
        }
      },
      "required": ["group_key", "user_key"],
      "title": "RemoveUserFromGroupRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "message": {
              "default": "User removed from group successfully",
              "description": "Confirmation message",
              "title": "Message",
              "type": "string"
            },
            "success": {
              "default": true,
              "description": "Whether the user was successfully removed from the group",
              "title": "Success",
              "type": "boolean"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "RemoveUserFromGroupResponseWrapper",
      "type": "object"
    },
    "description": "Removes a user from a google workspace group, revoking their group access.",
    "tags": ["Groups", "User Management"]
  },
  {
    "available_versions": ["latest"],
    "name": "Suspend/Unsuspend Google Workspace User",
    "slug": "GOOGLE_ADMIN_SUSPEND_USER",
    "input_parameters": {
      "description": "Request to suspend or unsuspend a Google Workspace user.",
      "properties": {
        "suspended": {
          "default": true,
          "description": "Whether to suspend (True) or unsuspend (False) the user",
          "examples": [true, false],
          "title": "Suspended",
          "type": "boolean"
        },
        "suspension_reason": {
          "default": null,
          "description": "Reason for suspension (optional)",
          "examples": ["Policy violation", "Security concern", "Employee termination"],
          "nullable": true,
          "title": "Suspension Reason",
          "type": "string"
        },
        "user_key": {
          "description": "User's primary email address or unique user ID",
          "examples": ["john.doe@company.com", "116847684616166222307"],
          "title": "User Key",
          "type": "string"
        }
      },
      "required": ["user_key"],
      "title": "SuspendUserRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "response_data": {
              "additionalProperties": true,
              "description": "Full API response from Google Admin for the updated user",
              "title": "Response Data",
              "type": "object"
            }
          },
          "required": ["response_data"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "SuspendUserResponseWrapper",
      "type": "object"
    },
    "description": "Suspends or unsuspends a google workspace user account.",
    "tags": ["Users", "User Management"]
  },
  {
    "available_versions": ["latest"],
    "name": "Update Google Workspace Group Settings",
    "slug": "GOOGLE_ADMIN_UPDATE_GROUP_SETTINGS",
    "input_parameters": {
      "description": "Request to update Google Workspace group settings.",
      "properties": {
        "description": {
          "default": null,
          "description": "Updated group description",
          "examples": ["Updated description for the engineering team"],
          "nullable": true,
          "title": "Description",
          "type": "string"
        },
        "group_key": {
          "description": "Group's email address or unique group ID",
          "examples": ["engineering@company.com", "03qv3s7k2hq0abc"],
          "title": "Group Key",
          "type": "string"
        },
        "name": {
          "default": null,
          "description": "Updated display name for the group",
          "examples": ["Updated Engineering Team"],
          "nullable": true,
          "title": "Name",
          "type": "string"
        }
      },
      "required": ["group_key"],
      "title": "UpdateGroupSettingsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "response_data": {
              "additionalProperties": true,
              "description": "Full API response from Google Admin for the updated group",
              "title": "Response Data",
              "type": "object"
            }
          },
          "required": ["response_data"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "UpdateGroupSettingsResponseWrapper",
      "type": "object"
    },
    "description": "Updates settings for a google workspace group.",
    "tags": ["Groups", "Group Management"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create Expanded Data Set",
    "slug": "GOOGLE_ANALYTICS_CREATE_EXPANDED_DATA_SET",
    "input_parameters": {
      "description": "Request model for creating an ExpandedDataSet.",
      "properties": {
        "expandedDataSet": {
          "additionalProperties": false,
          "description": "Definition of the ExpandedDataSet to create.",
          "properties": {
            "description": {
              "default": null,
              "description": "Optional. Description of the expanded data set.",
              "nullable": true,
              "title": "Description",
              "type": "string"
            },
            "dimensionNames": {
              "description": "Required. List of dimension names to include in the expanded data set.",
              "examples": ["date", "region"],
              "items": { "properties": {}, "type": "string" },
              "title": "Dimension Names",
              "type": "array"
            },
            "displayName": {
              "description": "Required. Human-readable display name for the expanded data set.",
              "examples": ["Monthly_Region_Metrics"],
              "title": "Display Name",
              "type": "string"
            },
            "metricNames": {
              "description": "Required. List of metric names to include in the expanded data set.",
              "examples": ["sessions", "purchaseEvents"],
              "items": { "properties": {}, "type": "string" },
              "title": "Metric Names",
              "type": "array"
            }
          },
          "required": ["displayName", "dimensionNames", "metricNames"],
          "title": "Expanded Data Set",
          "type": "object"
        },
        "parent": {
          "description": "Parent property resource name. Format: properties/{propertyId}",
          "examples": ["properties/123456789"],
          "pattern": "^properties/\\\\d+$",
          "title": "Parent",
          "type": "string"
        }
      },
      "required": ["parent", "expandedDataSet"],
      "title": "CreateExpandedDataSetRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "expandedDataSet": {
              "additionalProperties": false,
              "description": "The created ExpandedDataSet resource.",
              "properties": {
                "createTime": {
                  "default": null,
                  "description": "Output only. Time when this ExpandedDataSet was created.",
                  "nullable": true,
                  "title": "Create Time",
                  "type": "string"
                },
                "description": {
                  "default": null,
                  "description": "Optional. Description of the expanded data set.",
                  "nullable": true,
                  "title": "Description",
                  "type": "string"
                },
                "dimensionNames": {
                  "description": "Required. List of dimension names to include in the expanded data set.",
                  "examples": ["date", "region"],
                  "items": { "properties": {}, "type": "string" },
                  "title": "Dimension Names",
                  "type": "array"
                },
                "displayName": {
                  "description": "Required. Human-readable display name for the expanded data set.",
                  "examples": ["Monthly_Region_Metrics"],
                  "title": "Display Name",
                  "type": "string"
                },
                "metricNames": {
                  "description": "Required. List of metric names to include in the expanded data set.",
                  "examples": ["sessions", "purchaseEvents"],
                  "items": { "properties": {}, "type": "string" },
                  "title": "Metric Names",
                  "type": "array"
                },
                "name": {
                  "description": "Output only. Resource name of the ExpandedDataSet.",
                  "examples": ["properties/123456789/expandedDataSets/987654321"],
                  "title": "Name",
                  "type": "string"
                },
                "updateTime": {
                  "default": null,
                  "description": "Output only. Time when this ExpandedDataSet was last updated.",
                  "nullable": true,
                  "title": "Update Time",
                  "type": "string"
                }
              },
              "required": ["displayName", "dimensionNames", "metricNames", "name"],
              "title": "Expanded Data Set",
              "type": "object"
            }
          },
          "required": ["expandedDataSet"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CreateExpandedDataSetResponseWrapper",
      "type": "object"
    },
    "description": "Tool to create an expanded data set for a property. use when you need to combine specific dimensions and metrics into a custom dataset after property creation.",
    "tags": ["important"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get Account",
    "slug": "GOOGLE_ANALYTICS_GET_ACCOUNT",
    "input_parameters": {
      "description": "Request model for retrieving a single Account.",
      "properties": {
        "name": {
          "description": "Required. The resource name of the Account to retrieve. Format: accounts/{account_id}, e.g., 'accounts/100'.",
          "examples": ["accounts/100"],
          "pattern": "^accounts/[^/]+$",
          "title": "Name",
          "type": "string"
        }
      },
      "required": ["name"],
      "title": "GetAccountRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "createTime": {
              "description": "ISO 8601 timestamp when the account was created.",
              "title": "Create Time",
              "type": "string"
            },
            "deleted": {
              "default": null,
              "description": "Whether this Account is soft-deleted. Deleted accounts are excluded from list results unless explicitly requested.",
              "nullable": true,
              "title": "Deleted",
              "type": "boolean"
            },
            "displayName": {
              "default": null,
              "description": "Human-readable display name for this account.",
              "nullable": true,
              "title": "Display Name",
              "type": "string"
            },
            "name": {
              "description": "Resource name of this account. Format: accounts/{account_id}.",
              "title": "Name",
              "type": "string"
            },
            "regionCode": {
              "default": null,
              "description": "Country/region code of the account (e.g., 'US').",
              "nullable": true,
              "title": "Region Code",
              "type": "string"
            },
            "updateTime": {
              "description": "ISO 8601 timestamp when the account was last updated.",
              "title": "Update Time",
              "type": "string"
            }
          },
          "required": ["name", "createTime", "updateTime"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetAccountResponseWrapper",
      "type": "object"
    },
    "description": "Tool to retrieve a single account by its resource name. use when you need detailed account info after confirming the account resource name (e.g., accounts/100).",
    "tags": ["important"]
  },
  {
    "available_versions": ["latest"],
    "name": "List Accounts",
    "slug": "GOOGLE_ANALYTICS_LIST_ACCOUNTS",
    "input_parameters": {
      "description": "Request model for listing Accounts.",
      "properties": {
        "pageSize": {
          "default": null,
          "description": "Optional. Maximum number of accounts to return. Must be ≥1.",
          "examples": [100],
          "minimum": 1,
          "nullable": true,
          "title": "Page Size",
          "type": "integer"
        },
        "pageToken": {
          "default": null,
          "description": "Optional. Token for retrieving the next page of results.",
          "examples": ["token123"],
          "nullable": true,
          "title": "Page Token",
          "type": "string"
        },
        "showDeleted": {
          "default": null,
          "description": "Optional. Whether to include soft-deleted (trashed) Accounts.",
          "nullable": true,
          "title": "Show Deleted",
          "type": "boolean"
        }
      },
      "title": "ListAccountsRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "accounts": {
              "description": "List of Account resources.",
              "items": {
                "description": "Schema for an Account resource.",
                "properties": {
                  "createTime": {
                    "description": "ISO 8601 timestamp when the account was created.",
                    "title": "Create Time",
                    "type": "string"
                  },
                  "deleted": {
                    "default": null,
                    "description": "Whether this Account is soft-deleted.",
                    "nullable": true,
                    "title": "Deleted",
                    "type": "boolean"
                  },
                  "displayName": {
                    "default": null,
                    "description": "Human-readable display name for this account.",
                    "nullable": true,
                    "title": "Display Name",
                    "type": "string"
                  },
                  "name": {
                    "description": "Resource name of this account. Format: accounts/{account_id}.",
                    "title": "Name",
                    "type": "string"
                  },
                  "regionCode": {
                    "default": null,
                    "description": "Country/region code of the account (e.g., 'US').",
                    "nullable": true,
                    "title": "Region Code",
                    "type": "string"
                  },
                  "updateTime": {
                    "description": "ISO 8601 timestamp when the account was last updated.",
                    "title": "Update Time",
                    "type": "string"
                  }
                },
                "required": ["name", "createTime", "updateTime"],
                "title": "Account",
                "type": "object"
              },
              "title": "Accounts",
              "type": "array"
            },
            "nextPageToken": {
              "default": null,
              "description": "Token to retrieve the next page of results, if any.",
              "nullable": true,
              "title": "Next Page Token",
              "type": "string"
            }
          },
          "required": ["accounts"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListAccountsResponseWrapper",
      "type": "object"
    },
    "description": "Tool to list all accounts accessible by the caller. use when you need to enumerate all google analytics accounts your credentials can access.",
    "tags": ["important"]
  },
  {
    "available_versions": ["latest"],
    "name": "List Audiences",
    "slug": "GOOGLE_ANALYTICS_LIST_AUDIENCES",
    "input_parameters": {
      "description": "Request model for listing Audiences under a property.",
      "properties": {
        "pageSize": {
          "default": null,
          "description": "Optional. Maximum number of Audiences to return.",
          "examples": [100],
          "minimum": 1,
          "nullable": true,
          "title": "Page Size",
          "type": "integer"
        },
        "pageToken": {
          "default": null,
          "description": "Optional. Token for retrieving the next page of results.",
          "examples": ["token123"],
          "nullable": true,
          "title": "Page Token",
          "type": "string"
        },
        "parent": {
          "description": "Required. Resource name of the parent property. Format: properties/{property_id}",
          "examples": ["properties/1234"],
          "pattern": "^properties/[^/]+$",
          "title": "Parent",
          "type": "string"
        }
      },
      "required": ["parent"],
      "title": "ListAudiencesRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "audiences": {
              "description": "List of Audience resources.",
              "items": { "additionalProperties": true, "properties": {}, "type": "object" },
              "title": "Audiences",
              "type": "array"
            },
            "nextPageToken": {
              "default": null,
              "description": "Token to retrieve the next page of results, if any.",
              "nullable": true,
              "title": "Next Page Token",
              "type": "string"
            }
          },
          "required": ["audiences"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "ListAudiencesResponseWrapper",
      "type": "object"
    },
    "description": "Tool to list all audiences on a property. use when you need to fetch all audiences for a ga4 property after confirming its existence.",
    "tags": ["important"]
  },
  {
    "available_versions": ["latest"],
    "name": "List CourseWorkMaterials",
    "slug": "GOOGLE_CLASSROOM_CLASSROOMS_COURSE_WORK_MATERIALS_LIST",
    "input_parameters": {
      "description": "Request model for listing CourseWorkMaterials in a course.",
      "properties": {
        "courseId": {
          "description": "Identifier of the course whose courseWorkMaterials should be returned.",
          "examples": ["1234567890"],
          "title": "Course Id",
          "type": "string"
        },
        "orderBy": {
          "default": null,
          "description": "Requested sorting order. Supported values: 'updateTime asc', 'updateTime desc'.",
          "enum": ["updateTime asc", "updateTime desc"],
          "examples": ["updateTime desc"],
          "nullable": true,
          "title": "Order By",
          "type": "string"
        },
        "pageSize": {
          "default": null,
          "description": "Maximum number of items to return. Must be between 1 and 100. Defaults to 30.",
          "examples": [30],
          "maximum": 100,
          "minimum": 1,
          "nullable": true,
          "title": "Page Size",
          "type": "integer"
        },
        "pageToken": {
          "default": null,
          "description": "Token identifying which page of results to return.",
          "examples": ["Cg0KC2NvdXJzZVRva2VuEjgKIghhYmNkZWY"],
          "nullable": true,
          "title": "Page Token",
          "type": "string"
        }
      },
      "required": ["courseId"],
      "title": "CourseWorkMaterialsListRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "courseWorkMaterial": {
              "default": null,
              "description": "List of courseWorkMaterial items returned.",
              "items": {
                "properties": {
                  "alternateLink": {
                    "default": null,
                    "description": "URL link to open the courseWorkMaterial.",
                    "nullable": true,
                    "title": "Alternate Link",
                    "type": "string"
                  },
                  "creationTime": {
                    "default": null,
                    "description": "Creation time in RFC3339 UTC format.",
                    "nullable": true,
                    "title": "Creation Time",
                    "type": "string"
                  },
                  "description": {
                    "default": null,
                    "description": "Description of the courseWorkMaterial.",
                    "nullable": true,
                    "title": "Description",
                    "type": "string"
                  },
                  "id": {
                    "default": null,
                    "description": "Identifier for the courseWorkMaterial.",
                    "nullable": true,
                    "title": "Id",
                    "type": "string"
                  },
                  "materials": {
                    "default": null,
                    "description": "Materials attached to the courseWorkMaterial.",
                    "items": {
                      "description": "CourseWorkMaterial Material resource.",
                      "properties": {
                        "driveFile": {
                          "additionalProperties": false,
                          "default": null,
                          "description": "Drive file attached to the material.",
                          "nullable": true,
                          "properties": {
                            "driveFile": {
                              "additionalProperties": false,
                              "default": null,
                              "description": "Drive file information.",
                              "nullable": true,
                              "properties": {
                                "alternateLink": {
                                  "default": null,
                                  "description": "URL link to open the Drive file.",
                                  "nullable": true,
                                  "title": "Alternate Link",
                                  "type": "string"
                                },
                                "id": {
                                  "default": null,
                                  "description": "ID of the Drive file.",
                                  "nullable": true,
                                  "title": "Id",
                                  "type": "string"
                                },
                                "title": {
                                  "default": null,
                                  "description": "Title of the Drive file.",
                                  "nullable": true,
                                  "title": "Title",
                                  "type": "string"
                                }
                              },
                              "title": "DriveFileInfo",
                              "type": "object"
                            },
                            "shareMode": {
                              "default": null,
                              "description": "Permission mode for the Drive file. e.g., 'VIEW' or 'EDIT'.",
                              "nullable": true,
                              "title": "Share Mode",
                              "type": "string"
                            }
                          },
                          "title": "CourseWorkMaterialDriveFile",
                          "type": "object"
                        },
                        "form": {
                          "additionalProperties": false,
                          "default": null,
                          "description": "Form attached to the material.",
                          "nullable": true,
                          "properties": {
                            "formUrl": {
                              "default": null,
                              "description": "URL of the form.",
                              "nullable": true,
                              "title": "Form Url",
                              "type": "string"
                            },
                            "title": {
                              "default": null,
                              "description": "Title of the form.",
                              "nullable": true,
                              "title": "Title",
                              "type": "string"
                            }
                          },
                          "title": "Form",
                          "type": "object"
                        },
                        "link": {
                          "additionalProperties": false,
                          "default": null,
                          "description": "Link attached to the material.",
                          "nullable": true,
                          "properties": {
                            "title": {
                              "default": null,
                              "description": "Title of the link.",
                              "nullable": true,
                              "title": "Title",
                              "type": "string"
                            },
                            "url": {
                              "default": null,
                              "description": "URL of the link.",
                              "nullable": true,
                              "title": "Url",
                              "type": "string"
                            }
                          },
                          "title": "Link",
                          "type": "object"
                        },
                        "youtubeVideo": {
                          "additionalProperties": false,
                          "default": null,
                          "description": "YouTube video attached to the material.",
                          "nullable": true,
                          "properties": {
                            "alternateLink": {
                              "default": null,
                              "description": "URL link to open the video.",
                              "nullable": true,
                              "title": "Alternate Link",
                              "type": "string"
                            },
                            "id": {
                              "default": null,
                              "description": "ID of the YouTube video.",
                              "nullable": true,
                              "title": "Id",
                              "type": "string"
                            },
                            "thumbnailUrl": {
                              "default": null,
                              "description": "Thumbnail URL for the video.",
                              "nullable": true,
                              "title": "Thumbnail Url",
                              "type": "string"
                            },
                            "title": {
                              "default": null,
                              "description": "Title of the YouTube video.",
                              "nullable": true,
                              "title": "Title",
                              "type": "string"
                            }
                          },
                          "title": "YouTubeVideo",
                          "type": "object"
                        }
                      },
                      "title": "Material",
                      "type": "object"
                    },
                    "nullable": true,
                    "title": "Materials",
                    "type": "array"
                  },
                  "state": {
                    "enum": ["DRAFT", "PUBLISHED", "DELETED"],
                    "nullable": true,
                    "title": "State",
                    "type": "string"
                  },
                  "title": {
                    "default": null,
                    "description": "Title of the courseWorkMaterial.",
                    "nullable": true,
                    "title": "Title",
                    "type": "string"
                  },
                  "topicId": {
                    "default": null,
                    "description": "Identifier of the topic this material is associated with.",
                    "nullable": true,
                    "title": "Topic Id",
                    "type": "string"
                  },
                  "updateTime": {
                    "default": null,
                    "description": "Last update time in RFC3339 UTC format.",
                    "nullable": true,
                    "title": "Update Time",
                    "type": "string"
                  }
                },
                "required": ["state"],
                "title": "CourseWorkMaterial",
                "type": "object"
              },
              "nullable": true,
              "title": "Course Work Material",
              "type": "array"
            },
            "nextPageToken": {
              "default": null,
              "description": "Token to retrieve the next page of results.",
              "nullable": true,
              "title": "Next Page Token",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CourseWorkMaterialsListResponseWrapper",
      "type": "object"
    },
    "description": "Tool to list courseworkmaterials in a course. use after confirming a valid courseid; supports pagination and ordering.",
    "tags": ["courseWorkMaterials", "readOnlyHint", "openWorldHint", "important"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create Announcement",
    "slug": "GOOGLE_CLASSROOM_COURSES_ANNOUNCEMENTS_CREATE",
    "input_parameters": {
      "description": "Request model for creating an announcement in a course.",
      "properties": {
        "assigneeMode": {
          "default": null,
          "description": "Mode for assigning the announcement; ALL_STUDENTS or INDIVIDUAL_STUDENTS.",
          "enum": ["ALL_STUDENTS", "INDIVIDUAL_STUDENTS"],
          "examples": ["ALL_STUDENTS"],
          "nullable": true,
          "title": "Assignee Mode",
          "type": "string"
        },
        "courseId": {
          "description": "Identifier of the course.",
          "title": "Course Id",
          "type": "string"
        },
        "individualStudentsOptions": {
          "additionalProperties": false,
          "default": null,
          "description": "Options for INDIVIDUAL_STUDENTS assignee mode.",
          "nullable": true,
          "properties": {
            "studentIds": {
              "description": "List of student IDs who can see the announcement.",
              "items": { "properties": {}, "type": "string" },
              "title": "Student Ids",
              "type": "array"
            }
          },
          "required": ["studentIds"],
          "title": "IndividualStudentsOptions",
          "type": "object"
        },
        "materials": {
          "default": null,
          "description": "List of materials to attach to the announcement.",
          "items": {
            "description": "A material attached to the announcement. Exactly one of the fields should be provided.",
            "properties": {
              "driveFile": {
                "additionalProperties": { "type": "string" },
                "default": null,
                "description": "Drive file resource with keys like 'id', 'title', 'alternateLink'.",
                "nullable": true,
                "title": "Drive File",
                "type": "object"
              },
              "form": {
                "additionalProperties": { "type": "string" },
                "default": null,
                "description": "Form resource with keys 'formUrl' and 'formTitle'.",
                "nullable": true,
                "title": "Form",
                "type": "object"
              },
              "link": {
                "additionalProperties": { "type": "string" },
                "default": null,
                "description": "Link resource with keys 'url' and 'title'.",
                "nullable": true,
                "title": "Link",
                "type": "object"
              },
              "youtubeVideo": {
                "additionalProperties": { "type": "string" },
                "default": null,
                "description": "YouTube video resource with keys 'id' and 'title'.",
                "nullable": true,
                "title": "Youtube Video",
                "type": "object"
              }
            },
            "title": "Material",
            "type": "object"
          },
          "nullable": true,
          "title": "Materials",
          "type": "array"
        },
        "scheduledTime": {
          "default": null,
          "description": "RFC3339 timestamp at which to publish the announcement.",
          "examples": ["2023-10-15T09:00:00Z"],
          "nullable": true,
          "title": "Scheduled Time",
          "type": "string"
        },
        "state": {
          "default": null,
          "description": "State of the announcement; if omitted defaults to PUBLISHED.",
          "enum": ["DRAFT", "PUBLISHED", "DELETED"],
          "examples": ["DRAFT"],
          "nullable": true,
          "title": "State",
          "type": "string"
        },
        "text": {
          "default": null,
          "description": "The text content of the announcement.",
          "examples": ["Welcome to the new semester!"],
          "nullable": true,
          "title": "Text",
          "type": "string"
        }
      },
      "required": ["courseId"],
      "title": "CoursesAnnouncementsCreateRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "alternateLink": {
              "default": null,
              "description": "URL to view this announcement in Classroom.",
              "nullable": true,
              "title": "Alternate Link",
              "type": "string"
            },
            "assigneeMode": {
              "enum": ["ALL_STUDENTS", "INDIVIDUAL_STUDENTS"],
              "nullable": true,
              "title": "Assignee Mode",
              "type": "string"
            },
            "creationTime": {
              "default": null,
              "description": "Creation time in RFC3339 UTC format.",
              "nullable": true,
              "title": "Creation Time",
              "type": "string"
            },
            "creatorUserId": {
              "default": null,
              "description": "User ID of the announcement creator.",
              "nullable": true,
              "title": "Creator User Id",
              "type": "string"
            },
            "id": {
              "default": null,
              "description": "Identifier assigned by Classroom for the announcement.",
              "nullable": true,
              "title": "Id",
              "type": "string"
            },
            "individualStudentsOptions": {
              "additionalProperties": false,
              "description": "Options for INDIVIDUAL_STUDENTS assignee mode.",
              "nullable": true,
              "properties": {
                "studentIds": {
                  "description": "List of student IDs who can see the announcement.",
                  "items": { "properties": {}, "type": "string" },
                  "title": "Student Ids",
                  "type": "array"
                }
              },
              "required": ["studentIds"],
              "title": "IndividualStudentsOptions",
              "type": "object"
            },
            "materials": {
              "items": {
                "description": "A material attached to the announcement. Exactly one of the fields should be provided.",
                "properties": {
                  "driveFile": {
                    "additionalProperties": { "type": "string" },
                    "default": null,
                    "description": "Drive file resource with keys like 'id', 'title', 'alternateLink'.",
                    "nullable": true,
                    "title": "Drive File",
                    "type": "object"
                  },
                  "form": {
                    "additionalProperties": { "type": "string" },
                    "default": null,
                    "description": "Form resource with keys 'formUrl' and 'formTitle'.",
                    "nullable": true,
                    "title": "Form",
                    "type": "object"
                  },
                  "link": {
                    "additionalProperties": { "type": "string" },
                    "default": null,
                    "description": "Link resource with keys 'url' and 'title'.",
                    "nullable": true,
                    "title": "Link",
                    "type": "object"
                  },
                  "youtubeVideo": {
                    "additionalProperties": { "type": "string" },
                    "default": null,
                    "description": "YouTube video resource with keys 'id' and 'title'.",
                    "nullable": true,
                    "title": "Youtube Video",
                    "type": "object"
                  }
                },
                "title": "Material",
                "type": "object"
              },
              "nullable": true,
              "title": "Materials",
              "type": "array"
            },
            "scheduledTime": { "nullable": true, "title": "Scheduled Time", "type": "string" },
            "state": {
              "enum": ["DRAFT", "PUBLISHED", "DELETED"],
              "nullable": true,
              "title": "State",
              "type": "string"
            },
            "text": { "nullable": true, "title": "Text", "type": "string" },
            "updateTime": {
              "default": null,
              "description": "Last update time in RFC3339 UTC format.",
              "nullable": true,
              "title": "Update Time",
              "type": "string"
            }
          },
          "required": [
            "text",
            "materials",
            "state",
            "scheduledTime",
            "assigneeMode",
            "individualStudentsOptions"
          ],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CoursesAnnouncementsCreateResponseWrapper",
      "type": "object"
    },
    "description": "Tool to create an announcement in a course. use after confirming the course id is valid.",
    "tags": ["announcements", "writeOnlyHint", "Courses"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete Announcement",
    "slug": "GOOGLE_CLASSROOM_COURSES_ANNOUNCEMENTS_DELETE",
    "input_parameters": {
      "description": "Request model for deleting an announcement.",
      "properties": {
        "courseId": {
          "description": "Identifier of the course.",
          "examples": ["1234567890"],
          "title": "Course Id",
          "type": "string"
        },
        "id": {
          "description": "Identifier of the announcement to delete.",
          "examples": ["abcdef123456"],
          "title": "Id",
          "type": "string"
        }
      },
      "required": ["courseId", "id"],
      "title": "CoursesAnnouncementsDeleteRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {},
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CoursesAnnouncementsDeleteResponseWrapper",
      "type": "object"
    },
    "description": "Tool to delete an announcement. use after confirming the announcement id.",
    "tags": ["courses", "announcements"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get Announcement",
    "slug": "GOOGLE_CLASSROOM_COURSES_ANNOUNCEMENTS_GET",
    "input_parameters": {
      "description": "Request model for retrieving a specific announcement by course and announcement IDs.",
      "properties": {
        "courseId": {
          "description": "Identifier of the course. This identifier can be either the Classroom-assigned ID or an alias.",
          "examples": ["12345", "alias"],
          "title": "Course Id",
          "type": "string"
        },
        "id": {
          "description": "Identifier of the announcement to retrieve.",
          "examples": ["annc123"],
          "title": "Id",
          "type": "string"
        }
      },
      "required": ["courseId", "id"],
      "title": "CoursesAnnouncementsGetRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "assigneeMode": {
              "default": null,
              "description": "Who can see the announcement.",
              "enum": ["ALL_STUDENTS", "INDIVIDUAL_STUDENTS"],
              "nullable": true,
              "title": "Assignee Mode",
              "type": "string"
            },
            "courseId": {
              "default": null,
              "description": "Identifier of the course.",
              "nullable": true,
              "title": "Course Id",
              "type": "string"
            },
            "creationTime": {
              "default": null,
              "description": "Timestamp when the announcement was created (RFC3339 UTC).",
              "nullable": true,
              "title": "Creation Time",
              "type": "string"
            },
            "creatorUserId": {
              "default": null,
              "description": "User ID of the announcement creator.",
              "nullable": true,
              "title": "Creator User Id",
              "type": "string"
            },
            "id": {
              "default": null,
              "description": "Identifier of the announcement.",
              "nullable": true,
              "title": "Id",
              "type": "string"
            },
            "individualStudentsOptions": {
              "additionalProperties": false,
              "default": null,
              "description": "Details of student IDs when assigneeMode is INDIVIDUAL_STUDENTS.",
              "nullable": true,
              "properties": {
                "studentIds": {
                  "description": "List of student IDs who can see the announcement when assigneeMode is INDIVIDUAL_STUDENTS.",
                  "items": { "properties": {}, "type": "string" },
                  "title": "Student Ids",
                  "type": "array"
                }
              },
              "required": ["studentIds"],
              "title": "IndividualStudentsOptions",
              "type": "object"
            },
            "materials": {
              "default": null,
              "description": "Materials referenced by the announcement.",
              "items": {
                "additionalProperties": true,
                "description": "Material referenced by the announcement. Allows additional arbitrary fields such as driveFile, link, etc.",
                "properties": {},
                "title": "Material",
                "type": "object"
              },
              "nullable": true,
              "title": "Materials",
              "type": "array"
            },
            "scheduledTime": {
              "default": null,
              "description": "Time the announcement is scheduled to be posted (RFC3339 UTC), if applicable.",
              "nullable": true,
              "title": "Scheduled Time",
              "type": "string"
            },
            "state": {
              "default": null,
              "description": "Status of the announcement.",
              "enum": ["DRAFT", "PUBLISHED", "DELETED"],
              "nullable": true,
              "title": "State",
              "type": "string"
            },
            "text": {
              "default": null,
              "description": "Announcement content.",
              "nullable": true,
              "title": "Text",
              "type": "string"
            },
            "updateTime": {
              "default": null,
              "description": "Last update time of the announcement (RFC3339 UTC).",
              "nullable": true,
              "title": "Update Time",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CoursesAnnouncementsGetResponseWrapper",
      "type": "object"
    },
    "description": "Tool to get an announcement. use when you need to fetch an announcement by course and announcement id.",
    "tags": ["courses", "announcements", "readOnlyHint", "openWorldHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "List Announcements",
    "slug": "GOOGLE_CLASSROOM_COURSES_ANNOUNCEMENTS_LIST",
    "input_parameters": {
      "description": "Request model for listing announcements in a course.",
      "properties": {
        "courseId": {
          "description": "Identifier of the course whose announcements should be listed. Can be the Classroom-assigned identifier or an alias.",
          "examples": ["1234567890"],
          "title": "Course Id",
          "type": "string"
        },
        "orderBy": {
          "default": null,
          "description": "How to sort announcements. Use `updateTime desc` (newest first) or `updateTime asc` (oldest first). Defaults to `updateTime desc`.",
          "enum": ["updateTime asc", "updateTime desc"],
          "examples": ["updateTime asc"],
          "nullable": true,
          "title": "Order By",
          "type": "string"
        },
        "pageSize": {
          "default": null,
          "description": "Maximum number of announcements to return. Must be between 1 and 100. Defaults to 30 if not set.",
          "examples": [30],
          "maximum": 100,
          "minimum": 1,
          "nullable": true,
          "title": "Page Size",
          "type": "integer"
        },
        "pageToken": {
          "default": null,
          "description": "Token specifying the next page of results to return. Obtain from a previous list call's `nextPageToken`.",
          "examples": ["Cg0KC3ByZXZpb3VzUGFnZVRva2Vu"],
          "nullable": true,
          "title": "Page Token",
          "type": "string"
        }
      },
      "required": ["courseId"],
      "title": "CoursesAnnouncementsListRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "announcements": {
              "default": null,
              "description": "List of announcements that match the request.",
              "items": {
                "description": "A Classroom announcement resource.",
                "properties": {
                  "assigneeMode": {
                    "default": null,
                    "description": "Mode for assigning the announcement.",
                    "enum": ["ALL_STUDENTS", "INDIVIDUAL_STUDENTS"],
                    "nullable": true,
                    "title": "Assignee Mode",
                    "type": "string"
                  },
                  "courseId": {
                    "default": null,
                    "description": "Identifier of the course.",
                    "nullable": true,
                    "title": "Course Id",
                    "type": "string"
                  },
                  "creationTime": {
                    "default": null,
                    "description": "Creation time in RFC3339 UTC format.",
                    "nullable": true,
                    "title": "Creation Time",
                    "type": "string"
                  },
                  "id": {
                    "default": null,
                    "description": "Identifier assigned by Classroom for the announcement.",
                    "nullable": true,
                    "title": "Id",
                    "type": "string"
                  },
                  "individualStudentsOptions": {
                    "additionalProperties": false,
                    "default": null,
                    "description": "Options for INDIVIDUAL_STUDENTS assignee mode.",
                    "nullable": true,
                    "properties": {
                      "studentIds": {
                        "description": "List of student IDs who can see the announcement.",
                        "items": { "properties": {}, "type": "string" },
                        "title": "Student Ids",
                        "type": "array"
                      }
                    },
                    "required": ["studentIds"],
                    "title": "IndividualStudentsOptions",
                    "type": "object"
                  },
                  "materials": {
                    "default": null,
                    "description": "Materials attached to the announcement.",
                    "items": {
                      "description": "A material attached to the announcement. Exactly one of the fields should be provided.",
                      "properties": {
                        "driveFile": {
                          "additionalProperties": { "type": "string" },
                          "default": null,
                          "description": "Drive file resource with keys like 'id', 'title', 'alternateLink'.",
                          "nullable": true,
                          "title": "Drive File",
                          "type": "object"
                        },
                        "form": {
                          "additionalProperties": { "type": "string" },
                          "default": null,
                          "description": "Form resource with keys 'formUrl' and 'formTitle'.",
                          "nullable": true,
                          "title": "Form",
                          "type": "object"
                        },
                        "link": {
                          "additionalProperties": { "type": "string" },
                          "default": null,
                          "description": "Link resource with keys 'url' and 'title'.",
                          "nullable": true,
                          "title": "Link",
                          "type": "object"
                        },
                        "youtubeVideo": {
                          "additionalProperties": { "type": "string" },
                          "default": null,
                          "description": "YouTube video resource with keys 'id' and 'title'.",
                          "nullable": true,
                          "title": "Youtube Video",
                          "type": "object"
                        }
                      },
                      "title": "Material",
                      "type": "object"
                    },
                    "nullable": true,
                    "title": "Materials",
                    "type": "array"
                  },
                  "scheduledTime": {
                    "default": null,
                    "description": "Scheduled post time in RFC3339 UTC format.",
                    "nullable": true,
                    "title": "Scheduled Time",
                    "type": "string"
                  },
                  "state": {
                    "default": null,
                    "description": "State of the announcement.",
                    "enum": ["DRAFT", "PUBLISHED", "DELETED"],
                    "nullable": true,
                    "title": "State",
                    "type": "string"
                  },
                  "text": {
                    "default": null,
                    "description": "Announcement content.",
                    "nullable": true,
                    "title": "Text",
                    "type": "string"
                  },
                  "updateTime": {
                    "default": null,
                    "description": "Last update time in RFC3339 UTC format.",
                    "nullable": true,
                    "title": "Update Time",
                    "type": "string"
                  }
                },
                "title": "Announcement",
                "type": "object"
              },
              "nullable": true,
              "title": "Announcements",
              "type": "array"
            },
            "nextPageToken": {
              "default": null,
              "description": "Token to retrieve the next page of results.",
              "nullable": true,
              "title": "Next Page Token",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CoursesAnnouncementsListResponseWrapper",
      "type": "object"
    },
    "description": "Tool to list announcements in a course. use after you have the course id to page through announcements.",
    "tags": ["announcements", "readOnlyHint", "Courses"]
  },
  {
    "available_versions": ["latest"],
    "name": "Patch Announcement",
    "slug": "GOOGLE_CLASSROOM_COURSES_ANNOUNCEMENTS_PATCH",
    "input_parameters": {
      "description": "Request model for patching an announcement in a course.",
      "properties": {
        "assigneeMode": {
          "default": null,
          "description": "Mode for assigning the announcement; ALL_STUDENTS or INDIVIDUAL_STUDENTS.",
          "enum": ["ALL_STUDENTS", "INDIVIDUAL_STUDENTS"],
          "examples": ["ALL_STUDENTS"],
          "nullable": true,
          "title": "Assignee Mode",
          "type": "string"
        },
        "courseId": {
          "description": "Identifier of the course.",
          "examples": ["1234567890"],
          "title": "Course Id",
          "type": "string"
        },
        "id": {
          "description": "Identifier of the announcement to update.",
          "examples": ["abcdef123456"],
          "title": "Id",
          "type": "string"
        },
        "individualStudentsOptions": {
          "additionalProperties": false,
          "default": null,
          "description": "Options for INDIVIDUAL_STUDENTS assignee mode.",
          "nullable": true,
          "properties": {
            "studentIds": {
              "description": "List of student IDs who can see the announcement.",
              "items": { "properties": {}, "type": "string" },
              "title": "Student Ids",
              "type": "array"
            }
          },
          "required": ["studentIds"],
          "title": "IndividualStudentsOptions",
          "type": "object"
        },
        "materials": {
          "default": null,
          "description": "List of materials to attach to the announcement.",
          "items": {
            "description": "A material attached to the announcement. Exactly one of the fields should be provided.",
            "properties": {
              "driveFile": {
                "additionalProperties": { "type": "string" },
                "default": null,
                "description": "Drive file resource with keys like 'id', 'title', 'alternateLink'.",
                "nullable": true,
                "title": "Drive File",
                "type": "object"
              },
              "form": {
                "additionalProperties": { "type": "string" },
                "default": null,
                "description": "Form resource with keys 'formUrl' and 'formTitle'.",
                "nullable": true,
                "title": "Form",
                "type": "object"
              },
              "link": {
                "additionalProperties": { "type": "string" },
                "default": null,
                "description": "Link resource with keys 'url' and 'title'.",
                "nullable": true,
                "title": "Link",
                "type": "object"
              },
              "youtubeVideo": {
                "additionalProperties": { "type": "string" },
                "default": null,
                "description": "YouTube video resource with keys 'id' and 'title'.",
                "nullable": true,
                "title": "Youtube Video",
                "type": "object"
              }
            },
            "title": "Material",
            "type": "object"
          },
          "nullable": true,
          "title": "Materials",
          "type": "array"
        },
        "scheduledTime": {
          "default": null,
          "description": "RFC3339 timestamp at which to publish the announcement.",
          "examples": ["2023-10-15T09:00:00Z"],
          "nullable": true,
          "title": "Scheduled Time",
          "type": "string"
        },
        "state": {
          "default": null,
          "description": "State of the announcement.",
          "enum": ["DRAFT", "PUBLISHED", "DELETED"],
          "examples": ["PUBLISHED"],
          "nullable": true,
          "title": "State",
          "type": "string"
        },
        "text": {
          "default": null,
          "description": "The text content of the announcement to set.",
          "examples": ["Updated announcement content."],
          "nullable": true,
          "title": "Text",
          "type": "string"
        },
        "updateMask": {
          "description": "Comma-separated list of fields to update. E.g., 'text,state'.",
          "examples": ["text,scheduledTime"],
          "title": "Update Mask",
          "type": "string"
        }
      },
      "required": ["courseId", "id", "updateMask"],
      "title": "CoursesAnnouncementsPatchRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "alternateLink": {
              "default": null,
              "description": "URL to view this announcement in Classroom.",
              "nullable": true,
              "title": "Alternate Link",
              "type": "string"
            },
            "assigneeMode": {
              "default": null,
              "description": "Mode for assignment.",
              "enum": ["ALL_STUDENTS", "INDIVIDUAL_STUDENTS"],
              "nullable": true,
              "title": "Assignee Mode",
              "type": "string"
            },
            "courseId": {
              "default": null,
              "description": "Identifier of the course.",
              "nullable": true,
              "title": "Course Id",
              "type": "string"
            },
            "creationTime": {
              "default": null,
              "description": "Creation time in RFC3339 UTC format.",
              "nullable": true,
              "title": "Creation Time",
              "type": "string"
            },
            "creatorUserId": {
              "default": null,
              "description": "User ID of the announcement creator.",
              "nullable": true,
              "title": "Creator User Id",
              "type": "string"
            },
            "id": {
              "default": null,
              "description": "Identifier assigned by Classroom for the announcement.",
              "nullable": true,
              "title": "Id",
              "type": "string"
            },
            "individualStudentsOptions": {
              "additionalProperties": false,
              "default": null,
              "description": "Options for INDIVIDUAL_STUDENTS assignee mode.",
              "nullable": true,
              "properties": {
                "studentIds": {
                  "description": "List of student IDs who can see the announcement.",
                  "items": { "properties": {}, "type": "string" },
                  "title": "Student Ids",
                  "type": "array"
                }
              },
              "required": ["studentIds"],
              "title": "IndividualStudentsOptions",
              "type": "object"
            },
            "materials": {
              "default": null,
              "description": "List of attached materials.",
              "items": {
                "description": "A material attached to the announcement. Exactly one of the fields should be provided.",
                "properties": {
                  "driveFile": {
                    "additionalProperties": { "type": "string" },
                    "default": null,
                    "description": "Drive file resource with keys like 'id', 'title', 'alternateLink'.",
                    "nullable": true,
                    "title": "Drive File",
                    "type": "object"
                  },
                  "form": {
                    "additionalProperties": { "type": "string" },
                    "default": null,
                    "description": "Form resource with keys 'formUrl' and 'formTitle'.",
                    "nullable": true,
                    "title": "Form",
                    "type": "object"
                  },
                  "link": {
                    "additionalProperties": { "type": "string" },
                    "default": null,
                    "description": "Link resource with keys 'url' and 'title'.",
                    "nullable": true,
                    "title": "Link",
                    "type": "object"
                  },
                  "youtubeVideo": {
                    "additionalProperties": { "type": "string" },
                    "default": null,
                    "description": "YouTube video resource with keys 'id' and 'title'.",
                    "nullable": true,
                    "title": "Youtube Video",
                    "type": "object"
                  }
                },
                "title": "Material",
                "type": "object"
              },
              "nullable": true,
              "title": "Materials",
              "type": "array"
            },
            "scheduledTime": {
              "default": null,
              "description": "Scheduled time in RFC3339 format.",
              "nullable": true,
              "title": "Scheduled Time",
              "type": "string"
            },
            "state": {
              "default": null,
              "description": "State of the announcement.",
              "enum": ["DRAFT", "PUBLISHED", "DELETED"],
              "nullable": true,
              "title": "State",
              "type": "string"
            },
            "text": {
              "default": null,
              "description": "The text content of the announcement.",
              "nullable": true,
              "title": "Text",
              "type": "string"
            },
            "updateTime": {
              "default": null,
              "description": "Last update time in RFC3339 UTC format.",
              "nullable": true,
              "title": "Update Time",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CoursesAnnouncementsPatchResponseWrapper",
      "type": "object"
    },
    "description": "Tool to update fields of an announcement. use when you need to modify specific details of an existing announcement after confirming which fields to update.",
    "tags": ["courses", "announcements"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create Course",
    "slug": "GOOGLE_CLASSROOM_COURSES_CREATE",
    "input_parameters": {
      "description": "Request model for creating a new Google Classroom course.",
      "properties": {
        "courseState": {
          "default": null,
          "description": "Initial state of the course.",
          "enum": [
            "COURSE_STATE_UNSPECIFIED",
            "ACTIVE",
            "ARCHIVED",
            "PROVISIONED",
            "DECLINED",
            "SUSPENDED"
          ],
          "examples": ["ACTIVE"],
          "nullable": true,
          "title": "Course State",
          "type": "string"
        },
        "description": {
          "default": null,
          "description": "Detailed description of the course. Max length 30,000 characters.",
          "examples": [
            "This course covers foundational concepts in algebra, geometry, and problem-solving."
          ],
          "nullable": true,
          "title": "Description",
          "type": "string"
        },
        "descriptionHeading": {
          "default": null,
          "description": "Heading for the course description. Max length 360 characters.",
          "examples": ["Algebra and Geometry"],
          "nullable": true,
          "title": "Description Heading",
          "type": "string"
        },
        "name": {
          "description": "Name of the course. Max length 750 characters.",
          "examples": ["Math 101"],
          "title": "Name",
          "type": "string"
        },
        "ownerId": {
          "description": "Identifier of the course owner. Can be the user's numeric ID or email address.",
          "examples": ["teacher@example.com"],
          "title": "Owner Id",
          "type": "string"
        },
        "room": {
          "default": null,
          "description": "Room location for the course. Max length 64 characters.",
          "examples": ["Room 201"],
          "nullable": true,
          "title": "Room",
          "type": "string"
        },
        "section": {
          "default": null,
          "description": "Section of the course. Max length 2800 characters.",
          "examples": ["Period 2"],
          "nullable": true,
          "title": "Section",
          "type": "string"
        }
      },
      "required": ["name", "ownerId"],
      "title": "CoursesCreateRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "alternateLink": {
              "default": null,
              "description": "URL to view the course in Classroom UI.",
              "nullable": true,
              "title": "Alternate Link",
              "type": "string"
            },
            "calendarId": {
              "default": null,
              "description": "Calendar ID for the course.",
              "nullable": true,
              "title": "Calendar Id",
              "type": "string"
            },
            "courseGroupEmail": {
              "default": null,
              "description": "Email address of the student group for the course.",
              "nullable": true,
              "title": "Course Group Email",
              "type": "string"
            },
            "courseState": {
              "default": null,
              "description": "Current state of the course.",
              "enum": [
                "COURSE_STATE_UNSPECIFIED",
                "ACTIVE",
                "ARCHIVED",
                "PROVISIONED",
                "DECLINED",
                "SUSPENDED"
              ],
              "nullable": true,
              "title": "Course State",
              "type": "string"
            },
            "creationTime": {
              "default": null,
              "description": "Timestamp when the course was created.",
              "nullable": true,
              "title": "Creation Time",
              "type": "string"
            },
            "description": {
              "default": null,
              "description": "Detailed description of the course.",
              "nullable": true,
              "title": "Description",
              "type": "string"
            },
            "descriptionHeading": {
              "default": null,
              "description": "Heading for the course description.",
              "nullable": true,
              "title": "Description Heading",
              "type": "string"
            },
            "enrollmentCode": {
              "default": null,
              "description": "Code for students/teachers to join the course.",
              "nullable": true,
              "title": "Enrollment Code",
              "type": "string"
            },
            "guardiansEnabled": {
              "default": null,
              "description": "Whether guardian notifications are enabled for the course.",
              "nullable": true,
              "title": "Guardians Enabled",
              "type": "boolean"
            },
            "id": {
              "default": null,
              "description": "Unique identifier for the course.",
              "nullable": true,
              "title": "Id",
              "type": "string"
            },
            "name": {
              "default": null,
              "description": "Name of the course.",
              "nullable": true,
              "title": "Name",
              "type": "string"
            },
            "ownerId": {
              "default": null,
              "description": "Identifier of the course owner.",
              "nullable": true,
              "title": "Owner Id",
              "type": "string"
            },
            "room": {
              "default": null,
              "description": "Room location for the course.",
              "nullable": true,
              "title": "Room",
              "type": "string"
            },
            "section": {
              "default": null,
              "description": "Section of the course.",
              "nullable": true,
              "title": "Section",
              "type": "string"
            },
            "teacherGroupEmail": {
              "default": null,
              "description": "Email address of the teacher group for the course.",
              "nullable": true,
              "title": "Teacher Group Email",
              "type": "string"
            },
            "updateTime": {
              "default": null,
              "description": "Timestamp of the last update.",
              "nullable": true,
              "title": "Update Time",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CoursesCreateResponseWrapper",
      "type": "object"
    },
    "description": "Tool to create a new course. use when a teacher needs to establish a classroom course before enrollment.",
    "tags": ["courses", "writeOnlyHint", "Courses"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete Course",
    "slug": "GOOGLE_CLASSROOM_COURSES_DELETE",
    "input_parameters": {
      "description": "Request model for deleting a course.",
      "properties": {
        "id": {
          "description": "Identifier of the course to delete.",
          "examples": ["1234567890"],
          "title": "Id",
          "type": "string"
        }
      },
      "required": ["id"],
      "title": "CoursesDeleteRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {},
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CoursesDeleteResponseWrapper",
      "type": "object"
    },
    "description": "Tool to delete a course. use when you need to remove a course after confirming the course id.",
    "tags": ["courses"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get Course",
    "slug": "GOOGLE_CLASSROOM_COURSES_GET",
    "input_parameters": {
      "description": "Request model for retrieving a specific course by ID.",
      "properties": {
        "id": {
          "description": "Identifier of the course. This identifier can be either the Classroom-assigned ID or an alias.",
          "examples": ["12345", "alias"],
          "title": "Id",
          "type": "string"
        }
      },
      "required": ["id"],
      "title": "CoursesGetRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "alternateLink": {
              "default": null,
              "description": "URL that can be used to access the course.",
              "nullable": true,
              "title": "Alternate Link",
              "type": "string"
            },
            "calendarId": {
              "default": null,
              "description": "Calendar ID for the course.",
              "nullable": true,
              "title": "Calendar Id",
              "type": "string"
            },
            "courseGroupEmail": {
              "default": null,
              "description": "Email address of the course group for the course.",
              "nullable": true,
              "title": "Course Group Email",
              "type": "string"
            },
            "courseState": {
              "default": null,
              "description": "State of the course.",
              "enum": ["COURSE_STATE_UNSPECIFIED", "ACTIVE", "ARCHIVED", "PROVISIONED", "DECLINED"],
              "nullable": true,
              "title": "Course State",
              "type": "string"
            },
            "creationTime": {
              "default": null,
              "description": "Timestamp when the course was created (RFC3339 UTC format).",
              "nullable": true,
              "title": "Creation Time",
              "type": "string"
            },
            "description": {
              "default": null,
              "description": "Description of the course.",
              "nullable": true,
              "title": "Description",
              "type": "string"
            },
            "descriptionHeading": {
              "default": null,
              "description": "Description heading of the course.",
              "nullable": true,
              "title": "Description Heading",
              "type": "string"
            },
            "enrollmentCode": {
              "default": null,
              "description": "Enrollment code to join the course.",
              "nullable": true,
              "title": "Enrollment Code",
              "type": "string"
            },
            "guardianSummariesEmail": {
              "default": null,
              "description": "Email address for sending guardian summaries, if enabled.",
              "nullable": true,
              "title": "Guardian Summaries Email",
              "type": "string"
            },
            "id": {
              "default": null,
              "description": "Identifier for the course assigned by Classroom.",
              "nullable": true,
              "title": "Id",
              "type": "string"
            },
            "name": {
              "default": null,
              "description": "Name of the course.",
              "nullable": true,
              "title": "Name",
              "type": "string"
            },
            "ownerId": {
              "default": null,
              "description": "Identifier of the teacher who owns the course.",
              "nullable": true,
              "title": "Owner Id",
              "type": "string"
            },
            "room": {
              "default": null,
              "description": "Room location for the course.",
              "nullable": true,
              "title": "Room",
              "type": "string"
            },
            "section": {
              "default": null,
              "description": "Section of the course.",
              "nullable": true,
              "title": "Section",
              "type": "string"
            },
            "teacherFolder": {
              "additionalProperties": false,
              "default": null,
              "description": "Information about a Teacher Folder associated with the course.",
              "nullable": true,
              "properties": {
                "alternateLink": {
                  "default": null,
                  "description": "URL to view the teacher folder.",
                  "nullable": true,
                  "title": "Alternate Link",
                  "type": "string"
                },
                "id": {
                  "default": null,
                  "description": "Identifier of the teacher folder.",
                  "nullable": true,
                  "title": "Id",
                  "type": "string"
                },
                "title": {
                  "default": null,
                  "description": "Title of the teacher folder.",
                  "nullable": true,
                  "title": "Title",
                  "type": "string"
                }
              },
              "title": "TeacherFolder",
              "type": "object"
            },
            "teacherGroupEmail": {
              "default": null,
              "description": "Email address of the teacher group for the course.",
              "nullable": true,
              "title": "Teacher Group Email",
              "type": "string"
            },
            "updateTime": {
              "default": null,
              "description": "Timestamp of the last course update (RFC3339 UTC format).",
              "nullable": true,
              "title": "Update Time",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CoursesGetResponseWrapper",
      "type": "object"
    },
    "description": "Tool to get details for a specific course. use when you need full course information by id.",
    "tags": ["courses", "readOnlyHint", "openWorldHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "List Courses",
    "slug": "GOOGLE_CLASSROOM_COURSES_LIST",
    "input_parameters": {
      "description": "Request model for listing courses accessible to the user.",
      "properties": {
        "courseStates": {
          "default": null,
          "description": "Restricts returned courses to those in specified states.",
          "examples": [["ACTIVE"], ["ARCHIVED", "ACTIVE"]],
          "items": {
            "enum": ["COURSE_STATE_UNSPECIFIED", "ACTIVE", "ARCHIVED", "PROVISIONED", "DECLINED"],
            "properties": {},
            "type": "string"
          },
          "nullable": true,
          "title": "Course States",
          "type": "array"
        },
        "pageSize": {
          "default": null,
          "description": "Maximum number of items to return. Must be ≥1.",
          "examples": [10],
          "minimum": 1,
          "nullable": true,
          "title": "Page Size",
          "type": "integer"
        },
        "pageToken": {
          "default": null,
          "description": "Token identifying the page of results to return.",
          "examples": ["Cg0KC2NvdXJzZVRva2VuEjgKIghhYmNkZWY"],
          "nullable": true,
          "title": "Page Token",
          "type": "string"
        },
        "studentId": {
          "default": null,
          "description": "Restricts returned courses to those in which the student is enrolled. Can be the user's numeric ID or 'me'.",
          "examples": ["me", "1234567890"],
          "nullable": true,
          "title": "Student Id",
          "type": "string"
        },
        "teacherId": {
          "default": null,
          "description": "Restricts returned courses to those taught by the teacher. Can be the user's numeric ID or 'me'.",
          "examples": ["me", "0987654321"],
          "nullable": true,
          "title": "Teacher Id",
          "type": "string"
        }
      },
      "title": "CoursesListRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "courses": {
              "default": null,
              "description": "List of courses that match the request.",
              "items": {
                "properties": {
                  "alternateLink": {
                    "default": null,
                    "description": "URL to view the course in Classroom.",
                    "nullable": true,
                    "title": "Alternate Link",
                    "type": "string"
                  },
                  "calendarId": {
                    "default": null,
                    "description": "Primary calendar ID for the course.",
                    "nullable": true,
                    "title": "Calendar Id",
                    "type": "string"
                  },
                  "courseState": {
                    "default": null,
                    "description": "Current state of the course.",
                    "enum": [
                      "COURSE_STATE_UNSPECIFIED",
                      "ACTIVE",
                      "ARCHIVED",
                      "PROVISIONED",
                      "DECLINED"
                    ],
                    "nullable": true,
                    "title": "Course State",
                    "type": "string"
                  },
                  "creationTime": {
                    "default": null,
                    "description": "Creation time in RFC3339 UTC format.",
                    "nullable": true,
                    "title": "Creation Time",
                    "type": "string"
                  },
                  "description": {
                    "default": null,
                    "description": "Optional detailed description of the course.",
                    "nullable": true,
                    "title": "Description",
                    "type": "string"
                  },
                  "descriptionHeading": {
                    "default": null,
                    "description": "Heading for the course description.",
                    "nullable": true,
                    "title": "Description Heading",
                    "type": "string"
                  },
                  "enrollmentCode": {
                    "default": null,
                    "description": "Enrollment code to join the course.",
                    "nullable": true,
                    "title": "Enrollment Code",
                    "type": "string"
                  },
                  "id": {
                    "default": null,
                    "description": "Unique identifier for the course.",
                    "nullable": true,
                    "title": "Id",
                    "type": "string"
                  },
                  "name": {
                    "default": null,
                    "description": "Name of the course.",
                    "nullable": true,
                    "title": "Name",
                    "type": "string"
                  },
                  "ownerId": {
                    "default": null,
                    "description": "User ID of the course owner.",
                    "nullable": true,
                    "title": "Owner Id",
                    "type": "string"
                  },
                  "room": {
                    "default": null,
                    "description": "Physical location or room designation.",
                    "nullable": true,
                    "title": "Room",
                    "type": "string"
                  },
                  "section": {
                    "default": null,
                    "description": "Section of the course, e.g., 'Period 2'.",
                    "nullable": true,
                    "title": "Section",
                    "type": "string"
                  },
                  "studentGroupEmail": {
                    "default": null,
                    "description": "Email address of the student group for the course.",
                    "nullable": true,
                    "title": "Student Group Email",
                    "type": "string"
                  },
                  "teacherGroupEmail": {
                    "default": null,
                    "description": "Email address of the teacher group for the course.",
                    "nullable": true,
                    "title": "Teacher Group Email",
                    "type": "string"
                  },
                  "updateTime": {
                    "default": null,
                    "description": "Last update time in RFC3339 UTC format.",
                    "nullable": true,
                    "title": "Update Time",
                    "type": "string"
                  }
                },
                "title": "Course",
                "type": "object"
              },
              "nullable": true,
              "title": "Courses",
              "type": "array"
            },
            "nextPageToken": {
              "default": null,
              "description": "Token to retrieve the next page of results.",
              "nullable": true,
              "title": "Next Page Token",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CoursesListResponseWrapper",
      "type": "object"
    },
    "description": "Tool to list all courses accessible to the authenticated user. use when you need a paginated list of courses.",
    "tags": ["courses", "readOnlyHint", "openWorldHint", "important", "Courses"]
  },
  {
    "available_versions": ["latest"],
    "name": "Patch Course",
    "slug": "GOOGLE_CLASSROOM_COURSES_PATCH",
    "input_parameters": {
      "description": "Request model for patching a Course. Only specified fields in updateMask will be changed.",
      "properties": {
        "courseState": {
          "default": null,
          "description": "New state of the course.",
          "enum": ["COURSE_STATE_UNSPECIFIED", "ACTIVE", "ARCHIVED", "PROVISIONED", "DECLINED"],
          "nullable": true,
          "title": "Course State",
          "type": "string"
        },
        "description": {
          "default": null,
          "description": "New detailed description of the course.",
          "nullable": true,
          "title": "Description",
          "type": "string"
        },
        "descriptionHeading": {
          "default": null,
          "description": "New heading for the course description.",
          "nullable": true,
          "title": "Description Heading",
          "type": "string"
        },
        "id": {
          "description": "Identifier of the course to update.",
          "examples": ["1234567890"],
          "title": "Id",
          "type": "string"
        },
        "name": {
          "default": null,
          "description": "New name of the course.",
          "examples": ["Biology 101"],
          "nullable": true,
          "title": "Name",
          "type": "string"
        },
        "ownerId": {
          "default": null,
          "description": "New owner user ID for the course.",
          "nullable": true,
          "title": "Owner Id",
          "type": "string"
        },
        "room": {
          "default": null,
          "description": "New room/location for the course.",
          "examples": ["Room A"],
          "nullable": true,
          "title": "Room",
          "type": "string"
        },
        "section": {
          "default": null,
          "description": "New section of the course.",
          "examples": ["Period 3"],
          "nullable": true,
          "title": "Section",
          "type": "string"
        },
        "updateMask": {
          "description": "Comma-separated list of fields to update. E.g., 'name,section'.",
          "examples": ["name,section"],
          "title": "Update Mask",
          "type": "string"
        }
      },
      "required": ["id", "updateMask"],
      "title": "CoursesPatchRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "alternateLink": {
              "default": null,
              "description": "URL to view the course in Classroom.",
              "nullable": true,
              "title": "Alternate Link",
              "type": "string"
            },
            "calendarId": {
              "default": null,
              "description": "Primary calendar ID for the course.",
              "nullable": true,
              "title": "Calendar Id",
              "type": "string"
            },
            "courseState": {
              "default": null,
              "description": "State of the course.",
              "enum": ["COURSE_STATE_UNSPECIFIED", "ACTIVE", "ARCHIVED", "PROVISIONED", "DECLINED"],
              "nullable": true,
              "title": "Course State",
              "type": "string"
            },
            "creationTime": {
              "default": null,
              "description": "Creation time in RFC3339 UTC format.",
              "nullable": true,
              "title": "Creation Time",
              "type": "string"
            },
            "description": {
              "default": null,
              "description": "Detailed description of the course.",
              "nullable": true,
              "title": "Description",
              "type": "string"
            },
            "descriptionHeading": {
              "default": null,
              "description": "Heading for the course description.",
              "nullable": true,
              "title": "Description Heading",
              "type": "string"
            },
            "enrollmentCode": {
              "default": null,
              "description": "Enrollment code to join the course.",
              "nullable": true,
              "title": "Enrollment Code",
              "type": "string"
            },
            "id": {
              "default": null,
              "description": "Unique identifier for the course.",
              "nullable": true,
              "title": "Id",
              "type": "string"
            },
            "name": {
              "default": null,
              "description": "Name of the course.",
              "nullable": true,
              "title": "Name",
              "type": "string"
            },
            "ownerId": {
              "default": null,
              "description": "User ID of the course owner.",
              "nullable": true,
              "title": "Owner Id",
              "type": "string"
            },
            "room": {
              "default": null,
              "description": "Physical location or room of the course.",
              "nullable": true,
              "title": "Room",
              "type": "string"
            },
            "section": {
              "default": null,
              "description": "Section of the course, e.g., 'Period 2'.",
              "nullable": true,
              "title": "Section",
              "type": "string"
            },
            "studentGroupEmail": {
              "default": null,
              "description": "Email address of the student group for the course.",
              "nullable": true,
              "title": "Student Group Email",
              "type": "string"
            },
            "teacherGroupEmail": {
              "default": null,
              "description": "Email address of the teacher group for the course.",
              "nullable": true,
              "title": "Teacher Group Email",
              "type": "string"
            },
            "updateTime": {
              "default": null,
              "description": "Last update time in RFC3339 UTC format.",
              "nullable": true,
              "title": "Update Time",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CoursesPatchResponseWrapper",
      "type": "object"
    },
    "description": "Tool to update one or more fields of a classroom course. use after retrieving course details and confirming fields to update.",
    "tags": ["courses"]
  },
  {
    "available_versions": ["latest"],
    "name": "List Student Guardians",
    "slug": "GOOGLE_CLASSROOM_COURSES_STUDENTS_GUARDIANS_LIST",
    "input_parameters": {
      "description": "Request model for listing guardians of a student in a course.",
      "properties": {
        "courseId": {
          "description": "Identifier of the course. Can be the Classroom-assigned ID or an alias.",
          "examples": ["1234567890", "alias"],
          "title": "Course Id",
          "type": "string"
        },
        "pageSize": {
          "default": null,
          "description": "Maximum number of guardians to return. Must be between 1 and 100. Defaults to server's default.",
          "examples": [20],
          "maximum": 100,
          "minimum": 1,
          "nullable": true,
          "title": "Page Size",
          "type": "integer"
        },
        "pageToken": {
          "default": null,
          "description": "Token identifying which page of results to return.",
          "examples": ["Cg0KC2NvdXJzZVRva2VuEjgKIghhYmNkZWY"],
          "nullable": true,
          "title": "Page Token",
          "type": "string"
        },
        "studentId": {
          "description": "Identifier of the student (the user's id or email address, or 'me').",
          "examples": ["student123", "student@example.com", "me"],
          "title": "Student Id",
          "type": "string"
        }
      },
      "required": ["courseId", "studentId"],
      "title": "CoursesStudentsGuardiansListRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "guardians": {
              "default": null,
              "description": "List of guardians for the specified student in the course.",
              "items": {
                "description": "Guardian resource.",
                "properties": {
                  "guardianId": {
                    "default": null,
                    "description": "The unique identifier for the guardian.",
                    "nullable": true,
                    "title": "Guardian Id",
                    "type": "string"
                  },
                  "guardianProfile": {
                    "additionalProperties": false,
                    "default": null,
                    "description": "Profile details for the guardian.",
                    "nullable": true,
                    "properties": {
                      "emailAddress": {
                        "default": null,
                        "description": "Email address of the guardian.",
                        "nullable": true,
                        "title": "Email Address",
                        "type": "string"
                      },
                      "id": {
                        "default": null,
                        "description": "Identifier of the guardian.",
                        "nullable": true,
                        "title": "Id",
                        "type": "string"
                      },
                      "name": {
                        "additionalProperties": false,
                        "default": null,
                        "description": "Guardian's name details.",
                        "nullable": true,
                        "properties": {
                          "familyName": {
                            "default": null,
                            "description": "Guardian's family name.",
                            "nullable": true,
                            "title": "Family Name",
                            "type": "string"
                          },
                          "fullName": {
                            "default": null,
                            "description": "Guardian's full name.",
                            "nullable": true,
                            "title": "Full Name",
                            "type": "string"
                          },
                          "givenName": {
                            "default": null,
                            "description": "Guardian's given name.",
                            "nullable": true,
                            "title": "Given Name",
                            "type": "string"
                          }
                        },
                        "title": "Name",
                        "type": "object"
                      },
                      "photoUrl": {
                        "default": null,
                        "description": "Photo URL of the guardian profile.",
                        "nullable": true,
                        "title": "Photo Url",
                        "type": "string"
                      }
                    },
                    "title": "GuardianProfile",
                    "type": "object"
                  },
                  "invitationId": {
                    "default": null,
                    "description": "ID of the invitation sent to guardian.",
                    "nullable": true,
                    "title": "Invitation Id",
                    "type": "string"
                  },
                  "invitedEmailAddress": {
                    "default": null,
                    "description": "Email address to which the invitation was sent.",
                    "nullable": true,
                    "title": "Invited Email Address",
                    "type": "string"
                  },
                  "studentId": {
                    "default": null,
                    "description": "Identifier of the student linked to the guardian.",
                    "nullable": true,
                    "title": "Student Id",
                    "type": "string"
                  }
                },
                "title": "Guardian",
                "type": "object"
              },
              "nullable": true,
              "title": "Guardians",
              "type": "array"
            },
            "nextPageToken": {
              "default": null,
              "description": "Token to retrieve the next page of results.",
              "nullable": true,
              "title": "Next Page Token",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CoursesStudentsGuardiansListResponseWrapper",
      "type": "object"
    },
    "description": "Tool to list guardians of a student in a course. use when you need to retrieve and paginate guardians for a given student in a course.",
    "tags": ["courses", "students", "guardians", "readOnlyHint", "openWorldHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "List Course Students",
    "slug": "GOOGLE_CLASSROOM_COURSES_STUDENTS_LIST",
    "input_parameters": {
      "description": "Request model for listing students in a course.",
      "properties": {
        "courseId": {
          "description": "Identifier of the course whose students should be listed. Can be the Classroom-assigned identifier or an alias.",
          "examples": ["1234567890"],
          "title": "Course Id",
          "type": "string"
        },
        "pageSize": {
          "default": null,
          "description": "Maximum number of students to return. Must be between 1 and 100.",
          "examples": [100],
          "maximum": 100,
          "minimum": 1,
          "nullable": true,
          "title": "Page Size",
          "type": "integer"
        },
        "pageToken": {
          "default": null,
          "description": "Token specifying which page of results to return. Obtain from a previous list call's `nextPageToken`.",
          "examples": ["Cg0KC2NvdXJzZVRva2VuEjgKIghhYmNkZWY"],
          "nullable": true,
          "title": "Page Token",
          "type": "string"
        }
      },
      "required": ["courseId"],
      "title": "CoursesStudentsListRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "nextPageToken": {
              "default": null,
              "description": "Token to retrieve the next page of results.",
              "nullable": true,
              "title": "Next Page Token",
              "type": "string"
            },
            "students": {
              "default": null,
              "description": "List of students in the specified course.",
              "items": {
                "description": "Represents a student in a course.",
                "properties": {
                  "profile": {
                    "additionalProperties": false,
                    "default": null,
                    "description": "Profile information of a student.",
                    "nullable": true,
                    "properties": {
                      "emailAddress": {
                        "default": null,
                        "description": "Email address of the student.",
                        "nullable": true,
                        "title": "Email Address",
                        "type": "string"
                      },
                      "id": {
                        "default": null,
                        "description": "Identifier for the user.",
                        "nullable": true,
                        "title": "Id",
                        "type": "string"
                      },
                      "name": {
                        "additionalProperties": false,
                        "default": null,
                        "description": "Name of a person.",
                        "nullable": true,
                        "properties": {
                          "familyName": {
                            "default": null,
                            "description": "Family (last) name of the student.",
                            "nullable": true,
                            "title": "Family Name",
                            "type": "string"
                          },
                          "fullName": {
                            "default": null,
                            "description": "Full name of the student.",
                            "nullable": true,
                            "title": "Full Name",
                            "type": "string"
                          },
                          "givenName": {
                            "default": null,
                            "description": "Given (first) name of the student.",
                            "nullable": true,
                            "title": "Given Name",
                            "type": "string"
                          }
                        },
                        "title": "Name",
                        "type": "object"
                      },
                      "photoUrl": {
                        "default": null,
                        "description": "URL of the student's profile photo.",
                        "nullable": true,
                        "title": "Photo Url",
                        "type": "string"
                      }
                    },
                    "title": "StudentProfile",
                    "type": "object"
                  },
                  "userId": {
                    "default": null,
                    "description": "Identifier for the student.",
                    "nullable": true,
                    "title": "User Id",
                    "type": "string"
                  }
                },
                "title": "Student",
                "type": "object"
              },
              "nullable": true,
              "title": "Students",
              "type": "array"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CoursesStudentsListResponseWrapper",
      "type": "object"
    },
    "description": "Tool to list students in a course. use after you have the course id to page through enrolled students.",
    "tags": ["students", "rosters", "Courses"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get Teacher",
    "slug": "GOOGLE_CLASSROOM_COURSES_TEACHERS_GET",
    "input_parameters": {
      "description": "Request model for retrieving a teacher by course and user IDs.",
      "properties": {
        "courseId": {
          "description": "Identifier of the course. This identifier can be either the Classroom-assigned ID or an alias.",
          "examples": ["12345", "alias"],
          "title": "Course Id",
          "type": "string"
        },
        "fields": {
          "default": null,
          "description": "Selector specifying which fields to include in a partial response.",
          "examples": ["courseId,userId,emailAddress"],
          "nullable": true,
          "title": "Fields",
          "type": "string"
        },
        "quotaUser": {
          "default": null,
          "description": "Arbitrary string assigned to a user for quota purposes (server-side applications only).",
          "examples": ["user-1234"],
          "nullable": true,
          "title": "Quota User",
          "type": "string"
        },
        "userId": {
          "description": "Identifier of the teacher to retrieve. Can be the teacher's numeric user ID or email address.",
          "examples": ["78910", "jane.doe@example.com"],
          "title": "User Id",
          "type": "string"
        }
      },
      "required": ["courseId", "userId"],
      "title": "CoursesTeachersGetRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "courseId": {
              "description": "Identifier of the course",
              "title": "Course Id",
              "type": "string"
            },
            "emailAddress": {
              "default": null,
              "description": "Email address of the teacher",
              "nullable": true,
              "title": "Email Address",
              "type": "string"
            },
            "profile": {
              "additionalProperties": false,
              "description": "Global user profile information",
              "properties": {
                "emailAddress": {
                  "default": null,
                  "description": "User's email address",
                  "nullable": true,
                  "title": "Email Address",
                  "type": "string"
                },
                "id": {
                  "description": "Global identifier of the user profile",
                  "title": "Id",
                  "type": "string"
                },
                "name": {
                  "additionalProperties": false,
                  "default": null,
                  "description": "Structured name details for a user profile.",
                  "nullable": true,
                  "properties": {
                    "familyName": {
                      "default": null,
                      "description": "User's last name",
                      "nullable": true,
                      "title": "Family Name",
                      "type": "string"
                    },
                    "fullName": {
                      "default": null,
                      "description": "User's full name",
                      "nullable": true,
                      "title": "Full Name",
                      "type": "string"
                    },
                    "givenName": {
                      "default": null,
                      "description": "User's first name",
                      "nullable": true,
                      "title": "Given Name",
                      "type": "string"
                    }
                  },
                  "title": "UserProfileName",
                  "type": "object"
                },
                "photoUrl": {
                  "default": null,
                  "description": "URL of the user's profile photo",
                  "nullable": true,
                  "title": "Photo Url",
                  "type": "string"
                }
              },
              "required": ["id"],
              "title": "Profile",
              "type": "object"
            },
            "userId": {
              "description": "Identifier of the user",
              "title": "User Id",
              "type": "string"
            }
          },
          "required": ["courseId", "userId", "profile"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CoursesTeachersGetResponseWrapper",
      "type": "object"
    },
    "description": "Tool to get teacher enrollment. use when you need to retrieve a specific teacher in a course by courseid and userid.",
    "tags": ["courses", "teachers", "readOnlyHint", "openWorldHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "List Course Teachers",
    "slug": "GOOGLE_CLASSROOM_COURSES_TEACHERS_LIST",
    "input_parameters": {
      "description": "Request model for listing teachers in a course.",
      "properties": {
        "courseId": {
          "description": "Identifier of the course whose teachers should be listed.",
          "examples": ["1234567890"],
          "title": "Course Id",
          "type": "string"
        },
        "pageSize": {
          "default": null,
          "description": "Maximum number of teachers to return. Must be between 1 and 100.",
          "examples": [30],
          "maximum": 100,
          "minimum": 1,
          "nullable": true,
          "title": "Page Size",
          "type": "integer"
        },
        "pageToken": {
          "default": null,
          "description": "Token specifying which page of results to return.",
          "examples": ["ABCDEF123456"],
          "nullable": true,
          "title": "Page Token",
          "type": "string"
        }
      },
      "required": ["courseId"],
      "title": "CoursesTeachersListRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "nextPageToken": {
              "default": null,
              "description": "Token to retrieve the next page of results.",
              "nullable": true,
              "title": "Next Page Token",
              "type": "string"
            },
            "teachers": {
              "default": null,
              "description": "List of teachers in the specified course.",
              "items": {
                "description": "Represents a teacher in a course.",
                "properties": {
                  "courseId": {
                    "default": null,
                    "description": "Identifier of the course.",
                    "nullable": true,
                    "title": "Course Id",
                    "type": "string"
                  },
                  "profile": {
                    "additionalProperties": false,
                    "default": null,
                    "description": "Profile information for a user.",
                    "nullable": true,
                    "properties": {
                      "emailAddress": {
                        "default": null,
                        "description": "User's email address.",
                        "nullable": true,
                        "title": "Email Address",
                        "type": "string"
                      },
                      "id": {
                        "default": null,
                        "description": "Global user identifier.",
                        "nullable": true,
                        "title": "Id",
                        "type": "string"
                      },
                      "name": {
                        "additionalProperties": false,
                        "default": null,
                        "description": "Name of a person.",
                        "nullable": true,
                        "properties": {
                          "familyName": {
                            "default": null,
                            "description": "Family (last) name of the user.",
                            "nullable": true,
                            "title": "Family Name",
                            "type": "string"
                          },
                          "fullName": {
                            "default": null,
                            "description": "Full name of the user.",
                            "nullable": true,
                            "title": "Full Name",
                            "type": "string"
                          },
                          "givenName": {
                            "default": null,
                            "description": "Given (first) name of the user.",
                            "nullable": true,
                            "title": "Given Name",
                            "type": "string"
                          }
                        },
                        "title": "Name",
                        "type": "object"
                      }
                    },
                    "title": "UserProfile",
                    "type": "object"
                  },
                  "userId": {
                    "default": null,
                    "description": "Identifier for the teacher user.",
                    "nullable": true,
                    "title": "User Id",
                    "type": "string"
                  }
                },
                "title": "Teacher",
                "type": "object"
              },
              "nullable": true,
              "title": "Teachers",
              "type": "array"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CoursesTeachersListResponseWrapper",
      "type": "object"
    },
    "description": "Tool to list teachers in a course. use after you have the course id to page through enrolled teachers.",
    "tags": ["teachers", "rosters", "Courses"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create Course Topic",
    "slug": "GOOGLE_CLASSROOM_COURSES_TOPICS_CREATE",
    "input_parameters": {
      "description": "Request model for creating a course topic.",
      "properties": {
        "courseId": {
          "description": "Identifier of the course to create the topic in.",
          "examples": ["1234567890"],
          "title": "Course Id",
          "type": "string"
        },
        "name": {
          "description": "Name of the topic.",
          "examples": ["Homework"],
          "title": "Name",
          "type": "string"
        }
      },
      "required": ["courseId", "name"],
      "title": "CoursesTopicsCreateRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "courseId": {
              "default": null,
              "description": "Identifier of the course for the topic.",
              "nullable": true,
              "title": "Course Id",
              "type": "string"
            },
            "id": {
              "default": null,
              "description": "Identifier for the topic.",
              "nullable": true,
              "title": "Id",
              "type": "string"
            },
            "name": {
              "default": null,
              "description": "Name of the topic.",
              "nullable": true,
              "title": "Name",
              "type": "string"
            },
            "updateTime": {
              "default": null,
              "description": "Timestamp when the topic was last modified in RFC3339 UTC format.",
              "nullable": true,
              "title": "Update Time",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CoursesTopicsCreateResponseWrapper",
      "type": "object"
    },
    "description": "Tool to create a course topic. use when you need to organize course content into named sections.",
    "tags": ["coursesTopics", "writeOnlyHint", "Courses"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete Course Topic",
    "slug": "GOOGLE_CLASSROOM_COURSES_TOPICS_DELETE",
    "input_parameters": {
      "description": "Request model for deleting a course topic.",
      "properties": {
        "courseId": {
          "description": "Identifier of the course.",
          "examples": ["1234567890"],
          "title": "Course Id",
          "type": "string"
        },
        "id": {
          "description": "Identifier of the topic to delete.",
          "examples": ["abcdef123456"],
          "title": "Id",
          "type": "string"
        }
      },
      "required": ["courseId", "id"],
      "title": "CoursesTopicsDeleteRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {},
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CoursesTopicsDeleteResponseWrapper",
      "type": "object"
    },
    "description": "Tool to delete a course topic. use when you need to remove a topic from a course after confirming the course and topic ids.",
    "tags": ["courses", "topics"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get Course Topic",
    "slug": "GOOGLE_CLASSROOM_COURSES_TOPICS_GET",
    "input_parameters": {
      "description": "Request model for retrieving a course topic.",
      "properties": {
        "courseId": {
          "description": "Identifier of the course. This can be the Classroom-assigned identifier or an alias.",
          "examples": ["1234567890"],
          "title": "Course Id",
          "type": "string"
        },
        "id": {
          "description": "Identifier of the topic to retrieve.",
          "examples": ["abcdef123456"],
          "title": "Id",
          "type": "string"
        }
      },
      "required": ["courseId", "id"],
      "title": "CoursesTopicsGetRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "courseId": {
              "default": null,
              "description": "Identifier of the course the topic belongs to.",
              "nullable": true,
              "title": "Course Id",
              "type": "string"
            },
            "id": {
              "default": null,
              "description": "Identifier of the topic.",
              "nullable": true,
              "title": "Id",
              "type": "string"
            },
            "name": {
              "default": null,
              "description": "Name of the topic.",
              "nullable": true,
              "title": "Name",
              "type": "string"
            },
            "topicId": {
              "default": null,
              "description": "Deprecated. Use 'id' instead.",
              "nullable": true,
              "title": "Topic Id",
              "type": "string"
            },
            "updateTime": {
              "default": null,
              "description": "Last update timestamp in RFC3339 UTC \"Zulu\" format.",
              "nullable": true,
              "title": "Update Time",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CoursesTopicsGetResponseWrapper",
      "type": "object"
    },
    "description": "Tool to get a course topic. use when you need to retrieve details of a specific course topic by id after confirming the course and topic ids.",
    "tags": ["courses", "topics"]
  },
  {
    "available_versions": ["latest"],
    "name": "List Course Topics",
    "slug": "GOOGLE_CLASSROOM_COURSES_TOPICS_LIST",
    "input_parameters": {
      "description": "Request model for listing topics in a course.",
      "properties": {
        "courseId": {
          "description": "Identifier of the course (Classroom-assigned ID or alias).",
          "examples": ["1234567890"],
          "title": "Course Id",
          "type": "string"
        },
        "pageSize": {
          "default": null,
          "description": "Maximum number of topics to return; zero means no limit.",
          "examples": [30],
          "minimum": 0,
          "nullable": true,
          "title": "Page Size",
          "type": "integer"
        },
        "pageToken": {
          "default": null,
          "description": "Token identifying which page of results to return.",
          "examples": ["abcdef123456"],
          "nullable": true,
          "title": "Page Token",
          "type": "string"
        }
      },
      "required": ["courseId"],
      "title": "CoursesTopicsListRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "nextPageToken": {
              "default": null,
              "description": "Token for the next page of results, or empty if none.",
              "nullable": true,
              "title": "Next Page Token",
              "type": "string"
            },
            "topics": {
              "default": null,
              "description": "List of topics that match the request.",
              "items": {
                "description": "A topic in a course.",
                "properties": {
                  "courseId": {
                    "default": null,
                    "description": "Identifier of the course for the topic.",
                    "nullable": true,
                    "title": "Course Id",
                    "type": "string"
                  },
                  "id": {
                    "default": null,
                    "description": "Identifier for the topic.",
                    "nullable": true,
                    "title": "Id",
                    "type": "string"
                  },
                  "name": {
                    "default": null,
                    "description": "Name of the topic.",
                    "nullable": true,
                    "title": "Name",
                    "type": "string"
                  },
                  "updateTime": {
                    "default": null,
                    "description": "Timestamp when the topic was last modified in RFC3339 UTC format.",
                    "nullable": true,
                    "title": "Update Time",
                    "type": "string"
                  }
                },
                "title": "Topic",
                "type": "object"
              },
              "nullable": true,
              "title": "Topics",
              "type": "array"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CoursesTopicsListResponseWrapper",
      "type": "object"
    },
    "description": "Tool to list topics in a course. use when you have confirmed the courseid and need to retrieve its topics.",
    "tags": ["coursesTopics", "readOnlyHint", "Courses"]
  },
  {
    "available_versions": ["latest"],
    "name": "Patch Course Topic",
    "slug": "GOOGLE_CLASSROOM_COURSES_TOPICS_PATCH",
    "input_parameters": {
      "description": "Request model for patching a course topic.",
      "properties": {
        "courseId": {
          "description": "Identifier of the course.",
          "examples": ["1234567890"],
          "title": "Course Id",
          "type": "string"
        },
        "id": {
          "description": "Identifier of the topic.",
          "examples": ["topic123"],
          "title": "Id",
          "type": "string"
        },
        "name": {
          "default": null,
          "description": "New display name of the topic.",
          "examples": ["Homework 1"],
          "nullable": true,
          "title": "Name",
          "type": "string"
        },
        "updateMask": {
          "default": null,
          "description": "Comma-separated list of fields to update. Currently only 'name' supported.",
          "examples": ["name"],
          "nullable": true,
          "title": "Update Mask",
          "type": "string"
        }
      },
      "required": ["courseId", "id"],
      "title": "CoursesTopicsPatchRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "courseId": {
              "default": null,
              "description": "Identifier of the course.",
              "nullable": true,
              "title": "Course Id",
              "type": "string"
            },
            "name": {
              "default": null,
              "description": "Name of the topic.",
              "nullable": true,
              "title": "Name",
              "type": "string"
            },
            "topicId": {
              "default": null,
              "description": "Identifier of the topic.",
              "nullable": true,
              "title": "Topic Id",
              "type": "string"
            },
            "updateTime": {
              "default": null,
              "description": "Last update time in RFC3339 UTC format.",
              "nullable": true,
              "title": "Update Time",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CoursesTopicsPatchResponseWrapper",
      "type": "object"
    },
    "description": "Tool to update fields of a course topic. use when you need to rename a topic after confirming its current details.",
    "tags": ["courses", "topics"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create CourseWork",
    "slug": "GOOGLE_CLASSROOM_COURSE_WORK_CREATE",
    "input_parameters": {
      "description": "Request model for creating a new CourseWork item.",
      "properties": {
        "assignment": {
          "additionalProperties": true,
          "default": null,
          "description": "Assignment details if workType is ASSIGNMENT",
          "nullable": true,
          "title": "Assignment",
          "type": "object"
        },
        "courseId": {
          "description": "Identifier of the course",
          "title": "Course Id",
          "type": "string"
        },
        "description": {
          "default": null,
          "description": "Detailed description or instructions",
          "nullable": true,
          "title": "Description",
          "type": "string"
        },
        "dueDate": {
          "additionalProperties": false,
          "default": null,
          "description": "Date portion of coursework due date (year, month, day).",
          "nullable": true,
          "properties": {
            "day": {
              "description": "Day of month (1-31)",
              "maximum": 31,
              "minimum": 1,
              "title": "Day",
              "type": "integer"
            },
            "month": {
              "description": "Month of year (1-12)",
              "maximum": 12,
              "minimum": 1,
              "title": "Month",
              "type": "integer"
            },
            "year": {
              "description": "Year in YYYY format",
              "minimum": 1,
              "title": "Year",
              "type": "integer"
            }
          },
          "required": ["year", "month", "day"],
          "title": "DueDate",
          "type": "object"
        },
        "dueTime": {
          "additionalProperties": false,
          "default": null,
          "description": "Time portion of coursework due time (hours, minutes, seconds, nanos).",
          "nullable": true,
          "properties": {
            "hours": {
              "description": "Hour of day (0-23)",
              "maximum": 23,
              "minimum": 0,
              "title": "Hours",
              "type": "integer"
            },
            "minutes": {
              "description": "Minute of hour (0-59)",
              "maximum": 59,
              "minimum": 0,
              "title": "Minutes",
              "type": "integer"
            },
            "nanos": {
              "default": null,
              "description": "Fractional seconds in nanoseconds",
              "minimum": 0,
              "nullable": true,
              "title": "Nanos",
              "type": "integer"
            },
            "seconds": {
              "description": "Second of minute (0-59)",
              "maximum": 59,
              "minimum": 0,
              "title": "Seconds",
              "type": "integer"
            }
          },
          "required": ["hours", "minutes", "seconds"],
          "title": "DueTime",
          "type": "object"
        },
        "materials": {
          "default": null,
          "description": "Materials to attach to the coursework",
          "items": { "additionalProperties": true, "properties": {}, "type": "object" },
          "nullable": true,
          "title": "Materials",
          "type": "array"
        },
        "maxPoints": {
          "default": null,
          "description": "Maximum points available for the coursework",
          "minimum": 0,
          "nullable": true,
          "title": "Max Points",
          "type": "number"
        },
        "multipleChoiceQuestion": {
          "additionalProperties": false,
          "default": null,
          "description": "Details for multiple-choice question.",
          "nullable": true,
          "properties": {
            "choices": {
              "description": "List of possible answers; provide at least two choices",
              "items": { "properties": {}, "type": "string" },
              "title": "Choices",
              "type": "array"
            }
          },
          "required": ["choices"],
          "title": "MultipleChoiceQuestion",
          "type": "object"
        },
        "scheduledTime": {
          "default": null,
          "description": "RFC3339 timestamp to auto-publish the coursework",
          "nullable": true,
          "title": "Scheduled Time",
          "type": "string"
        },
        "shortAnswerQuestion": {
          "additionalProperties": false,
          "default": null,
          "description": "Details for short-answer question.",
          "nullable": true,
          "properties": {
            "grading": {
              "additionalProperties": true,
              "default": null,
              "description": "Additional grading options for short answer questions",
              "nullable": true,
              "title": "Grading",
              "type": "object"
            }
          },
          "title": "ShortAnswerQuestion",
          "type": "object"
        },
        "state": {
          "default": "PUBLISHED",
          "description": "Whether to save as draft or publish immediately",
          "enum": ["DRAFT", "PUBLISHED"],
          "title": "State",
          "type": "string"
        },
        "submissionModificationMode": {
          "default": null,
          "description": "Controls if students can edit submissions after turn-in",
          "enum": [
            "SUBMISSION_MODIFICATION_MODE_UNSPECIFIED",
            "MODIFIABLE_UNTIL_TURNED_IN",
            "MODIFIABLE"
          ],
          "nullable": true,
          "title": "Submission Modification Mode",
          "type": "string"
        },
        "title": { "description": "Title of the coursework", "title": "Title", "type": "string" },
        "topicId": {
          "default": null,
          "description": "Topic ID to organize coursework under",
          "nullable": true,
          "title": "Topic Id",
          "type": "string"
        },
        "workType": {
          "description": "Type of coursework being created",
          "enum": ["ASSIGNMENT", "SHORT_ANSWER_QUESTION", "MULTIPLE_CHOICE_QUESTION"],
          "title": "Work Type",
          "type": "string"
        }
      },
      "required": ["courseId", "title", "workType"],
      "title": "CourseWorkCreateRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "alternateLink": {
              "default": null,
              "description": "URL to view coursework in Classroom UI",
              "nullable": true,
              "title": "Alternate Link",
              "type": "string"
            },
            "assignment": {
              "additionalProperties": true,
              "default": null,
              "description": "Assignment details if applicable",
              "nullable": true,
              "title": "Assignment",
              "type": "object"
            },
            "courseId": {
              "description": "Course ID the coursework belongs to",
              "title": "Course Id",
              "type": "string"
            },
            "creationTime": {
              "description": "RFC3339 timestamp of creation",
              "title": "Creation Time",
              "type": "string"
            },
            "creatorUserId": {
              "default": null,
              "description": "User ID of the creator",
              "nullable": true,
              "title": "Creator User Id",
              "type": "string"
            },
            "description": {
              "default": null,
              "description": "Detailed description or instructions",
              "nullable": true,
              "title": "Description",
              "type": "string"
            },
            "dueDate": {
              "additionalProperties": false,
              "default": null,
              "description": "Date portion of coursework due date (year, month, day).",
              "nullable": true,
              "properties": {
                "day": {
                  "description": "Day of month (1-31)",
                  "maximum": 31,
                  "minimum": 1,
                  "title": "Day",
                  "type": "integer"
                },
                "month": {
                  "description": "Month of year (1-12)",
                  "maximum": 12,
                  "minimum": 1,
                  "title": "Month",
                  "type": "integer"
                },
                "year": {
                  "description": "Year in YYYY format",
                  "minimum": 1,
                  "title": "Year",
                  "type": "integer"
                }
              },
              "required": ["year", "month", "day"],
              "title": "DueDate",
              "type": "object"
            },
            "dueTime": {
              "additionalProperties": false,
              "default": null,
              "description": "Time portion of coursework due time (hours, minutes, seconds, nanos).",
              "nullable": true,
              "properties": {
                "hours": {
                  "description": "Hour of day (0-23)",
                  "maximum": 23,
                  "minimum": 0,
                  "title": "Hours",
                  "type": "integer"
                },
                "minutes": {
                  "description": "Minute of hour (0-59)",
                  "maximum": 59,
                  "minimum": 0,
                  "title": "Minutes",
                  "type": "integer"
                },
                "nanos": {
                  "default": null,
                  "description": "Fractional seconds in nanoseconds",
                  "minimum": 0,
                  "nullable": true,
                  "title": "Nanos",
                  "type": "integer"
                },
                "seconds": {
                  "description": "Second of minute (0-59)",
                  "maximum": 59,
                  "minimum": 0,
                  "title": "Seconds",
                  "type": "integer"
                }
              },
              "required": ["hours", "minutes", "seconds"],
              "title": "DueTime",
              "type": "object"
            },
            "id": {
              "description": "Identifier for the coursework",
              "title": "Id",
              "type": "string"
            },
            "materials": {
              "default": null,
              "description": "Materials attached to the coursework",
              "items": { "additionalProperties": true, "properties": {}, "type": "object" },
              "nullable": true,
              "title": "Materials",
              "type": "array"
            },
            "maxPoints": {
              "default": null,
              "description": "Maximum points available",
              "nullable": true,
              "title": "Max Points",
              "type": "number"
            },
            "multipleChoiceQuestion": {
              "additionalProperties": false,
              "default": null,
              "description": "Details for multiple-choice question.",
              "nullable": true,
              "properties": {
                "choices": {
                  "description": "List of possible answers; provide at least two choices",
                  "items": { "properties": {}, "type": "string" },
                  "title": "Choices",
                  "type": "array"
                }
              },
              "required": ["choices"],
              "title": "MultipleChoiceQuestion",
              "type": "object"
            },
            "scheduledTime": {
              "default": null,
              "description": "RFC3339 timestamp when coursework is scheduled",
              "nullable": true,
              "title": "Scheduled Time",
              "type": "string"
            },
            "shortAnswerQuestion": {
              "additionalProperties": false,
              "default": null,
              "description": "Details for short-answer question.",
              "nullable": true,
              "properties": {
                "grading": {
                  "additionalProperties": true,
                  "default": null,
                  "description": "Additional grading options for short answer questions",
                  "nullable": true,
                  "title": "Grading",
                  "type": "object"
                }
              },
              "title": "ShortAnswerQuestion",
              "type": "object"
            },
            "state": {
              "description": "Current state of the coursework",
              "enum": ["DRAFT", "PUBLISHED"],
              "title": "State",
              "type": "string"
            },
            "submissionModificationMode": {
              "default": null,
              "description": "Submission modification mode",
              "enum": [
                "SUBMISSION_MODIFICATION_MODE_UNSPECIFIED",
                "MODIFIABLE_UNTIL_TURNED_IN",
                "MODIFIABLE"
              ],
              "nullable": true,
              "title": "Submission Modification Mode",
              "type": "string"
            },
            "title": {
              "description": "Title of the coursework",
              "title": "Title",
              "type": "string"
            },
            "topicId": {
              "default": null,
              "description": "Topic ID for the coursework",
              "nullable": true,
              "title": "Topic Id",
              "type": "string"
            },
            "updateTime": {
              "description": "RFC3339 timestamp of last update",
              "title": "Update Time",
              "type": "string"
            },
            "workType": {
              "description": "Type of the coursework",
              "enum": ["ASSIGNMENT", "SHORT_ANSWER_QUESTION", "MULTIPLE_CHOICE_QUESTION"],
              "title": "Work Type",
              "type": "string"
            }
          },
          "required": [
            "id",
            "courseId",
            "title",
            "state",
            "creationTime",
            "updateTime",
            "workType"
          ],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CourseWorkCreateResponseWrapper",
      "type": "object"
    },
    "description": "Tool to create a coursework item in a course. use when you need to assign an assignment or question to students immediately or on a schedule.",
    "tags": ["courseWork", "create"]
  },
  {
    "available_versions": ["latest"],
    "name": "Delete CourseWork",
    "slug": "GOOGLE_CLASSROOM_COURSE_WORK_DELETE",
    "input_parameters": {
      "description": "Request model for deleting a specific CourseWork.",
      "properties": {
        "courseId": {
          "description": "Identifier of the course.",
          "examples": ["1234567890"],
          "title": "Course Id",
          "type": "string"
        },
        "id": {
          "description": "Identifier of the coursework item to delete.",
          "examples": ["987654321"],
          "title": "Id",
          "type": "string"
        }
      },
      "required": ["courseId", "id"],
      "title": "CourseWorkDeleteRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {},
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CourseWorkDeleteResponseWrapper",
      "type": "object"
    },
    "description": "Tool to delete a specific coursework. use when you need to remove a coursework item from a course after confirming the ids.",
    "tags": ["courseWork", "delete"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get CourseWork",
    "slug": "GOOGLE_CLASSROOM_COURSE_WORK_GET",
    "input_parameters": {
      "description": "Request model for retrieving a specific coursework by course and coursework IDs.",
      "properties": {
        "courseId": {
          "description": "Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.",
          "examples": ["12345", "alias"],
          "title": "Course Id",
          "type": "string"
        },
        "id": {
          "description": "Identifier of the coursework item to retrieve.",
          "examples": ["cw123"],
          "title": "Id",
          "type": "string"
        }
      },
      "required": ["courseId", "id"],
      "title": "CourseWorkGetRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "alternateLink": {
              "default": null,
              "description": "Absolute link to view the coursework in Classroom UI.",
              "nullable": true,
              "title": "Alternate Link",
              "type": "string"
            },
            "assigneeMode": {
              "default": null,
              "description": "Assignment mode for the coursework.",
              "enum": ["ASSIGNEE_MODE_UNSPECIFIED", "ALL_STUDENTS", "INDIVIDUAL_STUDENTS"],
              "nullable": true,
              "title": "Assignee Mode",
              "type": "string"
            },
            "associatedWithDeveloper": {
              "default": null,
              "description": "Flag indicating developer association.",
              "nullable": true,
              "title": "Associated With Developer",
              "type": "boolean"
            },
            "courseId": {
              "default": null,
              "description": "Identifier of the course.",
              "nullable": true,
              "title": "Course Id",
              "type": "string"
            },
            "creationTime": {
              "default": null,
              "description": "Creation time in RFC3339 UTC format.",
              "nullable": true,
              "title": "Creation Time",
              "type": "string"
            },
            "creatorUserId": {
              "default": null,
              "description": "User ID of the coursework creator.",
              "nullable": true,
              "title": "Creator User Id",
              "type": "string"
            },
            "description": {
              "default": null,
              "description": "Description of the coursework.",
              "nullable": true,
              "title": "Description",
              "type": "string"
            },
            "dueDate": {
              "additionalProperties": false,
              "default": null,
              "description": "Due date of the coursework.",
              "nullable": true,
              "properties": {
                "day": {
                  "description": "Day part of the due date (1-31).",
                  "maximum": 31,
                  "minimum": 1,
                  "title": "Day",
                  "type": "integer"
                },
                "month": {
                  "description": "Month part of the due date (1-12).",
                  "maximum": 12,
                  "minimum": 1,
                  "title": "Month",
                  "type": "integer"
                },
                "year": {
                  "description": "Year part of the due date.",
                  "title": "Year",
                  "type": "integer"
                }
              },
              "required": ["year", "month", "day"],
              "title": "DueDate",
              "type": "object"
            },
            "dueTime": {
              "additionalProperties": false,
              "default": null,
              "description": "Due time of the coursework.",
              "nullable": true,
              "properties": {
                "hours": {
                  "description": "Hours of the due time (0-23).",
                  "maximum": 23,
                  "minimum": 0,
                  "title": "Hours",
                  "type": "integer"
                },
                "minutes": {
                  "description": "Minutes of the due time (0-59).",
                  "maximum": 59,
                  "minimum": 0,
                  "title": "Minutes",
                  "type": "integer"
                },
                "nanos": {
                  "default": 0,
                  "description": "Nanoseconds of the due time.",
                  "minimum": 0,
                  "title": "Nanos",
                  "type": "integer"
                },
                "seconds": {
                  "description": "Seconds of the due time (0-59).",
                  "maximum": 59,
                  "minimum": 0,
                  "title": "Seconds",
                  "type": "integer"
                }
              },
              "required": ["hours", "minutes", "seconds"],
              "title": "TimeOfDay",
              "type": "object"
            },
            "gradeCategory": {
              "additionalProperties": false,
              "default": null,
              "description": "Grade category details, if set.",
              "nullable": true,
              "properties": {
                "id": {
                  "description": "Identifier of the grade category.",
                  "title": "Id",
                  "type": "string"
                },
                "title": {
                  "description": "Title of the grade category.",
                  "title": "Title",
                  "type": "string"
                }
              },
              "required": ["id", "title"],
              "title": "GradeCategory",
              "type": "object"
            },
            "id": {
              "default": null,
              "description": "Identifier of the coursework.",
              "nullable": true,
              "title": "Id",
              "type": "string"
            },
            "individualStudentsOptions": {
              "additionalProperties": false,
              "default": null,
              "description": "Details when coursework is assigned to individual students.",
              "nullable": true,
              "properties": {
                "studentIds": {
                  "description": "List of student IDs assigned individually.",
                  "items": { "properties": {}, "type": "string" },
                  "title": "Student Ids",
                  "type": "array"
                }
              },
              "required": ["studentIds"],
              "title": "IndividualStudentsOptions",
              "type": "object"
            },
            "materials": {
              "default": null,
              "description": "Materials attached to the coursework.",
              "items": {
                "additionalProperties": true,
                "description": "Material attached to coursework. Allows additional arbitrary fields like driveFile, link, etc.",
                "properties": {},
                "title": "Material",
                "type": "object"
              },
              "nullable": true,
              "title": "Materials",
              "type": "array"
            },
            "maxPoints": {
              "default": null,
              "description": "Maximum grade points for the coursework.",
              "nullable": true,
              "title": "Max Points",
              "type": "number"
            },
            "scheduledTime": {
              "default": null,
              "description": "Scheduled time in RFC3339 UTC format, if set.",
              "nullable": true,
              "title": "Scheduled Time",
              "type": "string"
            },
            "state": {
              "default": null,
              "description": "State of the coursework.",
              "enum": ["COURSE_WORK_STATE_UNSPECIFIED", "PUBLISHED", "DRAFT", "DELETED"],
              "nullable": true,
              "title": "State",
              "type": "string"
            },
            "submissionModificationMode": {
              "default": null,
              "description": "Submission modification permissions for students.",
              "enum": [
                "SUBMISSION_MODIFICATION_MODE_UNSPECIFIED",
                "MODIFIABLE_UNTIL_TURNED_IN",
                "MODIFIABLE"
              ],
              "nullable": true,
              "title": "Submission Modification Mode",
              "type": "string"
            },
            "title": {
              "default": null,
              "description": "Title of the coursework.",
              "nullable": true,
              "title": "Title",
              "type": "string"
            },
            "topicId": {
              "default": null,
              "description": "Identifier for the associated topic, if any.",
              "nullable": true,
              "title": "Topic Id",
              "type": "string"
            },
            "updateTime": {
              "default": null,
              "description": "Last update time in RFC3339 UTC format.",
              "nullable": true,
              "title": "Update Time",
              "type": "string"
            },
            "workType": {
              "default": null,
              "description": "Type of the coursework.",
              "enum": [
                "COURSE_WORK_TYPE_UNSPECIFIED",
                "ASSIGNMENT",
                "SHORT_ANSWER_QUESTION",
                "MULTIPLE_CHOICE_QUESTION"
              ],
              "nullable": true,
              "title": "Work Type",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CourseWorkGetResponseWrapper",
      "type": "object"
    },
    "description": "Tool to get details of a specific coursework. use when detailed information about a particular assignment is needed.",
    "tags": ["courseWork", "readOnlyHint", "openWorldHint", "important", "CourseWork"]
  },
  {
    "available_versions": ["latest"],
    "name": "List CourseWork",
    "slug": "GOOGLE_CLASSROOM_COURSE_WORK_LIST",
    "input_parameters": {
      "description": "Request model for listing coursework in a course.",
      "properties": {
        "courseId": {
          "description": "Identifier of the course (Classroom-assigned ID or alias).",
          "examples": ["1234567890"],
          "title": "Course Id",
          "type": "string"
        },
        "courseWorkStates": {
          "default": null,
          "description": "Restriction on the coursework state to return. Only coursework matching one of these states is returned. If unspecified, defaults to ['PUBLISHED'].",
          "examples": [["PUBLISHED"], ["DRAFT", "PUBLISHED"]],
          "items": {
            "enum": ["COURSE_WORK_STATE_UNSPECIFIED", "DRAFT", "PUBLISHED", "DELETED"],
            "properties": {},
            "type": "string"
          },
          "nullable": true,
          "title": "Course Work States",
          "type": "array"
        },
        "orderBy": {
          "default": null,
          "description": "Sort ordering for results. Comma-separated list of fields with optional direction. Supported fields: 'updateTime', 'dueDate'. Supported direction keywords: 'asc', 'desc'. Default: 'updateTime desc'.",
          "examples": ["dueDate asc,updateTime desc"],
          "nullable": true,
          "title": "Order By",
          "type": "string"
        },
        "pageSize": {
          "default": null,
          "description": "Maximum number of items to return. Zero or unspecified indicates the server may assign a maximum. The server may return fewer than the specified number.",
          "examples": [20],
          "minimum": 0,
          "nullable": true,
          "title": "Page Size",
          "type": "integer"
        },
        "pageToken": {
          "default": null,
          "description": "NextPageToken from a previous list call, indicating subsequent page of results to return. Must be used with otherwise identical request.",
          "examples": ["CgYIARID"],
          "nullable": true,
          "title": "Page Token",
          "type": "string"
        },
        "previewVersion": {
          "default": null,
          "description": "Preview version of the API. Set to access new capabilities in the Preview Program.",
          "examples": ["PREVIEW_UNSPECIFIED"],
          "nullable": true,
          "title": "Preview Version",
          "type": "string"
        }
      },
      "required": ["courseId"],
      "title": "CourseWorkListRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "courseWork": {
              "default": null,
              "description": "List of coursework items.",
              "items": {
                "description": "A CourseWork item.",
                "properties": {
                  "alternateLink": {
                    "default": null,
                    "description": "URL to the courseWork in Classroom UI.",
                    "nullable": true,
                    "title": "Alternate Link",
                    "type": "string"
                  },
                  "associatedWithDeveloper": {
                    "default": null,
                    "description": "Whether this was created by a developer.",
                    "nullable": true,
                    "title": "Associated With Developer",
                    "type": "boolean"
                  },
                  "creationTime": {
                    "default": null,
                    "description": "When courseWork was created (RFC3339 UTC).",
                    "nullable": true,
                    "title": "Creation Time",
                    "type": "string"
                  },
                  "description": {
                    "default": null,
                    "description": "Description of the courseWork.",
                    "nullable": true,
                    "title": "Description",
                    "type": "string"
                  },
                  "dueDate": {
                    "additionalProperties": false,
                    "default": null,
                    "description": "A whole calendar date.",
                    "nullable": true,
                    "properties": {
                      "day": {
                        "default": null,
                        "description": "Day of month (1-31)",
                        "nullable": true,
                        "title": "Day",
                        "type": "integer"
                      },
                      "month": {
                        "default": null,
                        "description": "Month of year (1-12)",
                        "nullable": true,
                        "title": "Month",
                        "type": "integer"
                      },
                      "year": {
                        "default": null,
                        "description": "Year of date (e.g., 2021)",
                        "nullable": true,
                        "title": "Year",
                        "type": "integer"
                      }
                    },
                    "title": "Date",
                    "type": "object"
                  },
                  "dueTime": {
                    "additionalProperties": false,
                    "default": null,
                    "description": "A time of day.",
                    "nullable": true,
                    "properties": {
                      "hours": {
                        "default": null,
                        "description": "Hours since midnight (0-23)",
                        "maximum": 23,
                        "minimum": 0,
                        "nullable": true,
                        "title": "Hours",
                        "type": "integer"
                      },
                      "minutes": {
                        "default": null,
                        "description": "Minutes after the hour (0-59)",
                        "maximum": 59,
                        "minimum": 0,
                        "nullable": true,
                        "title": "Minutes",
                        "type": "integer"
                      },
                      "nanoseconds": {
                        "default": null,
                        "description": "Fractions of a second in nanoseconds",
                        "maximum": 999999999,
                        "minimum": 0,
                        "nullable": true,
                        "title": "Nanoseconds",
                        "type": "integer"
                      },
                      "seconds": {
                        "default": null,
                        "description": "Seconds after the minute (0-59)",
                        "maximum": 59,
                        "minimum": 0,
                        "nullable": true,
                        "title": "Seconds",
                        "type": "integer"
                      }
                    },
                    "title": "TimeOfDay",
                    "type": "object"
                  },
                  "id": {
                    "default": null,
                    "description": "Identifier of the courseWork.",
                    "nullable": true,
                    "title": "Id",
                    "type": "string"
                  },
                  "maxPoints": {
                    "default": null,
                    "description": "Maximum points or grade for the assignment.",
                    "nullable": true,
                    "title": "Max Points",
                    "type": "number"
                  },
                  "scheduledTime": {
                    "default": null,
                    "description": "Scheduled post time (RFC3339 UTC).",
                    "nullable": true,
                    "title": "Scheduled Time",
                    "type": "string"
                  },
                  "state": {
                    "default": null,
                    "description": "State of the courseWork.",
                    "enum": ["COURSE_WORK_STATE_UNSPECIFIED", "PUBLISHED", "DRAFT", "DELETED"],
                    "nullable": true,
                    "title": "State",
                    "type": "string"
                  },
                  "submissionModificationMode": {
                    "const": "MODIFIABLE_UNTIL_GRADING",
                    "default": null,
                    "description": "Whether student can modify submissions until graded.",
                    "nullable": true,
                    "title": "Submission Modification Mode",
                    "type": "string"
                  },
                  "title": {
                    "default": null,
                    "description": "Title of the courseWork.",
                    "nullable": true,
                    "title": "Title",
                    "type": "string"
                  },
                  "topicId": {
                    "default": null,
                    "description": "Topic ID the courseWork is associated with.",
                    "nullable": true,
                    "title": "Topic Id",
                    "type": "string"
                  },
                  "updateTime": {
                    "default": null,
                    "description": "Last update time (RFC3339 UTC).",
                    "nullable": true,
                    "title": "Update Time",
                    "type": "string"
                  },
                  "workType": {
                    "default": null,
                    "description": "Type of the assignment.",
                    "enum": ["ASSIGNMENT", "SHORT_ANSWER_QUESTION", "MULTIPLE_CHOICE_QUESTION"],
                    "nullable": true,
                    "title": "Work Type",
                    "type": "string"
                  }
                },
                "title": "CourseWork",
                "type": "object"
              },
              "nullable": true,
              "title": "Course Work",
              "type": "array"
            },
            "nextPageToken": {
              "default": null,
              "description": "Token for next page of results.",
              "nullable": true,
              "title": "Next Page Token",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CourseWorkListResponseWrapper",
      "type": "object"
    },
    "description": "Tool to list coursework in a course. use after verifying courseid.",
    "tags": ["courseWork", "readOnlyHint", "openWorldHint", "important", "CourseWork"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create Course Work Material",
    "slug": "GOOGLE_CLASSROOM_COURSE_WORK_MATERIALS_CREATE",
    "input_parameters": {
      "description": "Request model for creating course work material in a course.",
      "properties": {
        "assigneeMode": {
          "default": null,
          "description": "Who can see the material. Defaults to ALL_STUDENTS.",
          "enum": ["ALL_STUDENTS", "INDIVIDUAL_STUDENTS"],
          "nullable": true,
          "title": "Assignee Mode",
          "type": "string"
        },
        "associatedWithDeveloper": {
          "default": null,
          "description": "Whether this material is associated with a developer project.",
          "nullable": true,
          "title": "Associated With Developer",
          "type": "boolean"
        },
        "courseId": {
          "description": "Identifier of the course.",
          "title": "Course Id",
          "type": "string"
        },
        "description": {
          "default": null,
          "description": "Description of the course work material.",
          "examples": ["Notes for chapter 1."],
          "nullable": true,
          "title": "Description",
          "type": "string"
        },
        "individualStudentsOptions": {
          "additionalProperties": false,
          "default": null,
          "description": "Options for INDIVIDUAL_STUDENTS assignee mode.",
          "nullable": true,
          "properties": {
            "studentIds": {
              "description": "List of student IDs who can see the material.",
              "items": { "properties": {}, "type": "string" },
              "title": "Student Ids",
              "type": "array"
            }
          },
          "required": ["studentIds"],
          "title": "IndividualStudentsOptions",
          "type": "object"
        },
        "materials": {
          "default": null,
          "description": "Materials attached to the course work material. Each element defines one of driveFile, link, form, or youtubeVideo.",
          "items": {
            "description": "A material attached to the course work material. Exactly one of the fields should be provided.",
            "properties": {
              "driveFile": {
                "additionalProperties": { "type": "string" },
                "default": null,
                "description": "Drive file resource with keys like 'id', 'title', 'alternateLink'.",
                "nullable": true,
                "title": "Drive File",
                "type": "object"
              },
              "form": {
                "additionalProperties": { "type": "string" },
                "default": null,
                "description": "Form resource with keys 'formUrl' and 'formTitle'.",
                "nullable": true,
                "title": "Form",
                "type": "object"
              },
              "link": {
                "additionalProperties": { "type": "string" },
                "default": null,
                "description": "Link resource with keys 'url' and 'title'.",
                "nullable": true,
                "title": "Link",
                "type": "object"
              },
              "youtubeVideo": {
                "additionalProperties": { "type": "string" },
                "default": null,
                "description": "YouTube video resource with keys 'id' and 'title'.",
                "nullable": true,
                "title": "Youtube Video",
                "type": "object"
              }
            },
            "title": "Material",
            "type": "object"
          },
          "nullable": true,
          "title": "Materials",
          "type": "array"
        },
        "scheduledTime": {
          "default": null,
          "description": "RFC3339 formatted time when the material is scheduled to be published, e.g., '2020-10-28T16:01:23Z'.",
          "nullable": true,
          "title": "Scheduled Time",
          "type": "string"
        },
        "state": {
          "enum": ["DRAFT", "PUBLISHED", "DELETED"],
          "nullable": true,
          "title": "State",
          "type": "string"
        },
        "title": {
          "default": null,
          "description": "Title of the course work material.",
          "examples": ["Chapter 1 Notes"],
          "nullable": true,
          "title": "Title",
          "type": "string"
        },
        "topicId": {
          "default": null,
          "description": "Identifier of the topic to which this material belongs.",
          "nullable": true,
          "title": "Topic Id",
          "type": "string"
        }
      },
      "required": ["courseId", "state"],
      "title": "CourseWorkMaterialsCreateRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "alternateLink": {
              "default": null,
              "description": "URL to view this material in Classroom.",
              "nullable": true,
              "title": "Alternate Link",
              "type": "string"
            },
            "assigneeMode": {
              "default": null,
              "description": "Who can see the material.",
              "enum": ["ALL_STUDENTS", "INDIVIDUAL_STUDENTS"],
              "nullable": true,
              "title": "Assignee Mode",
              "type": "string"
            },
            "associatedWithDeveloper": {
              "default": null,
              "description": "Whether this material is associated with a developer project.",
              "nullable": true,
              "title": "Associated With Developer",
              "type": "boolean"
            },
            "courseId": {
              "default": null,
              "description": "Identifier of the course.",
              "nullable": true,
              "title": "Course Id",
              "type": "string"
            },
            "creationTime": {
              "default": null,
              "description": "Creation time in RFC3339 UTC format.",
              "nullable": true,
              "title": "Creation Time",
              "type": "string"
            },
            "description": {
              "default": null,
              "description": "Description of the course work material.",
              "nullable": true,
              "title": "Description",
              "type": "string"
            },
            "id": {
              "default": null,
              "description": "Identifier assigned by Classroom for the material.",
              "nullable": true,
              "title": "Id",
              "type": "string"
            },
            "individualStudentsOptions": {
              "additionalProperties": false,
              "default": null,
              "description": "Options for INDIVIDUAL_STUDENTS assignee mode.",
              "nullable": true,
              "properties": {
                "studentIds": {
                  "description": "List of student IDs who can see the material.",
                  "items": { "properties": {}, "type": "string" },
                  "title": "Student Ids",
                  "type": "array"
                }
              },
              "required": ["studentIds"],
              "title": "IndividualStudentsOptions",
              "type": "object"
            },
            "materials": {
              "default": null,
              "description": "Materials attached to the course work material.",
              "items": {
                "description": "A material attached to the course work material. Exactly one of the fields should be provided.",
                "properties": {
                  "driveFile": {
                    "additionalProperties": { "type": "string" },
                    "default": null,
                    "description": "Drive file resource with keys like 'id', 'title', 'alternateLink'.",
                    "nullable": true,
                    "title": "Drive File",
                    "type": "object"
                  },
                  "form": {
                    "additionalProperties": { "type": "string" },
                    "default": null,
                    "description": "Form resource with keys 'formUrl' and 'formTitle'.",
                    "nullable": true,
                    "title": "Form",
                    "type": "object"
                  },
                  "link": {
                    "additionalProperties": { "type": "string" },
                    "default": null,
                    "description": "Link resource with keys 'url' and 'title'.",
                    "nullable": true,
                    "title": "Link",
                    "type": "object"
                  },
                  "youtubeVideo": {
                    "additionalProperties": { "type": "string" },
                    "default": null,
                    "description": "YouTube video resource with keys 'id' and 'title'.",
                    "nullable": true,
                    "title": "Youtube Video",
                    "type": "object"
                  }
                },
                "title": "Material",
                "type": "object"
              },
              "nullable": true,
              "title": "Materials",
              "type": "array"
            },
            "scheduledTime": {
              "default": null,
              "description": "Scheduled publish time in RFC3339 UTC format.",
              "nullable": true,
              "title": "Scheduled Time",
              "type": "string"
            },
            "state": {
              "enum": ["DRAFT", "PUBLISHED", "DELETED"],
              "nullable": true,
              "title": "State",
              "type": "string"
            },
            "title": {
              "default": null,
              "description": "Title of the course work material.",
              "nullable": true,
              "title": "Title",
              "type": "string"
            },
            "topicId": {
              "default": null,
              "description": "Identifier of the topic for this material.",
              "nullable": true,
              "title": "Topic Id",
              "type": "string"
            },
            "updateTime": {
              "default": null,
              "description": "Last update time in RFC3339 UTC format.",
              "nullable": true,
              "title": "Update Time",
              "type": "string"
            }
          },
          "required": ["state"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CourseWorkMaterialsCreateResponseWrapper",
      "type": "object"
    },
    "description": "Tool to create course work material. use when adding resources or notes to a course.",
    "tags": ["courseWorkMaterials", "writeOnlyHint", "Courses"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get Coursework Material",
    "slug": "GOOGLE_CLASSROOM_COURSE_WORK_MATERIALS_GET",
    "input_parameters": {
      "description": "Request model for getting a coursework material.",
      "properties": {
        "courseId": {
          "description": "Identifier of the course. Can be Classroom-assigned identifier or an alias.",
          "examples": ["1234567890"],
          "title": "Course Id",
          "type": "string"
        },
        "id": {
          "description": "Identifier of the coursework material.",
          "examples": ["cwmat123"],
          "title": "Id",
          "type": "string"
        }
      },
      "required": ["courseId", "id"],
      "title": "CourseWorkMaterialsGetRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "alternateLink": {
              "default": null,
              "description": "URL where the material can be viewed in Classroom web UI.",
              "nullable": true,
              "title": "Alternate Link",
              "type": "string"
            },
            "courseId": {
              "default": null,
              "description": "Identifier of the course.",
              "nullable": true,
              "title": "Course Id",
              "type": "string"
            },
            "creationTime": {
              "default": null,
              "description": "Creation time in RFC3339 UTC format.",
              "nullable": true,
              "title": "Creation Time",
              "type": "string"
            },
            "description": {
              "default": null,
              "description": "Description of this coursework material.",
              "nullable": true,
              "title": "Description",
              "type": "string"
            },
            "id": {
              "default": null,
              "description": "Identifier for this coursework material.",
              "nullable": true,
              "title": "Id",
              "type": "string"
            },
            "materials": {
              "default": null,
              "description": "Materials attached to the coursework material.",
              "items": {
                "properties": {
                  "driveFile": {
                    "additionalProperties": false,
                    "default": null,
                    "description": "Google Drive file material.",
                    "nullable": true,
                    "properties": {
                      "alternateLink": {
                        "default": null,
                        "description": "URL to view the file in Drive UI.",
                        "nullable": true,
                        "title": "Alternate Link",
                        "type": "string"
                      },
                      "id": {
                        "default": null,
                        "description": "Drive file ID.",
                        "nullable": true,
                        "title": "Id",
                        "type": "string"
                      },
                      "thumbnailUrl": {
                        "default": null,
                        "description": "URL of a thumbnail image of the file.",
                        "nullable": true,
                        "title": "Thumbnail Url",
                        "type": "string"
                      },
                      "title": {
                        "default": null,
                        "description": "Drive file title.",
                        "nullable": true,
                        "title": "Title",
                        "type": "string"
                      }
                    },
                    "title": "SharedDriveFile",
                    "type": "object"
                  },
                  "form": {
                    "additionalProperties": false,
                    "default": null,
                    "description": "Google Forms material.",
                    "nullable": true,
                    "properties": {
                      "formUrl": {
                        "default": null,
                        "description": "URL of the form.",
                        "nullable": true,
                        "title": "Form Url",
                        "type": "string"
                      },
                      "title": {
                        "default": null,
                        "description": "Title of the form.",
                        "nullable": true,
                        "title": "Title",
                        "type": "string"
                      }
                    },
                    "title": "Form",
                    "type": "object"
                  },
                  "link": {
                    "additionalProperties": false,
                    "default": null,
                    "description": "Link material.",
                    "nullable": true,
                    "properties": {
                      "title": {
                        "default": null,
                        "description": "Link title.",
                        "nullable": true,
                        "title": "Title",
                        "type": "string"
                      },
                      "url": {
                        "default": null,
                        "description": "Link URL.",
                        "nullable": true,
                        "title": "Url",
                        "type": "string"
                      }
                    },
                    "title": "Link",
                    "type": "object"
                  },
                  "title": {
                    "default": null,
                    "description": "Title of the material.",
                    "nullable": true,
                    "title": "Title",
                    "type": "string"
                  },
                  "youtubeVideo": {
                    "additionalProperties": false,
                    "default": null,
                    "description": "YouTube video material.",
                    "nullable": true,
                    "properties": {
                      "alternateLink": {
                        "default": null,
                        "description": "URL to watch the video.",
                        "nullable": true,
                        "title": "Alternate Link",
                        "type": "string"
                      },
                      "id": {
                        "default": null,
                        "description": "YouTube video ID.",
                        "nullable": true,
                        "title": "Id",
                        "type": "string"
                      }
                    },
                    "title": "YouTubeVideo",
                    "type": "object"
                  }
                },
                "title": "Material",
                "type": "object"
              },
              "nullable": true,
              "title": "Materials",
              "type": "array"
            },
            "state": {
              "default": null,
              "description": "State of the coursework material (e.g., 'PUBLISHED').",
              "nullable": true,
              "title": "State",
              "type": "string"
            },
            "title": {
              "default": null,
              "description": "Title of this coursework material.",
              "nullable": true,
              "title": "Title",
              "type": "string"
            },
            "topicId": {
              "default": null,
              "description": "Identifier of an associated topic.",
              "nullable": true,
              "title": "Topic Id",
              "type": "string"
            },
            "updateTime": {
              "default": null,
              "description": "Last update time in RFC3339 UTC format.",
              "nullable": true,
              "title": "Update Time",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CourseWorkMaterialsGetResponseWrapper",
      "type": "object"
    },
    "description": "Tool to get a coursework material. use when you need to retrieve details of a specific coursework material by course and material id.",
    "tags": ["courseWorkMaterials", "readOnlyHint", "openWorldHint", "important"]
  },
  {
    "available_versions": ["latest"],
    "name": "List CourseWorkMaterials",
    "slug": "GOOGLE_CLASSROOM_COURSE_WORK_MATERIALS_LIST",
    "input_parameters": {
      "description": "Request model for listing CourseWorkMaterials in a course.",
      "properties": {
        "courseId": {
          "description": "Identifier of the course whose courseWorkMaterials should be returned.",
          "examples": ["1234567890"],
          "title": "Course Id",
          "type": "string"
        },
        "orderBy": {
          "default": null,
          "description": "Optional sorting order; allowed values are 'updateTime asc' or 'updateTime desc'.",
          "enum": ["updateTime asc", "updateTime desc"],
          "examples": ["updateTime desc"],
          "nullable": true,
          "title": "Order By",
          "type": "string"
        },
        "pageSize": {
          "default": null,
          "description": "Maximum number of items to return. Must be between 1 and 100. Defaults to 30.",
          "examples": [30],
          "maximum": 100,
          "minimum": 1,
          "nullable": true,
          "title": "Page Size",
          "type": "integer"
        },
        "pageToken": {
          "default": null,
          "description": "Token identifying which page of results to return.",
          "examples": ["Cg0KC2NvdXJzZVRva2VuEjgKIghhYmNkZWY"],
          "nullable": true,
          "title": "Page Token",
          "type": "string"
        }
      },
      "required": ["courseId"],
      "title": "CourseWorkMaterialsListRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "courseWorkMaterial": {
              "default": null,
              "description": "List of courseWorkMaterial items returned.",
              "items": {
                "description": "Represents a coursework material item in a course.",
                "properties": {
                  "alternateLink": {
                    "default": null,
                    "description": "URL link to open the courseWorkMaterial.",
                    "nullable": true,
                    "title": "Alternate Link",
                    "type": "string"
                  },
                  "creationTime": {
                    "default": null,
                    "description": "Creation time in RFC3339 UTC format.",
                    "nullable": true,
                    "title": "Creation Time",
                    "type": "string"
                  },
                  "description": {
                    "default": null,
                    "description": "Description of the courseWorkMaterial.",
                    "nullable": true,
                    "title": "Description",
                    "type": "string"
                  },
                  "id": {
                    "default": null,
                    "description": "Identifier for the courseWorkMaterial.",
                    "nullable": true,
                    "title": "Id",
                    "type": "string"
                  },
                  "materials": {
                    "default": null,
                    "description": "Materials attached to the courseWorkMaterial.",
                    "items": {
                      "description": "Material attachment within a courseWorkMaterial.",
                      "properties": {
                        "driveFile": {
                          "additionalProperties": false,
                          "default": null,
                          "description": "Drive file reference in a CourseWorkMaterial.",
                          "nullable": true,
                          "properties": {
                            "alternateLink": {
                              "default": null,
                              "description": "URL link to open the Drive file.",
                              "nullable": true,
                              "title": "Alternate Link",
                              "type": "string"
                            },
                            "id": {
                              "default": null,
                              "description": "ID of the Drive file.",
                              "nullable": true,
                              "title": "Id",
                              "type": "string"
                            },
                            "thumbnailUrl": {
                              "default": null,
                              "description": "Thumbnail URL of the Drive file.",
                              "nullable": true,
                              "title": "Thumbnail Url",
                              "type": "string"
                            },
                            "title": {
                              "default": null,
                              "description": "Title of the Drive file.",
                              "nullable": true,
                              "title": "Title",
                              "type": "string"
                            }
                          },
                          "title": "DriveFile",
                          "type": "object"
                        },
                        "form": {
                          "additionalProperties": false,
                          "default": null,
                          "description": "Google Form reference in a CourseWorkMaterial.",
                          "nullable": true,
                          "properties": {
                            "formUrl": {
                              "default": null,
                              "description": "URL of the Google Form.",
                              "nullable": true,
                              "title": "Form Url",
                              "type": "string"
                            },
                            "title": {
                              "default": null,
                              "description": "Title of the Google Form.",
                              "nullable": true,
                              "title": "Title",
                              "type": "string"
                            }
                          },
                          "title": "Form",
                          "type": "object"
                        },
                        "link": {
                          "additionalProperties": false,
                          "default": null,
                          "description": "Link reference in a CourseWorkMaterial.",
                          "nullable": true,
                          "properties": {
                            "title": {
                              "default": null,
                              "description": "Title of the link.",
                              "nullable": true,
                              "title": "Title",
                              "type": "string"
                            },
                            "url": {
                              "default": null,
                              "description": "URL of the link.",
                              "nullable": true,
                              "title": "Url",
                              "type": "string"
                            }
                          },
                          "title": "Link",
                          "type": "object"
                        },
                        "youtubeVideo": {
                          "additionalProperties": false,
                          "default": null,
                          "description": "YouTube video reference in a CourseWorkMaterial.",
                          "nullable": true,
                          "properties": {
                            "alternateLink": {
                              "default": null,
                              "description": "URL link to open the YouTube video.",
                              "nullable": true,
                              "title": "Alternate Link",
                              "type": "string"
                            },
                            "id": {
                              "default": null,
                              "description": "ID of the YouTube video.",
                              "nullable": true,
                              "title": "Id",
                              "type": "string"
                            },
                            "thumbnailUrl": {
                              "default": null,
                              "description": "Thumbnail URL for the YouTube video.",
                              "nullable": true,
                              "title": "Thumbnail Url",
                              "type": "string"
                            },
                            "title": {
                              "default": null,
                              "description": "Title of the YouTube video.",
                              "nullable": true,
                              "title": "Title",
                              "type": "string"
                            }
                          },
                          "title": "YouTubeVideo",
                          "type": "object"
                        }
                      },
                      "title": "Material",
                      "type": "object"
                    },
                    "nullable": true,
                    "title": "Materials",
                    "type": "array"
                  },
                  "state": {
                    "default": null,
                    "description": "State of the courseWorkMaterial: 'DRAFT', 'PUBLISHED', or 'DELETED'.",
                    "enum": ["DRAFT", "PUBLISHED", "DELETED"],
                    "nullable": true,
                    "title": "State",
                    "type": "string"
                  },
                  "title": {
                    "default": null,
                    "description": "Title of the courseWorkMaterial.",
                    "nullable": true,
                    "title": "Title",
                    "type": "string"
                  },
                  "topicId": {
                    "default": null,
                    "description": "Identifier of the topic this material is associated with.",
                    "nullable": true,
                    "title": "Topic Id",
                    "type": "string"
                  },
                  "updateTime": {
                    "default": null,
                    "description": "Last update time in RFC3339 UTC format.",
                    "nullable": true,
                    "title": "Update Time",
                    "type": "string"
                  }
                },
                "title": "CourseWorkMaterial",
                "type": "object"
              },
              "nullable": true,
              "title": "Course Work Material",
              "type": "array"
            },
            "nextPageToken": {
              "default": null,
              "description": "Token to retrieve the next page of results.",
              "nullable": true,
              "title": "Next Page Token",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CourseWorkMaterialsListResponseWrapper",
      "type": "object"
    },
    "description": "Tool to list course work materials in a course. use when you need to retrieve and paginate materials for a given courseid.",
    "tags": [
      "courseWorkMaterials",
      "readOnlyHint",
      "openWorldHint",
      "important",
      "CourseWorkMaterials"
    ]
  },
  {
    "available_versions": ["latest"],
    "name": "Patch Coursework",
    "slug": "GOOGLE_CLASSROOM_COURSE_WORK_PATCH",
    "input_parameters": {
      "description": "Request model for patching a CourseWork.",
      "properties": {
        "courseId": {
          "description": "Identifier of the course. Can be the Classroom-assigned identifier or an alias.",
          "examples": ["1234567890"],
          "title": "Course Id",
          "type": "string"
        },
        "description": {
          "default": null,
          "description": "Description of the coursework to set.",
          "examples": ["Updated description."],
          "nullable": true,
          "title": "Description",
          "type": "string"
        },
        "dueDate": {
          "additionalProperties": false,
          "default": null,
          "description": "Model for due date.",
          "nullable": true,
          "properties": {
            "day": {
              "description": "Day of due date (1-31)",
              "examples": [15],
              "maximum": 31,
              "minimum": 1,
              "title": "Day",
              "type": "integer"
            },
            "month": {
              "description": "Month of due date (1-12)",
              "examples": [9],
              "maximum": 12,
              "minimum": 1,
              "title": "Month",
              "type": "integer"
            },
            "year": {
              "description": "Year of due date in YYYY format",
              "examples": [2023],
              "title": "Year",
              "type": "integer"
            }
          },
          "required": ["year", "month", "day"],
          "title": "Date",
          "type": "object"
        },
        "dueTime": {
          "additionalProperties": false,
          "default": null,
          "description": "Model for due time.",
          "nullable": true,
          "properties": {
            "hours": {
              "description": "Hour of due time in 24h format (0-23)",
              "examples": [17],
              "maximum": 23,
              "minimum": 0,
              "title": "Hours",
              "type": "integer"
            },
            "minutes": {
              "description": "Minutes of due time (0-59)",
              "examples": [30],
              "maximum": 59,
              "minimum": 0,
              "title": "Minutes",
              "type": "integer"
            },
            "nanos": {
              "default": 0,
              "description": "Nanoseconds",
              "examples": [0],
              "minimum": 0,
              "nullable": true,
              "title": "Nanos",
              "type": "integer"
            },
            "seconds": {
              "default": 0,
              "description": "Seconds of due time (0-59)",
              "examples": [0],
              "maximum": 59,
              "minimum": 0,
              "nullable": true,
              "title": "Seconds",
              "type": "integer"
            }
          },
          "required": ["hours", "minutes"],
          "title": "TimeOfDay",
          "type": "object"
        },
        "id": {
          "description": "Identifier of the CourseWork to update.",
          "examples": ["0987654321"],
          "title": "Id",
          "type": "string"
        },
        "maxPoints": {
          "default": null,
          "description": "Maximum grade points for the coursework.",
          "minimum": 0,
          "nullable": true,
          "title": "Max Points",
          "type": "number"
        },
        "scheduledTime": {
          "default": null,
          "description": "Timestamp in RFC3339 format to set for scheduledTime.",
          "examples": ["2023-09-15T17:30:00Z"],
          "nullable": true,
          "title": "Scheduled Time",
          "type": "string"
        },
        "title": {
          "default": null,
          "description": "Title of the coursework to set.",
          "examples": ["New title"],
          "nullable": true,
          "title": "Title",
          "type": "string"
        },
        "topicId": {
          "default": null,
          "description": "Topic ID to assign.",
          "nullable": true,
          "title": "Topic Id",
          "type": "string"
        },
        "updateMask": {
          "description": "Comma-separated list of fields to update. E.g., 'title,description'.",
          "examples": ["title,description"],
          "title": "Update Mask",
          "type": "string"
        },
        "workType": {
          "default": null,
          "description": "Type of the coursework.",
          "enum": [
            "COURSE_WORK_TYPE_UNSPECIFIED",
            "ASSIGNMENT",
            "SHORT_ANSWER_QUESTION",
            "MULTIPLE_CHOICE_QUESTION"
          ],
          "nullable": true,
          "title": "Work Type",
          "type": "string"
        }
      },
      "required": ["courseId", "id", "updateMask"],
      "title": "CourseWorkPatchRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "alternateLink": {
              "default": null,
              "description": "URL to view the coursework in Classroom.",
              "nullable": true,
              "title": "Alternate Link",
              "type": "string"
            },
            "creationTime": {
              "default": null,
              "description": "Creation time in RFC3339 format.",
              "nullable": true,
              "title": "Creation Time",
              "type": "string"
            },
            "description": {
              "default": null,
              "description": "Description of the coursework.",
              "nullable": true,
              "title": "Description",
              "type": "string"
            },
            "dueDate": {
              "additionalProperties": false,
              "default": null,
              "description": "Model for due date.",
              "nullable": true,
              "properties": {
                "day": {
                  "description": "Day of due date (1-31)",
                  "examples": [15],
                  "maximum": 31,
                  "minimum": 1,
                  "title": "Day",
                  "type": "integer"
                },
                "month": {
                  "description": "Month of due date (1-12)",
                  "examples": [9],
                  "maximum": 12,
                  "minimum": 1,
                  "title": "Month",
                  "type": "integer"
                },
                "year": {
                  "description": "Year of due date in YYYY format",
                  "examples": [2023],
                  "title": "Year",
                  "type": "integer"
                }
              },
              "required": ["year", "month", "day"],
              "title": "Date",
              "type": "object"
            },
            "dueTime": {
              "additionalProperties": false,
              "default": null,
              "description": "Model for due time.",
              "nullable": true,
              "properties": {
                "hours": {
                  "description": "Hour of due time in 24h format (0-23)",
                  "examples": [17],
                  "maximum": 23,
                  "minimum": 0,
                  "title": "Hours",
                  "type": "integer"
                },
                "minutes": {
                  "description": "Minutes of due time (0-59)",
                  "examples": [30],
                  "maximum": 59,
                  "minimum": 0,
                  "title": "Minutes",
                  "type": "integer"
                },
                "nanos": {
                  "default": 0,
                  "description": "Nanoseconds",
                  "examples": [0],
                  "minimum": 0,
                  "nullable": true,
                  "title": "Nanos",
                  "type": "integer"
                },
                "seconds": {
                  "default": 0,
                  "description": "Seconds of due time (0-59)",
                  "examples": [0],
                  "maximum": 59,
                  "minimum": 0,
                  "nullable": true,
                  "title": "Seconds",
                  "type": "integer"
                }
              },
              "required": ["hours", "minutes"],
              "title": "TimeOfDay",
              "type": "object"
            },
            "id": {
              "default": null,
              "description": "Unique identifier for the coursework.",
              "nullable": true,
              "title": "Id",
              "type": "string"
            },
            "individualStudentsOptions": {
              "additionalProperties": false,
              "default": null,
              "description": "Specification for individual student assignment.",
              "nullable": true,
              "properties": {
                "assigneeMode": {
                  "description": "Mode for assigning coursework.",
                  "enum": ["ALL_STUDENTS", "INDIVIDUAL_STUDENTS"],
                  "examples": ["ALL_STUDENTS"],
                  "title": "Assignee Mode",
                  "type": "string"
                },
                "studentIds": {
                  "default": null,
                  "description": "List of student IDs if assigneeMode is INDIVIDUAL_STUDENTS.",
                  "examples": [["1111111111", "2222222222"]],
                  "items": { "properties": {}, "type": "string" },
                  "nullable": true,
                  "title": "Student Ids",
                  "type": "array"
                }
              },
              "required": ["assigneeMode"],
              "title": "IndividualStudentsOptions",
              "type": "object"
            },
            "maxPoints": {
              "default": null,
              "description": "Maximum points for the coursework.",
              "nullable": true,
              "title": "Max Points",
              "type": "number"
            },
            "scheduledTime": {
              "default": null,
              "description": "Scheduled time in RFC3339 format.",
              "nullable": true,
              "title": "Scheduled Time",
              "type": "string"
            },
            "state": {
              "default": null,
              "description": "State of the coursework.",
              "enum": ["COURSE_WORK_STATE_UNSPECIFIED", "PUBLISHED", "DRAFT", "DELETED"],
              "nullable": true,
              "title": "State",
              "type": "string"
            },
            "title": {
              "default": null,
              "description": "Title of the coursework.",
              "nullable": true,
              "title": "Title",
              "type": "string"
            },
            "topicId": {
              "default": null,
              "description": "Topic ID if set.",
              "nullable": true,
              "title": "Topic Id",
              "type": "string"
            },
            "updateTime": {
              "default": null,
              "description": "Last update time in RFC3339 format.",
              "nullable": true,
              "title": "Update Time",
              "type": "string"
            },
            "workType": {
              "default": null,
              "description": "Type of the coursework.",
              "enum": [
                "COURSE_WORK_TYPE_UNSPECIFIED",
                "ASSIGNMENT",
                "SHORT_ANSWER_QUESTION",
                "MULTIPLE_CHOICE_QUESTION"
              ],
              "nullable": true,
              "title": "Work Type",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CourseWorkResponseWrapper",
      "type": "object"
    },
    "description": "Tool to update fields of a coursework. use when you need to modify specific details of an existing coursework after confirming which fields to update.",
    "tags": ["courseWork"]
  },
  {
    "available_versions": ["latest"],
    "name": "List Student Submissions",
    "slug": "GOOGLE_CLASSROOM_COURSE_WORK_STUDENT_SUBMISSIONS_LIST",
    "input_parameters": {
      "description": "Request model for listing StudentSubmissions of a coursework.",
      "properties": {
        "courseId": {
          "description": "Identifier of the course.",
          "examples": ["1234567890"],
          "title": "Course Id",
          "type": "string"
        },
        "courseWorkId": {
          "description": "Identifier of the coursework; use '-' to return submissions for all coursework in the course.",
          "examples": ["0987654321"],
          "title": "Course Work Id",
          "type": "string"
        },
        "late": {
          "default": null,
          "description": "Filters returned submissions to those that are on time or late.",
          "enum": ["LATE_ONLY", "NOT_LATE_ONLY"],
          "nullable": true,
          "title": "Late",
          "type": "string"
        },
        "pageSize": {
          "default": null,
          "description": "Maximum number of items to return. Defaults to 30; maximum is 100.",
          "examples": [50],
          "maximum": 100,
          "minimum": 1,
          "nullable": true,
          "title": "Page Size",
          "type": "integer"
        },
        "pageToken": {
          "default": null,
          "description": "Token for next page of results.",
          "nullable": true,
          "title": "Page Token",
          "type": "string"
        },
        "states": {
          "default": null,
          "description": "Filters returned submissions to those in the specified states.",
          "examples": [["TURNED_IN", "RETURNED"]],
          "items": {
            "enum": ["NEW", "CREATED", "TURNED_IN", "RETURNED", "RECLAIMED_BY_STUDENT"],
            "properties": {},
            "type": "string"
          },
          "nullable": true,
          "title": "States",
          "type": "array"
        },
        "userId": {
          "default": null,
          "description": "Restricts returned submissions to those owned by the specified user. Use numeric ID or 'me'.",
          "examples": ["me"],
          "nullable": true,
          "title": "User Id",
          "type": "string"
        }
      },
      "required": ["courseId", "courseWorkId"],
      "title": "CourseWorkStudentSubmissionsListRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "nextPageToken": {
              "default": null,
              "description": "Token to retrieve the next page of results.",
              "nullable": true,
              "title": "Next Page Token",
              "type": "string"
            },
            "studentSubmissions": {
              "default": null,
              "description": "List of student submissions matching the request.",
              "items": {
                "description": "StudentSubmission resource.",
                "properties": {
                  "assignedGrade": {
                    "default": null,
                    "description": "Grade assigned to the student.",
                    "nullable": true,
                    "title": "Assigned Grade",
                    "type": "integer"
                  },
                  "courseId": {
                    "default": null,
                    "description": "Identifier of the course.",
                    "nullable": true,
                    "title": "Course Id",
                    "type": "string"
                  },
                  "courseWorkId": {
                    "default": null,
                    "description": "Identifier of the coursework.",
                    "nullable": true,
                    "title": "Course Work Id",
                    "type": "string"
                  },
                  "creationTime": {
                    "default": null,
                    "description": "Creation time in RFC3339 UTC format.",
                    "nullable": true,
                    "title": "Creation Time",
                    "type": "string"
                  },
                  "draftGrade": {
                    "default": null,
                    "description": "Draft grade set by the teacher.",
                    "nullable": true,
                    "title": "Draft Grade",
                    "type": "integer"
                  },
                  "id": {
                    "default": null,
                    "description": "Identifier of the submission.",
                    "nullable": true,
                    "title": "Id",
                    "type": "string"
                  },
                  "late": {
                    "default": null,
                    "description": "Whether the submission was turned in late.",
                    "nullable": true,
                    "title": "Late",
                    "type": "boolean"
                  },
                  "state": {
                    "default": null,
                    "description": "Current state of the submission.",
                    "enum": ["NEW", "CREATED", "TURNED_IN", "RETURNED", "RECLAIMED_BY_STUDENT"],
                    "nullable": true,
                    "title": "State",
                    "type": "string"
                  },
                  "updateTime": {
                    "default": null,
                    "description": "Last update time in RFC3339 UTC format.",
                    "nullable": true,
                    "title": "Update Time",
                    "type": "string"
                  },
                  "userId": {
                    "default": null,
                    "description": "Identifier of the student user.",
                    "nullable": true,
                    "title": "User Id",
                    "type": "string"
                  }
                },
                "title": "StudentSubmission",
                "type": "object"
              },
              "nullable": true,
              "title": "Student Submissions",
              "type": "array"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CourseWorkStudentSubmissionsListResponseWrapper",
      "type": "object"
    },
    "description": "Tool to list student submissions for a specific coursework. use when you need to fetch or paginate student submissions by course and coursework, optionally filtering by user, state, or timeliness.",
    "tags": ["studentSubmissions", "readOnlyHint", "openWorldHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Reclaim Student Submission",
    "slug": "GOOGLE_CLASSROOM_COURSE_WORK_STUDENT_SUBMISSIONS_RECLAIM",
    "input_parameters": {
      "description": "Request model for reclaiming a student submission for editing.",
      "properties": {
        "courseId": {
          "description": "Identifier of the course.",
          "examples": ["1234567890"],
          "title": "Course Id",
          "type": "string"
        },
        "courseWorkId": {
          "description": "Identifier of the coursework.",
          "examples": ["cw123"],
          "title": "Course Work Id",
          "type": "string"
        },
        "id": {
          "description": "Identifier of the student submission.",
          "examples": ["sub123"],
          "title": "Id",
          "type": "string"
        }
      },
      "required": ["courseId", "courseWorkId", "id"],
      "title": "CourseWorkStudentSubmissionsReclaimRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "alternateLink": {
              "default": null,
              "description": "URL to view the submission in Classroom UI.",
              "nullable": true,
              "title": "Alternate Link",
              "type": "string"
            },
            "assignedGrade": {
              "default": null,
              "description": "The grade assigned by the teacher.",
              "nullable": true,
              "title": "Assigned Grade",
              "type": "number"
            },
            "assignmentSubmission": {
              "additionalProperties": true,
              "default": null,
              "description": "Drive assignment submission details, if any.",
              "nullable": true,
              "title": "Assignment Submission",
              "type": "object"
            },
            "courseId": {
              "default": null,
              "description": "Identifier of the course.",
              "nullable": true,
              "title": "Course Id",
              "type": "string"
            },
            "courseWorkId": {
              "default": null,
              "description": "Identifier of the coursework.",
              "nullable": true,
              "title": "Course Work Id",
              "type": "string"
            },
            "creationTime": {
              "default": null,
              "description": "Creation time in RFC3339 UTC format.",
              "nullable": true,
              "title": "Creation Time",
              "type": "string"
            },
            "draftGrade": {
              "default": null,
              "description": "The grade the student received on draft work, if any.",
              "nullable": true,
              "title": "Draft Grade",
              "type": "number"
            },
            "id": {
              "default": null,
              "description": "Identifier of the student submission.",
              "nullable": true,
              "title": "Id",
              "type": "string"
            },
            "late": {
              "default": null,
              "description": "Whether the submission was turned in late.",
              "nullable": true,
              "title": "Late",
              "type": "boolean"
            },
            "multipleChoiceSubmission": {
              "additionalProperties": true,
              "default": null,
              "description": "Multiple choice submission details, if any.",
              "nullable": true,
              "title": "Multiple Choice Submission",
              "type": "object"
            },
            "shortAnswerSubmission": {
              "additionalProperties": true,
              "default": null,
              "description": "Short answer submission details, if any.",
              "nullable": true,
              "title": "Short Answer Submission",
              "type": "object"
            },
            "state": {
              "default": null,
              "description": "State of the submission (e.g., 'CREATED', 'TURNED_IN').",
              "nullable": true,
              "title": "State",
              "type": "string"
            },
            "submissionHistory": {
              "default": null,
              "description": "History of submission events.",
              "items": { "additionalProperties": true, "properties": {}, "type": "object" },
              "nullable": true,
              "title": "Submission History",
              "type": "array"
            },
            "updateTime": {
              "default": null,
              "description": "Last update time in RFC3339 UTC format.",
              "nullable": true,
              "title": "Update Time",
              "type": "string"
            },
            "userId": {
              "default": null,
              "description": "Identifier of the student user.",
              "nullable": true,
              "title": "User Id",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "CourseWorkStudentSubmissionsReclaimResponseWrapper",
      "type": "object"
    },
    "description": "Tool to reclaim a student submission for editing. use after a student requests to edit their turned-in submission, resetting its state to created.",
    "tags": ["courseWork", "studentSubmissions", "writeOnlyHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Create Invitation",
    "slug": "GOOGLE_CLASSROOM_INVITATIONS_CREATE",
    "input_parameters": {
      "description": "Request model for creating an invitation for a user to join a course.",
      "properties": {
        "courseId": {
          "description": "Identifier of the course to invite the user to.",
          "examples": ["1234567890"],
          "title": "Course Id",
          "type": "string"
        },
        "role": {
          "description": "Role to invite the user as.",
          "enum": ["STUDENT", "TEACHER"],
          "examples": ["STUDENT"],
          "title": "Role",
          "type": "string"
        },
        "userId": {
          "description": "Identifier of the user to invite. Can be the user's numeric ID or email address.",
          "examples": ["student@example.com"],
          "title": "User Id",
          "type": "string"
        }
      },
      "required": ["courseId", "userId", "role"],
      "title": "InvitationsCreateRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "courseId": {
              "default": null,
              "description": "Identifier of the course.",
              "nullable": true,
              "title": "Course Id",
              "type": "string"
            },
            "id": {
              "default": null,
              "description": "Unique identifier for the invitation.",
              "nullable": true,
              "title": "Id",
              "type": "string"
            },
            "role": {
              "default": null,
              "description": "Role the user is invited as.",
              "enum": ["STUDENT", "TEACHER"],
              "nullable": true,
              "title": "Role",
              "type": "string"
            },
            "userId": {
              "default": null,
              "description": "Identifier of the invited user.",
              "nullable": true,
              "title": "User Id",
              "type": "string"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "InvitationsCreateResponseWrapper",
      "type": "object"
    },
    "description": "Tool to create an invitation for a user to a course. use after confirming the course id is valid.",
    "tags": ["invitations", "writeOnlyHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Distance Matrix",
    "slug": "GOOGLE_MAPS_DISTANCE_MATRIX_API",
    "input_parameters": {
      "properties": {
        "arrival_time": {
          "default": null,
          "description": "Specifies the desired time of arrival for transit directions, in seconds since midnight, January 1, 1970 UTC. You can specify either departure_time or arrival_time, but not both.",
          "examples": [1493890000],
          "nullable": true,
          "title": "Arrival Time",
          "type": "integer"
        },
        "avoid": {
          "default": null,
          "description": "Indicates that the calculated route should avoid the specified features. Multiple values can be pipe-separated e.g. 'tolls|highways'.",
          "enum": ["tolls", "highways", "ferries", "indoor"],
          "examples": ["tolls"],
          "nullable": true,
          "title": "Avoid",
          "type": "string"
        },
        "departure_time": {
          "default": null,
          "description": "Specifies the desired time of departure. You can specify the time as an integer in seconds since midnight, January 1, 1970 UTC, or as the string 'now'. Required for duration_in_traffic.",
          "examples": [1493879400, "now"],
          "nullable": true,
          "title": "Departure Time",
          "type": "integer"
        },
        "destinations": {
          "description": "One or more locations to use as the finishing point for calculating travel distance and time. Accepts the same formats as origins.",
          "examples": [
            "San Francisco, CA|Victoria, BC",
            "40.659569,-73.933783|place_id:ChIJ3S-JXmauEmsRUcIaWtf4MzE"
          ],
          "title": "Destinations",
          "type": "string"
        },
        "key": {
          "default": null,
          "description": "Your application's API key. This key identifies your application for purposes of quota management.",
          "examples": ["YOUR_API_KEY"],
          "nullable": true,
          "title": "Key",
          "type": "string"
        },
        "language": {
          "default": null,
          "description": "The language in which to return results. See the list of supported languages: https://developers.google.com/maps/faq#languagesupport",
          "examples": ["en-US", "fr-FR"],
          "nullable": true,
          "title": "Language",
          "type": "string"
        },
        "mode": {
          "default": "driving",
          "description": "Specifies the mode of transport to use.",
          "enum": ["driving", "walking", "bicycling", "transit"],
          "examples": ["driving"],
          "nullable": true,
          "title": "Mode",
          "type": "string"
        },
        "origins": {
          "description": "The starting point for calculating travel distance and time. You can supply one or more locations separated by the pipe character (|), in the form of a place ID (prefixed with place_id:), an address, latitude/longitude coordinates (e.g., '40.7128,-74.0060'), a plus code, or an encoded polyline (prefixed with enc: and a colon).",
          "examples": [
            "Washington, DC|New York City, NY",
            "place_id:ChIJ69P_A4EBwokR7sD2pE2A|enc:gfo}EtohhU:"
          ],
          "title": "Origins",
          "type": "string"
        },
        "region": {
          "default": null,
          "description": "The region code, specified as a ccTLD ('top-level domain') two-character value. This helps influence results based on the region.",
          "examples": ["us", "uk"],
          "nullable": true,
          "title": "Region",
          "type": "string"
        },
        "traffic_model": {
          "default": null,
          "description": "Specifies the assumptions to use when calculating time in traffic. This parameter is only used if the request includes a departure_time and mode is 'driving'.",
          "enum": ["best_guess", "pessimistic", "optimistic"],
          "examples": ["best_guess"],
          "nullable": true,
          "title": "Traffic Model",
          "type": "string"
        },
        "transit_mode": {
          "default": null,
          "description": "Specifies one or more preferred modes of transit. This parameter may only be specified for transit directions. Multiple values can be pipe-separated e.g. 'bus|train'.",
          "enum": ["bus", "subway", "train", "tram", "rail"],
          "examples": ["bus"],
          "nullable": true,
          "title": "Transit Mode",
          "type": "string"
        },
        "transit_routing_preference": {
          "default": null,
          "description": "Specifies preferences for transit routes. This parameter may only be specified for transit directions.",
          "enum": ["less_walking", "fewer_transfers"],
          "examples": ["less_walking"],
          "nullable": true,
          "title": "Transit Routing Preference",
          "type": "string"
        },
        "units": {
          "default": null,
          "description": "Specifies the unit system to use when displaying results. The default is metric.",
          "enum": ["metric", "imperial"],
          "examples": ["imperial"],
          "nullable": true,
          "title": "Units",
          "type": "string"
        }
      },
      "required": ["origins", "destinations"],
      "title": "DistanceMatrixApiRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "destination_addresses": {
              "description": "An array of addresses as returned by the API from your original request for destinations.",
              "items": { "properties": {}, "type": "string" },
              "title": "Destination Addresses",
              "type": "array"
            },
            "error_message": {
              "default": null,
              "description": "A string containing the human-readable text of any errors encountered while the request was being processed.",
              "nullable": true,
              "title": "Error Message",
              "type": "string"
            },
            "origin_addresses": {
              "description": "An array of addresses as returned by the API from your original request for origins.",
              "items": { "properties": {}, "type": "string" },
              "title": "Origin Addresses",
              "type": "array"
            },
            "rows": {
              "description": "An array of rows, each row containing one origin paired with each destination.",
              "items": {
                "properties": {
                  "elements": {
                    "description": "An array of elements, which in turn each contain a status, duration, and distance element.",
                    "items": {
                      "properties": {
                        "distance": {
                          "additionalProperties": false,
                          "default": null,
                          "description": "The total distance of this route, expressed in meters (value) and as text.",
                          "nullable": true,
                          "properties": {
                            "text": {
                              "description": "String value.",
                              "title": "Text",
                              "type": "string"
                            },
                            "value": {
                              "description": "Numeric value.",
                              "title": "Value",
                              "type": "integer"
                            }
                          },
                          "required": ["text", "value"],
                          "title": "TextValueObject",
                          "type": "object"
                        },
                        "duration": {
                          "additionalProperties": false,
                          "default": null,
                          "description": "The length of time it takes to travel this route, expressed in seconds (the value field) and as text.",
                          "nullable": true,
                          "properties": {
                            "text": {
                              "description": "String value.",
                              "title": "Text",
                              "type": "string"
                            },
                            "value": {
                              "description": "Numeric value.",
                              "title": "Value",
                              "type": "integer"
                            }
                          },
                          "required": ["text", "value"],
                          "title": "TextValueObject",
                          "type": "object"
                        },
                        "duration_in_traffic": {
                          "additionalProperties": false,
                          "default": null,
                          "description": "The length of time it takes to travel this route, based on current and historical traffic conditions.",
                          "nullable": true,
                          "properties": {
                            "text": {
                              "description": "String value.",
                              "title": "Text",
                              "type": "string"
                            },
                            "value": {
                              "description": "Numeric value.",
                              "title": "Value",
                              "type": "integer"
                            }
                          },
                          "required": ["text", "value"],
                          "title": "TextValueObject",
                          "type": "object"
                        },
                        "fare": {
                          "additionalProperties": false,
                          "default": null,
                          "description": "If present, contains the total fare (that is, the total ticket costs) on this route.",
                          "nullable": true,
                          "properties": {
                            "currency": {
                              "description": "An ISO 4217 currency code indicating the currency that the amount is expressed in.",
                              "title": "Currency",
                              "type": "string"
                            },
                            "text": {
                              "description": "The total fare amount, formatted in the requested language.",
                              "title": "Text",
                              "type": "string"
                            },
                            "value": {
                              "description": "The total fare amount, in the currency specified.",
                              "title": "Value",
                              "type": "number"
                            }
                          },
                          "required": ["currency", "value", "text"],
                          "title": "Fare",
                          "type": "object"
                        },
                        "status": {
                          "description": "A status for the element. See DistanceMatrixElementStatus for more information.",
                          "title": "Status",
                          "type": "string"
                        }
                      },
                      "required": ["status"],
                      "title": "DistanceMatrixElement",
                      "type": "object"
                    },
                    "title": "Elements",
                    "type": "array"
                  }
                },
                "required": ["elements"],
                "title": "DistanceMatrixRow",
                "type": "object"
              },
              "title": "Rows",
              "type": "array"
            },
            "status": {
              "description": "Contains the status of the request (e.g., OK, INVALID_REQUEST).",
              "title": "Status",
              "type": "string"
            }
          },
          "required": ["origin_addresses", "destination_addresses", "rows", "status"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "DistanceMatrixApiResponseWrapper",
      "type": "object"
    },
    "description": "Calculates travel distance and time for a matrix of origins and destinations. supports different modes of transportation and options like departure/arrival times. use when needing to determine travel metrics between multiple points.",
    "tags": ["important", "Google Maps"]
  },
  {
    "available_versions": ["latest"],
    "name": "Geocoding, Reverse Geocoding, and Place ID Lookup",
    "slug": "GOOGLE_MAPS_GEOCODING_API",
    "input_parameters": {
      "properties": {
        "address": {
          "default": null,
          "description": "The street address or plus code that you want to geocode. Provide for geocoding (address to coordinates).",
          "examples": ["1600 Amphitheatre Parkway, Mountain View, CA"],
          "nullable": true,
          "title": "Address",
          "type": "string"
        },
        "bounds": {
          "default": null,
          "description": "The bounding box of the viewport within which to bias geocode results more prominently (e.g., '34.172684,-118.604794|34.236144,-118.500938'). This parameter will only influence, not fully restrict, results.",
          "examples": ["34.172684,-118.604794|34.236144,-118.500938"],
          "nullable": true,
          "title": "Bounds",
          "type": "string"
        },
        "components": {
          "default": null,
          "description": "A components filter with elements separated by a pipe (|). E.g., 'postal_code:94043|country:US'. Used for geocoding, can be restrictive or biasing.",
          "examples": ["postal_code:94043|country:US"],
          "nullable": true,
          "title": "Components",
          "type": "string"
        },
        "extra_computations": {
          "default": null,
          "description": "Use this parameter to specify additional features in the response. Can select multiple values.",
          "examples": [["ADDRESS_DESCRIPTORS"]],
          "items": {
            "enum": ["ADDRESS_DESCRIPTORS", "BUILDING_AND_ENTRANCES"],
            "properties": {},
            "title": "ExtraComputationEnum",
            "type": "string"
          },
          "nullable": true,
          "title": "Extra Computations",
          "type": "array"
        },
        "key": {
          "description": "Your application's API key. This key identifies your application for purposes of quota management.",
          "examples": ["YOUR_API_KEY"],
          "title": "Key",
          "type": "string"
        },
        "language": {
          "default": null,
          "description": "The language in which to return results. If language is not supplied, the geocoder attempts to use the preferred language as specified in the Accept-Language header, or the native language of the domain from which the request is sent.",
          "examples": ["en", "es"],
          "nullable": true,
          "title": "Language",
          "type": "string"
        },
        "latlng": {
          "default": null,
          "description": "The latitude and longitude coordinates specifying the location for which you want the closest, human-readable address (e.g., '40.714224,-73.961452'). Provide for reverse geocoding.",
          "examples": ["40.714224,-73.961452"],
          "nullable": true,
          "title": "Latlng",
          "type": "string"
        },
        "location_type": {
          "default": null,
          "description": "A filter of one or more location types, separated by a pipe (|) (e.g., 'ROOFTOP|RANGE_INTERPOLATED'). Used for reverse geocoding and place ID geocoding.",
          "examples": ["ROOFTOP|RANGE_INTERPOLATED"],
          "nullable": true,
          "title": "Location Type",
          "type": "string"
        },
        "place_id": {
          "default": null,
          "description": "The place ID of the place for which you wish to obtain the human-readable address. Provide for place ID geocoding.",
          "examples": ["ChIJd8BlQ2BZwokRAFUEcm_qrcA"],
          "nullable": true,
          "title": "Place Id",
          "type": "string"
        },
        "region": {
          "default": null,
          "description": "The region code, specified as a ccTLD ('top-level domain') two-character value. This parameter will only influence, not fully restrict, results from the geocoder.",
          "examples": ["US", "ES"],
          "nullable": true,
          "title": "Region",
          "type": "string"
        },
        "result_type": {
          "default": null,
          "description": "A filter of one or more address types, separated by a pipe (|) (e.g., 'street_address|locality'). Used for reverse geocoding and place ID geocoding.",
          "examples": ["street_address|locality"],
          "nullable": true,
          "title": "Result Type",
          "type": "string"
        }
      },
      "required": ["key"],
      "title": "GeocodingApiRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "address_descriptors": {
              "additionalProperties": { "type": "string" },
              "default": null,
              "description": "Address descriptors, if requested via extra_computations. Structure may vary.",
              "nullable": true,
              "title": "Address Descriptors",
              "type": "object"
            },
            "building_info": {
              "additionalProperties": { "type": "string" },
              "default": null,
              "description": "Building and entrance information, if requested via extra_computations. Structure may vary.",
              "nullable": true,
              "title": "Building Info",
              "type": "object"
            },
            "error_message": {
              "default": null,
              "description": "More detailed information about the reasons behind a non-OK status code.",
              "nullable": true,
              "title": "Error Message",
              "type": "string"
            },
            "results": {
              "description": "An array of geocoded address information.",
              "items": {
                "properties": {
                  "address_components": {
                    "default": null,
                    "description": "Array containing the separate components applicable to this address.",
                    "items": {
                      "properties": {
                        "long_name": { "title": "Long Name", "type": "string" },
                        "short_name": { "title": "Short Name", "type": "string" },
                        "types": {
                          "items": { "properties": {}, "type": "string" },
                          "title": "Types",
                          "type": "array"
                        }
                      },
                      "required": ["long_name", "short_name", "types"],
                      "title": "AddressComponentModel",
                      "type": "object"
                    },
                    "nullable": true,
                    "title": "Address Components",
                    "type": "array"
                  },
                  "formatted_address": {
                    "default": null,
                    "description": "String containing the human-readable address of this location.",
                    "nullable": true,
                    "title": "Formatted Address",
                    "type": "string"
                  },
                  "geometry": {
                    "additionalProperties": false,
                    "default": null,
                    "description": "Geometric data for the result.",
                    "nullable": true,
                    "properties": {
                      "bounds": {
                        "additionalProperties": false,
                        "default": null,
                        "nullable": true,
                        "properties": {
                          "northeast": {
                            "additionalProperties": false,
                            "properties": {
                              "lat": { "title": "Lat", "type": "number" },
                              "lng": { "title": "Lng", "type": "number" }
                            },
                            "required": ["lat", "lng"],
                            "title": "Northeast",
                            "type": "object"
                          },
                          "southwest": {
                            "additionalProperties": false,
                            "properties": {
                              "lat": { "title": "Lat", "type": "number" },
                              "lng": { "title": "Lng", "type": "number" }
                            },
                            "required": ["lat", "lng"],
                            "title": "Southwest",
                            "type": "object"
                          }
                        },
                        "required": ["northeast", "southwest"],
                        "title": "ViewportModel",
                        "type": "object"
                      },
                      "location": {
                        "additionalProperties": false,
                        "properties": {
                          "lat": { "title": "Lat", "type": "number" },
                          "lng": { "title": "Lng", "type": "number" }
                        },
                        "required": ["lat", "lng"],
                        "title": "Location",
                        "type": "object"
                      },
                      "location_type": { "title": "Location Type", "type": "string" },
                      "viewport": {
                        "additionalProperties": false,
                        "properties": {
                          "northeast": {
                            "additionalProperties": false,
                            "properties": {
                              "lat": { "title": "Lat", "type": "number" },
                              "lng": { "title": "Lng", "type": "number" }
                            },
                            "required": ["lat", "lng"],
                            "title": "Northeast",
                            "type": "object"
                          },
                          "southwest": {
                            "additionalProperties": false,
                            "properties": {
                              "lat": { "title": "Lat", "type": "number" },
                              "lng": { "title": "Lng", "type": "number" }
                            },
                            "required": ["lat", "lng"],
                            "title": "Southwest",
                            "type": "object"
                          }
                        },
                        "required": ["northeast", "southwest"],
                        "title": "Viewport",
                        "type": "object"
                      }
                    },
                    "required": ["location", "location_type", "viewport"],
                    "title": "GeometryModel",
                    "type": "object"
                  },
                  "partial_match": {
                    "default": null,
                    "description": "Indicates that the geocoder did not return an exact match for the original request.",
                    "nullable": true,
                    "title": "Partial Match",
                    "type": "boolean"
                  },
                  "place_id": {
                    "default": null,
                    "description": "A unique identifier for a place, which can be used with other Google APIs.",
                    "nullable": true,
                    "title": "Place Id",
                    "type": "string"
                  },
                  "plus_code": {
                    "additionalProperties": false,
                    "default": null,
                    "description": "An encoded location reference, derived from latitude and longitude coordinates.",
                    "nullable": true,
                    "properties": {
                      "compound_code": {
                        "default": null,
                        "nullable": true,
                        "title": "Compound Code",
                        "type": "string"
                      },
                      "global_code": { "title": "Global Code", "type": "string" }
                    },
                    "required": ["global_code"],
                    "title": "PlusCodeModel",
                    "type": "object"
                  },
                  "types": {
                    "default": null,
                    "description": "Array indicating the type of the returned result.",
                    "items": { "properties": {}, "type": "string" },
                    "nullable": true,
                    "title": "Types",
                    "type": "array"
                  }
                },
                "title": "GeocodingApiResult",
                "type": "object"
              },
              "title": "Results",
              "type": "array"
            },
            "status": {
              "description": "Contains metadata on the request. OK indicates success.",
              "title": "Status",
              "type": "string"
            }
          },
          "required": ["results", "status"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GeocodingApiResponseWrapper",
      "type": "object"
    },
    "description": "Deprecated: tool to convert addresses into geographic coordinates (latitude and longitude) and vice versa (reverse geocoding), or get an address for a place id. use for finding coordinates for an address, finding an address for coordinates, or looking up an address by its place id.",
    "tags": ["google_maps", "geocoding", "location", "important"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get directions",
    "slug": "GOOGLE_MAPS_GET_DIRECTION",
    "input_parameters": {
      "description": "Parameters for requesting directions between specified locations.",
      "properties": {
        "avoid": {
          "default": null,
          "description": "Specifies features to avoid in the generated route. Multiple values can be combined using a pipe delimiter (e.g., 'tolls|highways'). Valid options include 'tolls', 'highways', and 'ferries'.",
          "examples": ["tolls", "highways", "ferries", "tolls|highways"],
          "nullable": true,
          "title": "Avoid",
          "type": "string"
        },
        "destination": {
          "description": "The ending point for the directions. This can be a textual address (e.g., '456 Park Ave, New York, NY'), a place name (e.g., 'Universal Studios Hollywood'), or latitude/longitude coordinates (e.g., '40.7128,-74.0060').",
          "examples": [
            "Universal Studios Hollywood",
            "456 Park Ave, New York, NY",
            "40.7128,-74.0060"
          ],
          "title": "Destination",
          "type": "string"
        },
        "language": {
          "default": "en",
          "description": "The language code for returning results, e.g., 'en' for English, 'es' for Spanish. Defaults to 'en'.",
          "examples": ["en", "es", "fr"],
          "title": "Language",
          "type": "string"
        },
        "mode": {
          "default": "driving",
          "description": "The mode of transportation for which to calculate directions. Supported values are 'driving' (default), 'walking', 'bicycling', and 'transit'.",
          "examples": ["driving", "walking", "bicycling", "transit"],
          "title": "Mode",
          "type": "string"
        },
        "origin": {
          "description": "The starting point for the directions. This can be a textual address (e.g., '123 Main St, Los Angeles, CA'), a place name (e.g., 'Disneyland'), or latitude/longitude coordinates (e.g., '34.0522,-118.2437').",
          "examples": ["Disneyland", "123 Main St, Los Angeles, CA", "34.0522,-118.2437"],
          "title": "Origin",
          "type": "string"
        },
        "units": {
          "default": "imperial",
          "description": "The unit system for displaying distances. Supported values are 'metric' (kilometers and meters) and 'imperial' (miles and feet). Defaults to 'imperial'.",
          "examples": ["metric", "imperial"],
          "title": "Units",
          "type": "string"
        },
        "waypoints": {
          "default": null,
          "description": "A comma-separated string of intermediate locations (addresses, place names, or coordinates) to visit between the origin and destination.",
          "examples": ["Hollywood Bowl,GettyCenter"],
          "nullable": true,
          "title": "Waypoints",
          "type": "string"
        }
      },
      "required": ["origin", "destination"],
      "title": "GetDirectionRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "response_data": {
              "additionalProperties": true,
              "default": null,
              "description": "The raw JSON response data from the Google Maps Directions API, containing detailed route information including legs, steps, duration, distance, and geometry.",
              "nullable": true,
              "title": "Response Data",
              "type": "object"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetDirectionResponseWrapper",
      "type": "object"
    },
    "description": "Fetches detailed directions between an origin and a destination, supporting intermediate waypoints and various travel modes.",
    "tags": ["openWorldHint", "readOnlyHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Get Route",
    "slug": "GOOGLE_MAPS_GET_ROUTE",
    "input_parameters": {
      "description": "Parameters for requesting a route, including origin, destination, travel mode, and preferences.",
      "properties": {
        "computeAlternativeRoutes": {
          "default": false,
          "description": "Computes and returns alternative routes if true.",
          "title": "Compute Alternative Routes",
          "type": "boolean"
        },
        "destination_address": {
          "description": "Destination point address or place name for the route calculation.",
          "examples": ["85 10th Ave, New York, NY"],
          "title": "Destination Address",
          "type": "string"
        },
        "fieldMask": {
          "default": "routes.distanceMeters,routes.duration,routes.polyline.encodedPolyline",
          "description": "Comma-separated list of `Route` object fields to include in the response (e.g., 'routes.distanceMeters,routes.duration') for efficiency.",
          "examples": ["routes.distanceMeters,routes.duration"],
          "title": "Field Mask",
          "type": "string"
        },
        "languageCode": {
          "default": "en-US",
          "description": "BCP-47 language code (e.g., 'en-US', 'es') for textual information like navigation instructions.",
          "examples": ["en-US", "es", "fr"],
          "title": "Language Code",
          "type": "string"
        },
        "origin_address": {
          "description": "Starting point address or place name for the route calculation.",
          "examples": ["1600 Amphitheatre Parkway, Mountain View, CA"],
          "title": "Origin Address",
          "type": "string"
        },
        "routeModifiers_avoidFerries": {
          "default": false,
          "description": "Attempts to avoid ferries if true.",
          "title": "Route Modifiers Avoid Ferries",
          "type": "boolean"
        },
        "routeModifiers_avoidHighways": {
          "default": false,
          "description": "Attempts to avoid highways if true.",
          "title": "Route Modifiers Avoid Highways",
          "type": "boolean"
        },
        "routeModifiers_avoidTolls": {
          "default": false,
          "description": "Attempts to avoid toll roads if true.",
          "title": "Route Modifiers Avoid Tolls",
          "type": "boolean"
        },
        "routingPreference": {
          "default": "TRAFFIC_AWARE",
          "description": "Specifies routing preference: `TRAFFIC_UNAWARE` (fastest, ignores traffic), `TRAFFIC_AWARE` (considers traffic, optimized), `TRAFFIC_AWARE_OPTIMAL` (most accurate traffic-based routing), or `ROUTING_PREFERENCE_UNSPECIFIED` (behavior similar to `TRAFFIC_UNAWARE`).",
          "enum": [
            "ROUTING_PREFERENCE_UNSPECIFIED",
            "TRAFFIC_UNAWARE",
            "TRAFFIC_AWARE",
            "TRAFFIC_AWARE_OPTIMAL"
          ],
          "examples": ["TRAFFIC_AWARE", "TRAFFIC_UNAWARE"],
          "title": "Routing Preference",
          "type": "string"
        },
        "travelMode": {
          "default": "DRIVE",
          "description": "Mode of transportation for the route.",
          "enum": ["DRIVE", "BICYCLE", "WALK", "TWO_WHEELER", "TRANSIT"],
          "examples": ["DRIVE", "BICYCLE", "WALK"],
          "title": "Travel Mode",
          "type": "string"
        },
        "units": {
          "default": "IMPERIAL",
          "description": "Unit system (e.g., 'METRIC' for kilometers, 'IMPERIAL' for miles) for displaying distances.",
          "enum": ["METRIC", "IMPERIAL"],
          "examples": ["IMPERIAL", "METRIC"],
          "title": "Units",
          "type": "string"
        }
      },
      "required": ["origin_address", "destination_address"],
      "title": "GetRouteRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "response_data": {
              "additionalProperties": true,
              "default": null,
              "description": "Raw JSON response from the Google Maps Routes API, structured based on `fieldMask`, typically including route legs, distance, duration, and polylines.",
              "nullable": true,
              "title": "Response Data",
              "type": "object"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "GetRouteResponseWrapper",
      "type": "object"
    },
    "description": "Calculates one or more routes between two specified locations using various travel modes and preferences; addresses must be resolvable by google maps.",
    "tags": ["readOnlyHint", "openWorldHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Embed Google Map",
    "slug": "GOOGLE_MAPS_MAPS_EMBED_API",
    "input_parameters": {
      "properties": {
        "directions_params": {
          "additionalProperties": false,
          "default": null,
          "description": "Parameters for 'directions' mode.",
          "nullable": true,
          "properties": {
            "avoid": {
              "default": null,
              "description": "Specifies features to avoid in directions (e.g., 'tolls', 'highways', 'ferries'). Separate multiple values with the pipe character (|). E.g. 'tolls|highways'.",
              "examples": ["tolls|highways"],
              "nullable": true,
              "title": "Avoid",
              "type": "string"
            },
            "center": {
              "default": null,
              "description": "Defines the center of the map view. Accepts comma-separated latitude and longitude value (e.g., '37.4218,-122.0840').",
              "examples": ["37.4218,-122.0840"],
              "nullable": true,
              "title": "Center",
              "type": "string"
            },
            "destination": {
              "description": "Defines the endpoint of the directions. Accepts URL-escaped place name, address, plus code, lat/lng coordinates, or Place ID (prefixed with 'place_id:').",
              "examples": ["Telemark+Norway", "place_id:ChIJ3S-JXmauEmsRUcIaWtf4MzE"],
              "title": "Destination",
              "type": "string"
            },
            "language": {
              "default": null,
              "description": "Defines the language for UI elements and map labels (e.g., 'en', 'es', 'fr').",
              "examples": ["es"],
              "nullable": true,
              "title": "Language",
              "type": "string"
            },
            "maptype": {
              "default": null,
              "description": "Defines the type of map tiles to load.",
              "enum": ["roadmap", "satellite"],
              "examples": ["satellite"],
              "nullable": true,
              "title": "Maptype",
              "type": "string"
            },
            "mode": {
              "default": null,
              "description": "Defines the method of travel.",
              "enum": ["driving", "walking", "bicycling", "transit", "flying"],
              "examples": ["driving"],
              "nullable": true,
              "title": "Mode",
              "type": "string"
            },
            "origin": {
              "description": "Defines the starting point for directions. Accepts URL-escaped place name, address, plus code, lat/lng coordinates, or Place ID (prefixed with 'place_id:').",
              "examples": ["Oslo+Norway", "place_id:ChIJs--MqP1YwokRBwAhjXWIHn8"],
              "title": "Origin",
              "type": "string"
            },
            "region": {
              "default": null,
              "description": "Defines appropriate borders and labels based on geopolitical sensitivities (e.g., 'US', 'GB'). Accepts a two-character ccTLD code.",
              "examples": ["US"],
              "nullable": true,
              "title": "Region",
              "type": "string"
            },
            "units": {
              "default": null,
              "description": "Specifies measurement units for distances.",
              "enum": ["metric", "imperial"],
              "examples": ["metric"],
              "nullable": true,
              "title": "Units",
              "type": "string"
            },
            "waypoints": {
              "default": null,
              "description": "Specifies one or more intermediary places to route directions. Separate multiple waypoints with the pipe character (|). E.g., 'Berlin,Germany|Paris,France'. Up to 20 waypoints.",
              "examples": ["Berlin,Germany|Paris,France"],
              "nullable": true,
              "title": "Waypoints",
              "type": "string"
            },
            "zoom": {
              "default": null,
              "description": "Sets the initial zoom level of the map. Values range from 0 (the whole world) to 21 (individual buildings).",
              "examples": [15],
              "maximum": 21,
              "minimum": 0,
              "nullable": true,
              "title": "Zoom",
              "type": "integer"
            }
          },
          "required": ["origin", "destination"],
          "title": "DirectionsModeParams",
          "type": "object"
        },
        "mode": {
          "description": "The mode of the embedded map.",
          "enum": ["place", "view", "directions", "streetview", "search"],
          "examples": ["place"],
          "title": "Mode",
          "type": "string"
        },
        "place_params": {
          "additionalProperties": false,
          "default": null,
          "description": "Parameters for 'place' mode.",
          "nullable": true,
          "properties": {
            "center": {
              "default": null,
              "description": "Defines the center of the map view. Accepts comma-separated latitude and longitude value (e.g., '37.4218,-122.0840').",
              "examples": ["37.4218,-122.0840"],
              "nullable": true,
              "title": "Center",
              "type": "string"
            },
            "language": {
              "default": null,
              "description": "Defines the language for UI elements and map labels (e.g., 'en', 'es', 'fr').",
              "examples": ["es"],
              "nullable": true,
              "title": "Language",
              "type": "string"
            },
            "maptype": {
              "default": null,
              "description": "Defines the type of map tiles to load.",
              "enum": ["roadmap", "satellite"],
              "examples": ["satellite"],
              "nullable": true,
              "title": "Maptype",
              "type": "string"
            },
            "q": {
              "description": "Defines the map marker location. Accepts a URL-escaped place name, address, plus code, or Place ID (prefixed with 'place_id:').",
              "examples": ["Space+Needle,Seattle+WA", "place_id:ChIJrTLr-GyuEmsRBfy61i59si0"],
              "title": "Q",
              "type": "string"
            },
            "region": {
              "default": null,
              "description": "Defines appropriate borders and labels based on geopolitical sensitivities (e.g., 'US', 'GB'). Accepts a two-character ccTLD code.",
              "examples": ["US"],
              "nullable": true,
              "title": "Region",
              "type": "string"
            },
            "zoom": {
              "default": null,
              "description": "Sets the initial zoom level of the map. Values range from 0 (the whole world) to 21 (individual buildings).",
              "examples": [15],
              "maximum": 21,
              "minimum": 0,
              "nullable": true,
              "title": "Zoom",
              "type": "integer"
            }
          },
          "required": ["q"],
          "title": "PlaceModeParams",
          "type": "object"
        },
        "search_params": {
          "additionalProperties": false,
          "default": null,
          "description": "Parameters for 'search' mode.",
          "nullable": true,
          "properties": {
            "center": {
              "default": null,
              "description": "Defines the center of the map view. Accepts comma-separated latitude and longitude value (e.g., '37.4218,-122.0840').",
              "examples": ["37.4218,-122.0840"],
              "nullable": true,
              "title": "Center",
              "type": "string"
            },
            "language": {
              "default": null,
              "description": "Defines the language for UI elements and map labels (e.g., 'en', 'es', 'fr').",
              "examples": ["es"],
              "nullable": true,
              "title": "Language",
              "type": "string"
            },
            "maptype": {
              "default": null,
              "description": "Defines the type of map tiles to load.",
              "enum": ["roadmap", "satellite"],
              "examples": ["satellite"],
              "nullable": true,
              "title": "Maptype",
              "type": "string"
            },
            "q": {
              "description": "Defines the search term. Can include a geographic restriction (e.g., 'record+stores+in+Seattle').",
              "examples": ["record+stores+in+Seattle"],
              "title": "Q",
              "type": "string"
            },
            "region": {
              "default": null,
              "description": "Defines appropriate borders and labels based on geopolitical sensitivities (e.g., 'US', 'GB'). Accepts a two-character ccTLD code.",
              "examples": ["US"],
              "nullable": true,
              "title": "Region",
              "type": "string"
            },
            "zoom": {
              "default": null,
              "description": "Sets the initial zoom level of the map. Values range from 0 (the whole world) to 21 (individual buildings).",
              "examples": [15],
              "maximum": 21,
              "minimum": 0,
              "nullable": true,
              "title": "Zoom",
              "type": "integer"
            }
          },
          "required": ["q"],
          "title": "SearchModeParams",
          "type": "object"
        },
        "streetview_params": {
          "additionalProperties": false,
          "default": null,
          "description": "Parameters for 'streetview' mode.",
          "nullable": true,
          "properties": {
            "center": {
              "default": null,
              "description": "Defines the center of the map view. Accepts comma-separated latitude and longitude value (e.g., '37.4218,-122.0840').",
              "examples": ["37.4218,-122.0840"],
              "nullable": true,
              "title": "Center",
              "type": "string"
            },
            "fov": {
              "default": null,
              "description": "Horizontal field of view in degrees (10-100). Smaller numbers mean higher zoom.",
              "examples": [90],
              "maximum": 100,
              "minimum": 10,
              "nullable": true,
              "title": "Fov",
              "type": "number"
            },
            "heading": {
              "default": null,
              "description": "Compass heading of the camera in degrees clockwise from North (-180 to 360).",
              "examples": [210],
              "maximum": 360,
              "minimum": -180,
              "nullable": true,
              "title": "Heading",
              "type": "number"
            },
            "language": {
              "default": null,
              "description": "Defines the language for UI elements and map labels (e.g., 'en', 'es', 'fr').",
              "examples": ["es"],
              "nullable": true,
              "title": "Language",
              "type": "string"
            },
            "location": {
              "default": null,
              "description": "Latitude and longitude as comma-separated values (e.g., '46.414382,10.013988'). Displays panorama closest to this location. Required if 'pano' is not provided.",
              "examples": ["46.414382,10.013988"],
              "nullable": true,
              "title": "Location",
              "type": "string"
            },
            "maptype": {
              "default": null,
              "description": "Defines the type of map tiles to load.",
              "enum": ["roadmap", "satellite"],
              "examples": ["satellite"],
              "nullable": true,
              "title": "Maptype",
              "type": "string"
            },
            "pano": {
              "default": null,
              "description": "A specific panorama ID. Required if 'location' is not provided. 'location' can be a fallback.",
              "examples": ["street_view_pano_id"],
              "nullable": true,
              "title": "Pano",
              "type": "string"
            },
            "pitch": {
              "default": null,
              "description": "Angle, up or down, of the camera in degrees (-90 to 90). Positive is up.",
              "examples": [10],
              "maximum": 90,
              "minimum": -90,
              "nullable": true,
              "title": "Pitch",
              "type": "number"
            },
            "radius": {
              "default": null,
              "description": "Radius in meters to search for a panorama, centered on lat/lng. Default 50.",
              "examples": [50],
              "minimum": 0,
              "nullable": true,
              "title": "Radius",
              "type": "integer"
            },
            "region": {
              "default": null,
              "description": "Defines appropriate borders and labels based on geopolitical sensitivities (e.g., 'US', 'GB'). Accepts a two-character ccTLD code.",
              "examples": ["US"],
              "nullable": true,
              "title": "Region",
              "type": "string"
            },
            "source": {
              "default": null,
              "description": "Limits Street View searches to selected sources. 'default' or 'outdoor'.",
              "enum": ["default", "outdoor"],
              "examples": ["outdoor"],
              "nullable": true,
              "title": "Source",
              "type": "string"
            },
            "zoom": {
              "default": null,
              "description": "Sets the initial zoom level of the map. Values range from 0 (the whole world) to 21 (individual buildings).",
              "examples": [15],
              "maximum": 21,
              "minimum": 0,
              "nullable": true,
              "title": "Zoom",
              "type": "integer"
            }
          },
          "title": "StreetViewModeParams",
          "type": "object"
        },
        "view_params": {
          "additionalProperties": false,
          "default": null,
          "description": "Parameters for 'view' mode.",
          "nullable": true,
          "properties": {
            "center": {
              "default": null,
              "description": "Defines the center of the map view. Accepts comma-separated latitude and longitude value (e.g., '37.4218,-122.0840'). This is REQUIRED for view mode.",
              "examples": ["-33.8569,151.2152"],
              "nullable": true,
              "title": "Center",
              "type": "string"
            },
            "language": {
              "default": null,
              "description": "Defines the language for UI elements and map labels (e.g., 'en', 'es', 'fr').",
              "examples": ["es"],
              "nullable": true,
              "title": "Language",
              "type": "string"
            },
            "maptype": {
              "default": null,
              "description": "Defines the type of map tiles to load.",
              "enum": ["roadmap", "satellite"],
              "examples": ["satellite"],
              "nullable": true,
              "title": "Maptype",
              "type": "string"
            },
            "region": {
              "default": null,
              "description": "Defines appropriate borders and labels based on geopolitical sensitivities (e.g., 'US', 'GB'). Accepts a two-character ccTLD code.",
              "examples": ["US"],
              "nullable": true,
              "title": "Region",
              "type": "string"
            },
            "zoom": {
              "default": null,
              "description": "Sets the initial zoom level of the map. Values range from 0 (the whole world) to 21 (individual buildings).",
              "examples": [15],
              "maximum": 21,
              "minimum": 0,
              "nullable": true,
              "title": "Zoom",
              "type": "integer"
            }
          },
          "title": "ViewModeParams",
          "type": "object"
        }
      },
      "required": ["mode"],
      "title": "MapsEmbedApiRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "html_embed_code": {
              "description": "A complete HTML iframe tag to embed the map.",
              "examples": [
                "<iframe width=\"600\" height=\"450\" style=\"border:0\" loading=\"lazy\" allowfullscreen referrerpolicy=\"no-referrer-when-downgrade\" src=\"https://www.google.com/maps/embed/v1/place?key=YOUR_API_KEY&q=Space+Needle,Seattle+WA\"></iframe>"
              ],
              "title": "Html Embed Code",
              "type": "string"
            },
            "iframe_url": {
              "description": "The URL to be used as the src attribute of an iframe to embed the map.",
              "examples": [
                "https://www.google.com/maps/embed/v1/place?key=YOUR_API_KEY&q=Space+Needle,Seattle+WA"
              ],
              "format": "uri",
              "maxLength": 2083,
              "minLength": 1,
              "title": "Iframe Url",
              "type": "string"
            }
          },
          "required": ["iframe_url", "html_embed_code"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "MapsEmbedApiResponseWrapper",
      "type": "object"
    },
    "description": "Tool to generate an embeddable google map url and html iframe code. use when you need to display a map (place, view, directions, street view, search) on a webpage without javascript.",
    "tags": ["google_maps", "embed", "important"]
  },
  {
    "available_versions": ["latest"],
    "name": "Nearby search",
    "slug": "GOOGLE_MAPS_NEARBY_SEARCH",
    "input_parameters": {
      "properties": {
        "excludedTypes": {
          "default": null,
          "description": "Place types to exclude (e.g., 'cafe', 'store'); results matching any of these types are omitted. For supported types, see Google Maps Places API documentation.",
          "examples": [["cafe"], ["store"]],
          "items": { "properties": {}, "type": "string" },
          "nullable": true,
          "title": "Excluded Types",
          "type": "array"
        },
        "fieldMask": {
          "default": "places.displayName",
          "description": "Comma-separated list of place fields for the response (e.g., 'places.displayName,places.formattedAddress'); use '*' for all fields.",
          "examples": ["places.displayName", "places.id,places.formattedAddress,places.types", "*"],
          "title": "Field Mask",
          "type": "string"
        },
        "includedTypes": {
          "default": null,
          "description": "Place types to include (e.g., 'restaurant', 'park'); results will match at least one of these types. For supported types, see Google Maps Places API documentation.",
          "examples": [["restaurant"], ["atm", "bank"], ["park"]],
          "items": { "properties": {}, "type": "string" },
          "nullable": true,
          "title": "Included Types",
          "type": "array"
        },
        "latitude": {
          "description": "Latitude coordinate of the search center in decimal degrees.",
          "examples": [-33.8670522, 34.052235],
          "maximum": 90,
          "minimum": -90,
          "title": "Latitude",
          "type": "number"
        },
        "longitude": {
          "description": "Longitude coordinate of the search center in decimal degrees.",
          "examples": [151.1957362, -118.243683],
          "maximum": 180,
          "minimum": -180,
          "title": "Longitude",
          "type": "number"
        },
        "maxResultCount": {
          "default": 10,
          "description": "Maximum number of search results to return (up to 20); the actual count may be lower.",
          "examples": [5, 10, 20],
          "title": "Max Result Count",
          "type": "integer"
        },
        "radius": {
          "description": "Radius of the circular search area in meters.",
          "examples": [1500, 5000],
          "maximum": 50000,
          "minimum": 0,
          "title": "Radius",
          "type": "number"
        }
      },
      "required": ["latitude", "longitude", "radius"],
      "title": "NearbySearchRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "places": {
              "default": null,
              "description": "List of found places matching search criteria; each place is a dictionary of requested fields.",
              "items": { "additionalProperties": true, "properties": {}, "type": "object" },
              "nullable": true,
              "title": "Places",
              "type": "array"
            }
          },
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "NearbySearchResponseWrapper",
      "type": "object"
    },
    "description": "Searches for places (e.g., restaurants, parks) within a specified circular area, with options to filter by place types and customize the returned fields and number of results.",
    "tags": ["openWorldHint", "readOnlyHint"]
  },
  {
    "available_versions": ["latest"],
    "name": "Text Search",
    "slug": "GOOGLE_MAPS_TEXT_SEARCH",
    "input_parameters": {
      "properties": {
        "fieldMask": {
          "default": "places.displayName,places.formattedAddress,places.priceLevel",
          "description": "Comma-separated list of place fields to return. Use `*` for all fields (not recommended for performance/cost). See Google Maps Places API documentation for field names.",
          "examples": [
            "places.id,places.displayName",
            "places.displayName,places.formattedAddress,places.types,places.rating",
            "*"
          ],
          "title": "Field Mask",
          "type": "string"
        },
        "maxResultCount": {
          "default": 10,
          "description": "Maximum number of place results to return (must be 1-20). Note: Google prefers `pageSize`, but this action uses `maxResultCount`.",
          "examples": [5, 10, 20],
          "title": "Max Result Count",
          "type": "integer"
        },
        "textQuery": {
          "description": "Text query for searching places. Matched against place name, address, and category.",
          "examples": ["restaurants in London", "Eiffel Tower", "coffee shops near me"],
          "title": "Text Query",
          "type": "string"
        }
      },
      "required": ["textQuery"],
      "title": "TextSearchRequest",
      "type": "object"
    },
    "output_parameters": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data from the action execution",
          "properties": {
            "places": {
              "description": "List of places matching the query. Fields for each place are determined by the request's `fieldMask`.",
              "items": { "additionalProperties": true, "properties": {}, "type": "object" },
              "title": "Places",
              "type": "array"
            }
          },
          "required": ["places"],
          "title": "Data",
          "type": "object"
        },
        "error": {
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "nullable": true,
          "title": "Error",
          "type": "string"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        }
      },
      "required": ["data", "successful"],
      "title": "TextSearchResponseWrapper",
      "type": "object"
    },
    "description": "Searches for places on google maps using a textual query (e.g., \"restaurants in london\", \"eiffel tower\").",
    "tags": ["openWorldHint", "readOnlyHint", "important"]
  }
]
